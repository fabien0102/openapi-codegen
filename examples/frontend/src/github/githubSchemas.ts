/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
export type ActionsBillingUsage = {
  /*
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /*
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;
    /*
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;
    /*
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;
  };
  /*
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /*
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
};

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;

export type ActionsEnterprisePermissions = {
  allowed_actions: AllowedActions;
  enabled_organizations: EnabledOrganizations;
  selected_actions_url?: SelectedActionsUrl;
  /*
   * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
   */
  selected_organizations_url?: string;
};

export type ActionsOrganizationPermissions = {
  allowed_actions: AllowedActions;
  enabled_repositories: EnabledRepositories;
  selected_actions_url?: SelectedActionsUrl;
  /*
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  /*
   * @example "2011-01-26T19:01:12.000Z"
   */
  created_at?: string;
  /*
   * @example 2
   */
  id?: number;
  /*
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /*
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
  /*
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;
  /*
   * @example https://api.github.com/user/keys/2
   */
  url?: string;
};

export type ActionsRepositoryPermissions = {
  allowed_actions: AllowedActions;
  enabled: ActionsEnabled;
  selected_actions_url?: SelectedActionsUrl;
};

/**
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /*
   * @format date-time
   */
  updated_at: string;
};

/**
 * Actor
 */
export type Actor = {
  /*
   * @format uri
   */
  avatar_url: string;
  display_login?: string;
  gravatar_id: string | null;
  id: number;
  login: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertCreatedAt = string;

/**
 * The GitHub URL of the alert resource.
 *
 * @format uri
 */
export type AlertHtmlUrl = string;

/**
 * The REST API URL for fetching the list of instances for an alert.
 *
 * @format uri
 */
export type AlertInstancesUrl = string;

/**
 * The security alert number.
 */
export type AlertNumber = number;

/**
 * The REST API URL of the alert resource.
 *
 * @format uri
 */
export type AlertUrl = string;

/**
 * The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
 */
export type AllowedActions = "all" | "local_only" | "selected";

/**
 * Api Overview
 */
export type ApiOverview = {
  /*
   * @example 13.64.0.0/16
   * @example 13.65.0.0/16
   */
  actions?: string[];
  /*
   * @example 127.0.0.1/32
   */
  api?: string[];
  /*
   * @example 127.0.0.1/32
   */
  git?: string[];
  /*
   * @example 127.0.0.1/32
   */
  hooks?: string[];
  /*
   * @example 54.158.161.132
   * @example 54.226.70.38
   */
  importer?: string[];
  /*
   * @example 192.30.252.153/32
   * @example 192.30.252.154/32
   */
  pages?: string[];
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;
    SHA256_RSA?: string;
  };
  /*
   * @example true
   */
  verifiable_password_authentication: boolean;
  /*
   * @example 127.0.0.1/32
   */
  web?: string[];
};

/**
 * The permissions granted to the user-to-server access token.
 *
 * @example {"contents":"read","deployments":"write","issues":"read","single_file":"read"}
 */
export type AppPermissions = {
  /*
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
   */
  actions?: "read" | "write";
  /*
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
   */
  administration?: "read" | "write";
  /*
   * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
   */
  checks?: "read" | "write";
  /*
   * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
   */
  content_references?: "read" | "write";
  /*
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
   */
  contents?: "read" | "write";
  /*
   * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
   */
  deployments?: "read" | "write";
  /*
   * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
   */
  environments?: "read" | "write";
  /*
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
   */
  issues?: "read" | "write";
  /*
   * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
   */
  members?: "read" | "write";
  /*
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
   */
  metadata?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
   */
  organization_administration?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
   */
  organization_hooks?: "read" | "write";
  /*
   * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
   */
  organization_plan?: "read";
  /*
   * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  organization_projects?: "read" | "write" | "admin";
  /*
   * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
   */
  organization_secrets?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
   */
  organization_self_hosted_runners?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
   */
  organization_user_blocking?: "read" | "write";
  /*
   * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  packages?: "read" | "write";
  /*
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
   */
  pages?: "read" | "write";
  /*
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
   */
  pull_requests?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
   */
  repository_hooks?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  repository_projects?: "read" | "write" | "admin";
  /*
   * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
   */
  secret_scanning_alerts?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
   */
  secrets?: "read" | "write";
  /*
   * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
   */
  security_events?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
   */
  single_file?: "read" | "write";
  /*
   * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
   */
  statuses?: "read" | "write";
  /*
   * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
   */
  team_discussions?: "read" | "write";
  /*
   * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
   */
  vulnerability_alerts?: "read";
  /*
   * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
   */
  workflows?: "write";
};

/**
 * The authorization associated with an OAuth Access.
 */
export type ApplicationGrant = {
  app: {
    client_id: string;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example public_repo
   */
  scopes: string[];
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/applications/grants/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user?: SimpleUser;
};

/**
 * An artifact
 */
export type Artifact = {
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
   */
  archive_download_url: string;
  /*
   * @format date-time
   */
  created_at: string | null;
  /*
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  /*
   * @format date-time
   */
  expires_at: string;
  /*
   * @example 5
   */
  id: number;
  /*
   * The name of the artifact.
   *
   * @example AdventureWorks.Framework
   */
  name: string;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  /*
   * The size in bytes of the artifact.
   *
   * @example 12345
   */
  size_in_bytes: number;
  /*
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5
   */
  url: string;
};

export type AuditLogEvent = {
  /*
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  ["@timestamp"]?: number;
  /*
   * The name of the action that was performed, for example `user.login` or `repo.create`.
   */
  action?: string;
  active?: boolean;
  active_was?: boolean;
  /*
   * The actor who performed the action.
   */
  actor?: string;
  /*
   * The username of the account being blocked.
   */
  blocked_user?: string;
  business?: string;
  config?: any[];
  config_was?: any[];
  content_type?: string;
  /*
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   */
  created_at?: number;
  deploy_key_fingerprint?: string;
  emoji?: string;
  events?: any[];
  events_were?: any[];
  explanation?: string;
  fingerprint?: string;
  hook_id?: number;
  limited_availability?: boolean;
  message?: string;
  name?: string;
  old_user?: string;
  openssh_public_key?: string;
  org?: string;
  previous_visibility?: string;
  read_only?: boolean;
  /*
   * The name of the repository.
   */
  repo?: string;
  /*
   * The name of the repository.
   */
  repository?: string;
  repository_public?: boolean;
  target_login?: string;
  team?: string;
  /*
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol?: number;
  /*
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   */
  transport_protocol_name?: string;
  /*
   * The user that was affected by the action performed (if available).
   */
  user?: string;
  /*
   * The repository visibility, for example `public` or `private`.
   */
  visibility?: string;
};

/**
 * Authentication Token
 */
export type AuthenticationToken = {
  /*
   * The time this token expires
   *
   * @example "2016-07-11T22:14:10.000Z"
   * @format date-time
   */
  expires_at: string;
  /*
   * @example {"deployments":"write","issues":"read"}
   */
  permissions?: Record<string, any>;
  /*
   * The repositories this token has access to
   */
  repositories?: Repository[];
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file?: string | null;
  /*
   * The token used for authentication
   *
   * @example v1.1f699f1069f60xxx
   */
  token: string;
};

/**
 * How the author is associated with the repository.
 *
 * @example OWNER
 */
export type AuthorAssociation =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER";

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  app: {
    client_id: string;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @format date-time
   */
  created_at: string;
  fingerprint: string | null;
  hashed_token: string | null;
  id: number;
  installation?: ScopedInstallation;
  note: string | null;
  /*
   * @format uri
   */
  note_url: string | null;
  /*
   * A list of scopes that this authorization is in.
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user?: SimpleUser;
};

/**
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  /*
   * Commit message for the merge commit.
   */
  commit_message: string;
  /*
   * Title for the merge commit message.
   */
  commit_title: string;
  enabled_by: SimpleUser;
  /*
   * The merge method to use.
   */
  merge_method: "merge" | "squash" | "rebase";
} | null;

/**
 * Base Gist
 */
export type BaseGist = {
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format uri
   */
  commits_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  description: string | null;
  files: {
    [key: string]: {
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      type?: string;
    };
  };
  forks?: any[];
  /*
   * @format uri
   */
  forks_url: string;
  /*
   * @format uri
   */
  git_pull_url: string;
  /*
   * @format uri
   */
  git_push_url: string;
  history?: any[];
  /*
   * @format uri
   */
  html_url: string;
  id: string;
  node_id: string;
  /*
   * Simple User
   */
  owner?: SimpleUser;
  public: boolean;
  truncated?: boolean;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Basic Error
 */
export type BasicError = {
  documentation_url?: string;
  message?: string;
};

/**
 * Blob
 */
export type Blob = {
  content: string;
  encoding: string;
  highlighted_content?: string;
  node_id: string;
  sha: string;
  size: number | null;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Branch Protection
 */
export type BranchProtection = {
  allow_deletions?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  enabled: boolean;
  enforce_admins?: ProtectedBranchAdminEnforced;
  /*
   * @example "branch/with/protection"
   */
  name?: string;
  /*
   * @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
   */
  protection_url?: string;
  required_linear_history?: {
    enabled?: boolean;
  };
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  required_status_checks: {
    contexts: string[];
    contexts_url?: string;
    enforcement_level: string;
    url?: string;
  };
  restrictions?: BranchRestrictionPolicy;
  url?: string;
};

/**
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  apps: {
    created_at?: string;
    description?: string;
    events?: string[];
    external_url?: string;
    html_url?: string;
    id?: number;
    name?: string;
    node_id?: string;
    owner?: {
      avatar_url?: string;
      description?: string;
      events_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
       */
      followers_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
       */
      following_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
       */
      gists_url?: string;
      /*
       * @example ""
       */
      gravatar_id?: string;
      hooks_url?: string;
      /*
       * @example "https://github.com/testorg-ea8ec76d71c3af4b"
       */
      html_url?: string;
      id?: number;
      issues_url?: string;
      login?: string;
      members_url?: string;
      node_id?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
       */
      organizations_url?: string;
      public_members_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
       */
      received_events_url?: string;
      repos_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
       */
      starred_url?: string;
      /*
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
       */
      subscriptions_url?: string;
      /*
       * @example "Organization"
       */
      type?: string;
      url?: string;
    };
    permissions?: {
      contents?: string;
      issues?: string;
      metadata?: string;
      single_file?: string;
    };
    slug?: string;
    updated_at?: string;
  }[];
  /*
   * @format uri
   */
  apps_url: string;
  teams: {
    description?: string | null;
    html_url?: string;
    id?: number;
    members_url?: string;
    name?: string;
    node_id?: string;
    parent?: string | null;
    permission?: string;
    privacy?: string;
    repositories_url?: string;
    slug?: string;
    url?: string;
  }[];
  /*
   * @format uri
   */
  teams_url: string;
  /*
   * @format uri
   */
  url: string;
  users: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  }[];
  /*
   * @format uri
   */
  users_url: string;
};

/**
 * Branch Short
 */
export type BranchShort = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
};

/**
 * Branch With Protection
 */
export type BranchWithProtection = {
  _links: {
    html: string;
    /*
     * @format uri
     */
    self: string;
  };
  commit: Commit;
  name: string;
  /*
   * @example "mas*"
   */
  pattern?: string;
  protected: boolean;
  protection: BranchProtection;
  /*
   * @format uri
   */
  protection_url: string;
  /*
   * @example 1
   */
  required_approving_review_count?: number;
};

/**
 * Check Annotation
 */
export type CheckAnnotation = {
  /*
   * @example warning
   */
  annotation_level: string | null;
  blob_href: string;
  /*
   * @example 10
   */
  end_column: number | null;
  /*
   * @example 2
   */
  end_line: number;
  /*
   * @example Check your spelling for 'banaas'.
   */
  message: string | null;
  /*
   * @example README.md
   */
  path: string;
  /*
   * @example Do you mean 'bananas' or 'banana'?
   */
  raw_details: string | null;
  /*
   * @example 5
   */
  start_column: number | null;
  /*
   * @example 2
   */
  start_line: number;
  /*
   * @example Spell Checker
   */
  title: string | null;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  app: Integration;
  check_suite: {
    id: number;
  } | null;
  /*
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /*
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  deployment?: DeploymentSimple;
  /*
   * @example https://example.com
   */
  details_url: string | null;
  /*
   * @example 42
   */
  external_id: string | null;
  /*
   * The SHA of the commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /*
   * The id of the check.
   *
   * @example 21
   */
  id: number;
  /*
   * The name of the check.
   *
   * @example test-coverage
   */
  name: string;
  /*
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  output: {
    annotations_count: number;
    /*
     * @format uri
     */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /*
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  started_at: string | null;
  /*
   * The phase of the lifecycle that the check is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  url: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  /*
   * @example d6fde92930d4715a2b49857d24b940956b26d2d3
   */
  after: string | null;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  app: Integration;
  /*
   * @example 146e867f55c26428e5f9fade55a9bbf5e95a7912
   */
  before: string | null;
  check_runs_url: string;
  /*
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  /*
   * @format date-time
   */
  created_at: string | null;
  /*
   * @example master
   */
  head_branch: string | null;
  head_commit: SimpleCommit;
  /*
   * The SHA of the head commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example 5
   */
  id: number;
  latest_check_runs_count: number;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  repository: MinimalRepository;
  /*
   * @example completed
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/github/hello-world/check-suites/5
   */
  url: string | null;
};

/**
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: Repository;
};

/**
 * Clone Traffic
 */
export type CloneTraffic = {
  clones: Traffic[];
  /*
   * @example 173
   */
  count: number;
  /*
   * @example 128
   */
  uniques: number;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];

/**
 * Code Of Conduct
 */
export type CodeOfConduct = {
  /*
     * @example # Contributor Covenant Code of Conduct
    
    ## Our Pledge
    
    In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
    
    ## Our Standards
    
    Examples of behavior that contributes to creating a positive environment include:
    
    * Using welcoming and inclusive language
    * Being respectful of differing viewpoints and experiences
    * Gracefully accepting constructive criticism
    * Focusing on what is best for the community
    * Showing empathy towards other community members
    
    Examples of unacceptable behavior by participants include:
    
    * The use of sexualized language or imagery and unwelcome sexual attention or advances
    * Trolling, insulting/derogatory comments, and personal or political attacks
    * Public or private harassment
    * Publishing others' private information, such as a physical or electronic address, without explicit permission
    * Other conduct which could reasonably be considered inappropriate in a professional setting
    
    ## Our Responsibilities
    
    Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
                      to any instances of unacceptable behavior.
    
    Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
    
    ## Scope
    
    This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
                      posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
    
    ## Enforcement
    
    Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
    
    Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
    
    ## Attribution
    
    This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
    
    [homepage]: http://contributor-covenant.org
    [version]: http://contributor-covenant.org/version/1/4/
     */
  body?: string;
  /*
   * @format uri
   */
  html_url: string | null;
  /*
   * @example contributor_covenant
   */
  key: string;
  /*
   * @example Contributor Covenant
   */
  name: string;
  /*
   * @example https://api.github.com/codes_of_conduct/contributor_covenant
   * @format uri
   */
  url: string;
};

/**
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  /*
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   * @format uri
   */
  html_url: string | null;
  /*
   * @example citizen_code_of_conduct
   */
  key: string;
  /*
   * @example Citizen Code of Conduct
   */
  name: string;
  /*
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   * @format uri
   */
  url: string;
};

export type CodeScanningAlert = {
  created_at: AlertCreatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: SimpleUser;
  dismissed_reason: CodeScanningAlertDismissedReason;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRule;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  url: AlertUrl;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification =
  | "source"
  | "generated"
  | "test"
  | "library";

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type CodeScanningAlertDismissedAt = string | null;

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
 */
export type CodeScanningAlertDismissedReason =
  | ("false positive" | "won't fix" | "used in tests")
  | any
  | null;

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;

export type CodeScanningAlertInstance = {
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  /*
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
  commit_sha?: string;
  environment?: CodeScanningAlertEnvironment;
  html_url?: string;
  location?: CodeScanningAlertLocation;
  message?: {
    text?: string;
  };
  ref?: CodeScanningRef;
  state?: CodeScanningAlertState;
};

export type CodeScanningAlertItems = {
  created_at: AlertCreatedAt;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_by: SimpleUser;
  dismissed_reason: CodeScanningAlertDismissedReason;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRuleSummary;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  url: AlertUrl;
};

/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  end_column?: number;
  end_line?: number;
  path?: string;
  start_column?: number;
  start_line?: number;
};

export type CodeScanningAlertRule = {
  /*
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /*
   * description of the rule used to detect the alert.
   */
  full_description?: string;
  /*
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string;
  /*
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /*
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /*
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error";
  /*
   * A set of tags applicable for the rule.
   */
  tags?: string[];
};

export type CodeScanningAlertRuleSummary = {
  /*
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /*
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /*
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /*
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error";
};

/**
 * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
export type CodeScanningAlertSetState = "open" | "dismissed";

/**
 * State of a code scanning alert.
 */
export type CodeScanningAlertState = "open" | "closed" | "dismissed" | "fixed";

export type CodeScanningAnalysis = {
  analysis_key: CodeScanningAnalysisAnalysisKey;
  commit_sha: CodeScanningAnalysisCommitSha;
  created_at: CodeScanningAnalysisCreatedAt;
  deletable: boolean;
  environment: CodeScanningAnalysisEnvironment;
  /*
   * @example error reading field xyz
   */
  error: string;
  /*
   * Unique identifier for this analysis.
   */
  id: number;
  ref: CodeScanningRef;
  /*
   * The total number of results in the analysis.
   */
  results_count: number;
  /*
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  url: CodeScanningAnalysisUrl;
};

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 *
 * @maxLength 40
 * @minLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /*
   * Next deletable analysis in chain, with last analysis deletion confirmation
   *
   * @format uri
   */
  confirm_delete_url: string | null;
  /*
   * Next deletable analysis in chain, without last analysis deletion confirmation
   *
   * @format uri
   */
  next_analysis_url: string | null;
};

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/github/finding-security-vulnerabilities-and-errors-in-your-code/sarif-support-for-code-scanning)."
 */
export type CodeScanningAnalysisSarifFile = string;

/**
 * An identifier for the upload.
 *
 * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
 */
export type CodeScanningAnalysisSarifId = string;

export type CodeScanningAnalysisTool = {
  guid?: CodeScanningAnalysisToolGuid;
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
};

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;

/**
 * The REST API URL of the analysis resource.
 *
 * @format uri
 */
export type CodeScanningAnalysisUrl = string;

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 */
export type CodeScanningRef = string;

export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;
  /*
   * The REST API URL for checking the status of the upload.
   *
   * @format uri
   */
  url?: string;
};

export type CodeScanningSarifsStatus = {
  /*
   * The REST API URL for getting the analyses associated with the upload.
   *
   * @format uri
   */
  analyses_url?: string | null;
  /*
   * `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.
   */
  processing_status?: "pending" | "complete";
};

/**
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  file_size?: number;
  /*
   * @format uri
   */
  git_url: string;
  /*
   * @format uri
   */
  html_url: string;
  language?: string | null;
  /*
   * @format date-time
   */
  last_modified_at?: string;
  /*
   * @example 73..77
   * @example 77..78
   */
  line_numbers?: string[];
  name: string;
  path: string;
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Collaborator
 */
export type Collaborator = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @example User
   */
  type: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

export type CombinedBillingUsage = {
  /*
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /*
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /*
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};

/**
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  /*
   * @format uri
   */
  commit_url: string;
  repository: MinimalRepository;
  sha: string;
  state: string;
  statuses: SimpleCommitStatus[];
  total_count: number;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Commit
 */
export type Commit = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
   * @format uri
   */
  comments_url: string;
  commit: {
    /*
     * Metaproperties for Git author/committer information.
     */
    author: GitUser;
    /*
     * @example 0
     */
    comment_count: number;
    /*
     * Metaproperties for Git author/committer information.
     */
    committer: GitUser;
    /*
     * @example Fix all the bugs
     */
    message: string;
    tree: {
      /*
       * @example 827efc6d56897b048c772eb4087f854f46256132
       */
      sha: string;
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
       * @format uri
       */
      url: string;
    };
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  /*
   * Simple User
   */
  committer: SimpleUser;
  files?: {
    additions?: number;
    blob_url?: string;
    changes?: number;
    /*
     * @example "https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573"
     */
    contents_url?: string;
    deletions?: number;
    filename?: string;
    patch?: string;
    /*
     * @example "subdir/before_name.txt"
     */
    previous_filename?: string;
    raw_url?: string;
    /*
     * @example "1e8e60ce9733d5283f7836fa602b6365a66b2567"
     */
    sha?: string;
    status?: string;
  }[];
  /*
   * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  html_url: string;
  /*
   * @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
   */
  node_id: string;
  parents: {
    /*
     * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    html_url?: string;
    /*
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    url: string;
  }[];
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  sha: string;
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  url: string;
};

/**
 * Commit Activity
 */
export type CommitActivity = {
  /*
   * @example 0
   * @example 3
   * @example 26
   * @example 20
   * @example 39
   * @example 1
   * @example 0
   */
  days: number[];
  /*
   * @example 89
   */
  total: number;
  /*
   * @example 1336280400
   */
  week: number;
};

/**
 * Commit Comment
 */
export type CommitComment = {
  author_association: AuthorAssociation;
  body: string;
  commit_id: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  line: number | null;
  node_id: string;
  path: string | null;
  position: number | null;
  reactions?: ReactionRollup;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Commit Comparison
 */
export type CommitComparison = {
  /*
   * @example 4
   */
  ahead_by: number;
  base_commit: Commit;
  /*
   * @example 5
   */
  behind_by: number;
  commits: Commit[];
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
   * @format uri
   */
  diff_url: string;
  files: DiffEntry[];
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  html_url: string;
  merge_base_commit: Commit;
  /*
   * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
   * @format uri
   */
  patch_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
   * @format uri
   */
  permalink_url: string;
  /*
   * @example ahead
   */
  status: "diverged" | "ahead" | "behind" | "identical";
  /*
   * @example 6
   */
  total_commits: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  url: string;
};

/**
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @format uri
   */
  comments_url: string;
  commit: {
    author: {
      /*
       * @format date-time
       */
      date: string;
      email: string;
      name: string;
    };
    comment_count: number;
    /*
     * Metaproperties for Git author/committer information.
     */
    committer: GitUser;
    message: string;
    tree: {
      sha: string;
      /*
       * @format uri
       */
      url: string;
    };
    /*
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  /*
   * Metaproperties for Git author/committer information.
   */
  committer: GitUser;
  /*
   * @format uri
   */
  html_url: string;
  node_id: string;
  parents: {
    html_url?: string;
    sha?: string;
    url?: string;
  }[];
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

export type CommunityHealthFile = {
  /*
   * @format uri
   */
  html_url: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Community Profile
 */
export type CommunityProfile = {
  /*
   * @example true
   */
  content_reports_enabled?: boolean;
  /*
   * @example My first repository on GitHub!
   */
  description: string | null;
  /*
   * @example example.com
   */
  documentation: string | null;
  files: {
    /*
     * Code of Conduct Simple
     */
    code_of_conduct: CodeOfConductSimple;
    contributing: CommunityHealthFile;
    issue_template: CommunityHealthFile;
    /*
     * License Simple
     */
    license: LicenseSimple;
    pull_request_template: CommunityHealthFile;
    readme: CommunityHealthFile;
  };
  /*
   * @example 100
   */
  health_percentage: number;
  /*
   * @example "2017-02-28T19:09:29.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * A list of directory items
 */
export type ContentDirectory = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content?: string;
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
}[];

/**
 * Content File
 */
export type ContentFile = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content: string;
  /*
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /*
   * @example "git://example.com/defunkt/dotjs.git"
   */
  submodule_git_url?: string;
  /*
   * @example "actual/actual.md"
   */
  target?: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Content Reference attachments allow you to provide context around URLs posted in comments
 */
export type ContentReferenceAttachment = {
  /*
   * The body of the attachment
   *
   * @example Body of the attachment
   * @maxLength 262144
   */
  body: string;
  /*
   * The ID of the attachment
   *
   * @example 21
   */
  id: number;
  /*
   * The node_id of the content attachment
   *
   * @example MDE3OkNvbnRlbnRBdHRhY2htZW50MjE=
   */
  node_id?: string;
  /*
   * The title of the attachment
   *
   * @example Title of the attachment
   * @maxLength 1024
   */
  title: string;
};

/**
 * An object describing a symlink
 */
export type ContentSubmodule = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /*
   * @format uri
   */
  submodule_git_url: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * An object describing a symlink
 */
export type ContentSymlink = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  target: string;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Content Traffic
 */
export type ContentTraffic = {
  /*
   * @example 3542
   */
  count: number;
  /*
   * @example /github/hubot
   */
  path: string;
  /*
   * @example github/hubot: A customizable life embetterment robot.
   */
  title: string;
  /*
   * @example 2225
   */
  uniques: number;
};

/**
 * Content Tree
 */
export type ContentTree = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  /*
   * @format uri
   */
  download_url: string | null;
  entries?: {
    _links: {
      /*
       * @format uri
       */
      git: string | null;
      /*
       * @format uri
       */
      html: string | null;
      /*
       * @format uri
       */
      self: string;
    };
    content?: string;
    /*
     * @format uri
     */
    download_url: string | null;
    /*
     * @format uri
     */
    git_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    /*
     * @format uri
     */
    url: string;
  }[];
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Contributor
 */
export type Contributor = {
  /*
   * @format uri
   */
  avatar_url?: string;
  contributions: number;
  email?: string;
  events_url?: string;
  /*
   * @format uri
   */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string | null;
  /*
   * @format uri
   */
  html_url?: string;
  id?: number;
  login?: string;
  name?: string;
  node_id?: string;
  /*
   * @format uri
   */
  organizations_url?: string;
  /*
   * @format uri
   */
  received_events_url?: string;
  /*
   * @format uri
   */
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  /*
   * @format uri
   */
  subscriptions_url?: string;
  type: string;
  /*
   * @format uri
   */
  url?: string;
};

/**
 * Contributor Activity
 */
export type ContributorActivity = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * @example 135
   */
  total: number;
  /*
   * @example {"a":6898,"c":10,"d":77,"w":"1367712000"}
   */
  weeks: {
    a?: number;
    c?: number;
    d?: number;
    w?: string;
  }[];
};

/**
 * Credential Authorization
 */
export type CredentialAuthorization = {
  /*
   * @example 12345678
   */
  authorized_credential_id?: number | null;
  /*
   * The note given to the token. This will only be present when the credential is a token.
   *
   * @example my token
   */
  authorized_credential_note?: string | null;
  /*
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   *
   * @example my ssh key
   */
  authorized_credential_title?: string | null;
  /*
   * Date when the credential was last accessed. May be null if it was never accessed
   *
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  credential_accessed_at?: string | null;
  /*
   * Date when the credential was authorized for use.
   *
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  credential_authorized_at: string;
  /*
   * Unique identifier for the credential.
   *
   * @example 1
   */
  credential_id: number;
  /*
   * Human-readable description of the credential type.
   *
   * @example SSH Key
   */
  credential_type: string;
  /*
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   *
   * @example jklmnop12345678
   */
  fingerprint?: string;
  /*
   * User login that owns the underlying credential.
   *
   * @example monalisa
   */
  login: string;
  /*
   * List of oauth scopes the token has been granted.
   *
   * @example user
   * @example repo
   */
  scopes?: string[];
  /*
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   *
   * @example 12345678
   */
  token_last_eight?: string;
};

/**
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  created_at: string;
  id: number;
  key: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example Deploy request from hubot
   */
  description: string | null;
  /*
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /*
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /*
   * @example staging
   */
  original_environment?: string;
  payload: {};
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /*
   * The ref to deploy. This can be a branch, tag, or sha.
   *
   * @example topic-branch
   */
  ref: string;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
   */
  sha: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /*
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /*
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * The type of reviewer. Must be one of: `User` or `Team`
 *
 * @example User
 */
export type DeploymentReviewerType = "User" | "Team";

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example Deploy request from hubot
   */
  description: string | null;
  /*
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /*
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /*
   * @example staging
   */
  original_environment?: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /*
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /*
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * The status of a deployment.
 */
export type DeploymentStatus = {
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/42
   * @format uri
   */
  deployment_url: string;
  /*
   * A short description of the status.
   *
   * @default
   * @example Deployment finished successfully.
   * @maxLength 140
   */
  description: string;
  /*
   * The environment of the deployment that the status is for.
   *
   * @default
   * @example production
   */
  environment?: string;
  /*
   * The URL for accessing your environment.
   *
   * @default
   * @example https://staging.example.com/
   * @format uri
   */
  environment_url?: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * The URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  log_url?: string;
  /*
   * @example MDE2OkRlcGxveW1lbnRTdGF0dXMx
   */
  node_id: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * The state of the status.
   *
   * @example success
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  /*
   * Deprecated: the URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  target_url: string;
  /*
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
   * @format uri
   */
  url: string;
};

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
export type DeploymentBranchPolicy = {
  /*
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
  /*
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;
} | null;

/**
 * Diff Entry
 */
export type DiffEntry = {
  /*
   * @example 103
   */
  additions: number;
  /*
   * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  blob_url: string;
  /*
   * @example 124
   */
  changes: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  contents_url: string;
  /*
   * @example 21
   */
  deletions: number;
  /*
   * @example file1.txt
   */
  filename: string;
  /*
   * @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test
   */
  patch?: string;
  /*
   * @example file.txt
   */
  previous_filename?: string;
  /*
   * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  raw_url: string;
  /*
   * @example bbcd538c8e72b8c175046e27cc8f907076331401
   */
  sha: string;
  /*
   * @example added
   */
  status: string;
};

/**
 * Email
 */
export type Email = {
  /*
   * @example octocat@github.com
   * @format email
   */
  email: string;
  /*
   * @example true
   */
  primary: boolean;
  /*
   * @example true
   */
  verified: boolean;
  /*
   * @example public
   */
  visibility: string | null;
};

/**
 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 */
export type EnabledOrganizations = "all" | "none" | "selected";

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 */
export type EnabledRepositories = "all" | "none" | "selected";

/**
 * An enterprise account
 */
export type Enterprise = {
  /*
   * @format uri
   */
  avatar_url: string;
  /*
   * @example "2019-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * A short description of the enterprise.
   */
  description?: string | null;
  /*
   * @example https://github.com/enterprises/octo-business
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the enterprise
   *
   * @example 42
   */
  id: number;
  /*
   * The name of the enterprise.
   *
   * @example Octo Business
   */
  name: string;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * The slug url identifier for the enterprise.
   *
   * @example octo-business
   */
  slug: string;
  /*
   * @example "2019-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * The enterprise's website URL.
   *
   * @format uri
   */
  website_url?: string | null;
};

/**
 * Details of a deployment environment
 */
export type Environment = {
  /*
   * The time that the environment was created, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  created_at: string;
  deployment_branch_policy?: DeploymentBranchPolicy;
  /*
   * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
   */
  html_url: string;
  /*
   * The id of the environment.
   *
   * @example 56780428
   */
  id: number;
  /*
   * The name of the environment.
   *
   * @example staging
   */
  name: string;
  /*
   * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
   */
  node_id: string;
  protection_rules?: (
    | {
        /*
         * @example 3515
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /*
         * @example wait_timer
         */
        type: string;
        wait_timer?: WaitTimer;
      }
    | {
        /*
         * @example 3755
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM3NTU=
         */
        node_id: string;
        /*
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          reviewer?: SimpleUser | TeamSimple;
          type?: DeploymentReviewerType;
        }[];
        /*
         * @example required_reviewers
         */
        type: string;
      }
    | {
        /*
         * @example 3515
         */
        id: number;
        /*
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /*
         * @example branch_policy
         */
        type: string;
      }
  )[];
  /*
   * The time that the environment was last updated, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/github/hello-world/environments/staging
   */
  url: string;
};

/**
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  /*
   * The comment submitted with the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /*
   * The list of environments that were approved or rejected
   */
  environments: {
    /*
     * The time that the environment was created, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    created_at?: string;
    /*
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /*
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /*
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /*
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /*
     * The time that the environment was last updated, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    updated_at?: string;
    /*
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  }[];
  /*
   * Whether deployment to the environment(s) was approved or rejected
   *
   * @example approved
   */
  state: "approved" | "rejected";
  user: SimpleUser;
};

/**
 * Event
 */
export type Event = {
  actor: Actor;
  /*
   * @format date-time
   */
  created_at: string | null;
  id: string;
  org?: Actor;
  payload: {
    action: string;
    comment?: IssueComment;
    issue?: IssueSimple;
    pages?: {
      action?: string;
      html_url?: string;
      page_name?: string;
      sha?: string;
      summary?: string | null;
      title?: string;
    }[];
  };
  public: boolean;
  repo: {
    id: number;
    name: string;
    /*
     * @format uri
     */
    url: string;
  };
  type: string | null;
};

/**
 * Feed
 */
export type Feed = {
  _links: {
    current_user?: LinkWithType;
    current_user_actor?: LinkWithType;
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    current_user_public?: LinkWithType;
    security_advisories?: LinkWithType;
    timeline: LinkWithType;
    user: LinkWithType;
  };
  /*
   * @example https://github.com/octocat.private.actor?token=abc123
   */
  current_user_actor_url?: string;
  /*
   * @example https://github.com/octocat-org
   */
  current_user_organization_url?: string;
  /*
   * @example https://github.com/organizations/github/octocat.private.atom?token=abc123
   */
  current_user_organization_urls?: string[];
  /*
   * @example https://github.com/octocat
   */
  current_user_public_url?: string;
  /*
   * @example https://github.com/octocat.private?token=abc123
   */
  current_user_url?: string;
  /*
   * @example https://github.com/security-advisories
   */
  security_advisories_url?: string;
  /*
   * @example https://github.com/timeline
   */
  timeline_url: string;
  /*
   * @example https://github.com/{user}
   */
  user_url: string;
};

/**
 * File Commit
 */
export type FileCommit = {
  commit: {
    author?: {
      date?: string;
      email?: string;
      name?: string;
    };
    committer?: {
      date?: string;
      email?: string;
      name?: string;
    };
    html_url?: string;
    message?: string;
    node_id?: string;
    parents?: {
      html_url?: string;
      sha?: string;
      url?: string;
    }[];
    sha?: string;
    tree?: {
      sha?: string;
      url?: string;
    };
    url?: string;
    verification?: {
      payload?: string | null;
      reason?: string;
      signature?: string | null;
      verified?: boolean;
    };
  };
  content: {
    _links?: {
      git?: string;
      html?: string;
      self?: string;
    };
    download_url?: string;
    git_url?: string;
    html_url?: string;
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  } | null;
};

/**
 * Full Repository
 */
export type FullRepository = {
  /*
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * Whether anonymous git access is allowed.
   *
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  code_of_conduct?: CodeOfConductSimple;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example master
   */
  default_branch: string;
  /*
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * @example true
   */
  has_downloads: boolean;
  /*
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * @example true
   */
  has_projects: boolean;
  /*
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * @example 1296269
   */
  id: number;
  /*
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * @example Hello-World
   */
  name: string;
  /*
   * @example 0
   */
  network_count: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  organization?: SimpleUser;
  /*
   * Simple User
   */
  owner: SimpleUser;
  parent?: Repository;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  source?: Repository;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  /*
   * @example 42
   */
  subscribers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string | null;
  /*
   * A git repository
   */
  template_repository?: Repository;
  /*
   * @example octocat
   * @example atom
   * @example electron
   * @example API
   */
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @example public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * A comment made to a gist.
 */
export type GistComment = {
  author_association: AuthorAssociation;
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
  /*
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example MDExOkdpc3RDb21tZW50MQ==
   */
  node_id: string;
  /*
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Gist Commit
 */
export type GistCommit = {
  change_status: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /*
   * @example "2010-04-14T02:15:15.000Z"
   * @format date-time
   */
  committed_at: string;
  /*
   * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
  /*
   * @example 57a7f021a713b1c5a6a199b54cc514735d2d462f
   */
  version: string;
};

/**
 * Gist Simple
 */
export type GistSimple = {
  comments?: number;
  comments_url?: string;
  commits_url?: string;
  created_at?: string;
  description?: string | null;
  files?: {
    [key: string]: {
      content?: string;
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      type?: string;
    } | null;
  };
  forks_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  id?: string;
  node_id?: string;
  owner?: SimpleUser;
  public?: boolean;
  truncated?: boolean;
  updated_at?: string;
  url?: string;
  user?: string | null;
};

/**
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /*
   * Identifying information for the git-user
   */
  author: {
    /*
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /*
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /*
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /*
   * Identifying information for the git-user
   */
  committer: {
    /*
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /*
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /*
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /*
   * @format uri
   */
  html_url: string;
  /*
   * Message describing the purpose of the commit
   *
   * @example Fix #42
   */
  message: string;
  node_id: string;
  parents: {
    /*
     * @format uri
     */
    html_url: string;
    /*
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @format uri
     */
    url: string;
  }[];
  /*
   * SHA for the commit
   *
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  tree: {
    /*
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @format uri
   */
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Git references within a repository
 */
export type GitRef = {
  node_id: string;
  object: {
    /*
     * SHA for the reference
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     * @maxLength 40
     * @minLength 40
     */
    sha: string;
    type: string;
    /*
     * @format uri
     */
    url: string;
  };
  ref: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Metadata for a Git tag
 */
export type GitTag = {
  /*
   * Message describing the purpose of the tag
   *
   * @example Initial public release
   */
  message: string;
  /*
   * @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
   */
  node_id: string;
  object: {
    sha: string;
    type: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac
   */
  sha: string;
  /*
   * Name of the tag
   *
   * @example v0.0.1
   */
  tag: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  /*
   * URL for the tag
   *
   * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
   * @format uri
   */
  url: string;
  verification?: Verification;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  /*
   * Objects specifying a tree structure
   *
   * @example {"mode":"100644","path":"file.rb","properties":{"mode":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"size":{"type":"integer"},"type":{"type":"string"},"url":{"type":"string"}},"required":["path","mode","type","sha","url","size"],"sha":"44b4fc6d56897b048c772eb4087f854f46256132","size":30,"type":"blob","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"}
   */
  tree: {
    /*
     * @example 040000
     */
    mode?: string;
    /*
     * @example test/file.rb
     */
    path?: string;
    /*
     * @example 23f6827669e43831def8a7ad935069c8bd418261
     */
    sha?: string;
    /*
     * @example 12
     */
    size?: number;
    /*
     * @example tree
     */
    type?: string;
    /*
     * @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
     */
    url?: string;
  }[];
  truncated: boolean;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Metaproperties for Git author/committer information.
 */
export type GitUser = {
  /*
   * @example "2007-10-29T02:42:39.000-07:00"
   */
  date?: string;
  /*
   * @example "chris@ozmm.org"
   */
  email?: string;
  /*
   * @example "Chris Wanstrath"
   */
  name?: string;
};

/**
 * Gitignore Template
 */
export type GitignoreTemplate = {
  /*
   * @example C
   */
  name: string;
  /*
     * @example # Object files
    *.o
    
    # Libraries
    *.lib
    *.a
    
    # Shared objects (inc. Windows DLLs)
    *.dll
    *.so
    *.so.*
    *.dylib
    
    # Executables
    *.exe
    *.out
    *.app
     */
  source: string;
};

/**
 * A unique encryption key
 */
export type GpgKey = {
  /*
   * @example true
   */
  can_certify: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /*
   * @example true
   */
  can_sign: boolean;
  /*
   * @example "2016-03-24T17:31:04.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example {"email":"mastahyeti@users.noreply.github.com","verified":true}
   */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /*
   * @format date-time
   */
  expires_at: string | null;
  /*
   * @example 3
   */
  id: number;
  /*
   * @example 3262EFF25BA0D270
   */
  key_id: string;
  primary_key_id: number | null;
  /*
   * @example xsBNBFayYZ...
   */
  public_key: string;
  raw_key: string | null;
  /*
   * @example {"can_certify":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_sign":false,"created_at":"2016-03-24T17:31:04.000Z","emails":[],"expires_at":null,"id":4,"key_id":"4A595D4C72EE49C7","primary_key_id":3,"public_key":"zsBNBFayYZ...","subkeys":[]}
   */
  subkeys: {
    can_certify?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_sign?: boolean;
    created_at?: string;
    emails?: any[];
    expires_at?: string | null;
    id?: number;
    key_id?: string;
    primary_key_id?: number;
    public_key?: string;
    raw_key?: string | null;
    subkeys?: any[];
  }[];
};

/**
 * External Groups to be mapped to a team for membership
 */
export type GroupMapping = {
  /*
   * Array of groups to be mapped to this team
   *
   * @example {"group_description":"A group of Developers working on AzureAD SAML SSO","group_id":"111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa","group_name":"saml-azuread-test"}
   * @example {"group_description":"Another group of Developers working on AzureAD SAML SSO","group_id":"2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2","group_name":"saml-azuread-test2"}
   */
  groups?: {
    /*
     * a description of the group
     *
     * @example A group of Developers working on AzureAD SAML SSO
     */
    group_description: string;
    /*
     * The ID of the group
     *
     * @example 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
     */
    group_id: string;
    /*
     * The name of the group
     *
     * @example saml-azuread-test
     */
    group_name: string;
    /*
     * synchronization status for this group mapping
     *
     * @example unsynced
     */
    status?: string;
    /*
     * the time of the last sync for this group-mapping
     *
     * @example 2019-06-03 22:27:15:000 -700
     */
    synced_at?: string;
  }[];
};

/**
 * Webhooks for repositories.
 */
export type Hook = {
  /*
   * Determines whether the hook is actually triggered on pushes.
   *
   * @example true
   */
  active: boolean;
  config: {
    content_type?: WebhookConfigContentType;
    /*
     * @example "sha256"
     */
    digest?: string;
    /*
     * @example "foo@bar.com"
     */
    email?: string;
    insecure_ssl?: WebhookConfigInsecureSsl;
    /*
     * @example "foo"
     */
    password?: string;
    /*
     * @example "roomer"
     */
    room?: string;
    secret?: WebhookConfigSecret;
    /*
     * @example "foo"
     */
    subdomain?: string;
    /*
     * @example "abc"
     */
    token?: string;
    url?: WebhookConfigUrl;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Determines what events the hook is triggered for. Default: ['push'].
   *
   * @example push
   * @example pull_request
   */
  events: string[];
  /*
   * Unique identifier of the webhook.
   *
   * @example 42
   */
  id: number;
  last_response: HookResponse;
  /*
   * The name of a valid service, use 'web' for a webhook.
   *
   * @example web
   */
  name: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
   * @format uri
   */
  test_url: string;
  type: string;
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
   * @format uri
   */
  url: string;
};

export type HookResponse = {
  code: number | null;
  message: string | null;
  status: string | null;
};

/**
 * Hovercard
 */
export type Hovercard = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};

/**
 * A repository import from an external source.
 */
export type Import = {
  authors_count?: number | null;
  /*
   * @format uri
   */
  authors_url: string;
  commit_count?: number | null;
  error_message?: string | null;
  failed_step?: string | null;
  has_large_files?: boolean;
  /*
   * @format uri
   */
  html_url: string;
  import_percent?: number | null;
  large_files_count?: number;
  large_files_size?: number;
  message?: string;
  project_choices?: {
    human_name?: string;
    tfvc_project?: string;
    vcs?: string;
  }[];
  push_percent?: number | null;
  /*
   * @format uri
   */
  repository_url: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  svc_root?: string;
  svn_root?: string;
  tfvc_project?: string;
  /*
   * @format uri
   */
  url: string;
  use_lfs?: string;
  vcs: string | null;
  /*
   * The URL of the originating repository.
   */
  vcs_url: string;
};

/**
 * Installation
 */
export type Installation = {
  /*
   * @example https://api.github.com/installations/1/access_tokens
   * @format uri
   */
  access_tokens_url: string;
  account: SimpleUser | Enterprise | null;
  /*
   * @example 1
   */
  app_id: number;
  /*
   * @example github-actions
   */
  app_slug: string;
  /*
   * @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
   */
  contact_email?: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  events: string[];
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  /*
   * @example https://github.com/organizations/github/settings/installations/1
   * @format uri
   */
  html_url: string;
  /*
   * The ID of the installation.
   *
   * @example 1
   */
  id: number;
  /*
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    /*
     * @example "read"
     */
    issues?: string;
    metadata?: string;
    /*
     * @example "read"
     */
    organization_administration?: string;
    pull_requests?: string;
    statuses?: string;
  };
  /*
   * @example https://api.github.com/installation/repositories
   * @format uri
   */
  repositories_url: string;
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file_name: string | null;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * Simple User
   */
  suspended_by?: SimpleUser;
  /*
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  /*
   * @example Organization
   */
  target_type: string;
  /*
   * @format date-time
   */
  updated_at: string;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  expires_at: string;
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions?: {
    contents?: string;
    issues?: string;
    /*
     * @example read
     */
    metadata?: string;
    /*
     * @example read
     */
    single_file?: string;
  };
  repositories?: Repository[];
  repository_selection?: "all" | "selected";
  /*
   * @example README.md
   */
  single_file?: string;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  token: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /*
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  /*
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example The description of the app.
   */
  description: string | null;
  /*
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /*
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /*
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id: number;
  /*
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /*
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name: string;
  /*
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;
  /*
   * Simple User
   */
  owner: SimpleUser;
  /*
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem?: string;
  /*
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /*
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret?: string;
} & {
  [key: string]: any;
};

/**
 * The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
 *
 * @example one_month
 */
export type InteractionExpiry =
  | "one_day"
  | "three_days"
  | "one_week"
  | "one_month"
  | "six_months";

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
 *
 * @example collaborators_only
 */
export type InteractionGroup =
  | "existing_users"
  | "contributors_only"
  | "collaborators_only";

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  expiry?: InteractionExpiry;
  limit: InteractionGroup;
};

/**
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  /*
   * @example "2018-08-17T04:18:39.000Z"
   * @format date-time
   */
  expires_at: string;
  limit: InteractionGroup;
  /*
   * @example repository
   */
  origin: string;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /*
   * Contents of the issue
   *
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  /*
   * Simple User
   */
  closed_by?: SimpleUser;
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  /*
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   *
   * @example bug
   * @example registration
   */
  labels: (
    | string
    | {
        color?: string | null;
        ["default"]?: boolean;
        description?: string | null;
        id?: number;
        name?: string;
        node_id?: string;
        /*
         * @format uri
         */
        url?: string;
      }
  )[];
  labels_url: string;
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  node_id: string;
  /*
   * Number uniquely identifying the issue within its repository
   *
   * @example 42
   */
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  reactions?: ReactionRollup;
  repository?: Repository;
  /*
   * @format uri
   */
  repository_url: string;
  /*
   * State of the issue; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /*
   * @format uri
   */
  timeline_url?: string;
  /*
   * Title of the issue
   *
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the issue
   *
   * @example https://api.github.com/repositories/42/issues/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  author_association: AuthorAssociation;
  /*
   * Contents of the issue comment
   *
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the issue comment
   *
   * @example 42
   */
  id: number;
  /*
   * @format uri
   */
  issue_url: string;
  node_id: string;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  reactions?: ReactionRollup;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the issue comment
   *
   * @example https://api.github.com/repositories/42/issues/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Issue Event
 */
export type IssueEvent = {
  /*
   * Simple User
   */
  actor: SimpleUser;
  /*
   * Simple User
   */
  assignee?: SimpleUser;
  /*
   * Simple User
   */
  assigner?: SimpleUser;
  author_association?: AuthorAssociation;
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_url: string | null;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  dismissed_review?: IssueEventDismissedReview;
  /*
   * @example closed
   */
  event: string;
  /*
   * @example 1
   */
  id: number;
  issue?: IssueSimple;
  label?: IssueEventLabel;
  lock_reason?: string | null;
  milestone?: IssueEventMilestone;
  /*
   * @example MDEwOklzc3VlRXZlbnQx
   */
  node_id: string;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  /*
   * Simple User
   */
  requested_reviewer?: SimpleUser;
  requested_team?: Team;
  /*
   * Simple User
   */
  review_requester?: SimpleUser;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
   * @format uri
   */
  url: string;
};

export type IssueEventDismissedReview = {
  dismissal_commit_id?: string | null;
  dismissal_message: string | null;
  review_id: number;
  state: string;
};

/**
 * Issue Event for Issue
 */
export type IssueEventForIssue = {
  actor?: SimpleUser;
  author_association?: AuthorAssociation;
  /*
   * @example ":+1:"
   */
  body?: string;
  /*
   * @example "<p>Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam.</p>"
   */
  body_html?: string;
  /*
   * @example "Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam."
   */
  body_text?: string;
  commit_id?: string | null;
  commit_url?: string | null;
  created_at?: string;
  event?: string;
  /*
   * @example "https://github.com/owner-3906e11a33a3d55ba449d63f/BBB_Private_Repo/commit/480d4f47447129f015cb327536c522ca683939a1"
   */
  html_url?: string;
  id?: number;
  /*
   * @example "https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/issues/1"
   */
  issue_url?: string;
  /*
   * @example "off-topic"
   */
  lock_reason?: string;
  /*
   * @example "add a bunch of files"
   */
  message?: string;
  node_id?: string;
  /*
   * @example "https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/pulls/2"
   */
  pull_request_url?: string;
  /*
   * @example "480d4f47447129f015cb327536c522ca683939a1"
   */
  sha?: string;
  /*
   * @example "commented"
   */
  state?: string;
  /*
   * @example "2020-07-09T00:17:51Z"
   */
  submitted_at?: string;
  /*
   * @example "2020-07-09T00:17:36Z"
   */
  updated_at?: string;
  url?: string;
};

/**
 * Issue Event Label
 */
export type IssueEventLabel = {
  color: string | null;
  name: string | null;
};

/**
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};

/**
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  column_name: string;
  id: number;
  previous_column_name?: string;
  project_id: number;
  /*
   * @format uri
   */
  project_url: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Issue Event Rename
 */
export type IssueEventRename = {
  from: string;
  to: string;
};

/**
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  comments: number;
  /*
   * @format uri
   */
  comments_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  draft?: boolean;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  labels_url: string;
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  node_id: string;
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  repository?: Repository;
  /*
   * @format uri
   */
  repository_url: string;
  score: number;
  state: string;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  timeline_url?: string;
  title: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Issue Simple
 */
export type IssueSimple = {
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /*
   * @example I'm having a problem with this.
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 0
   */
  comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example "2011-04-22T13:33:48.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/events
   * @format uri
   */
  events_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/issues/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  labels: Label[];
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}
   */
  labels_url: string;
  /*
   * @example true
   */
  locked: boolean;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDU6SXNzdWUx
   */
  node_id: string;
  /*
   * @example 1347
   */
  number: number;
  /*
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: Integration;
  pull_request?: {
    /*
     * @format uri
     */
    diff_url: string | null;
    /*
     * @format uri
     */
    html_url: string | null;
    /*
     * @format date-time
     */
    merged_at?: string | null;
    /*
     * @format uri
     */
    patch_url: string | null;
    /*
     * @format uri
     */
    url: string | null;
  };
  repository?: Repository;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  repository_url: string;
  /*
   * @example open
   */
  state: string;
  /*
   * @format uri
   */
  timeline_url?: string;
  /*
   * @example Found a bug
   */
  title: string;
  /*
   * @example "2011-04-22T13:33:48.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Information of a job execution in a workflow run
 */
export type Job = {
  /*
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  check_run_url: string;
  /*
   * The time that the job finished, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /*
   * The outcome of the job.
   *
   * @example success
   */
  conclusion: string | null;
  /*
   * The SHA of the commit that is being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /*
   * The id of the job.
   *
   * @example 21
   */
  id: number;
  /*
   * The name of the job.
   *
   * @example test-coverage
   */
  name: string;
  /*
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  /*
   * The id of the associated workflow run.
   *
   * @example 5
   */
  run_id: number;
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  run_url: string;
  /*
   * The time that the job started, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  started_at: string;
  /*
   * The phase of the lifecycle that the job is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /*
   * Steps in this job.
   */
  steps?: {
    /*
     * The time that the job finished, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    completed_at?: string | null;
    /*
     * The outcome of the job.
     *
     * @example success
     */
    conclusion: string | null;
    /*
     * The name of the job.
     *
     * @example test-coverage
     */
    name: string;
    /*
     * @example 1
     */
    number: number;
    /*
     * The time that the step started, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    started_at?: string | null;
    /*
     * The phase of the lifecycle that the job is currently in.
     *
     * @example queued
     */
    status: "queued" | "in_progress" | "completed";
  }[];
  /*
   * @example https://api.github.com/repos/github/hello-world/actions/jobs/21
   */
  url: string;
};

/**
 * Key
 */
export type Key = {
  /*
   * @format date-time
   */
  created_at: string;
  id: number;
  key: string;
  key_id: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  /*
   * 6-character hex code, without the leading #, identifying the color
   *
   * @example FFFFFF
   */
  color: string;
  /*
   * @example true
   */
  ["default"]: boolean;
  /*
   * @example Something isn't working
   */
  description: string | null;
  /*
   * @example 208045946
   */
  id: number;
  /*
   * The name of the label.
   *
   * @example bug
   */
  name: string;
  /*
   * @example MDU6TGFiZWwyMDgwNDU5NDY=
   */
  node_id: string;
  /*
   * URL for the label
   *
   * @example https://api.github.com/repositories/42/labels/bug
   * @format uri
   */
  url: string;
};

/**
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  color: string;
  ["default"]: boolean;
  description: string | null;
  id: number;
  name: string;
  node_id: string;
  score: number;
  text_matches?: SearchResultTextMatches;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Language
 */
export type Language = {
  [key: string]: number;
};

/**
 * License
 */
export type License = {
  /*
     * @example
    
    The MIT License (MIT)
    
    Copyright (c) [year] [fullname]
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
     */
  body: string;
  /*
   * @example include-copyright
   */
  conditions: string[];
  /*
   * @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
   */
  description: string;
  /*
   * @example true
   */
  featured: boolean;
  /*
   * @example http://choosealicense.com/licenses/mit/
   * @format uri
   */
  html_url: string;
  /*
   * @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.
   */
  implementation: string;
  /*
   * @example mit
   */
  key: string;
  /*
   * @example no-liability
   */
  limitations: string[];
  /*
   * @example MIT License
   */
  name: string;
  /*
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /*
   * @example commercial-use
   * @example modifications
   * @example distribution
   * @example sublicense
   * @example private-use
   */
  permissions: string[];
  /*
   * @example MIT
   */
  spdx_id: string | null;
  /*
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * License Content
 */
export type LicenseContent = {
  _links: {
    /*
     * @format uri
     */
    git: string | null;
    /*
     * @format uri
     */
    html: string | null;
    /*
     * @format uri
     */
    self: string;
  };
  content: string;
  /*
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /*
   * @format uri
   */
  git_url: string | null;
  /*
   * @format uri
   */
  html_url: string | null;
  /*
   * License Simple
   */
  license: LicenseSimple;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * License Simple
 */
export type LicenseSimple = {
  /*
   * @format uri
   */
  html_url?: string;
  /*
   * @example mit
   */
  key: string;
  /*
   * @example MIT License
   */
  name: string;
  /*
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /*
   * @example MIT
   */
  spdx_id: string | null;
  /*
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * Hypermedia Link
 */
export type Link = {
  href: string;
};

/**
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};

export type MarketplaceAccount = {
  /*
   * @format email
   */
  email?: string | null;
  id: number;
  login: string;
  node_id?: string;
  /*
   * @format email
   */
  organization_billing_email?: string | null;
  type: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  /*
   * @example https://api.github.com/marketplace_listing/plans/1313/accounts
   * @format uri
   */
  accounts_url: string;
  /*
   * @example Up to 25 private repositories
   * @example 11 concurrent builds
   */
  bullets: string[];
  /*
   * @example A professional-grade CI solution
   */
  description: string;
  /*
   * @example true
   */
  has_free_trial: boolean;
  /*
   * @example 1313
   */
  id: number;
  /*
   * @example 1099
   */
  monthly_price_in_cents: number;
  /*
   * @example Pro
   */
  name: string;
  /*
   * @example 3
   */
  number: number;
  /*
   * @example flat-rate
   */
  price_model: string;
  /*
   * @example published
   */
  state: string;
  unit_name: string | null;
  /*
   * @example https://api.github.com/marketplace_listing/plans/1313
   * @format uri
   */
  url: string;
  /*
   * @example 11870
   */
  yearly_price_in_cents: number;
};

/**
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  id: number;
  login: string;
  marketplace_pending_change?: {
    effective_date?: string;
    id?: number;
    is_installed?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    is_installed?: boolean;
    next_billing_date?: string | null;
    on_free_trial?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
    updated_at?: string;
  };
  organization_billing_email?: string;
  type: string;
  url: string;
};

/**
 * A migration.
 */
export type Migration = {
  /*
   * @format uri
   */
  archive_url?: string;
  /*
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  created_at: string;
  exclude?: any[];
  exclude_attachments: boolean;
  /*
   * @example 0b989ba4-242f-11e5-81e1-c7b6966d2516
   */
  guid: string;
  /*
   * @example 79
   */
  id: number;
  /*
   * @example true
   */
  lock_repositories: boolean;
  node_id: string;
  /*
   * Simple User
   */
  owner: SimpleUser;
  repositories: Repository[];
  /*
   * @example pending
   */
  state: string;
  /*
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/octo-org/migrations/79
   * @format uri
   */
  url: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  /*
   * @example "2013-02-12T13:22:01.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 8
   */
  closed_issues: number;
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  /*
   * @example "2012-10-09T23:39:01.000Z"
   * @format date-time
   */
  due_on: string | null;
  /*
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   * @format uri
   */
  html_url: string;
  /*
   * @example 1002604
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   * @format uri
   */
  labels_url: string;
  /*
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;
  /*
   * The number of the milestone.
   *
   * @example 42
   */
  number: number;
  /*
   * @example 4
   */
  open_issues: number;
  /*
   * The state of the milestone.
   *
   * @default open
   * @example open
   */
  state: "open" | "closed";
  /*
   * The title of the milestone.
   *
   * @example v1.0
   */
  title: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   * @format uri
   */
  url: string;
};

/**
 * Minimal Repository
 */
export type MinimalRepository = {
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  clone_url?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  disabled?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  /*
   * @example 0
   */
  forks?: number;
  forks_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * @example 1296269
   */
  id: number;
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  mirror_url?: string | null;
  /*
   * @example Hello-World
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  /*
   * @example 0
   */
  open_issues?: number;
  open_issues_count?: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin?: boolean;
    pull?: boolean;
    push?: boolean;
  };
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at?: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  svn_url?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  /*
   * A git repository
   */
  template_repository?: Repository;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at?: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  visibility?: string;
  /*
   * @example 0
   */
  watchers?: number;
  watchers_count?: number;
};

/**
 * Org Hook
 */
export type OrgHook = {
  /*
   * @example true
   */
  active: boolean;
  config: {
    /*
     * @example "form"
     */
    content_type?: string;
    /*
     * @example "0"
     */
    insecure_ssl?: string;
    /*
     * @example "********"
     */
    secret?: string;
    /*
     * @example "http://example.com/2"
     */
    url?: string;
  };
  /*
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example push
   * @example pull_request
   */
  events: string[];
  /*
   * @example 1
   */
  id: number;
  /*
   * @example web
   */
  name: string;
  /*
   * @example https://api.github.com/orgs/octocat/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  type: string;
  /*
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/octocat/hooks/1
   * @format uri
   */
  url: string;
};

/**
 * Org Membership
 */
export type OrgMembership = {
  organization: OrganizationSimple;
  /*
   * @example https://api.github.com/orgs/octocat
   * @format uri
   */
  organization_url: string;
  permissions?: {
    can_create_repository: boolean;
  };
  /*
   * @example admin
   */
  role: string;
  /*
   * @example active
   */
  state: string;
  /*
   * @example https://api.github.com/orgs/octocat/memberships/defunkt
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /*
   * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
};

/**
 * Organization Full
 */
export type OrganizationFull = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /*
   * @example org@example.com
   * @format email
   */
  billing_email?: string | null;
  /*
   * @example https://github.com/blog
   * @format uri
   */
  blog?: string;
  /*
   * @example 8
   */
  collaborators?: number | null;
  /*
   * @example GitHub
   */
  company?: string;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  default_repository_permission?: string | null;
  /*
   * @example A great organization
   */
  description: string | null;
  /*
   * @example 10000
   */
  disk_usage?: number | null;
  /*
   * @example octocat@github.com
   * @format email
   */
  email?: string;
  /*
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /*
   * @example 20
   */
  followers: number;
  /*
   * @example 0
   */
  following: number;
  /*
   * @example true
   */
  has_organization_projects: boolean;
  /*
   * @example true
   */
  has_repository_projects: boolean;
  /*
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example true
   */
  is_verified?: boolean;
  /*
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /*
   * @example San Francisco
   */
  location?: string;
  /*
   * @example github
   */
  login: string;
  /*
   * @example all
   */
  members_allowed_repository_creation_type?: string;
  /*
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_pages?: boolean;
  /*
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /*
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /*
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /*
   * @example github
   */
  name?: string;
  /*
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /*
   * @example 100
   */
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  /*
   * @example 81
   */
  private_gists?: number | null;
  /*
   * @example 1
   */
  public_gists: number;
  /*
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /*
   * @example 2
   */
  public_repos: number;
  /*
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /*
   * @example 100
   */
  total_private_repos?: number;
  /*
   * @example github
   */
  twitter_username?: string | null;
  /*
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /*
   * @example Organization
   */
  type: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
};

/**
 * Organization Invitation
 */
export type OrganizationInvitation = {
  created_at: string;
  email: string | null;
  failed_at?: string;
  failed_reason?: string;
  id: number;
  invitation_team_url: string;
  /*
   * @example "https://api.github.com/organizations/16/invitations/1/teams"
   */
  invitation_teams_url?: string;
  inviter: SimpleUser;
  login: string | null;
  /*
   * @example "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
   */
  node_id: string;
  role: string;
  team_count: number;
};

/**
 * Organization Simple
 */
export type OrganizationSimple = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /*
   * @example A great organization
   */
  description: string | null;
  /*
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /*
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /*
   * @example github
   */
  login: string;
  /*
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /*
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /*
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /*
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
};

/**
 * A software package
 */
export type Package = {
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  html_url: string;
  /*
   * Unique identifier of the package.
   *
   * @example 1
   */
  id: number;
  /*
   * The name of the package.
   *
   * @example super-linter
   */
  name: string;
  /*
   * Simple User
   */
  owner?: SimpleUser;
  /*
   * @example docker
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * Minimal Repository
   */
  repository?: MinimalRepository;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github/packages/container/super-linter
   */
  url: string;
  /*
   * The number of versions of the package.
   *
   * @example 1
   */
  version_count: number;
  /*
   * @example private
   */
  visibility: "private" | "public";
};

/**
 * A version of a software package
 */
export type PackageVersion = {
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  deleted_at?: string;
  description?: string;
  /*
   * @example https://github.com/orgs/github/packages/container/super-linter/786068
   */
  html_url?: string;
  /*
   * Unique identifier of the package version.
   *
   * @example 1
   */
  id: number;
  /*
   * @example MIT
   */
  license?: string;
  metadata?: {
    container?: {
      tags: any[];
    };
    docker?: {
      tag?: any[];
    };
    /*
     * @example docker
     */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
  };
  /*
   * The name of the package version.
   *
   * @example latest
   */
  name: string;
  /*
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  package_html_url: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
   */
  url: string;
};

export type PackagesBillingUsage = {
  /*
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
  /*
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /*
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /*
   * The Pages site's custom domain
   *
   * @example example.com
   */
  cname: string | null;
  /*
   * Whether the Page has a custom 404 page.
   *
   * @default false
   * @example false
   */
  custom_404: boolean;
  /*
   * The web address the Page can be accessed from.
   *
   * @example https://example.com
   * @format uri
   */
  html_url?: string;
  /*
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   *
   * @example true
   */
  public: boolean;
  source?: PagesSourceHash;
  /*
   * The status of the most recent build of the Page.
   *
   * @example built
   */
  status: "built" | "building" | "errored";
  /*
   * The API address for accessing this Page resource.
   *
   * @example https://api.github.com/repos/github/hello-world/pages
   * @format uri
   */
  url: string;
};

/**
 * Page Build
 */
export type PageBuild = {
  commit: string;
  /*
   * @format date-time
   */
  created_at: string;
  duration: number;
  error: {
    message: string | null;
  };
  /*
   * Simple User
   */
  pusher: SimpleUser;
  status: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Page Build Status
 */
export type PageBuildStatus = {
  /*
   * @example queued
   */
  status: string;
  /*
   * @example https://api.github.com/repos/github/hello-world/pages/builds/latest
   * @format uri
   */
  url: string;
};

export type PagesSourceHash = {
  branch: string;
  path: string;
};

export type ParticipationStats = {
  all: number[];
  owner: number[];
};

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  /*
   * Whether the currently authenticated user can approve the deployment
   *
   * @example true
   */
  current_user_can_approve: boolean;
  environment: {
    /*
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /*
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /*
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /*
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /*
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  };
  /*
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: {
    reviewer?: SimpleUser | TeamSimple;
    type?: DeploymentReviewerType;
  }[];
  /*
   * The set duration of the wait timer
   *
   * @example 30
   */
  wait_timer: number;
  /*
   * The time that the wait timer began.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  wait_timer_started_at: string | null;
};

/**
 * Porter Author
 */
export type PorterAuthor = {
  email: string;
  id: number;
  /*
   * @format uri
   */
  import_url: string;
  name: string;
  remote_id: string;
  remote_name: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Porter Large File
 */
export type PorterLargeFile = {
  oid: string;
  path: string;
  ref_name: string;
  size: number;
};

/**
 * Private User
 */
export type PrivateUser = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example There once was...
   */
  bio: string | null;
  /*
   * @example https://github.com/blog
   */
  blog: string | null;
  business_plus?: boolean;
  /*
   * @example 8
   */
  collaborators: number;
  /*
   * @example GitHub
   */
  company: string | null;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 10000
   */
  disk_usage: number;
  /*
   * @example octocat@github.com
   * @format email
   */
  email: string | null;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example 20
   */
  followers: number;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example 0
   */
  following: number;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  hireable: boolean | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  ldap_dn?: string;
  /*
   * @example San Francisco
   */
  location: string | null;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example monalisa octocat
   */
  name: string | null;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /*
   * @example 100
   */
  owned_private_repos: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /*
   * @example 81
   */
  private_gists: number;
  /*
   * @example 1
   */
  public_gists: number;
  /*
   * @example 2
   */
  public_repos: number;
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * @example 100
   */
  total_private_repos: number;
  /*
   * @example monalisa
   */
  twitter_username?: string | null;
  /*
   * @example true
   */
  two_factor_authentication: boolean;
  /*
   * @example User
   */
  type: string;
  /*
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body: string | null;
  /*
   * @example https://api.github.com/projects/1002604/columns
   * @format uri
   */
  columns_url: string;
  /*
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * @example https://github.com/api-playground/projects-test/projects/12
   * @format uri
   */
  html_url: string;
  /*
   * @example 1002604
   */
  id: number;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
  /*
   * @example MDc6UHJvamVjdDEwMDI2MDQ=
   */
  node_id: string;
  /*
   * @example 1
   */
  number: number;
  /*
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /*
   * @example https://api.github.com/repos/api-playground/projects-test
   * @format uri
   */
  owner_url: string;
  /*
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
  /*
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /*
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/1002604
   * @format uri
   */
  url: string;
};

/**
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  /*
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  /*
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  column_url: string;
  /*
   * @example https://api.github.com/repos/api-playground/projects-test/issues/3
   * @format uri
   */
  content_url?: string;
  /*
   * @example "2016-09-05T14:21:06.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Simple User
   */
  creator: SimpleUser;
  /*
   * The project card's ID
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDExOlByb2plY3RDYXJkMTQ3OA==
   */
  node_id: string;
  /*
   * @example Add payload for delete Project column
   */
  note: string | null;
  /*
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /*
   * @example "2016-09-05T14:20:22.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/columns/cards/1478
   * @format uri
   */
  url: string;
};

/**
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  /*
   * @example https://api.github.com/projects/columns/367/cards
   * @format uri
   */
  cards_url: string;
  /*
   * @example "2016-09-05T14:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * The unique identifier of the project column
   *
   * @example 42
   */
  id: number;
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
  /*
   * @example MDEzOlByb2plY3RDb2x1bW4zNjc=
   */
  node_id: string;
  /*
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /*
   * @example "2016-09-05T14:22:28.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  url: string;
};

/**
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  allow_deletions?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  enforce_admins?: {
    enabled: boolean;
    /*
     * @format uri
     */
    url: string;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    dismiss_stale_reviews?: boolean;
    dismissal_restrictions?: {
      teams: Team[];
      /*
       * @format uri
       */
      teams_url: string;
      /*
       * @format uri
       */
      url: string;
      users: SimpleUser[];
      /*
       * @format uri
       */
      users_url: string;
    };
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /*
     * @format uri
     */
    url: string;
  };
  required_signatures?: {
    /*
     * @example true
     */
    enabled: boolean;
    /*
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     * @format uri
     */
    url: string;
  };
  required_status_checks?: StatusCheckPolicy;
  restrictions?: BranchRestrictionPolicy;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  /*
   * @example true
   */
  enabled: boolean;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  /*
   * @example true
   */
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    /*
     * The list of teams with review dismissal access.
     */
    teams?: Team[];
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
     */
    teams_url?: string;
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
     */
    url?: string;
    /*
     * The list of users with review dismissal access.
     */
    users?: SimpleUser[];
    /*
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
     */
    users_url?: string;
  };
  /*
   * @example true
   */
  require_code_owner_reviews: boolean;
  /*
   * @example 2
   * @maximum 6
   * @minimum 1
   */
  required_approving_review_count?: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
   * @format uri
   */
  url?: string;
};

/**
 * Public User
 */
export type PublicUser = {
  /*
   * @format uri
   */
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  /*
   * @example 3
   */
  collaborators?: number;
  company: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  disk_usage?: number;
  /*
   * @format email
   */
  email: string | null;
  events_url: string;
  followers: number;
  /*
   * @format uri
   */
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  /*
   * @format uri
   */
  organizations_url: string;
  /*
   * @example 2
   */
  owned_private_repos?: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /*
   * @example 1
   */
  private_gists?: number;
  public_gists: number;
  public_repos: number;
  /*
   * @format uri
   */
  received_events_url: string;
  /*
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  /*
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  /*
   * @example 2
   */
  total_private_repos?: number;
  twitter_username?: string | null;
  type: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * @example 100
   */
  additions: number;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /*
       * @format uri
       */
      contributors_url: string;
      /*
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /*
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /*
       * @format uri
       */
      downloads_url: string;
      /*
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /*
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /*
       * @format uri
       */
      homepage: string | null;
      /*
       * @format uri
       */
      hooks_url: string;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /*
       * @format uri
       */
      languages_url: string;
      /*
       * License Simple
       */
      license: LicenseSimple;
      master_branch?: string;
      /*
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /*
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /*
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /*
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /*
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /*
         * @format uri
         */
        organizations_url: string;
        /*
         * @format uri
         */
        received_events_url: string;
        /*
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /*
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /*
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /*
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /*
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /*
       * @format uri
       */
      subscribers_url: string;
      /*
       * @format uri
       */
      subscription_url: string;
      /*
       * @format uri
       */
      svn_url: string;
      /*
       * @format uri
       */
      tags_url: string;
      /*
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /*
       * @format date-time
       */
      updated_at: string;
      /*
       * @format uri
       */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /*
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /*
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /*
       * @format uri
       */
      organizations_url: string;
      /*
       * @format uri
       */
      received_events_url: string;
      /*
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /*
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /*
       * @format uri
       */
      url: string;
    };
  };
  /*
   * @example Please pull these awesome changes
   */
  body: string | null;
  /*
   * @example 5
   */
  changed_files: number;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example 10
   */
  comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example 3
   */
  commits: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 3
   */
  deletions: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /*
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /*
       * @format uri
       */
      contributors_url: string;
      /*
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /*
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /*
       * @format uri
       */
      downloads_url: string;
      /*
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /*
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /*
       * @format uri
       */
      homepage: string | null;
      /*
       * @format uri
       */
      hooks_url: string;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /*
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string | null;
        /*
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /*
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /*
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /*
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /*
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /*
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /*
         * @format uri
         */
        organizations_url: string;
        /*
         * @format uri
         */
        received_events_url: string;
        /*
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /*
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /*
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /*
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /*
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /*
       * @format uri
       */
      subscribers_url: string;
      /*
       * @format uri
       */
      subscription_url: string;
      /*
       * @format uri
       */
      svn_url: string;
      /*
       * @format uri
       */
      tags_url: string;
      /*
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /*
       * @format date-time
       */
      updated_at: string;
      /*
       * @format uri
       */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /*
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /*
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /*
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /*
       * @format uri
       */
      organizations_url: string;
      /*
       * @format uri
       */
      received_events_url: string;
      /*
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /*
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /*
       * @format uri
       */
      url: string;
    };
  };
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /*
   * @example true
   */
  locked: boolean;
  /*
   * Indicates whether maintainers can modify the pull request.
   *
   * @example true
   */
  maintainer_can_modify: boolean;
  /*
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /*
   * @example true
   */
  mergeable: boolean | null;
  /*
   * @example clean
   */
  mergeable_state: string;
  merged: boolean;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  /*
   * Simple User
   */
  merged_by: SimpleUser;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /*
   * Number uniquely identifying the pull request within its repository.
   *
   * @example 42
   */
  number: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  /*
   * @example true
   */
  rebaseable?: boolean | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /*
   * @example 0
   */
  review_comments: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /*
   * State of this Pull Request. Either `open` or `closed`.
   *
   * @example open
   */
  state: "open" | "closed";
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /*
   * The title of the pull request.
   *
   * @example Amazing new feature
   */
  title: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  merged: boolean;
  message: string;
  sha: string;
};

export type PullRequestMinimal = {
  base: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  head: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  id: number;
  number: number;
  url: string;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /*
   * The text of the review.
   *
   * @example This looks great.
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /*
   * A commit SHA for the review.
   *
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the review
   *
   * @example 42
   */
  id: number;
  /*
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   * @format uri
   */
  pull_request_url: string;
  /*
   * @example CHANGES_REQUESTED
   */
  state: string;
  /*
   * @format date-time
   */
  submitted_at?: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  _links: {
    html: {
      /*
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       * @format uri
       */
      href: string;
    };
    pull_request: {
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       * @format uri
       */
      href: string;
    };
    self: {
      /*
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       * @format uri
       */
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /*
   * The text of the comment.
   *
   * @example We should probably include a check for null values here.
   */
  body: string;
  /*
   * @example "<p>comment body</p>"
   */
  body_html?: string;
  /*
   * @example "comment body"
   */
  body_text?: string;
  /*
   * The SHA of the commit to which the comment applies.
   *
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * The diff of the line that the comment refers to.
   *
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /*
   * HTML URL for the pull request review comment.
   *
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /*
   * The ID of the pull request review comment.
   *
   * @example 1
   */
  id: number;
  /*
   * The comment ID to reply to.
   *
   * @example 8
   */
  in_reply_to_id?: number;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /*
   * The node ID of the pull request review comment.
   *
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /*
   * The SHA of the original commit to which the comment applies.
   *
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /*
   * The index of the original line in the diff to which the comment applies.
   *
   * @example 4
   */
  original_position: number;
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /*
   * The relative path of the file to which the comment applies.
   *
   * @example config/database.yaml
   */
  path: string;
  /*
   * The line index in the diff to which the comment applies.
   *
   * @example 1
   */
  position: number;
  /*
   * The ID of the pull request review to which the comment belongs.
   *
   * @example 42
   */
  pull_request_review_id: number | null;
  /*
   * URL for the pull request that the review comment belongs to.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  reactions?: ReactionRollup;
  /*
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT";
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the pull request review comment
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   */
  url: string;
  user: SimpleUser;
};

/**
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  teams: TeamSimple[];
  users: SimpleUser[];
};

/**
 * Pull Request Simple
 */
export type PullRequestSimple = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /*
   * @example too heated
   */
  active_lock_reason?: string | null;
  /*
   * Simple User
   */
  assignee: SimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    /*
     * Simple User
     */
    user: SimpleUser;
  };
  /*
   * @example Please pull these awesome changes
   */
  body: string | null;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /*
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    /*
     * Simple User
     */
    user: SimpleUser;
  };
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /*
   * @example true
   */
  locked: boolean;
  /*
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  /*
   * A collection of related issues and pull requests.
   */
  milestone: Milestone;
  /*
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /*
   * @example 1347
   */
  number: number;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /*
   * @example open
   */
  state: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /*
   * @example new-feature
   */
  title: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
};

/**
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  rate: RateLimit;
  resources: {
    code_scanning_upload?: RateLimit;
    core: RateLimit;
    graphql?: RateLimit;
    integration_manifest?: RateLimit;
    search: RateLimit;
    source_import?: RateLimit;
  };
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  /*
   * The reaction to use
   *
   * @example heart
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * @example "2016-05-20T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example MDg6UmVhY3Rpb24x
   */
  node_id: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

export type ReactionRollup = {
  ["+1"]: number;
  ["-1"]: number;
  confused: number;
  eyes: number;
  heart: number;
  hooray: number;
  laugh: number;
  rocket: number;
  total_count: number;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  /*
   * @example 4
   */
  count: number;
  /*
   * @example Google
   */
  referrer: string;
  /*
   * @example 3
   */
  uniques: number;
};

/**
 * A release.
 */
export type Release = {
  assets: ReleaseAsset[];
  /*
   * @format uri
   */
  assets_url: string;
  author: SimpleUser;
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * true to create a draft (unpublished) release, false to create a published one.
   *
   * @example false
   */
  draft: boolean;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /*
   * Whether to identify the release as a prerelease or a full release.
   *
   * @example false
   */
  prerelease: boolean;
  /*
   * @format date-time
   */
  published_at: string | null;
  /*
   * The name of the tag.
   *
   * @example v1.0.0
   */
  tag_name: string;
  /*
   * @format uri
   */
  tarball_url: string | null;
  /*
   * Specifies the commitish value that determines where the Git tag is created from.
   *
   * @example master
   */
  target_commitish: string;
  upload_url: string;
  /*
   * @format uri
   */
  url: string;
  /*
   * @format uri
   */
  zipball_url: string | null;
};

/**
 * Data related to a release.
 */
export type ReleaseAsset = {
  /*
   * @format uri
   */
  browser_download_url: string;
  content_type: string;
  /*
   * @format date-time
   */
  created_at: string;
  download_count: number;
  id: number;
  label: string | null;
  /*
   * The file name of the asset.
   *
   * @example Team Environment
   */
  name: string;
  node_id: string;
  size: number;
  /*
   * State of the release asset.
   */
  state: "uploaded" | "open";
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * Simple User
   */
  uploader: SimpleUser;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  /*
   * @format uri
   */
  contributors_url: string;
  /*
   * @format date-time
   */
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  /*
   * @format uri
   */
  deployments_url: string;
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @format uri
   */
  downloads_url: string;
  /*
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  /*
   * @format uri
   */
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  /*
   * @format uri
   */
  homepage: string | null;
  /*
   * @format uri
   */
  hooks_url: string;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  /*
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @format uri
   */
  merges_url: string;
  milestones_url: string;
  /*
   * @format uri
   */
  mirror_url: string | null;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  pulls_url: string;
  /*
   * @format date-time
   */
  pushed_at: string;
  releases_url: string;
  score: number;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  /*
   * @format uri
   */
  stargazers_url: string;
  statuses_url: string;
  /*
   * @format uri
   */
  subscribers_url: string;
  /*
   * @format uri
   */
  subscription_url: string;
  /*
   * @format uri
   */
  svn_url: string;
  /*
   * @format uri
   */
  tags_url: string;
  /*
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  text_matches?: SearchResultTextMatches;
  topics?: string[];
  trees_url: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
  watchers: number;
  watchers_count: number;
};

/**
 * A git repository
 */
export type Repository = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /*
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /*
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      pull?: boolean;
      push?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: string[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /*
   * @example "2016-06-13T19:52:50.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  /*
   * @example https://github.com/octocat/Hello-World/invitations
   */
  html_url: string;
  /*
   * Unique identifier of the repository invitation.
   *
   * @example 42
   */
  id: number;
  /*
   * Simple User
   */
  invitee: SimpleUser;
  /*
   * Simple User
   */
  inviter: SimpleUser;
  node_id: string;
  /*
   * The permission associated with the invitation.
   *
   * @example read
   */
  permissions: "read" | "write" | "admin";
  repository: MinimalRepository;
  /*
   * URL for the repository invitation
   *
   * @example https://api.github.com/user/repository-invitations/1
   */
  url: string;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  /*
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;
  /*
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /*
   * Determines if notifications should be received from this repository.
   *
   * @example true
   */
  subscribed: boolean;
  /*
   * @example https://api.github.com/repos/octocat/example/subscription
   * @format uri
   */
  url: string;
};

/**
 * Legacy Review Comment
 */
export type ReviewComment = {
  _links: {
    html: Link;
    pull_request: Link;
    self: Link;
  };
  author_association: AuthorAssociation;
  /*
   * @example Great stuff
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /*
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /*
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /*
   * @example 10
   */
  id: number;
  /*
   * @example 8
   */
  in_reply_to_id?: number;
  /*
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /*
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /*
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /*
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /*
   * @example 4
   */
  original_position: number;
  /*
   * The original first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /*
   * @example file1.txt
   */
  path: string;
  /*
   * @example 1
   */
  position: number | null;
  /*
   * @example 42
   */
  pull_request_review_id: number | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /*
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /*
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT";
  /*
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   * @format uri
   */
  url: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * A self hosted runner
 */
export type Runner = {
  busy: boolean;
  /*
   * The id of the runner.
   *
   * @example 5
   */
  id: number;
  labels: {
    /*
     * Unique identifier of the label.
     */
    id?: number;
    /*
     * Name of the label.
     */
    name?: string;
    /*
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type?: "read-only" | "custom";
  }[];
  /*
   * The name of the runner.
   *
   * @example iMac
   */
  name: string;
  /*
   * The Operating System of the runner.
   *
   * @example macos
   */
  os: string;
  /*
   * The status of the runner.
   *
   * @example online
   */
  status: string;
};

/**
 * Runner Application
 */
export type RunnerApplication = {
  architecture: string;
  download_url: string;
  filename: string;
  os: string;
};

export type RunnerGroupsEnterprise = {
  allows_public_repositories: boolean;
  ["default"]: boolean;
  id: number;
  name: string;
  runners_url: string;
  selected_organizations_url?: string;
  visibility: string;
};

export type RunnerGroupsOrg = {
  allows_public_repositories: boolean;
  ["default"]: boolean;
  id: number;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  name: string;
  runners_url: string;
  /*
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
   */
  selected_repositories_url?: string;
  visibility: string;
};

export type ScimEnterpriseGroup = {
  displayName?: string;
  externalId?: string | null;
  id: string;
  members?: {
    $ref?: string;
    display?: string;
    value?: string;
  }[];
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  schemas: string[];
};

export type ScimEnterpriseUser = {
  active?: boolean;
  emails?: {
    primary?: boolean;
    type?: string;
    value?: string;
  }[];
  externalId?: string;
  groups?: {
    value?: string;
  }[];
  id: string;
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  name?: {
    familyName?: string;
    givenName?: string;
  };
  schemas: string[];
  userName?: string;
};

/**
 * Scim Error
 */
export type ScimError = {
  detail?: string | null;
  documentation_url?: string | null;
  message?: string | null;
  schemas?: string[];
  scimType?: string | null;
  status?: number;
};

export type ScimGroupListEnterprise = {
  Resources: {
    displayName?: string;
    externalId?: string | null;
    id: string;
    members?: {
      $ref?: string;
      display?: string;
      value?: string;
    }[];
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    schemas: string[];
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
};

/**
 * SCIM /Users provisioning endpoints
 */
export type ScimUser = {
  /*
   * The active status of the User.
   *
   * @example true
   */
  active: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string | null;
  /*
   * user emails
   *
   * @example {"primary":true,"value":"someone@example.com"}
   * @example {"primary":false,"value":"another@example.com"}
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    value: string;
  }[];
  /*
   * The ID of the User.
   *
   * @example a7b0f98395
   */
  externalId: string | null;
  /*
   * associated groups
   */
  groups?: {
    display?: string;
    value?: string;
  }[];
  /*
   * Unique identifier of an external identity
   *
   * @example 1b78eada-9baa-11e6-9eb6-a431576d590e
   */
  id: string;
  meta: {
    /*
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    created?: string;
    /*
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    lastModified?: string;
    /*
     * @example https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d
     * @format uri
     */
    location?: string;
    /*
     * @example User
     */
    resourceType?: string;
  };
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string | null;
    formatted?: string | null;
    givenName: string | null;
  };
  /*
   * Set of operations to be performed
   *
   * @example {"op":"replace","value":{"active":false}}
   * @minItems 1
   */
  operations?: {
    op: "add" | "remove" | "replace";
    path?: string;
    value?: string | Record<string, any> | any[];
  }[];
  /*
   * The ID of the organization.
   */
  organization_id?: number;
  /*
   * SCIM schema used.
   *
   * @minItems 1
   */
  schemas: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string | null;
};

/**
 * SCIM User List
 */
export type ScimUserList = {
  Resources: ScimUser[];
  /*
   * @example 10
   */
  itemsPerPage: number;
  /*
   * SCIM schema used.
   *
   * @minItems 1
   */
  schemas: string[];
  /*
   * @example 1
   */
  startIndex: number;
  /*
   * @example 3
   */
  totalResults: number;
};

export type ScimUserListEnterprise = {
  Resources: {
    active?: boolean;
    emails?: {
      primary?: boolean;
      type?: string;
      value?: string;
    }[];
    externalId?: string;
    groups?: {
      value?: string;
    }[];
    id: string;
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    name?: {
      familyName?: string;
      givenName?: string;
    };
    schemas: string[];
    userName?: string;
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
};

export type ScopedInstallation = {
  account: SimpleUser;
  /*
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions: AppPermissions;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /*
   * @example config.yaml
   */
  single_file_name: string | null;
  /*
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
};

export type SearchResultTextMatches = {
  fragment?: string;
  matches?: {
    indices?: number[];
    text?: string;
  }[];
  object_type?: string | null;
  object_url?: string;
  property?: string;
}[];

export type SecretScanningAlert = {
  created_at?: AlertCreatedAt;
  html_url?: AlertHtmlUrl;
  number?: AlertNumber;
  resolution?: SecretScanningAlertResolution;
  /*
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  resolved_at?: string | null;
  resolved_by?: SimpleUser;
  /*
   * The secret that was detected.
   */
  secret?: string;
  /*
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  state?: SecretScanningAlertState;
  url?: AlertUrl;
};

/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
 */
export type SecretScanningAlertResolution =
  | ("false_positive" | "wont_fix" | "revoked" | "used_in_tests")
  | any
  | null;

/**
 * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
 */
export type SecretScanningAlertState = "open" | "resolved";

export type SelectedActions = {
  /*
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed: boolean;
  /*
   * Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
   */
  patterns_allowed: string[];
  /*
   * Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
   */
  verified_allowed: boolean;
};

/**
 * The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.
 */
export type SelectedActionsUrl = string;

/**
 * Short Blob
 */
export type ShortBlob = {
  sha: string;
  url: string;
};

/**
 * Short Branch
 */
export type ShortBranch = {
  commit: {
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  name: string;
  protected: boolean;
  protection?: BranchProtection;
  /*
   * @format uri
   */
  protection_url?: string;
};

/**
 * Simple Commit
 */
export type SimpleCommit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  /*
   * @format date-time
   */
  timestamp: string;
  tree_id: string;
};

export type SimpleCommitStatus = {
  /*
   * @format uri
   */
  avatar_url: string | null;
  context: string;
  /*
   * @format date-time
   */
  created_at: string;
  description: string | null;
  id: number;
  node_id: string;
  required?: boolean | null;
  state: string;
  /*
   * @format uri
   */
  target_url: string;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Simple User
 */
export type SimpleUser = {
  /*
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /*
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /*
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /*
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /*
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /*
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /*
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /*
   * @example 1
   */
  id: number;
  /*
   * @example octocat
   */
  login: string;
  /*
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /*
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /*
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /*
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /*
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;
  /*
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /*
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @example User
   */
  type: string;
  /*
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
} | null;

/**
 * Stargazer
 */
export type Stargazer = {
  /*
   * @format date-time
   */
  starred_at: string;
  /*
   * Simple User
   */
  user: SimpleUser;
};

/**
 * Starred Repository
 */
export type StarredRepository = {
  repo: Repository;
  /*
   * @format date-time
   */
  starred_at: string;
};

/**
 * The status of a commit.
 */
export type Status = {
  avatar_url: string | null;
  context: string;
  created_at: string;
  creator: SimpleUser;
  description: string;
  id: number;
  node_id: string;
  state: string;
  target_url: string;
  updated_at: string;
  url: string;
};

/**
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  /*
   * @example continuous-integration/travis-ci
   */
  contexts: string[];
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
   * @format uri
   */
  contexts_url: string;
  /*
   * @example true
   */
  strict: boolean;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
   * @format uri
   */
  url: string;
};

/**
 * Tag
 */
export type Tag = {
  commit: {
    sha: string;
    /*
     * @format uri
     */
    url: string;
  };
  /*
   * @example v0.1
   */
  name: string;
  node_id: string;
  /*
   * @example https://github.com/octocat/Hello-World/tarball/v0.1
   * @format uri
   */
  tarball_url: string;
  /*
   * @example https://github.com/octocat/Hello-World/zipball/v0.1
   * @format uri
   */
  zipball_url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  id: number;
  members_url: string;
  name: string;
  node_id: string;
  /*
   * Groups of organization members that gives permissions on specified repositories.
   */
  parent?: TeamSimple;
  permission: string;
  privacy?: string;
  /*
   * @format uri
   */
  repositories_url: string;
  slug: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * The main text of the discussion.
   *
   * @example Please suggest improvements to our workflow in comments.
   */
  body: string;
  /*
   * @example <p>Hi! This is an area for us to collaborate as a team</p>
   */
  body_html: string;
  /*
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /*
   * @example 0
   */
  comments_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
   * @format uri
   */
  comments_url: string;
  /*
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1
   * @format uri
   */
  html_url: string;
  /*
   * @format date-time
   */
  last_edited_at: string | null;
  /*
   * @example MDE0OlRlYW1EaXNjdXNzaW9uMQ==
   */
  node_id: string;
  /*
   * The unique sequence number of a team discussion.
   *
   * @example 42
   */
  number: number;
  /*
   * Whether or not this discussion should be pinned for easy retrieval.
   *
   * @example true
   */
  pinned: boolean;
  /*
   * Whether or not this discussion should be restricted to team members and organization administrators.
   *
   * @example true
   */
  private: boolean;
  reactions?: ReactionRollup;
  /*
   * @example https://api.github.com/organizations/1/team/2343027
   * @format uri
   */
  team_url: string;
  /*
   * The title of the discussion.
   *
   * @example How can we improve our workflow?
   */
  title: string;
  /*
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1
   * @format uri
   */
  url: string;
};

/**
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  /*
   * Simple User
   */
  author: SimpleUser;
  /*
   * The main text of the comment.
   *
   * @example I agree with this suggestion.
   */
  body: string;
  /*
   * @example <p>Do you like apples?</p>
   */
  body_html: string;
  /*
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /*
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1
   * @format uri
   */
  discussion_url: string;
  /*
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
   * @format uri
   */
  html_url: string;
  /*
   * @format date-time
   */
  last_edited_at: string | null;
  /*
   * @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
   */
  node_id: string;
  /*
   * The unique sequence number of a team discussion comment.
   *
   * @example 42
   */
  number: number;
  reactions?: ReactionRollup;
  /*
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
   * @format uri
   */
  url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /*
   * @example "2017-07-14T16:53:42.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example A great team.
   */
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the team
   *
   * @example 42
   */
  id: number;
  /*
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /*
   * @example 3
   */
  members_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /*
   * Name of the team
   *
   * @example Developers
   */
  name: string;
  /*
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  organization: OrganizationFull;
  /*
   * Groups of organization members that gives permissions on specified repositories.
   */
  parent?: TeamSimple;
  /*
   * Permission that the team will have for its repositories
   *
   * @example push
   */
  permission: string;
  /*
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: "closed" | "secret";
  /*
   * @example 10
   */
  repos_count: number;
  /*
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * @example justice-league
   */
  slug: string;
  /*
   * @example "2017-08-17T12:37:15.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
};

/**
 * Team Membership
 */
export type TeamMembership = {
  /*
   * The role of the user in the team.
   *
   * @default member
   * @example member
   */
  role: "member" | "maintainer";
  state: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * A team's access to a project.
 */
export type TeamProject = {
  body: string | null;
  columns_url: string;
  created_at: string;
  creator: SimpleUser;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  number: number;
  /*
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
  owner_url: string;
  permissions: {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  /*
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  state: string;
  updated_at: string;
  url: string;
};

/**
 * A team's access to a repository.
 */
export type TeamRepository = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /*
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /*
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /*
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /*
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /*
   * @example This your first repo!
   */
  description: string | null;
  /*
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /*
   * @example 9
   */
  forks_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /*
   * @example octocat/Hello-World
   */
  full_name: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /*
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /*
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /*
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /*
   * License Simple
   */
  license: LicenseSimple;
  master_branch?: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /*
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /*
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /*
   * @example 0
   */
  open_issues_count: number;
  /*
   * Simple User
   */
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /*
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /*
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /*
   * @example 108
   */
  size: number;
  /*
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /*
   * @example 80
   */
  stargazers_count: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /*
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  /*
   * A git repository
   */
  template_repository?: Repository;
  topics?: string[];
  /*
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /*
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /*
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /*
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /*
   * @example 80
   */
  watchers_count: number;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /*
   * Description of the team
   *
   * @example A great team.
   */
  description: string | null;
  /*
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the team
   *
   * @example 1
   */
  id: number;
  /*
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /*
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /*
   * Name of the team
   *
   * @example Justice League
   */
  name: string;
  /*
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  /*
   * Permission that the team will have for its repositories
   *
   * @example admin
   */
  permission: string;
  /*
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: string;
  /*
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /*
   * @example justice-league
   */
  slug: string;
  /*
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
} | null;

/**
 * Thread
 */
export type Thread = {
  id: string;
  last_read_at: string | null;
  reason: string;
  repository: MinimalRepository;
  subject: {
    latest_comment_url: string;
    title: string;
    type: string;
    url: string;
  };
  /*
   * @example https://api.github.com/notifications/threads/2/subscription
   */
  subscription_url: string;
  unread: boolean;
  updated_at: string;
  url: string;
};

/**
 * Thread Subscription
 */
export type ThreadSubscription = {
  /*
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  ignored: boolean;
  reason: string | null;
  /*
   * @example https://api.github.com/repos/1
   * @format uri
   */
  repository_url?: string;
  /*
   * @example true
   */
  subscribed: boolean;
  /*
   * @example https://api.github.com/notifications/threads/1
   * @format uri
   */
  thread_url?: string;
  /*
   * @example https://api.github.com/notifications/threads/1/subscription
   * @format uri
   */
  url: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: string[];
};

/**
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  /*
   * @format date-time
   */
  created_at: string;
  created_by: string | null;
  curated: boolean;
  description: string | null;
  display_name: string | null;
  featured: boolean;
  /*
   * @format uri
   */
  logo_url?: string | null;
  name: string;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  released: string | null;
  repository_count?: number | null;
  score: number;
  short_description: string | null;
  text_matches?: SearchResultTextMatches;
  /*
   * @format date-time
   */
  updated_at: string;
};

export type Traffic = {
  count: number;
  /*
   * @format date-time
   */
  timestamp: string;
  uniques: number;
};

/**
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  account: MarketplaceAccount;
  /*
   * @example monthly
   */
  billing_cycle: string;
  /*
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  free_trial_ends_on: string | null;
  /*
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  next_billing_date: string | null;
  /*
   * @example true
   */
  on_free_trial: boolean;
  plan: MarketplaceListingPlan;
  unit_count: number | null;
  /*
   * @example "2017-11-02T01:12:12.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * User Search Result Item
 */
export type UserSearchResultItem = {
  /*
   * @format uri
   */
  avatar_url: string;
  bio?: string | null;
  blog?: string | null;
  company?: string | null;
  /*
   * @format date-time
   */
  created_at?: string;
  /*
   * @format email
   */
  email?: string | null;
  events_url: string;
  followers?: number;
  /*
   * @format uri
   */
  followers_url: string;
  following?: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable?: boolean | null;
  /*
   * @format uri
   */
  html_url: string;
  id: number;
  location?: string | null;
  login: string;
  name?: string | null;
  node_id: string;
  /*
   * @format uri
   */
  organizations_url: string;
  public_gists?: number;
  public_repos?: number;
  /*
   * @format uri
   */
  received_events_url: string;
  /*
   * @format uri
   */
  repos_url: string;
  score: number;
  site_admin: boolean;
  starred_url: string;
  /*
   * @format uri
   */
  subscriptions_url: string;
  /*
   * @format date-time
   */
  suspended_at?: string | null;
  text_matches?: SearchResultTextMatches;
  type: string;
  /*
   * @format date-time
   */
  updated_at?: string;
  /*
   * @format uri
   */
  url: string;
};

/**
 * Validation Error
 */
export type ValidationError = {
  documentation_url: string;
  errors?: {
    code: string;
    field?: string;
    index?: number;
    message?: string;
    resource?: string;
    value?: (string | null) | (number | null) | (string[] | null);
  }[];
  message: string;
};

/**
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  documentation_url: string;
  errors?: string[];
  message: string;
};

export type Verification = {
  payload: string | null;
  reason: string;
  signature: string | null;
  verified: boolean;
};

/**
 * View Traffic
 */
export type ViewTraffic = {
  /*
   * @example 14850
   */
  count: number;
  /*
   * @example 3782
   */
  uniques: number;
  views: Traffic[];
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 *
 * @example 30
 */
export type WaitTimer = number;

/**
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  content_type?: WebhookConfigContentType;
  insecure_ssl?: WebhookConfigInsecureSsl;
  secret?: WebhookConfigSecret;
  url?: WebhookConfigUrl;
};

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 *
 * @example "json"
 */
export type WebhookConfigContentType = string;

/**
 * Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
 *
 * @example "0"
 */
export type WebhookConfigInsecureSsl = string;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 *
 * @example "********"
 */
export type WebhookConfigSecret = string;

/**
 * The URL to which the payloads will be delivered.
 *
 * @example https://example.com/webhook
 * @format uri
 */
export type WebhookConfigUrl = string;

/**
 * A GitHub Actions workflow
 */
export type Workflow = {
  /*
   * @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg
   */
  badge_url: string;
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  deleted_at?: string;
  /*
   * @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
   */
  html_url: string;
  /*
   * @example 5
   */
  id: number;
  /*
   * @example CI
   */
  name: string;
  /*
   * @example MDg6V29ya2Zsb3cxMg==
   */
  node_id: string;
  /*
   * @example ruby.yaml
   */
  path: string;
  /*
   * @example active
   */
  state: "active" | "deleted";
  /*
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example https://api.github.com/repos/actions/setup-ruby/workflows/5
   */
  url: string;
};

/**
 * An invocation of a workflow
 */
export type WorkflowRun = {
  /*
   * The URL to the artifacts for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
   */
  artifacts_url: string;
  /*
   * The URL to cancel the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
   */
  cancel_url: string;
  /*
   * The URL to the associated check suite.
   *
   * @example https://api.github.com/repos/github/hello-world/check-suites/12
   */
  check_suite_url: string;
  /*
   * @example neutral
   */
  conclusion: string | null;
  /*
   * @format date-time
   */
  created_at: string;
  /*
   * @example push
   */
  event: string;
  /*
   * @example master
   */
  head_branch: string | null;
  head_commit: SimpleCommit;
  head_repository: MinimalRepository;
  /*
   * @example 5
   */
  head_repository_id?: number;
  /*
   * The SHA of the head commit that points to the version of the worflow being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /*
   * @example https://github.com/github/hello-world/suites/4
   */
  html_url: string;
  /*
   * The ID of the workflow run.
   *
   * @example 5
   */
  id: number;
  /*
   * The URL to the jobs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
   */
  jobs_url: string;
  /*
   * The URL to download the logs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
   */
  logs_url: string;
  /*
   * The name of the workflow run.
   *
   * @example Build
   */
  name?: string;
  /*
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  repository: MinimalRepository;
  /*
   * The URL to rerun the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
   */
  rerun_url: string;
  /*
   * The auto incrementing run number for the workflow run.
   *
   * @example 106
   */
  run_number: number;
  /*
   * @example completed
   */
  status: string | null;
  /*
   * @format date-time
   */
  updated_at: string;
  /*
   * The URL to the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  url: string;
  /*
   * The ID of the parent workflow.
   *
   * @example 5
   */
  workflow_id: number;
  /*
   * The URL to the workflow.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
   */
  workflow_url: string;
};

/**
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    MACOS?: {
      jobs: number;
      total_ms: number;
    };
    UBUNTU?: {
      jobs: number;
      total_ms: number;
    };
    WINDOWS?: {
      jobs: number;
      total_ms: number;
    };
  };
  run_duration_ms: number;
};

/**
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    MACOS?: {
      total_ms?: number;
    };
    UBUNTU?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};
