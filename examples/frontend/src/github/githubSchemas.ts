/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
export type ActionsBillingUsage = {
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;
    /**
     * Total minutes used on macOS 12 core runner machines.
     */
    macos_12_core?: number;
    /**
     * Total minutes used on all runner machines.
     */
    total?: number;
    /**
     * Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;
    /**
     * Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;
    /**
     * Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;
    /**
     * Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;
    /**
     * Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;
    /**
     * Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;
    /**
     * Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;
    /**
     * Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;
    /**
     * Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;
    /**
     * Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;
  };
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
};

/**
 * Repository actions caches
 */
export type ActionsCacheList = {
  /**
   * Array of caches
   */
  actions_caches: {
    /**
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    created_at?: string;
    /**
     * @example 2
     */
    id?: number;
    /**
     * @example Linux-node-958aff96db2d75d67787d1e634ae70b659de937b
     */
    key?: string;
    /**
     * @example "2019-01-24T22:45:36.000Z"
     * @format date-time
     */
    last_accessed_at?: string;
    /**
     * @example refs/heads/main
     */
    ref?: string;
    /**
     * @example 1024
     */
    size_in_bytes?: number;
    /**
     * @example 73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0
     */
    version?: string;
  }[];
  /**
   * Total number of caches
   *
   * @example 2
   */
  total_count: number;
};

/**
 * GitHub Actions Cache Usage by repository.
 */
export type ActionsCacheUsageByRepository = {
  /**
   * The number of active caches in the repository.
   *
   * @example 3
   */
  active_caches_count: number;
  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   *
   * @example 2322142
   */
  active_caches_size_in_bytes: number;
  /**
   * The repository owner and name for the cache usage being shown.
   *
   * @example octo-org/Hello-World
   */
  full_name: string;
};

export type ActionsCacheUsageOrgEnterprise = {
  /**
   * The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;
  /**
   * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};

/**
 * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
export type ActionsCanApprovePullRequestReviews = boolean;

/**
 * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
export type ActionsDefaultWorkflowPermissions = "read" | "write";

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;

export type ActionsGetDefaultWorkflowPermissions = {
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
};

export type ActionsOrganizationPermissions = {
  allowed_actions?: AllowedActions;
  enabled_repositories: EnabledRepositories;
  selected_actions_url?: SelectedActionsUrl;
  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  /**
   * @example "2011-01-26T19:01:12.000Z"
   */
  created_at?: string;
  /**
   * @example 2
   */
  id?: number;
  /**
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /**
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
  /**
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;
  /**
   * @example https://api.github.com/user/keys/2
   */
  url?: string;
};

export type ActionsRepositoryPermissions = {
  allowed_actions?: AllowedActions;
  enabled: ActionsEnabled;
  selected_actions_url?: SelectedActionsUrl;
};

/**
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /**
   * @format date-time
   */
  updated_at: string;
};

export type ActionsSetDefaultWorkflowPermissions = {
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
};

export type ActionsVariable = {
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @example "2019-01-24T22:45:36.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the variable.
   *
   * @example USERNAME
   */
  name: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @example "2019-01-24T22:45:36.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * The value of the variable.
   *
   * @example octocat
   */
  value: string;
};

export type ActionsWorkflowAccessToRepository = {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repos only. `organization` level access allows sharing across the organization.
   */
  access_level: "none" | "user" | "organization";
};

/**
 * Actor
 */
export type Actor = {
  /**
   * @format uri
   */
  avatar_url: string;
  display_login?: string;
  gravatar_id: string | null;
  id: number;
  login: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Added to Project Issue Event
 */
export type AddedToProjectIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format uri
     */
    url: string;
  };
  url: string;
};

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertCreatedAt = string;

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertDismissedAt = string | null;

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertFixedAt = string | null;

/**
 * The GitHub URL of the alert resource.
 *
 * @format uri
 */
export type AlertHtmlUrl = string;

/**
 * The REST API URL for fetching the list of instances for an alert.
 *
 * @format uri
 */
export type AlertInstancesUrl = string;

/**
 * The security alert number.
 */
export type AlertNumber = number;

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type AlertUpdatedAt = string;

/**
 * The REST API URL of the alert resource.
 *
 * @format uri
 */
export type AlertUrl = string;

/**
 * The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
export type AllowedActions = "all" | "local_only" | "selected";

/**
 * Api Overview
 */
export type ApiOverview = {
  /**
   * @example 13.64.0.0/16
   * @example 13.65.0.0/16
   */
  actions?: string[];
  /**
   * @example 127.0.0.1/32
   */
  api?: string[];
  /**
   * @example 192.168.7.15/32
   * @example 192.168.7.16/32
   */
  dependabot?: string[];
  /**
   * @example 127.0.0.1/32
   */
  git?: string[];
  /**
   * @example 127.0.0.1/32
   */
  hooks?: string[];
  /**
   * @example 54.158.161.132
   * @example 54.226.70.38
   */
  importer?: string[];
  /**
   * @example 13.65.0.0/16
   * @example 157.55.204.33/32
   * @example 2a01:111:f403:f90c::/62
   */
  packages?: string[];
  /**
   * @example 192.30.252.153/32
   * @example 192.30.252.154/32
   */
  pages?: string[];
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
    SHA256_RSA?: string;
  };
  /**
   * @example ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
   */
  ssh_keys?: string[];
  /**
   * @example true
   */
  verifiable_password_authentication: boolean;
  /**
   * @example 127.0.0.1/32
   */
  web?: string[];
};

/**
 * The permissions granted to the user-to-server access token.
 *
 * @example {"contents":"read","deployments":"write","issues":"read","single_file":"read"}
 */
export type AppPermissions = {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: "read" | "write";
  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: "read" | "write";
  /**
   * The level of permission to grant the access token for checks on code.
   */
  checks?: "read" | "write";
  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: "read" | "write";
  /**
   * The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: "read" | "write";
  /**
   * The level of permission to grant the access token for managing repository environments.
   */
  environments?: "read" | "write";
  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: "read" | "write";
  /**
   * The level of permission to grant the access token for organization teams and members.
   */
  members?: "read" | "write";
  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: "read" | "write";
  /**
   * The level of permission to grant the access token to view and manage announcement banners for an organization.
   */
  organization_announcement_banners?: "read" | "write";
  /**
   * The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
   */
  organization_custom_roles?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: "read" | "write";
  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: "read" | "write";
  /**
   * The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: "read";
  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available).
   */
  organization_projects?: "read" | "write" | "admin";
  /**
   * The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: "read" | "write";
  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: "read" | "write";
  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: "read" | "write";
  /**
   * The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: "read" | "write";
  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: "read" | "write";
  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: "read" | "write";
  /**
   * The level of permission to grant the access token to view and manage announcement banners for a repository.
   */
  repository_announcement_banners?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: "read" | "write" | "admin";
  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: "read" | "write";
  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage just a single file.
   */
  single_file?: "read" | "write";
  /**
   * The level of permission to grant the access token for commit statuses.
   */
  statuses?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: "read" | "write";
  /**
   * The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: "read" | "write";
  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: "write";
};

/**
 * An artifact
 */
export type Artifact = {
  /**
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
   */
  archive_download_url: string;
  /**
   * @format date-time
   */
  created_at: string | null;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  /**
   * @format date-time
   */
  expires_at: string | null;
  /**
   * @example 5
   */
  id: number;
  /**
   * The name of the artifact.
   *
   * @example AdventureWorks.Framework
   */
  name: string;
  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  /**
   * The size in bytes of the artifact.
   *
   * @example 12345
   */
  size_in_bytes: number;
  /**
   * @format date-time
   */
  updated_at: string | null;
  /**
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5
   */
  url: string;
  workflow_run?: {
    /**
     * @example main
     */
    head_branch?: string;
    /**
     * @example 42
     */
    head_repository_id?: number;
    /**
     * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
     */
    head_sha?: string;
    /**
     * @example 10
     */
    id?: number;
    /**
     * @example 42
     */
    repository_id?: number;
  } | null;
};

/**
 * Assigned Issue Event
 */
export type AssignedIssueEvent = {
  actor: SimpleUser;
  assignee: SimpleUser;
  assigner: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: Integration;
  url: string;
};

/**
 * Authentication Token
 */
export type AuthenticationToken = {
  /**
   * The time this token expires
   *
   * @example "2016-07-11T22:14:10.000Z"
   * @format date-time
   */
  expires_at: string;
  /**
   * @example {"deployments":"write","issues":"read"}
   */
  permissions?: Record<string, any>;
  /**
   * The repositories this token has access to
   */
  repositories?: Repository[];
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: "all" | "selected";
  /**
   * @example config.yaml
   */
  single_file?: string | null;
  /**
   * The token used for authentication
   *
   * @example v1.1f699f1069f60xxx
   */
  token: string;
};

/**
 * How the author is associated with the repository.
 *
 * @example OWNER
 */
export type AuthorAssociation =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER";

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  app: {
    client_id: string;
    name: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @format date-time
   */
  expires_at: string | null;
  fingerprint: string | null;
  hashed_token: string | null;
  id: number;
  installation?: NullableScopedInstallation;
  note: string | null;
  /**
   * @format uri
   */
  note_url: string | null;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
  user?: NullableSimpleUser;
};

/**
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  /**
   * Commit message for the merge commit.
   */
  commit_message: string;
  /**
   * Title for the merge commit message.
   */
  commit_title: string;
  enabled_by: SimpleUser;
  /**
   * The merge method to use.
   */
  merge_method: "merge" | "squash" | "rebase";
} | null;

/**
 * An autolink reference.
 */
export type Autolink = {
  /**
   * @example 3
   */
  id: number;
  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   *
   * @example true
   */
  is_alphanumeric: boolean;
  /**
   * The prefix of a key that is linkified.
   *
   * @example TICKET-
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   *
   * @example https://example.com/TICKET?query=<num>
   */
  url_template: string;
};

/**
 * Base Gist
 */
export type BaseGist = {
  comments: number;
  /**
   * @format uri
   */
  comments_url: string;
  /**
   * @format uri
   */
  commits_url: string;
  /**
   * @format date-time
   */
  created_at: string;
  description: string | null;
  files: {
    [key: string]: {
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      type?: string;
    };
  };
  forks?: any[];
  /**
   * @format uri
   */
  forks_url: string;
  /**
   * @format uri
   */
  git_pull_url: string;
  /**
   * @format uri
   */
  git_push_url: string;
  history?: any[];
  /**
   * @format uri
   */
  html_url: string;
  id: string;
  node_id: string;
  owner?: SimpleUser;
  public: boolean;
  truncated?: boolean;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Basic Error
 */
export type BasicError = {
  documentation_url?: string;
  message?: string;
  status?: string;
  url?: string;
};

/**
 * Blob
 */
export type Blob = {
  content: string;
  encoding: string;
  highlighted_content?: string;
  node_id: string;
  sha: string;
  size: number | null;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Branch Protection
 */
export type BranchProtection = {
  allow_deletions?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  enabled?: boolean;
  enforce_admins?: ProtectedBranchAdminEnforced;
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
  /**
   * @example "branch/with/protection"
   */
  name?: string;
  /**
   * @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
   */
  protection_url?: string;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  required_linear_history?: {
    enabled?: boolean;
  };
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  required_signatures?: {
    /**
     * @example true
     */
    enabled: boolean;
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     * @format uri
     */
    url: string;
  };
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  restrictions?: BranchRestrictionPolicy;
  url?: string;
};

/**
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  apps: {
    created_at?: string;
    description?: string;
    events?: string[];
    external_url?: string;
    html_url?: string;
    id?: number;
    name?: string;
    node_id?: string;
    owner?: {
      avatar_url?: string;
      description?: string;
      events_url?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
       */
      followers_url?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
       */
      following_url?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
       */
      gists_url?: string;
      /**
       * @example ""
       */
      gravatar_id?: string;
      hooks_url?: string;
      /**
       * @example "https://github.com/testorg-ea8ec76d71c3af4b"
       */
      html_url?: string;
      id?: number;
      issues_url?: string;
      login?: string;
      members_url?: string;
      node_id?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
       */
      organizations_url?: string;
      public_members_url?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
       */
      received_events_url?: string;
      repos_url?: string;
      /**
       * @example false
       */
      site_admin?: boolean;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
       */
      starred_url?: string;
      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
       */
      subscriptions_url?: string;
      /**
       * @example "Organization"
       */
      type?: string;
      url?: string;
    };
    permissions?: {
      contents?: string;
      issues?: string;
      metadata?: string;
      single_file?: string;
    };
    slug?: string;
    updated_at?: string;
  }[];
  /**
   * @format uri
   */
  apps_url: string;
  teams: {
    description?: string | null;
    html_url?: string;
    id?: number;
    members_url?: string;
    name?: string;
    node_id?: string;
    parent?: string | null;
    permission?: string;
    privacy?: string;
    repositories_url?: string;
    slug?: string;
    url?: string;
  }[];
  /**
   * @format uri
   */
  teams_url: string;
  /**
   * @format uri
   */
  url: string;
  users: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  }[];
  /**
   * @format uri
   */
  users_url: string;
};

/**
 * Branch Short
 */
export type BranchShort = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
};

/**
 * Branch With Protection
 */
export type BranchWithProtection = {
  _links: {
    html: string;
    /**
     * @format uri
     */
    self: string;
  };
  commit: Commit;
  name: string;
  /**
   * @example "mas*"
   */
  pattern?: string;
  protected: boolean;
  protection: BranchProtection;
  /**
   * @format uri
   */
  protection_url: string;
  /**
   * @example 1
   */
  required_approving_review_count?: number;
};

/**
 * Check Annotation
 */
export type CheckAnnotation = {
  /**
   * @example warning
   */
  annotation_level: string | null;
  blob_href: string;
  /**
   * @example 10
   */
  end_column: number | null;
  /**
   * @example 2
   */
  end_line: number;
  /**
   * @example Check your spelling for 'banaas'.
   */
  message: string | null;
  /**
   * @example README.md
   */
  path: string;
  /**
   * @example Do you mean 'bananas' or 'banana'?
   */
  raw_details: string | null;
  /**
   * @example 5
   */
  start_column: number | null;
  /**
   * @example 2
   */
  start_line: number;
  /**
   * @example Spell Checker
   */
  title: string | null;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  app: NullableIntegration;
  check_suite: {
    id: number;
  } | null;
  /**
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /**
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;
  deployment?: DeploymentSimple;
  /**
   * @example https://example.com
   */
  details_url: string | null;
  /**
   * @example 42
   */
  external_id: string | null;
  /**
   * The SHA of the commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /**
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /**
   * The id of the check.
   *
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   *
   * @example test-coverage
   */
  name: string;
  /**
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  output: {
    annotations_count: number;
    /**
     * @format uri
     */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  started_at: string | null;
  /**
   * The phase of the lifecycle that the check is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /**
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  url: string;
};

/**
 * A check performed on the code of a given code change
 */
export type CheckRunWithSimpleCheckSuite = {
  app: NullableIntegration;
  check_suite: SimpleCheckSuite;
  /**
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /**
   * @example neutral
   */
  conclusion:
    | "waiting"
    | "pending"
    | "startup_failure"
    | "stale"
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;
  deployment?: DeploymentSimple;
  /**
   * @example https://example.com
   */
  details_url: string;
  /**
   * @example 42
   */
  external_id: string;
  /**
   * The SHA of the commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /**
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string;
  /**
   * The id of the check.
   *
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   *
   * @example test-coverage
   */
  name: string;
  /**
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  output: {
    annotations_count: number;
    /**
     * @format uri
     */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @example "2018-05-04T01:14:52.000Z"
   * @format date-time
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed" | "pending";
  /**
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  url: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  /**
   * @example d6fde92930d4715a2b49857d24b940956b26d2d3
   */
  after: string | null;
  app: NullableIntegration;
  /**
   * @example 146e867f55c26428e5f9fade55a9bbf5e95a7912
   */
  before: string | null;
  check_runs_url: string;
  /**
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "startup_failure"
    | "stale"
    | any
    | null;
  /**
   * @format date-time
   */
  created_at: string | null;
  /**
   * @example master
   */
  head_branch: string | null;
  head_commit: SimpleCommit;
  /**
   * The SHA of the head commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /**
   * @example 5
   */
  id: number;
  latest_check_runs_count: number;
  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  repository: MinimalRepository;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
  /**
   * @example completed
   */
  status: "queued" | "in_progress" | "completed" | null;
  /**
   * @format date-time
   */
  updated_at: string | null;
  /**
   * @example https://api.github.com/repos/github/hello-world/check-suites/5
   */
  url: string | null;
};

/**
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: MinimalRepository;
};

/**
 * Clone Traffic
 */
export type CloneTraffic = {
  clones: Traffic[];
  /**
   * @example 173
   */
  count: number;
  /**
   * @example 128
   */
  uniques: number;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];

/**
 * Code Of Conduct
 */
export type CodeOfConduct = {
  /**
     * @example # Contributor Covenant Code of Conduct
    
    ## Our Pledge
    
    In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
    
    ## Our Standards
    
    Examples of behavior that contributes to creating a positive environment include:
    
    * Using welcoming and inclusive language
    * Being respectful of differing viewpoints and experiences
    * Gracefully accepting constructive criticism
    * Focusing on what is best for the community
    * Showing empathy towards other community members
    
    Examples of unacceptable behavior by participants include:
    
    * The use of sexualized language or imagery and unwelcome sexual attention or advances
    * Trolling, insulting/derogatory comments, and personal or political attacks
    * Public or private harassment
    * Publishing others' private information, such as a physical or electronic address, without explicit permission
    * Other conduct which could reasonably be considered inappropriate in a professional setting
    
    ## Our Responsibilities
    
    Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
                      to any instances of unacceptable behavior.
    
    Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
    
    ## Scope
    
    This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
                      posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
    
    ## Enforcement
    
    Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
    
    Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
    
    ## Attribution
    
    This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
    
    [homepage]: http://contributor-covenant.org
    [version]: http://contributor-covenant.org/version/1/4/
     */
  body?: string;
  /**
   * @format uri
   */
  html_url: string | null;
  /**
   * @example contributor_covenant
   */
  key: string;
  /**
   * @example Contributor Covenant
   */
  name: string;
  /**
   * @example https://api.github.com/codes_of_conduct/contributor_covenant
   * @format uri
   */
  url: string;
};

/**
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  /**
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   * @format uri
   */
  html_url: string | null;
  /**
   * @example citizen_code_of_conduct
   */
  key: string;
  /**
   * @example Citizen Code of Conduct
   */
  name: string;
  /**
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   * @format uri
   */
  url: string;
};

export type CodeScanningAlert = {
  created_at: AlertCreatedAt;
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  dismissed_reason: CodeScanningAlertDismissedReason;
  fixed_at?: AlertFixedAt;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRule;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification =
  | "source"
  | "generated"
  | "test"
  | "library"
  | null;

/**
 * The dismissal comment associated with the dismissal of the alert.
 *
 * @maxLength 280
 */
export type CodeScanningAlertDismissedComment = string | null;

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
export type CodeScanningAlertDismissedReason =
  | any
  | "false positive"
  | "won't fix"
  | "used in tests"
  | null;

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;

export type CodeScanningAlertInstance = {
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  category?: CodeScanningAnalysisCategory;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
  commit_sha?: string;
  environment?: CodeScanningAlertEnvironment;
  html_url?: string;
  location?: CodeScanningAlertLocation;
  message?: {
    text?: string;
  };
  ref?: CodeScanningRef;
  state?: CodeScanningAlertState;
};

export type CodeScanningAlertItems = {
  created_at: AlertCreatedAt;
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  dismissed_reason: CodeScanningAlertDismissedReason;
  fixed_at?: AlertFixedAt;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  rule: CodeScanningAlertRuleSummary;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
};

/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  end_column?: number;
  end_line?: number;
  path?: string;
  start_column?: number;
  start_line?: number;
};

export type CodeScanningAlertRule = {
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string;
  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null;
  /**
   * A link to the documentation for the rule used to detect the alert.
   */
  help_uri?: string | null;
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * The security severity of the alert.
   */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;
  /**
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error" | null;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: string[] | null;
};

export type CodeScanningAlertRuleSummary = {
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error" | null;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: string[] | null;
};

/**
 * Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
export type CodeScanningAlertSetState = "open" | "dismissed";

/**
 * Severity of a code scanning alert.
 */
export type CodeScanningAlertSeverity =
  | "critical"
  | "high"
  | "medium"
  | "low"
  | "warning"
  | "note"
  | "error";

/**
 * State of a code scanning alert.
 */
export type CodeScanningAlertState = "open" | "closed" | "dismissed" | "fixed";

export type CodeScanningAnalysis = {
  analysis_key: CodeScanningAnalysisAnalysisKey;
  category?: CodeScanningAnalysisCategory;
  commit_sha: CodeScanningAnalysisCommitSha;
  created_at: CodeScanningAnalysisCreatedAt;
  deletable: boolean;
  environment: CodeScanningAnalysisEnvironment;
  /**
   * @example error reading field xyz
   */
  error: string;
  /**
   * Unique identifier for this analysis.
   */
  id: number;
  ref: CodeScanningRef;
  /**
   * The total number of results in the analysis.
   */
  results_count: number;
  /**
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  url: CodeScanningAnalysisUrl;
  /**
   * Warning generated when processing the analysis
   *
   * @example 123 results were ignored
   */
  warning: string;
};

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;

/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
export type CodeScanningAnalysisCategory = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 *
 * @maxLength 40
 * @minLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   *
   * @format uri
   */
  confirm_delete_url: string | null;
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   *
   * @format uri
   */
  next_analysis_url: string | null;
};

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
 */
export type CodeScanningAnalysisSarifFile = string;

/**
 * An identifier for the upload.
 *
 * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
 */
export type CodeScanningAnalysisSarifId = string;

export type CodeScanningAnalysisTool = {
  guid?: CodeScanningAnalysisToolGuid;
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
};

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;

/**
 * The REST API URL of the analysis resource.
 *
 * @format uri
 */
export type CodeScanningAnalysisUrl = string;

/**
 * A CodeQL database.
 */
export type CodeScanningCodeqlDatabase = {
  /**
   * The MIME type of the CodeQL database file.
   */
  content_type: string;
  /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  created_at: string;
  /**
   * The ID of the CodeQL database.
   */
  id: number;
  /**
   * The language of the CodeQL database.
   */
  language: string;
  /**
   * The name of the CodeQL database.
   */
  name: string;
  /**
   * The size of the CodeQL database file in bytes.
   */
  size: number;
  /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  updated_at: string;
  uploader: SimpleUser;
  /**
   * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   *
   * @format uri
   */
  url: string;
};

export type CodeScanningOrganizationAlertItems = {
  created_at: AlertCreatedAt;
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  dismissed_reason: CodeScanningAlertDismissedReason;
  fixed_at?: AlertFixedAt;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  most_recent_instance: CodeScanningAlertInstance;
  number: AlertNumber;
  repository: SimpleRepository;
  rule: CodeScanningAlertRule;
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
};

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 */
export type CodeScanningRef = string;

export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;
  /**
   * The REST API URL for checking the status of the upload.
   *
   * @format uri
   */
  url?: string;
};

export type CodeScanningSarifsStatus = {
  /**
   * The REST API URL for getting the analyses associated with the upload.
   *
   * @format uri
   */
  analyses_url?: string | null;
  /**
   * Any errors that ocurred during processing of the delivery.
   */
  errors?: string[] | null;
  /**
   * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: "pending" | "complete" | "failed";
};

/**
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  file_size?: number;
  /**
   * @format uri
   */
  git_url: string;
  /**
   * @format uri
   */
  html_url: string;
  language?: string | null;
  /**
   * @format date-time
   */
  last_modified_at?: string;
  /**
   * @example 73..77
   * @example 77..78
   */
  line_numbers?: string[];
  name: string;
  path: string;
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /**
   * @format uri
   */
  url: string;
};

/**
 * A list of errors found in a repo's CODEOWNERS file
 */
export type CodeownersErrors = {
  errors: {
    /**
     * The column number where this errors occurs.
     *
     * @example 3
     */
    column: number;
    /**
     * The type of error.
     *
     * @example Invalid owner
     */
    kind: string;
    /**
     * The line number where this errors occurs.
     *
     * @example 7
     */
    line: number;
    /**
         * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
         *
         * @example Invalid owner on line 7:
        
          * user
            ^
         */
    message: string;
    /**
     * The path of the file where the error occured.
     *
     * @example .github/CODEOWNERS
     */
    path: string;
    /**
     * The contents of the line where the error occurs.
     *
     * @example * user
     */
    source?: string;
    /**
     * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     *
     * @example The pattern `/` will never match anything, did you mean `*` instead?
     */
    suggestion?: string | null;
  }[];
};

/**
 * A codespace.
 */
export type Codespace = {
  billable_owner: SimpleUser;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   *
   * @example .devcontainer/example/devcontainer.json
   */
  devcontainer_path?: string | null;
  /**
   * Display name for this codespace.
   *
   * @example bookish space pancake
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   *
   * @example 26a7c758-7299-4a73-b978-5a92a7ae98a0
   */
  environment_id: string | null;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     *
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     *
     * @example 0
     */
    behind?: number;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     *
     * @example main
     */
    ref?: string;
  };
  /**
   * @example 1
   */
  id: number;
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   *
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   *
   * @example you've used 100% of your spending limit for Codespaces
   */
  last_known_stop_notice?: string | null;
  /**
   * Last known time this codespace was started.
   *
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  last_used_at: string;
  /**
   * The Azure region where this codespace is located.
   *
   * @example WestUs2
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  machine: NullableCodespaceMachine;
  /**
   * API URL to access available alternate machine types for this codespace.
   *
   * @format uri
   */
  machines_url: string;
  /**
   * Automatically generated name of this codespace.
   *
   * @example monalisa-octocat-hello-world-g4wpq6h95q
   */
  name: string;
  owner: SimpleUser;
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   *
   * @example false
   */
  prebuild: boolean | null;
  /**
   * API URL to publish this codespace to a new repository.
   *
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   *
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  repository: MinimalRepository;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   *
   * @example "2011-01-26T20:01:12.000Z"
   * @format date-time
   */
  retention_expires_at?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   *
   * @example 60
   */
  retention_period_minutes?: number | null;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: string[] | null;
  };
  /**
   * API URL to start this codespace.
   *
   * @format uri
   */
  start_url: string;
  /**
   * State of this codespace.
   *
   * @example Available
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL to stop this codespace.
   *
   * @format uri
   */
  stop_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * API URL for this codespace.
   *
   * @format uri
   */
  url: string;
  /**
   * URL to access this codespace on the web.
   *
   * @format uri
   */
  web_url: string;
};

/**
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export type CodespaceExportDetails = {
  /**
   * Name of the exported branch
   *
   * @example codespace-monalisa-octocat-hello-world-g4wpq6h95q
   */
  branch?: string | null;
  /**
   * Completion time of the last export operation
   *
   * @example "2021-01-01T19:01:12.000Z"
   * @format date-time
   */
  completed_at?: string | null;
  /**
   * Url for fetching export details
   *
   * @example https://api.github.com/user/codespaces/:name/exports/latest
   */
  export_url?: string;
  /**
   * Web url for the exported branch
   *
   * @example https://github.com/octocat/hello-world/tree/:branch
   */
  html_url?: string | null;
  /**
   * Id for the export details
   *
   * @example latest
   */
  id?: string;
  /**
   * Git commit SHA of the exported branch
   *
   * @example fd95a81ca01e48ede9f39c799ecbcef817b8a3b2
   */
  sha?: string | null;
  /**
   * State of the latest export
   *
   * @example succeeded | failed | in_progress
   */
  state?: string | null;
};

/**
 * A description of the machine powering a codespace.
 */
export type CodespaceMachine = {
  /**
   * How many cores are available to the codespace.
   *
   * @example 4
   */
  cpus: number;
  /**
   * The display name of the machine includes cores, memory, and storage.
   *
   * @example 4 cores, 8 GB RAM, 64 GB storage
   */
  display_name: string;
  /**
   * How much memory is available to the codespace.
   *
   * @example 8589934592
   */
  memory_in_bytes: number;
  /**
   * The name of the machine.
   *
   * @example standardLinux
   */
  name: string;
  /**
   * The operating system of the machine.
   *
   * @example linux
   */
  operating_system: string;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   *
   * @example ready
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
  /**
   * How much storage is available to the codespace.
   *
   * @example 68719476736
   */
  storage_in_bytes: number;
};

/**
 * A codespace.
 */
export type CodespaceWithFullRepository = {
  billable_owner: SimpleUser;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   *
   * @example .devcontainer/example/devcontainer.json
   */
  devcontainer_path?: string | null;
  /**
   * Display name for this codespace.
   *
   * @example bookish space pancake
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   *
   * @example 26a7c758-7299-4a73-b978-5a92a7ae98a0
   */
  environment_id: string | null;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     *
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     *
     * @example 0
     */
    behind?: number;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     *
     * @example main
     */
    ref?: string;
  };
  /**
   * @example 1
   */
  id: number;
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   *
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * Last known time this codespace was started.
   *
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  last_used_at: string;
  /**
   * The Azure region where this codespace is located.
   *
   * @example WestUs2
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  machine: NullableCodespaceMachine;
  /**
   * API URL to access available alternate machine types for this codespace.
   *
   * @format uri
   */
  machines_url: string;
  /**
   * Automatically generated name of this codespace.
   *
   * @example monalisa-octocat-hello-world-g4wpq6h95q
   */
  name: string;
  owner: SimpleUser;
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   *
   * @example false
   */
  prebuild: boolean | null;
  /**
   * API URL to publish this codespace to a new repository.
   *
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   *
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  repository: FullRepository;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   *
   * @example "2011-01-26T20:01:12.000Z"
   * @format date-time
   */
  retention_expires_at?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   *
   * @example 60
   */
  retention_period_minutes?: number | null;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: string[] | null;
  };
  /**
   * API URL to start this codespace.
   *
   * @format uri
   */
  start_url: string;
  /**
   * State of this codespace.
   *
   * @example Available
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL to stop this codespace.
   *
   * @format uri
   */
  stop_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * API URL for this codespace.
   *
   * @format uri
   */
  url: string;
  /**
   * URL to access this codespace on the web.
   *
   * @format uri
   */
  web_url: string;
};

/**
 * Secrets for a GitHub Codespace.
 */
export type CodespacesOrgSecret = {
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret
   *
   * @example SECRET_NAME
   */
  name: string;
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   *
   * @example https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  updated_at: string;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: "all" | "private" | "selected";
};

/**
 * The public key used for setting Codespaces secrets.
 */
export type CodespacesPublicKey = {
  /**
   * @example "2011-01-26T19:01:12.000Z"
   */
  created_at?: string;
  /**
   * @example 2
   */
  id?: number;
  /**
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /**
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
  /**
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;
  /**
   * @example https://api.github.com/user/keys/2
   */
  url?: string;
};

/**
 * Secrets for a GitHub Codespace.
 */
export type CodespacesSecret = {
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret
   *
   * @example SECRET_NAME
   */
  name: string;
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   *
   * @example https://api.github.com/user/secrets/SECRET_NAME/repositories
   * @format uri
   */
  selected_repositories_url: string;
  /**
   * The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @format date-time
   */
  updated_at: string;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: "all" | "private" | "selected";
};

/**
 * The public key used for setting user Codespaces' Secrets.
 */
export type CodespacesUserPublicKey = {
  /**
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /**
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
};

/**
 * Collaborator
 */
export type Collaborator = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  email?: string | null;
  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /**
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example octocat
   */
  login: string;
  name?: string | null;
  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  /**
   * @example admin
   */
  role_name: string;
  site_admin: boolean;
  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /**
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @example User
   */
  type: string;
  /**
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

export type CombinedBillingUsage = {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};

/**
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  /**
   * @format uri
   */
  commit_url: string;
  repository: MinimalRepository;
  sha: string;
  state: string;
  statuses: SimpleCommitStatus[];
  total_count: number;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Commit
 */
export type Commit = {
  author: NullableSimpleUser;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
   * @format uri
   */
  comments_url: string;
  commit: {
    author: NullableGitUser;
    /**
     * @example 0
     */
    comment_count: number;
    committer: NullableGitUser;
    /**
     * @example Fix all the bugs
     */
    message: string;
    tree: {
      /**
       * @example 827efc6d56897b048c772eb4087f854f46256132
       */
      sha: string;
      /**
       * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
       * @format uri
       */
      url: string;
    };
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  committer: NullableSimpleUser;
  files?: DiffEntry[];
  /**
   * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  html_url: string;
  /**
   * @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
   */
  node_id: string;
  parents: {
    /**
     * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    html_url?: string;
    /**
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
     * @format uri
     */
    url: string;
  }[];
  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  sha: string;
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  url: string;
};

/**
 * Commit Activity
 */
export type CommitActivity = {
  /**
   * @example 0
   * @example 3
   * @example 26
   * @example 20
   * @example 39
   * @example 1
   * @example 0
   */
  days: number[];
  /**
   * @example 89
   */
  total: number;
  /**
   * @example 1336280400
   */
  week: number;
};

/**
 * Commit Comment
 */
export type CommitComment = {
  author_association: AuthorAssociation;
  body: string;
  commit_id: string;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  line: number | null;
  node_id: string;
  path: string | null;
  position: number | null;
  reactions?: ReactionRollup;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Commit Comparison
 */
export type CommitComparison = {
  /**
   * @example 4
   */
  ahead_by: number;
  base_commit: Commit;
  /**
   * @example 5
   */
  behind_by: number;
  commits: Commit[];
  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
   * @format uri
   */
  diff_url: string;
  files?: DiffEntry[];
  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  html_url: string;
  merge_base_commit: Commit;
  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
   * @format uri
   */
  patch_url: string;
  /**
   * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
   * @format uri
   */
  permalink_url: string;
  /**
   * @example ahead
   */
  status: "diverged" | "ahead" | "behind" | "identical";
  /**
   * @example 6
   */
  total_commits: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
   * @format uri
   */
  url: string;
};

/**
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  author: NullableSimpleUser;
  /**
   * @format uri
   */
  comments_url: string;
  commit: {
    author: {
      /**
       * @format date-time
       */
      date: string;
      email: string;
      name: string;
    };
    comment_count: number;
    committer: NullableGitUser;
    message: string;
    tree: {
      sha: string;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    url: string;
    verification?: Verification;
  };
  committer: NullableGitUser;
  /**
   * @format uri
   */
  html_url: string;
  node_id: string;
  parents: {
    html_url?: string;
    sha?: string;
    url?: string;
  }[];
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Community Profile
 */
export type CommunityProfile = {
  /**
   * @example true
   */
  content_reports_enabled?: boolean;
  /**
   * @example My first repository on GitHub!
   */
  description: string | null;
  /**
   * @example example.com
   */
  documentation: string | null;
  files: {
    code_of_conduct: NullableCodeOfConductSimple;
    code_of_conduct_file: NullableCommunityHealthFile;
    contributing: NullableCommunityHealthFile;
    issue_template: NullableCommunityHealthFile;
    license: NullableLicenseSimple;
    pull_request_template: NullableCommunityHealthFile;
    readme: NullableCommunityHealthFile;
  };
  /**
   * @example 100
   */
  health_percentage: number;
  /**
   * @example "2017-02-28T19:09:29.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * A list of directory items
 */
export type ContentDirectory = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  content?: string;
  /**
   * @format uri
   */
  download_url: string | null;
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: "dir" | "file" | "submodule" | "symlink";
  /**
   * @format uri
   */
  url: string;
}[];

/**
 * Content File
 */
export type ContentFile = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  content: string;
  /**
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /**
   * @example "git://example.com/defunkt/dotjs.git"
   */
  submodule_git_url?: string;
  /**
   * @example "actual/actual.md"
   */
  target?: string;
  type: "file";
  /**
   * @format uri
   */
  url: string;
};

/**
 * An object describing a submodule
 */
export type ContentSubmodule = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  /**
   * @format uri
   */
  download_url: string | null;
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /**
   * @format uri
   */
  submodule_git_url: string;
  type: "submodule";
  /**
   * @format uri
   */
  url: string;
};

/**
 * An object describing a symlink
 */
export type ContentSymlink = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  /**
   * @format uri
   */
  download_url: string | null;
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  target: string;
  type: "symlink";
  /**
   * @format uri
   */
  url: string;
};

/**
 * Content Traffic
 */
export type ContentTraffic = {
  /**
   * @example 3542
   */
  count: number;
  /**
   * @example /github/hubot
   */
  path: string;
  /**
   * @example github/hubot: A customizable life embetterment robot.
   */
  title: string;
  /**
   * @example 2225
   */
  uniques: number;
};

/**
 * Content Tree
 */
export type ContentTree = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  /**
   * @format uri
   */
  download_url: string | null;
  entries?: {
    _links: {
      /**
       * @format uri
       */
      git: string | null;
      /**
       * @format uri
       */
      html: string | null;
      /**
       * @format uri
       */
      self: string;
    };
    content?: string;
    /**
     * @format uri
     */
    download_url: string | null;
    /**
     * @format uri
     */
    git_url: string | null;
    /**
     * @format uri
     */
    html_url: string | null;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    /**
     * @format uri
     */
    url: string;
  }[];
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Contributor
 */
export type Contributor = {
  /**
   * @format uri
   */
  avatar_url?: string;
  contributions: number;
  email?: string;
  events_url?: string;
  /**
   * @format uri
   */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string | null;
  /**
   * @format uri
   */
  html_url?: string;
  id?: number;
  login?: string;
  name?: string;
  node_id?: string;
  /**
   * @format uri
   */
  organizations_url?: string;
  /**
   * @format uri
   */
  received_events_url?: string;
  /**
   * @format uri
   */
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  /**
   * @format uri
   */
  subscriptions_url?: string;
  type: string;
  /**
   * @format uri
   */
  url?: string;
};

/**
 * Contributor Activity
 */
export type ContributorActivity = {
  author: NullableSimpleUser;
  /**
   * @example 135
   */
  total: number;
  /**
   * @example {"a":6898,"c":10,"d":77,"w":"1367712000"}
   */
  weeks: {
    a?: number;
    c?: number;
    d?: number;
    w?: number;
  }[];
};

/**
 * Converted Note to Issue Issue Event
 */
export type ConvertedNoteToIssueIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: Integration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format uri
     */
    url: string;
  };
  url: string;
};

/**
 * Demilestoned Issue Event
 */
export type DemilestonedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  milestone: {
    title: string;
  };
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * A Dependabot alert.
 */
export type DependabotAlert = {
  created_at: AlertCreatedAt;
  /**
   * Details for the vulnerable dependency.
   */
  dependency: {
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    manifest_path?: string;
    package?: DependabotAlertPackage;
    /**
     * The execution scope of the vulnerable dependency.
     */
    scope?: "development" | "runtime" | null;
  };
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  /**
   * An optional comment associated with the alert's dismissal.
   *
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null;
  fixed_at: AlertFixedAt;
  html_url: AlertHtmlUrl;
  number: AlertNumber;
  security_advisory: DependabotAlertSecurityAdvisory;
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /**
   * The state of the Dependabot alert.
   */
  state: "dismissed" | "fixed" | "open";
  updated_at: AlertUpdatedAt;
  url: AlertUrl;
};

/**
 * Details for the vulnerable package.
 */
export type DependabotAlertPackage = {
  /**
   * The package's language or package management ecosystem.
   */
  ecosystem: string;
  /**
   * The unique package name within its ecosystem.
   */
  name: string;
};

/**
 * Details for the GitHub Security Advisory.
 */
export type DependabotAlertSecurityAdvisory = {
  /**
   * The unique CVE ID assigned to the advisory.
   */
  cve_id: string | null;
  /**
   * Details for the advisory pertaining to the Common Vulnerability Scoring System.
   */
  cvss: {
    /**
     * The overall CVSS score of the advisory.
     *
     * @maximum 10
     * @minimum 0
     */
    score: number;
    /**
     * The full CVSS vector string for the advisory.
     */
    vector_string: string | null;
  };
  /**
   * Details for the advisory pertaining to Common Weakness Enumeration.
   */
  cwes: {
    /**
     * The unique CWE ID.
     */
    cwe_id: string;
    /**
     * The short, plain text name of the CWE.
     */
    name: string;
  }[];
  /**
   * A long-form Markdown-supported description of the advisory.
   */
  description: string;
  /**
   * The unique GitHub Security Advisory ID assigned to the advisory.
   */
  ghsa_id: string;
  /**
   * Values that identify this advisory among security information sources.
   */
  identifiers: {
    /**
     * The type of advisory identifier.
     */
    type: "CVE" | "GHSA";
    /**
     * The value of the advisory identifer.
     */
    value: string;
  }[];
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  published_at: string;
  /**
   * Links to additional advisory information.
   */
  references: {
    /**
     * The URL of the reference.
     *
     * @format uri
     */
    url: string;
  }[];
  /**
   * The severity of the advisory.
   */
  severity: "low" | "medium" | "high" | "critical";
  /**
   * A short, plain text summary of the advisory.
   *
   * @maxLength 1024
   */
  summary: string;
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  updated_at: string;
  /**
   * Vulnerable version range information for the advisory.
   */
  vulnerabilities: DependabotAlertSecurityVulnerability[];
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  withdrawn_at: string | null;
};

/**
 * Details pertaining to one vulnerable version range for the advisory.
 */
export type DependabotAlertSecurityVulnerability = {
  /**
   * Details pertaining to the package version that patches this vulnerability.
   */
  first_patched_version: {
    /**
     * The package version that patches this vulnerability.
     */
    identifier: string;
  } | null;
  package: DependabotAlertPackage;
  /**
   * The severity of the vulnerability.
   */
  severity: "low" | "medium" | "high" | "critical";
  /**
   * Conditions that identify vulnerable versions of this vulnerability's package.
   */
  vulnerable_version_range: string;
};

/**
 * A Dependabot alert.
 */
export type DependabotAlertWithRepository = {
  created_at: AlertCreatedAt;
  /**
   * Details for the vulnerable dependency.
   */
  dependency: {
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    manifest_path?: string;
    package?: DependabotAlertPackage;
    /**
     * The execution scope of the vulnerable dependency.
     */
    scope?: "development" | "runtime" | null;
  };
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  /**
   * An optional comment associated with the alert's dismissal.
   *
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null;
  fixed_at: AlertFixedAt;
  html_url: AlertHtmlUrl;
  number: AlertNumber;
  repository: SimpleRepository;
  security_advisory: DependabotAlertSecurityAdvisory;
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /**
   * The state of the Dependabot alert.
   */
  state: "dismissed" | "fixed" | "open";
  updated_at: AlertUpdatedAt;
  url: AlertUrl;
};

/**
 * The public key used for setting Dependabot Secrets.
 */
export type DependabotPublicKey = {
  /**
   * The Base64 encoded public key.
   *
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
  /**
   * The identifier for the key.
   *
   * @example 1234567
   */
  key_id: string;
};

/**
 * Set secrets for Dependabot.
 */
export type DependabotSecret = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret.
   *
   * @example MY_ARTIFACTORY_PASSWORD
   */
  name: string;
  /**
   * @format date-time
   */
  updated_at: string;
};

export type Dependency = {
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   *
   * @example @actions/http-client
   */
  dependencies?: string[];
  metadata?: Metadata;
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   *
   * @example pkg:/npm/%40actions/http-client@1.0.11
   * @pattern ^pkg
   */
  package_url?: string;
  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   *
   * @example direct
   */
  relationship?: "direct" | "indirect";
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   *
   * @example runtime
   */
  scope?: "runtime" | "development";
};

/**
 * A diff of the dependencies between two commits.
 */
export type DependencyGraphDiff = {
  change_type: "added" | "removed";
  /**
   * @example npm
   */
  ecosystem: string;
  /**
   * @example MIT
   */
  license: string | null;
  /**
   * @example path/to/package-lock.json
   */
  manifest: string;
  /**
   * @example @actions/core
   */
  name: string;
  /**
   * @example pkg:/npm/%40actions/core@1.1.0
   */
  package_url: string | null;
  /**
   * Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
   */
  scope: "unknown" | "runtime" | "development";
  /**
   * @example https://github.com/github/actions
   */
  source_repository_url: string | null;
  /**
   * @example 1.0.0
   */
  version: string;
  vulnerabilities: {
    /**
     * @example GHSA-rf4j-j272-fj86
     */
    advisory_ghsa_id: string;
    /**
     * @example A summary of the advisory.
     */
    advisory_summary: string;
    /**
     * @example https://github.com/advisories/GHSA-rf4j-j272-fj86
     */
    advisory_url: string;
    /**
     * @example critical
     */
    severity: string;
  }[];
}[];

/**
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  added_by?: string | null;
  created_at: string;
  id: number;
  key: string;
  last_used?: string | null;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * @example Deploy request from hubot
   */
  description: string | null;
  /**
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /**
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /**
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /**
   * @example staging
   */
  original_environment?: string;
  payload:
    | {
        [key: string]: any;
      }
    | string;
  performed_via_github_app?: NullableIntegration;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   *
   * @example topic-branch
   */
  ref: string;
  /**
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /**
   * @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
   */
  sha: string;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /**
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * Details of a deployment branch policy.
 */
export type DeploymentBranchPolicy = {
  /**
   * The unique identifier of the branch policy.
   *
   * @example 361471
   */
  id?: number;
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * @example release/*
   */
  name?: string;
  /**
   * @example MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=
   */
  node_id?: string;
};

export type DeploymentBranchPolicyNamePattern = {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * [see original specs]
   *
   * @example release/*
   */
  name: string;
};

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
export type DeploymentBranchPolicySettings = {
  /**
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
  /**
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;
} | null;

/**
 * The type of reviewer.
 *
 * @example User
 */
export type DeploymentReviewerType = "User" | "Team";

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example Deploy request from hubot
   */
  description: string | null;
  /**
   * Name for the target deployment environment.
   *
   * @example production
   */
  environment: string;
  /**
   * Unique identifier of the deployment
   *
   * @example 42
   */
  id: number;
  /**
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;
  /**
   * @example staging
   */
  original_environment?: string;
  performed_via_github_app?: NullableIntegration;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   *
   * @example true
   */
  production_environment?: boolean;
  /**
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   * @format uri
   */
  statuses_url: string;
  /**
   * Parameter to specify a task to execute
   *
   * @example deploy
   */
  task: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   *
   * @example true
   */
  transient_environment?: boolean;
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1
   * @format uri
   */
  url: string;
};

/**
 * The status of a deployment.
 */
export type DeploymentStatus = {
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/42
   * @format uri
   */
  deployment_url: string;
  /**
   * A short description of the status.
   *
   * @default
   * @example Deployment finished successfully.
   * @maxLength 140
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   *
   * @default
   * @example production
   */
  environment?: string;
  /**
   * The URL for accessing your environment.
   *
   * @default
   * @example https://staging.example.com/
   * @format uri
   */
  environment_url?: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * The URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  log_url?: string;
  /**
   * @example MDE2OkRlcGxveW1lbnRTdGF0dXMx
   */
  node_id: string;
  performed_via_github_app?: NullableIntegration;
  /**
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /**
   * The state of the status.
   *
   * @example success
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  /**
   * Deprecated: the URL to associate with this status.
   *
   * @default
   * @example https://example.com/deployment/42/output
   * @format uri
   */
  target_url: string;
  /**
   * @example "2012-07-20T01:19:13.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
   * @format uri
   */
  url: string;
};

/**
 * Diff Entry
 */
export type DiffEntry = {
  /**
   * @example 103
   */
  additions: number;
  /**
   * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  blob_url: string;
  /**
   * @example 124
   */
  changes: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  contents_url: string;
  /**
   * @example 21
   */
  deletions: number;
  /**
   * @example file1.txt
   */
  filename: string;
  /**
   * @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test
   */
  patch?: string;
  /**
   * @example file.txt
   */
  previous_filename?: string;
  /**
   * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   * @format uri
   */
  raw_url: string;
  /**
   * @example bbcd538c8e72b8c175046e27cc8f907076331401
   */
  sha: string;
  /**
   * @example added
   */
  status:
    | "added"
    | "removed"
    | "modified"
    | "renamed"
    | "copied"
    | "changed"
    | "unchanged";
};

/**
 * A Discussion in a repository.
 */
export type Discussion = {
  active_lock_reason: string | null;
  answer_chosen_at: string | null;
  answer_chosen_by: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  answer_html_url: string | null;
  /**
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  category: {
    /**
     * @format date-time
     */
    created_at: string;
    description: string;
    emoji: string;
    id: number;
    is_answerable: boolean;
    name: string;
    node_id?: string;
    repository_id: number;
    slug: string;
    updated_at: string;
  };
  comments: number;
  /**
   * @format date-time
   */
  created_at: string;
  html_url: string;
  id: number;
  locked: boolean;
  node_id: string;
  number: number;
  reactions?: {
    ["+1"]: number;
    ["-1"]: number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /**
     * @format uri
     */
    url: string;
  };
  repository_url: string;
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
  state: "open" | "locked" | "converting" | "transferring";
  timeline_url?: string;
  title: string;
  /**
   * @format date-time
   */
  updated_at: string;
  user: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
};

/**
 * Email
 */
export type Email = {
  /**
   * @example octocat@github.com
   * @format email
   */
  email: string;
  /**
   * @example true
   */
  primary: boolean;
  /**
   * @example true
   */
  verified: boolean;
  /**
   * @example public
   */
  visibility: string | null;
};

/**
 * An object without any properties.
 */
export type EmptyObject = {};

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
export type EnabledRepositories = "all" | "none" | "selected";

/**
 * An enterprise on GitHub.
 */
export type Enterprise = {
  /**
   * @format uri
   */
  avatar_url: string;
  /**
   * @example "2019-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /**
   * A short description of the enterprise.
   */
  description?: string | null;
  /**
   * @example https://github.com/enterprises/octo-business
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the enterprise
   *
   * @example 42
   */
  id: number;
  /**
   * The name of the enterprise.
   *
   * @example Octo Business
   */
  name: string;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * The slug url identifier for the enterprise.
   *
   * @example octo-business
   */
  slug: string;
  /**
   * @example "2019-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /**
   * The enterprise's website URL.
   *
   * @format uri
   */
  website_url?: string | null;
};

/**
 * Details of a deployment environment
 */
export type Environment = {
  /**
   * The time that the environment was created, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  created_at: string;
  deployment_branch_policy?: DeploymentBranchPolicySettings;
  /**
   * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
   */
  html_url: string;
  /**
   * The id of the environment.
   *
   * @example 56780428
   */
  id: number;
  /**
   * The name of the environment.
   *
   * @example staging
   */
  name: string;
  /**
   * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
   */
  node_id: string;
  protection_rules?: (
    | {
        /**
         * @example 3515
         */
        id: number;
        /**
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /**
         * @example wait_timer
         */
        type: string;
        wait_timer?: WaitTimer;
      }
    | {
        /**
         * @example 3755
         */
        id: number;
        /**
         * @example MDQ6R2F0ZTM3NTU=
         */
        node_id: string;
        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          reviewer?: SimpleUser | Team;
          type?: DeploymentReviewerType;
        }[];
        /**
         * @example required_reviewers
         */
        type: string;
      }
    | {
        /**
         * @example 3515
         */
        id: number;
        /**
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;
        /**
         * @example branch_policy
         */
        type: string;
      }
  )[];
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/github/hello-world/environments/staging
   */
  url: string;
};

/**
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  /**
   * The comment submitted with the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /**
   * The list of environments that were approved or rejected
   */
  environments: {
    /**
     * The time that the environment was created, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    created_at?: string;
    /**
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /**
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /**
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /**
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     *
     * @example "2020-11-23T22:00:40.000Z"
     * @format date-time
     */
    updated_at?: string;
    /**
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  }[];
  /**
   * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   *
   * @example approved
   */
  state: "approved" | "rejected" | "pending";
  user: SimpleUser;
};

/**
 * Event
 */
export type Event = {
  actor: Actor;
  /**
   * @format date-time
   */
  created_at: string | null;
  id: string;
  org?: Actor;
  payload: {
    action?: string;
    comment?: IssueComment;
    issue?: Issue;
    pages?: {
      action?: string;
      html_url?: string;
      page_name?: string;
      sha?: string;
      summary?: string | null;
      title?: string;
    }[];
  };
  public: boolean;
  repo: {
    id: number;
    name: string;
    /**
     * @format uri
     */
    url: string;
  };
  type: string | null;
};

/**
 * Feed
 */
export type Feed = {
  _links: {
    current_user?: LinkWithType;
    current_user_actor?: LinkWithType;
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    current_user_public?: LinkWithType;
    repository_discussions?: LinkWithType;
    repository_discussions_category?: LinkWithType;
    security_advisories?: LinkWithType;
    timeline: LinkWithType;
    user: LinkWithType;
  };
  /**
   * @example https://github.com/octocat.private.actor?token=abc123
   */
  current_user_actor_url?: string;
  /**
   * @example https://github.com/octocat-org
   */
  current_user_organization_url?: string;
  /**
   * @example https://github.com/organizations/github/octocat.private.atom?token=abc123
   */
  current_user_organization_urls?: string[];
  /**
   * @example https://github.com/octocat
   */
  current_user_public_url?: string;
  /**
   * @example https://github.com/octocat.private?token=abc123
   */
  current_user_url?: string;
  /**
   * A feed of discussions for a given repository and category.
   *
   * @example https://github.com/{user}/{repo}/discussions/categories/{category}
   */
  repository_discussions_category_url?: string;
  /**
   * A feed of discussions for a given repository.
   *
   * @example https://github.com/{user}/{repo}/discussions
   */
  repository_discussions_url?: string;
  /**
   * @example https://github.com/security-advisories
   */
  security_advisories_url?: string;
  /**
   * @example https://github.com/timeline
   */
  timeline_url: string;
  /**
   * @example https://github.com/{user}
   */
  user_url: string;
};

/**
 * File Commit
 */
export type FileCommit = {
  commit: {
    author?: {
      date?: string;
      email?: string;
      name?: string;
    };
    committer?: {
      date?: string;
      email?: string;
      name?: string;
    };
    html_url?: string;
    message?: string;
    node_id?: string;
    parents?: {
      html_url?: string;
      sha?: string;
      url?: string;
    }[];
    sha?: string;
    tree?: {
      sha?: string;
      url?: string;
    };
    url?: string;
    verification?: {
      payload?: string | null;
      reason?: string;
      signature?: string | null;
      verified?: boolean;
    };
  };
  content: {
    _links?: {
      git?: string;
      html?: string;
      self?: string;
    };
    download_url?: string;
    git_url?: string;
    html_url?: string;
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  } | null;
};

/**
 * Full Repository
 */
export type FullRepository = {
  /**
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * @example true
   */
  allow_forking?: boolean;
  /**
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * @example true
   */
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is allowed.
   *
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  code_of_conduct?: CodeOfConductSimple;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example master
   */
  default_branch: string;
  /**
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /**
   * @example true
   */
  has_discussions: boolean;
  /**
   * @example true
   */
  has_downloads: boolean;
  /**
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * @example true
   */
  has_projects: boolean;
  /**
   * @example true
   */
  has_wiki: boolean;
  /**
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * @example 1296269
   */
  id: number;
  /**
   * @example true
   */
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license: NullableLicenseSimple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   *
   * @example PR_BODY
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   *
   * @example PR_TITLE
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /**
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /**
   * @example Hello-World
   */
  name: string;
  /**
   * @example 0
   */
  network_count: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /**
   * @example 0
   */
  open_issues_count: number;
  organization?: NullableSimpleUser;
  owner: SimpleUser;
  parent?: Repository;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  security_and_analysis?: SecurityAndAnalysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   *
   * @example 108
   */
  size: number;
  source?: Repository;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   *
   * @example PR_BODY
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   *
   * @example PR_TITLE
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  /**
   * @example 42
   */
  subscribers_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /**
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string | null;
  template_repository?: NullableRepository;
  /**
   * @example octocat
   * @example atom
   * @example electron
   * @example API
   */
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /**
   * @example false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   *
   * @example public
   */
  visibility?: string;
  watchers: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * A comment made to a gist.
 */
export type GistComment = {
  author_association: AuthorAssociation;
  /**
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
  /**
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example MDExOkdpc3RDb21tZW50MQ==
   */
  node_id: string;
  /**
   * @example "2011-04-18T23:23:56.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Gist Commit
 */
export type GistCommit = {
  change_status: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /**
   * @example "2010-04-14T02:15:15.000Z"
   * @format date-time
   */
  committed_at: string;
  /**
   * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
  /**
   * @example 57a7f021a713b1c5a6a199b54cc514735d2d462f
   */
  version: string;
};

/**
 * Gist History
 */
export type GistHistory = {
  change_status?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /**
   * @format date-time
   */
  committed_at?: string;
  /**
   * @format uri
   */
  url?: string;
  user?: NullableSimpleUser;
  version?: string;
};

/**
 * Gist Simple
 */
export type GistSimple = {
  comments?: number;
  comments_url?: string;
  commits_url?: string;
  created_at?: string;
  description?: string | null;
  files?: {
    [key: string]: {
      content?: string;
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      type?: string;
    } | null;
  };
  /**
   * Gist
   */
  fork_of?: {
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    description: string | null;
    files: {
      [key: string]: {
        filename?: string;
        language?: string;
        raw_url?: string;
        size?: number;
        type?: string;
      };
    };
    forks?: any[];
    /**
     * @format uri
     */
    forks_url: string;
    /**
     * @format uri
     */
    git_pull_url: string;
    /**
     * @format uri
     */
    git_push_url: string;
    history?: any[];
    /**
     * @format uri
     */
    html_url: string;
    id: string;
    node_id: string;
    owner?: NullableSimpleUser;
    public: boolean;
    truncated?: boolean;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: NullableSimpleUser;
  } | null;
  /**
   * @deprecated true
   */
  forks?:
    | {
        /**
         * @format date-time
         */
        created_at?: string;
        id?: string;
        /**
         * @format date-time
         */
        updated_at?: string;
        /**
         * @format uri
         */
        url?: string;
        user?: PublicUser;
      }[]
    | null;
  forks_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
  /**
   * @deprecated true
   */
  history?: GistHistory[] | null;
  html_url?: string;
  id?: string;
  node_id?: string;
  owner?: SimpleUser;
  public?: boolean;
  truncated?: boolean;
  updated_at?: string;
  url?: string;
  user?: string | null;
};

/**
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /**
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /**
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /**
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /**
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /**
   * @format uri
   */
  html_url: string;
  /**
   * Message describing the purpose of the commit
   *
   * @example Fix #42
   */
  message: string;
  node_id: string;
  parents: {
    /**
     * @format uri
     */
    html_url: string;
    /**
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /**
     * @format uri
     */
    url: string;
  }[];
  /**
   * SHA for the commit
   *
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  tree: {
    /**
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * @format uri
   */
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Git references within a repository
 */
export type GitRef = {
  node_id: string;
  object: {
    /**
     * SHA for the reference
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     * @maxLength 40
     * @minLength 40
     */
    sha: string;
    type: string;
    /**
     * @format uri
     */
    url: string;
  };
  ref: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Metadata for a Git tag
 */
export type GitTag = {
  /**
   * Message describing the purpose of the tag
   *
   * @example Initial public release
   */
  message: string;
  /**
   * @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
   */
  node_id: string;
  object: {
    sha: string;
    type: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac
   */
  sha: string;
  /**
   * Name of the tag
   *
   * @example v0.0.1
   */
  tag: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  /**
   * URL for the tag
   *
   * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
   * @format uri
   */
  url: string;
  verification?: Verification;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  /**
   * Objects specifying a tree structure
   *
   * @example {"mode":"100644","path":"file.rb","properties":{"mode":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"size":{"type":"integer"},"type":{"type":"string"},"url":{"type":"string"}},"required":["path","mode","type","sha","url","size"],"sha":"44b4fc6d56897b048c772eb4087f854f46256132","size":30,"type":"blob","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"}
   */
  tree: {
    /**
     * @example 040000
     */
    mode?: string;
    /**
     * @example test/file.rb
     */
    path?: string;
    /**
     * @example 23f6827669e43831def8a7ad935069c8bd418261
     */
    sha?: string;
    /**
     * @example 12
     */
    size?: number;
    /**
     * @example tree
     */
    type?: string;
    /**
     * @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
     */
    url?: string;
  }[];
  truncated: boolean;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Gitignore Template
 */
export type GitignoreTemplate = {
  /**
   * @example C
   */
  name: string;
  /**
     * @example # Object files
    *.o
    
    # Libraries
    *.lib
    *.a
    
    # Shared objects (inc. Windows DLLs)
    *.dll
    *.so
    *.so.*
    *.dylib
    
    # Executables
    *.exe
    *.out
    *.app
     */
  source: string;
};

/**
 * A unique encryption key
 */
export type GpgKey = {
  /**
   * @example true
   */
  can_certify: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /**
   * @example true
   */
  can_sign: boolean;
  /**
   * @example "2016-03-24T17:31:04.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example {"email":"octocat@users.noreply.github.com","verified":true}
   */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /**
   * @format date-time
   */
  expires_at: string | null;
  /**
   * @example 3
   */
  id: number;
  /**
   * @example 3262EFF25BA0D270
   */
  key_id: string;
  /**
   * @example Octocat's GPG Key
   */
  name?: string | null;
  primary_key_id: number | null;
  /**
   * @example xsBNBFayYZ...
   */
  public_key: string;
  raw_key: string | null;
  /**
   * @example true
   */
  revoked: boolean;
  /**
   * @example {"can_certify":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_sign":false,"created_at":"2016-03-24T17:31:04.000Z","emails":[],"expires_at":null,"id":4,"key_id":"4A595D4C72EE49C7","primary_key_id":3,"public_key":"zsBNBFayYZ...","revoked":false,"subkeys":[]}
   */
  subkeys: {
    can_certify?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_sign?: boolean;
    created_at?: string;
    emails?: any[];
    expires_at?: string | null;
    id?: number;
    key_id?: string;
    primary_key_id?: number;
    public_key?: string;
    raw_key?: string | null;
    revoked?: boolean;
    subkeys?: any[];
  }[];
};

/**
 * Webhooks for repositories.
 */
export type Hook = {
  /**
   * Determines whether the hook is actually triggered on pushes.
   *
   * @example true
   */
  active: boolean;
  config: {
    content_type?: WebhookConfigContentType;
    /**
     * @example "sha256"
     */
    digest?: string;
    /**
     * @example "foo@bar.com"
     */
    email?: string;
    insecure_ssl?: WebhookConfigInsecureSsl;
    /**
     * @example "foo"
     */
    password?: string;
    /**
     * @example "roomer"
     */
    room?: string;
    secret?: WebhookConfigSecret;
    /**
     * @example "foo"
     */
    subdomain?: string;
    /**
     * @example "abc"
     */
    token?: string;
    url?: WebhookConfigUrl;
  };
  /**
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
   * @format uri
   */
  deliveries_url?: string;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   *
   * @example push
   * @example pull_request
   */
  events: string[];
  /**
   * Unique identifier of the webhook.
   *
   * @example 42
   */
  id: number;
  last_response: HookResponse;
  /**
   * The name of a valid service, use 'web' for a webhook.
   *
   * @example web
   */
  name: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
   * @format uri
   */
  test_url: string;
  type: string;
  /**
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
   * @format uri
   */
  url: string;
};

/**
 * Delivery made by a webhook.
 */
export type HookDelivery = {
  /**
   * The type of activity for the event that triggered the delivery.
   *
   * @example opened
   */
  action: string | null;
  /**
   * Time when the delivery was delivered.
   *
   * @example "2021-05-12T20:33:44.000Z"
   * @format date-time
   */
  delivered_at: string;
  /**
   * Time spent delivering.
   *
   * @example 0.03
   */
  duration: number;
  /**
   * The event that triggered the delivery.
   *
   * @example issues
   */
  event: string;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   *
   * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
   */
  guid: string;
  /**
   * Unique identifier of the delivery.
   *
   * @example 42
   */
  id: number;
  /**
   * The id of the GitHub App installation associated with this event.
   *
   * @example 123
   */
  installation_id: number | null;
  /**
   * Whether the delivery is a redelivery.
   *
   * @example false
   */
  redelivery: boolean;
  /**
   * The id of the repository associated with this event.
   *
   * @example 123
   */
  repository_id: number | null;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The webhook payload.
     */
    payload: {
      [key: string]: any;
    } | null;
  };
  response: {
    /**
     * The response headers received when the delivery was made.
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The response payload received.
     */
    payload: string | null;
  };
  /**
   * Description of the status of the attempted delivery
   *
   * @example failed to connect
   */
  status: string;
  /**
   * Status code received when delivery was made.
   *
   * @example 502
   */
  status_code: number;
  /**
   * The URL target of the delivery.
   *
   * @example https://www.example.com
   */
  url?: string;
};

/**
 * Delivery made by a webhook, without request and response information.
 */
export type HookDeliveryItem = {
  /**
   * The type of activity for the event that triggered the delivery.
   *
   * @example opened
   */
  action: string | null;
  /**
   * Time when the webhook delivery occurred.
   *
   * @example "2021-05-12T20:33:44.000Z"
   * @format date-time
   */
  delivered_at: string;
  /**
   * Time spent delivering.
   *
   * @example 0.03
   */
  duration: number;
  /**
   * The event that triggered the delivery.
   *
   * @example issues
   */
  event: string;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   *
   * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
   */
  guid: string;
  /**
   * Unique identifier of the webhook delivery.
   *
   * @example 42
   */
  id: number;
  /**
   * The id of the GitHub App installation associated with this event.
   *
   * @example 123
   */
  installation_id: number | null;
  /**
   * Whether the webhook delivery is a redelivery.
   *
   * @example false
   */
  redelivery: boolean;
  /**
   * The id of the repository associated with this event.
   *
   * @example 123
   */
  repository_id: number | null;
  /**
   * Describes the response returned after attempting the delivery.
   *
   * @example failed to connect
   */
  status: string;
  /**
   * Status code received when delivery was made.
   *
   * @example 502
   */
  status_code: number;
};

export type HookResponse = {
  code: number | null;
  message: string | null;
  status: string | null;
};

/**
 * Hovercard
 */
export type Hovercard = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};

/**
 * A repository import from an external source.
 */
export type Import = {
  authors_count?: number | null;
  /**
   * @format uri
   */
  authors_url: string;
  commit_count?: number | null;
  error_message?: string | null;
  failed_step?: string | null;
  has_large_files?: boolean;
  /**
   * @format uri
   */
  html_url: string;
  import_percent?: number | null;
  large_files_count?: number;
  large_files_size?: number;
  message?: string;
  project_choices?: {
    human_name?: string;
    tfvc_project?: string;
    vcs?: string;
  }[];
  push_percent?: number | null;
  /**
   * @format uri
   */
  repository_url: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  svc_root?: string;
  svn_root?: string;
  tfvc_project?: string;
  /**
   * @format uri
   */
  url: string;
  use_lfs?: boolean;
  vcs: string | null;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
};

/**
 * Installation
 */
export type Installation = {
  /**
   * @example https://api.github.com/installations/1/access_tokens
   * @format uri
   */
  access_tokens_url: string;
  account: SimpleUser | Enterprise | null;
  /**
   * @example 1
   */
  app_id: number;
  /**
   * @example github-actions
   */
  app_slug: string;
  /**
   * @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
   */
  contact_email?: string | null;
  /**
   * @format date-time
   */
  created_at: string;
  events: string[];
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  /**
   * @example https://github.com/organizations/github/settings/installations/1
   * @format uri
   */
  html_url: string;
  /**
   * The ID of the installation.
   *
   * @example 1
   */
  id: number;
  permissions: AppPermissions;
  /**
   * @example https://api.github.com/installation/repositories
   * @format uri
   */
  repositories_url: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /**
   * @example config.yaml
   */
  single_file_name: string | null;
  /**
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  /**
   * @format date-time
   */
  suspended_at: string | null;
  suspended_by: NullableSimpleUser;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  /**
   * @example Organization
   */
  target_type: string;
  /**
   * @format date-time
   */
  updated_at: string;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  expires_at: string;
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions?: AppPermissions;
  repositories?: Repository[];
  repository_selection?: "all" | "selected";
  /**
   * @example README.md
   */
  single_file?: string;
  /**
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
  token: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /**
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  /**
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret?: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example The description of the app.
   */
  description: string | null;
  /**
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /**
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /**
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id: number;
  /**
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name: string;
  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;
  owner: NullableSimpleUser;
  /**
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem?: string;
  /**
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret?: string | null;
};

/**
 * The duration of the interaction restriction. Default: `one_day`.
 *
 * @example one_month
 */
export type InteractionExpiry =
  | "one_day"
  | "three_days"
  | "one_week"
  | "one_month"
  | "six_months";

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 *
 * @example collaborators_only
 */
export type InteractionGroup =
  | "existing_users"
  | "contributors_only"
  | "collaborators_only";

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  expiry?: InteractionExpiry;
  limit: InteractionGroup;
};

/**
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  /**
   * @example "2018-08-17T04:18:39.000Z"
   * @format date-time
   */
  expires_at: string;
  limit: InteractionGroup;
  /**
   * @example repository
   */
  origin: string;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  active_lock_reason?: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /**
   * Contents of the issue
   *
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /**
   * @format date-time
   */
  closed_at: string | null;
  closed_by?: NullableSimpleUser;
  comments: number;
  /**
   * @format uri
   */
  comments_url: string;
  /**
   * @format date-time
   */
  created_at: string;
  draft?: boolean;
  /**
   * @format uri
   */
  events_url: string;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   *
   * @example bug
   * @example registration
   */
  labels: (
    | string
    | {
        color?: string | null;
        ["default"]?: boolean;
        description?: string | null;
        /**
         * @format int64
         */
        id?: number;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        url?: string;
      }
  )[];
  labels_url: string;
  locked: boolean;
  milestone: NullableMilestone;
  node_id: string;
  /**
   * Number uniquely identifying the issue within its repository
   *
   * @example 42
   */
  number: number;
  performed_via_github_app?: NullableIntegration;
  pull_request?: {
    /**
     * @format uri
     */
    diff_url: string | null;
    /**
     * @format uri
     */
    html_url: string | null;
    /**
     * @format date-time
     */
    merged_at?: string | null;
    /**
     * @format uri
     */
    patch_url: string | null;
    /**
     * @format uri
     */
    url: string | null;
  };
  reactions?: ReactionRollup;
  repository?: Repository;
  /**
   * @format uri
   */
  repository_url: string;
  /**
   * State of the issue; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /**
   * The reason for the current state
   *
   * @example not_planned
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * @format uri
   */
  timeline_url?: string;
  /**
   * Title of the issue
   *
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the issue
   *
   * @example https://api.github.com/repositories/42/issues/1
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  author_association: AuthorAssociation;
  /**
   * Contents of the issue comment
   *
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the issue comment
   *
   * @example 42
   */
  id: number;
  /**
   * @format uri
   */
  issue_url: string;
  node_id: string;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the issue comment
   *
   * @example https://api.github.com/repositories/42/issues/comments/1
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Issue Event
 */
export type IssueEvent = {
  actor: NullableSimpleUser;
  assignee?: NullableSimpleUser;
  assigner?: NullableSimpleUser;
  author_association?: AuthorAssociation;
  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_url: string | null;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  dismissed_review?: IssueEventDismissedReview;
  /**
   * @example closed
   */
  event: string;
  /**
   * @example 1
   */
  id: number;
  issue?: NullableIssue;
  label?: IssueEventLabel;
  lock_reason?: string | null;
  milestone?: IssueEventMilestone;
  /**
   * @example MDEwOklzc3VlRXZlbnQx
   */
  node_id: string;
  performed_via_github_app?: NullableIntegration;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  requested_reviewer?: NullableSimpleUser;
  requested_team?: Team;
  review_requester?: NullableSimpleUser;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
   * @format uri
   */
  url: string;
};

export type IssueEventDismissedReview = {
  dismissal_commit_id?: string | null;
  dismissal_message: string | null;
  review_id: number;
  state: string;
};

/**
 * Issue Event for Issue
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;

/**
 * Issue Event Label
 */
export type IssueEventLabel = {
  color: string | null;
  name: string | null;
};

/**
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};

/**
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  column_name: string;
  id: number;
  previous_column_name?: string;
  project_id: number;
  /**
   * @format uri
   */
  project_url: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Issue Event Rename
 */
export type IssueEventRename = {
  from: string;
  to: string;
};

/**
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  active_lock_reason?: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  body?: string;
  body_html?: string;
  body_text?: string;
  /**
   * @format date-time
   */
  closed_at: string | null;
  comments: number;
  /**
   * @format uri
   */
  comments_url: string;
  /**
   * @format date-time
   */
  created_at: string;
  draft?: boolean;
  /**
   * @format uri
   */
  events_url: string;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  labels: {
    color?: string;
    ["default"]?: boolean;
    description?: string | null;
    /**
     * @format int64
     */
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  labels_url: string;
  locked: boolean;
  milestone: NullableMilestone;
  node_id: string;
  number: number;
  performed_via_github_app?: NullableIntegration;
  pull_request?: {
    /**
     * @format uri
     */
    diff_url: string | null;
    /**
     * @format uri
     */
    html_url: string | null;
    /**
     * @format date-time
     */
    merged_at?: string | null;
    /**
     * @format uri
     */
    patch_url: string | null;
    /**
     * @format uri
     */
    url: string | null;
  };
  reactions?: ReactionRollup;
  repository?: Repository;
  /**
   * @format uri
   */
  repository_url: string;
  score: number;
  state: string;
  state_reason?: string | null;
  text_matches?: SearchResultTextMatches;
  /**
   * @format uri
   */
  timeline_url?: string;
  title: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Information of a job execution in a workflow run
 */
export type Job = {
  /**
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  check_run_url: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  completed_at: string | null;
  /**
   * The outcome of the job.
   *
   * @example success
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;
  /**
   * The name of the current branch.
   *
   * @example main
   */
  head_branch: string | null;
  /**
   * The SHA of the commit that is being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /**
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;
  /**
   * The id of the job.
   *
   * @example 21
   */
  id: number;
  /**
   * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
   *
   * @example self-hosted
   * @example foo
   * @example bar
   */
  labels: string[];
  /**
   * The name of the job.
   *
   * @example test-coverage
   */
  name: string;
  /**
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;
  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   *
   * @example 1
   */
  run_attempt?: number;
  /**
   * The id of the associated workflow run.
   *
   * @example 5
   */
  run_id: number;
  /**
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  run_url: string;
  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   *
   * @example 2
   */
  runner_group_id: number | null;
  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   *
   * @example my runner group
   */
  runner_group_name: string | null;
  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   *
   * @example 1
   */
  runner_id: number | null;
  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   *
   * @example my runner
   */
  runner_name: string | null;
  /**
   * The time that the job started, in ISO 8601 format.
   *
   * @example "2019-08-08T15:00:00.000Z"
   * @format date-time
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the job is currently in.
   *
   * @example queued
   */
  status: "queued" | "in_progress" | "completed";
  /**
   * Steps in this job.
   */
  steps?: {
    /**
     * The time that the job finished, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    completed_at?: string | null;
    /**
     * The outcome of the job.
     *
     * @example success
     */
    conclusion: string | null;
    /**
     * The name of the job.
     *
     * @example test-coverage
     */
    name: string;
    /**
     * @example 1
     */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     *
     * @example "2019-08-08T15:00:00.000Z"
     * @format date-time
     */
    started_at?: string | null;
    /**
     * The phase of the lifecycle that the job is currently in.
     *
     * @example queued
     */
    status: "queued" | "in_progress" | "completed";
  }[];
  /**
   * @example https://api.github.com/repos/github/hello-world/actions/jobs/21
   */
  url: string;
  /**
   * The name of the workflow.
   *
   * @example Build
   */
  workflow_name: string | null;
};

/**
 * Key
 */
export type Key = {
  /**
   * @format date-time
   */
  created_at: string;
  id: number;
  key: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  /**
   * 6-character hex code, without the leading #, identifying the color
   *
   * @example FFFFFF
   */
  color: string;
  /**
   * @example true
   */
  ["default"]: boolean;
  /**
   * @example Something isn't working
   */
  description: string | null;
  /**
   * @example 208045946
   * @format int64
   */
  id: number;
  /**
   * The name of the label.
   *
   * @example bug
   */
  name: string;
  /**
   * @example MDU6TGFiZWwyMDgwNDU5NDY=
   */
  node_id: string;
  /**
   * URL for the label
   *
   * @example https://api.github.com/repositories/42/labels/bug
   * @format uri
   */
  url: string;
};

/**
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  color: string;
  ["default"]: boolean;
  description: string | null;
  id: number;
  name: string;
  node_id: string;
  score: number;
  text_matches?: SearchResultTextMatches;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Labeled Issue Event
 */
export type LabeledIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  label: {
    color: string;
    name: string;
  };
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * Language
 */
export type Language = {
  [key: string]: number;
};

/**
 * License
 */
export type License = {
  /**
     * @example
    
    The MIT License (MIT)
    
    Copyright (c) [year] [fullname]
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
     */
  body: string;
  /**
   * @example include-copyright
   */
  conditions: string[];
  /**
   * @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
   */
  description: string;
  /**
   * @example true
   */
  featured: boolean;
  /**
   * @example http://choosealicense.com/licenses/mit/
   * @format uri
   */
  html_url: string;
  /**
   * @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.
   */
  implementation: string;
  /**
   * @example mit
   */
  key: string;
  /**
   * @example no-liability
   */
  limitations: string[];
  /**
   * @example MIT License
   */
  name: string;
  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /**
   * @example commercial-use
   * @example modifications
   * @example distribution
   * @example sublicense
   * @example private-use
   */
  permissions: string[];
  /**
   * @example MIT
   */
  spdx_id: string | null;
  /**
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * License Content
 */
export type LicenseContent = {
  _links: {
    /**
     * @format uri
     */
    git: string | null;
    /**
     * @format uri
     */
    html: string | null;
    /**
     * @format uri
     */
    self: string;
  };
  content: string;
  /**
   * @format uri
   */
  download_url: string | null;
  encoding: string;
  /**
   * @format uri
   */
  git_url: string | null;
  /**
   * @format uri
   */
  html_url: string | null;
  license: NullableLicenseSimple;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * License Simple
 */
export type LicenseSimple = {
  /**
   * @format uri
   */
  html_url?: string;
  /**
   * @example mit
   */
  key: string;
  /**
   * @example MIT License
   */
  name: string;
  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /**
   * @example MIT
   */
  spdx_id: string | null;
  /**
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
};

/**
 * Hypermedia Link
 */
export type Link = {
  href: string;
};

/**
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};

/**
 * Locked Issue Event
 */
export type LockedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  /**
   * @example "off-topic"
   */
  lock_reason: string | null;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

export type Manifest = {
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     *
     * @example /src/build/package-lock.json
     */
    source_location?: string;
  };
  metadata?: Metadata;
  /**
   * The name of the manifest.
   *
   * @example package-lock.json
   */
  name: string;
  /**
   * A collection of resolved package dependencies.
   */
  resolved?: {
    [key: string]: Dependency;
  };
};

export type MarketplaceAccount = {
  /**
   * @format email
   */
  email?: string | null;
  id: number;
  login: string;
  node_id?: string;
  /**
   * @format email
   */
  organization_billing_email?: string | null;
  type: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  /**
   * @example https://api.github.com/marketplace_listing/plans/1313/accounts
   * @format uri
   */
  accounts_url: string;
  /**
   * @example Up to 25 private repositories
   * @example 11 concurrent builds
   */
  bullets: string[];
  /**
   * @example A professional-grade CI solution
   */
  description: string;
  /**
   * @example true
   */
  has_free_trial: boolean;
  /**
   * @example 1313
   */
  id: number;
  /**
   * @example 1099
   */
  monthly_price_in_cents: number;
  /**
   * @example Pro
   */
  name: string;
  /**
   * @example 3
   */
  number: number;
  /**
   * @example FLAT_RATE
   */
  price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
  /**
   * @example published
   */
  state: string;
  unit_name: string | null;
  /**
   * @example https://api.github.com/marketplace_listing/plans/1313
   * @format uri
   */
  url: string;
  /**
   * @example 11870
   */
  yearly_price_in_cents: number;
};

/**
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  email?: string | null;
  id: number;
  login: string;
  marketplace_pending_change?: {
    effective_date?: string;
    id?: number;
    is_installed?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    is_installed?: boolean;
    next_billing_date?: string | null;
    on_free_trial?: boolean;
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
    updated_at?: string;
  };
  organization_billing_email?: string;
  type: string;
  url: string;
};

/**
 * Results of a successful merge upstream request
 */
export type MergedUpstream = {
  base_branch?: string;
  merge_type?: "merge" | "fast-forward" | "none";
  message?: string;
};

/**
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 *
 * @maxProperties 8
 */
export type Metadata = {
  [key: string]: string | number | boolean | null;
};

/**
 * A migration.
 */
export type Migration = {
  /**
   * @format uri
   */
  archive_url?: string;
  /**
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  created_at: string;
  exclude?: any[];
  exclude_attachments: boolean;
  exclude_git_data: boolean;
  exclude_metadata: boolean;
  exclude_owner_projects: boolean;
  exclude_releases: boolean;
  /**
   * @example 0b989ba4-242f-11e5-81e1-c7b6966d2516
   */
  guid: string;
  /**
   * @example 79
   */
  id: number;
  /**
   * @example true
   */
  lock_repositories: boolean;
  node_id: string;
  org_metadata_only: boolean;
  owner: NullableSimpleUser;
  /**
   * The repositories included in the migration. Only returned for export migrations.
   */
  repositories: Repository[];
  /**
   * @example pending
   */
  state: string;
  /**
   * @example "2015-07-06T22:33:38.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/octo-org/migrations/79
   * @format uri
   */
  url: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  /**
   * @example "2013-02-12T13:22:01.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /**
   * @example 8
   */
  closed_issues: number;
  /**
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  /**
   * @example "2012-10-09T23:39:01.000Z"
   * @format date-time
   */
  due_on: string | null;
  /**
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   * @format uri
   */
  html_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   * @format uri
   */
  labels_url: string;
  /**
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;
  /**
   * The number of the milestone.
   *
   * @example 42
   */
  number: number;
  /**
   * @example 4
   */
  open_issues: number;
  /**
   * The state of the milestone.
   *
   * @default open
   * @example open
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   *
   * @example v1.0
   */
  title: string;
  /**
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   * @format uri
   */
  url: string;
};

/**
 * Milestoned Issue Event
 */
export type MilestonedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  milestone: {
    title: string;
  };
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * Minimal Repository
 */
export type MinimalRepository = {
  allow_forking?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  clone_url?: string;
  code_of_conduct?: CodeOfConduct;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  disabled?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  /**
   * @example 0
   */
  forks?: number;
  forks_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;
  has_discussions?: boolean;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * @example 1296269
   */
  id: number;
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  mirror_url?: string | null;
  /**
   * @example Hello-World
   */
  name: string;
  network_count?: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  /**
   * @example 0
   */
  open_issues?: number;
  open_issues_count?: number;
  owner: SimpleUser;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    pull?: boolean;
    push?: boolean;
    triage?: boolean;
  };
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * @example admin
   */
  role_name?: string;
  security_and_analysis?: SecurityAndAnalysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  svn_url?: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at?: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  visibility?: string;
  /**
   * @example 0
   */
  watchers?: number;
  watchers_count?: number;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Moved Column in Project Issue Event
 */
export type MovedColumnInProjectIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format uri
     */
    url: string;
  };
  url: string;
};

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 * @format date-time
 */
export type NullableAlertUpdatedAt = string | null;

/**
 * Code of Conduct Simple
 */
export type NullableCodeOfConductSimple = {
  /**
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   * @format uri
   */
  html_url: string | null;
  /**
   * @example citizen_code_of_conduct
   */
  key: string;
  /**
   * @example Citizen Code of Conduct
   */
  name: string;
  /**
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   * @format uri
   */
  url: string;
} | null;

/**
 * A description of the machine powering a codespace.
 */
export type NullableCodespaceMachine = {
  /**
   * How many cores are available to the codespace.
   *
   * @example 4
   */
  cpus: number;
  /**
   * The display name of the machine includes cores, memory, and storage.
   *
   * @example 4 cores, 8 GB RAM, 64 GB storage
   */
  display_name: string;
  /**
   * How much memory is available to the codespace.
   *
   * @example 8589934592
   */
  memory_in_bytes: number;
  /**
   * The name of the machine.
   *
   * @example standardLinux
   */
  name: string;
  /**
   * The operating system of the machine.
   *
   * @example linux
   */
  operating_system: string;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   *
   * @example ready
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
  /**
   * How much storage is available to the codespace.
   *
   * @example 68719476736
   */
  storage_in_bytes: number;
} | null;

/**
 * Collaborator
 */
export type NullableCollaborator = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  email?: string | null;
  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /**
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example octocat
   */
  login: string;
  name?: string | null;
  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  /**
   * @example admin
   */
  role_name: string;
  site_admin: boolean;
  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /**
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @example User
   */
  type: string;
  /**
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
} | null;

export type NullableCommunityHealthFile = {
  /**
   * @format uri
   */
  html_url: string;
  /**
   * @format uri
   */
  url: string;
} | null;

/**
 * Metaproperties for Git author/committer information.
 */
export type NullableGitUser = {
  /**
   * @example "2007-10-29T02:42:39.000-07:00"
   */
  date?: string;
  /**
   * @example "chris@ozmm.org"
   */
  email?: string;
  /**
   * @example "Chris Wanstrath"
   */
  name?: string;
} | null;

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type NullableIntegration = {
  /**
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  /**
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret?: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example The description of the app.
   */
  description: string | null;
  /**
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /**
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /**
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id: number;
  /**
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name: string;
  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;
  owner: NullableSimpleUser;
  /**
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem?: string;
  /**
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret?: string | null;
} | null;

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type NullableIssue = {
  active_lock_reason?: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  /**
   * Contents of the issue
   *
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /**
   * @format date-time
   */
  closed_at: string | null;
  closed_by?: NullableSimpleUser;
  comments: number;
  /**
   * @format uri
   */
  comments_url: string;
  /**
   * @format date-time
   */
  created_at: string;
  draft?: boolean;
  /**
   * @format uri
   */
  events_url: string;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   *
   * @example bug
   * @example registration
   */
  labels: (
    | string
    | {
        color?: string | null;
        ["default"]?: boolean;
        description?: string | null;
        /**
         * @format int64
         */
        id?: number;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        url?: string;
      }
  )[];
  labels_url: string;
  locked: boolean;
  milestone: NullableMilestone;
  node_id: string;
  /**
   * Number uniquely identifying the issue within its repository
   *
   * @example 42
   */
  number: number;
  performed_via_github_app?: NullableIntegration;
  pull_request?: {
    /**
     * @format uri
     */
    diff_url: string | null;
    /**
     * @format uri
     */
    html_url: string | null;
    /**
     * @format date-time
     */
    merged_at?: string | null;
    /**
     * @format uri
     */
    patch_url: string | null;
    /**
     * @format uri
     */
    url: string | null;
  };
  reactions?: ReactionRollup;
  repository?: Repository;
  /**
   * @format uri
   */
  repository_url: string;
  /**
   * State of the issue; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /**
   * The reason for the current state
   *
   * @example not_planned
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * @format uri
   */
  timeline_url?: string;
  /**
   * Title of the issue
   *
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the issue
   *
   * @example https://api.github.com/repositories/42/issues/1
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
} | null;

/**
 * License Simple
 */
export type NullableLicenseSimple = {
  /**
   * @format uri
   */
  html_url?: string;
  /**
   * @example mit
   */
  key: string;
  /**
   * @example MIT License
   */
  name: string;
  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  /**
   * @example MIT
   */
  spdx_id: string | null;
  /**
   * @example https://api.github.com/licenses/mit
   * @format uri
   */
  url: string | null;
} | null;

/**
 * A collection of related issues and pull requests.
 */
export type NullableMilestone = {
  /**
   * @example "2013-02-12T13:22:01.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /**
   * @example 8
   */
  closed_issues: number;
  /**
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  /**
   * @example "2012-10-09T23:39:01.000Z"
   * @format date-time
   */
  due_on: string | null;
  /**
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   * @format uri
   */
  html_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   * @format uri
   */
  labels_url: string;
  /**
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;
  /**
   * The number of the milestone.
   *
   * @example 42
   */
  number: number;
  /**
   * @example 4
   */
  open_issues: number;
  /**
   * The state of the milestone.
   *
   * @default open
   * @example open
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   *
   * @example v1.0
   */
  title: string;
  /**
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   * @format uri
   */
  url: string;
} | null;

/**
 * Minimal Repository
 */
export type NullableMinimalRepository = {
  allow_forking?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  archived?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  clone_url?: string;
  code_of_conduct?: CodeOfConduct;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  disabled?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  /**
   * @example 0
   */
  forks?: number;
  forks_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;
  has_discussions?: boolean;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * @example 1296269
   */
  id: number;
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  mirror_url?: string | null;
  /**
   * @example Hello-World
   */
  name: string;
  network_count?: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  /**
   * @example 0
   */
  open_issues?: number;
  open_issues_count?: number;
  owner: SimpleUser;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    pull?: boolean;
    push?: boolean;
    triage?: boolean;
  };
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at?: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * @example admin
   */
  role_name?: string;
  security_and_analysis?: SecurityAndAnalysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  svn_url?: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at?: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  visibility?: string;
  /**
   * @example 0
   */
  watchers?: number;
  watchers_count?: number;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
} | null;

/**
 * A repository on GitHub.
 */
export type NullableRepository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   *
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /**
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /**
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /**
   * Whether discussions are enabled.
   *
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /**
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license: NullableLicenseSimple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /**
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /**
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /**
   * @example 0
   */
  open_issues_count: number;
  organization?: NullableSimpleUser;
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   *
   * @example 108
   */
  size: number;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /**
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_auto_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      pull?: boolean;
      push?: boolean;
      triage?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: string[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    use_squash_pr_title_as_default?: boolean;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   *
   * @default false
   * @deprecated true
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   *
   * @default false
   */
  web_commit_signoff_required?: boolean;
} | null;

export type NullableScopedInstallation = {
  account: SimpleUser;
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  permissions: AppPermissions;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repositories_url: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  /**
   * @example config.yaml
   */
  single_file_name: string | null;
  /**
   * @example config.yml
   * @example .github/issue_TEMPLATE.md
   */
  single_file_paths?: string[];
} | null;

/**
 * A commit.
 */
export type NullableSimpleCommit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  /**
   * @format date-time
   */
  timestamp: string;
  tree_id: string;
} | null;

/**
 * A GitHub user.
 */
export type NullableSimpleUser = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  email?: string | null;
  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /**
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example octocat
   */
  login: string;
  name?: string | null;
  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /**
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /**
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;
  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /**
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @example User
   */
  type: string;
  /**
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
} | null;

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type NullableTeamSimple = {
  /**
   * Description of the team
   *
   * @example A great team.
   */
  description: string | null;
  /**
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the team
   *
   * @example 1
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /**
   * Name of the team
   *
   * @example Justice League
   */
  name: string;
  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  /**
   * Permission that the team will have for its repositories
   *
   * @example admin
   */
  permission: string;
  /**
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: string;
  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /**
   * @example justice-league
   */
  slug: string;
  /**
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
} | null;

/**
 * Actions OIDC Subject customization
 */
export type OidcCustomSub = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys: string[];
};

/**
 * Actions OIDC subject customization for a repository
 */
export type OidcCustomSubRepo = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys?: string[];
  /**
   * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
   */
  use_default: boolean;
};

/**
 * Org Hook
 */
export type OrgHook = {
  /**
   * @example true
   */
  active: boolean;
  config: {
    /**
     * @example "form"
     */
    content_type?: string;
    /**
     * @example "0"
     */
    insecure_ssl?: string;
    /**
     * @example "********"
     */
    secret?: string;
    /**
     * @example "http://example.com/2"
     */
    url?: string;
  };
  /**
   * @example "2011-09-06T17:26:27.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://api.github.com/orgs/octocat/hooks/1/deliveries
   * @format uri
   */
  deliveries_url?: string;
  /**
   * @example push
   * @example pull_request
   */
  events: string[];
  /**
   * @example 1
   */
  id: number;
  /**
   * @example web
   */
  name: string;
  /**
   * @example https://api.github.com/orgs/octocat/hooks/1/pings
   * @format uri
   */
  ping_url: string;
  type: string;
  /**
   * @example "2011-09-06T20:39:23.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/octocat/hooks/1
   * @format uri
   */
  url: string;
};

/**
 * Org Membership
 */
export type OrgMembership = {
  organization: OrganizationSimple;
  /**
   * @example https://api.github.com/orgs/octocat
   * @format uri
   */
  organization_url: string;
  permissions?: {
    can_create_repository: boolean;
  };
  /**
   * The user's membership type in the organization.
   *
   * @example admin
   */
  role: "admin" | "member" | "billing_manager";
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   *
   * @example active
   */
  state: "active" | "pending";
  /**
   * @example https://api.github.com/orgs/octocat/memberships/defunkt
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /**
   * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
};

/**
 * Organization variable for GitHub Actions.
 */
export type OrganizationActionsVariable = {
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @example "2019-01-24T22:45:36.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the variable.
   *
   * @example USERNAME
   */
  name: string;
  /**
   * @example https://api.github.com/organizations/org/variables/USERNAME/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   *
   * @example "2019-01-24T22:45:36.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * The value of the variable.
   *
   * @example octocat
   */
  value: string;
  /**
   * Visibility of a variable
   */
  visibility: "all" | "private" | "selected";
};

/**
 * Secrets for GitHub Dependabot for an organization.
 */
export type OrganizationDependabotSecret = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /**
   * @example https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
};

/**
 * Organization Full
 */
export type OrganizationFull = {
  /**
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /**
   * @example org@example.com
   * @format email
   */
  billing_email?: string | null;
  /**
   * @example https://github.com/blog
   * @format uri
   */
  blog?: string;
  /**
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @example GitHub
   */
  company?: string;
  /**
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  default_repository_permission?: string | null;
  /**
   * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
   * this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
   * to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  /**
   * @example A great organization
   */
  description: string | null;
  /**
   * @example 10000
   */
  disk_usage?: number | null;
  /**
   * @example octocat@github.com
   * @format email
   */
  email?: string;
  /**
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /**
   * @example 20
   */
  followers: number;
  /**
   * @example 0
   */
  following: number;
  /**
   * @example true
   */
  has_organization_projects: boolean;
  /**
   * @example true
   */
  has_repository_projects: boolean;
  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example true
   */
  is_verified?: boolean;
  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /**
   * @example San Francisco
   */
  location?: string;
  /**
   * @example github
   */
  login: string;
  /**
   * @example all
   */
  members_allowed_repository_creation_type?: string;
  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /**
   * @example false
   */
  members_can_fork_private_repositories?: boolean | null;
  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /**
   * @example github
   */
  name?: string;
  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /**
   * @example 100
   */
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  /**
   * @example 81
   */
  private_gists?: number | null;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /**
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * An optional URL string to display to contributors who are blocked from pushing a secret.
   *
   * @example https://github.com/test-org/test-repo/blob/main/README.md
   */
  secret_scanning_push_protection_custom_link?: string | null;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   *
   * @example false
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories
   * transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   *
   * @example false
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  /**
   * @example 100
   */
  total_private_repos?: number;
  /**
   * @example github
   */
  twitter_username?: string | null;
  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /**
   * @example Organization
   */
  type: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Organization Invitation
 */
export type OrganizationInvitation = {
  created_at: string;
  email: string | null;
  failed_at?: string | null;
  failed_reason?: string | null;
  id: number;
  /**
   * @example "member"
   */
  invitation_source?: string;
  /**
   * @example "https://api.github.com/organizations/16/invitations/1/teams"
   */
  invitation_teams_url: string;
  inviter: SimpleUser;
  login: string | null;
  /**
   * @example "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
   */
  node_id: string;
  role: string;
  team_count: number;
};

export type OrganizationSecretScanningAlert = {
  created_at?: AlertCreatedAt;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   *
   * @format uri
   */
  locations_url?: string;
  number?: AlertNumber;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypassed_by?: NullableSimpleUser;
  repository?: SimpleRepository;
  resolution?: SecretScanningAlertResolution;
  /**
   * The comment that was optionally added when this alert was closed
   */
  resolution_comment?: string | null;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  resolved_at?: string | null;
  resolved_by?: NullableSimpleUser;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  state?: SecretScanningAlertState;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
};

/**
 * A GitHub organization.
 */
export type OrganizationSimple = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /**
   * @example A great organization
   */
  description: string | null;
  /**
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /**
   * @example github
   */
  login: string;
  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /**
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /**
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
};

/**
 * A software package
 */
export type Package = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  html_url: string;
  /**
   * Unique identifier of the package.
   *
   * @example 1
   */
  id: number;
  /**
   * The name of the package.
   *
   * @example super-linter
   */
  name: string;
  owner?: NullableSimpleUser;
  /**
   * @example docker
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  repository?: NullableMinimalRepository;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/github/packages/container/super-linter
   */
  url: string;
  /**
   * The number of versions of the package.
   *
   * @example 1
   */
  version_count: number;
  /**
   * @example private
   */
  visibility: "private" | "public";
};

/**
 * A version of a software package
 */
export type PackageVersion = {
  /**
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  deleted_at?: string;
  description?: string;
  /**
   * @example https://github.com/orgs/github/packages/container/super-linter/786068
   */
  html_url?: string;
  /**
   * Unique identifier of the package version.
   *
   * @example 1
   */
  id: number;
  /**
   * @example MIT
   */
  license?: string;
  metadata?: {
    container?: {
      tags: string[];
    };
    docker?: {
      tag?: string[];
    };
    /**
     * @example docker
     */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
  };
  /**
   * The name of the package version.
   *
   * @example latest
   */
  name: string;
  /**
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  package_html_url: string;
  /**
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
   */
  url: string;
};

export type PackagesBillingUsage = {
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /**
   * The process in which the Page will be built.
   *
   * @example legacy
   */
  build_type?: "legacy" | "workflow" | null;
  /**
   * The Pages site's custom domain
   *
   * @example example.com
   */
  cname: string | null;
  /**
   * Whether the Page has a custom 404 page.
   *
   * @default false
   * @example false
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   *
   * @example https://example.com
   * @format uri
   */
  html_url?: string;
  https_certificate?: PagesHttpsCertificate;
  /**
   * Whether https is enabled on the domain
   *
   * @example true
   */
  https_enforced?: boolean;
  /**
   * The timestamp when a pending domain becomes unverified.
   *
   * @format date-time
   */
  pending_domain_unverified_at?: string | null;
  /**
   * The state if the domain is verified
   *
   * @example pending
   */
  protected_domain_state?: "pending" | "verified" | "unverified" | null;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   *
   * @example true
   */
  public: boolean;
  source?: PagesSourceHash;
  /**
   * The status of the most recent build of the Page.
   *
   * @example built
   */
  status: "built" | "building" | "errored" | null;
  /**
   * The API address for accessing this Page resource.
   *
   * @example https://api.github.com/repos/github/hello-world/pages
   * @format uri
   */
  url: string;
};

/**
 * Page Build
 */
export type PageBuild = {
  commit: string;
  /**
   * @format date-time
   */
  created_at: string;
  duration: number;
  error: {
    message: string | null;
  };
  pusher: NullableSimpleUser;
  status: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Page Build Status
 */
export type PageBuildStatus = {
  /**
   * @example queued
   */
  status: string;
  /**
   * @example https://api.github.com/repos/github/hello-world/pages/builds/latest
   * @format uri
   */
  url: string;
};

/**
 * The GitHub Pages deployment status.
 */
export type PageDeployment = {
  /**
   * The URI to the deployed GitHub Pages.
   *
   * @example hello-world.github.io
   * @format uri
   */
  page_url: string;
  /**
   * The URI to the deployed GitHub Pages preview.
   *
   * @example monalisa-1231a2312sa32-23sda74.drafts.github.io
   * @format uri
   */
  preview_url?: string;
  /**
   * The URI to monitor GitHub Pages deployment status.
   *
   * @example https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251/status
   * @format uri
   */
  status_url: string;
};

/**
 * Pages Health Check Status
 */
export type PagesHealthCheck = {
  alt_domain?: {
    caa_error?: string | null;
    dns_resolves?: boolean;
    enforces_https?: boolean;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    host?: string;
    https_error?: string | null;
    is_a_record?: boolean | null;
    is_apex_domain?: boolean;
    is_cloudflare_ip?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_https_eligible?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_pages_domain?: boolean;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_proxied?: boolean | null;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    is_valid_domain?: boolean;
    nameservers?: string;
    reason?: string | null;
    responds_to_https?: boolean;
    should_be_a_record?: boolean | null;
    uri?: string;
  } | null;
  domain?: {
    caa_error?: string | null;
    dns_resolves?: boolean;
    enforces_https?: boolean;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    host?: string;
    https_error?: string | null;
    is_a_record?: boolean | null;
    is_apex_domain?: boolean;
    is_cloudflare_ip?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_https_eligible?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_pages_domain?: boolean;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_proxied?: boolean | null;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    is_valid_domain?: boolean;
    nameservers?: string;
    reason?: string | null;
    responds_to_https?: boolean;
    should_be_a_record?: boolean | null;
    uri?: string;
  };
};

export type PagesHttpsCertificate = {
  /**
   * @example Certificate is approved
   */
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   *
   * @example example.com
   * @example www.example.com
   */
  domains: string[];
  /**
   * @format date
   */
  expires_at?: string;
  /**
   * @example approved
   */
  state:
    | "new"
    | "authorization_created"
    | "authorization_pending"
    | "authorized"
    | "authorization_revoked"
    | "issued"
    | "uploaded"
    | "approved"
    | "errored"
    | "bad_authz"
    | "destroy_pending"
    | "dns_changed";
};

export type PagesSourceHash = {
  branch: string;
  path: string;
};

export type ParticipationStats = {
  all: number[];
  owner: number[];
};

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  /**
   * Whether the currently authenticated user can approve the deployment
   *
   * @example true
   */
  current_user_can_approve: boolean;
  environment: {
    /**
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
    /**
     * The id of the environment.
     *
     * @example 56780428
     */
    id?: number;
    /**
     * The name of the environment.
     *
     * @example staging
     */
    name?: string;
    /**
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;
    /**
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;
  };
  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: {
    reviewer?: SimpleUser | Team;
    type?: DeploymentReviewerType;
  }[];
  /**
   * The set duration of the wait timer
   *
   * @example 30
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   *
   * @example "2020-11-23T22:00:40.000Z"
   * @format date-time
   */
  wait_timer_started_at: string | null;
};

/**
 * Porter Author
 */
export type PorterAuthor = {
  email: string;
  id: number;
  /**
   * @format uri
   */
  import_url: string;
  name: string;
  remote_id: string;
  remote_name: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Porter Large File
 */
export type PorterLargeFile = {
  oid: string;
  path: string;
  ref_name: string;
  size: number;
};

/**
 * Private User
 */
export type PrivateUser = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  /**
   * @example There once was...
   */
  bio: string | null;
  /**
   * @example https://github.com/blog
   */
  blog: string | null;
  business_plus?: boolean;
  /**
   * @example 8
   */
  collaborators: number;
  /**
   * @example GitHub
   */
  company: string | null;
  /**
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example 10000
   */
  disk_usage: number;
  /**
   * @example octocat@github.com
   * @format email
   */
  email: string | null;
  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /**
   * @example 20
   */
  followers: number;
  /**
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /**
   * @example 0
   */
  following: number;
  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  hireable: boolean | null;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  ldap_dn?: string;
  /**
   * @example San Francisco
   */
  location: string | null;
  /**
   * @example octocat
   */
  login: string;
  /**
   * @example monalisa octocat
   */
  name: string | null;
  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /**
   * @example 100
   */
  owned_private_repos: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /**
   * @example 81
   */
  private_gists: number;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /**
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @format date-time
   */
  suspended_at?: string | null;
  /**
   * @example 100
   */
  total_private_repos: number;
  /**
   * @example monalisa
   */
  twitter_username?: string | null;
  /**
   * @example true
   */
  two_factor_authentication: boolean;
  /**
   * @example User
   */
  type: string;
  /**
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  /**
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body: string | null;
  /**
   * @example https://api.github.com/projects/1002604/columns
   * @format uri
   */
  columns_url: string;
  /**
   * @example "2011-04-10T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * @example https://github.com/api-playground/projects-test/projects/12
   * @format uri
   */
  html_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
  /**
   * @example MDc6UHJvamVjdDEwMDI2MDQ=
   */
  node_id: string;
  /**
   * @example 1
   */
  number: number;
  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /**
   * @example https://api.github.com/repos/api-playground/projects-test
   * @format uri
   */
  owner_url: string;
  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
  /**
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state: string;
  /**
   * @example "2014-03-03T18:58:10.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/projects/1002604
   * @format uri
   */
  url: string;
};

/**
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  /**
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  column_name?: string;
  /**
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  column_url: string;
  /**
   * @example https://api.github.com/repos/api-playground/projects-test/issues/3
   * @format uri
   */
  content_url?: string;
  /**
   * @example "2016-09-05T14:21:06.000Z"
   * @format date-time
   */
  created_at: string;
  creator: NullableSimpleUser;
  /**
   * The project card's ID
   *
   * @example 42
   */
  id: number;
  /**
   * @example MDExOlByb2plY3RDYXJkMTQ3OA==
   */
  node_id: string;
  /**
   * @example Add payload for delete Project column
   */
  note: string | null;
  project_id?: string;
  /**
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /**
   * @example "2016-09-05T14:20:22.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/projects/columns/cards/1478
   * @format uri
   */
  url: string;
};

/**
 * Project Collaborator Permission
 */
export type ProjectCollaboratorPermission = {
  permission: string;
  user: NullableSimpleUser;
};

/**
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  /**
   * @example https://api.github.com/projects/columns/367/cards
   * @format uri
   */
  cards_url: string;
  /**
   * @example "2016-09-05T14:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * The unique identifier of the project column
   *
   * @example 42
   */
  id: number;
  /**
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
  /**
   * @example MDEzOlByb2plY3RDb2x1bW4zNjc=
   */
  node_id: string;
  /**
   * @example https://api.github.com/projects/120
   * @format uri
   */
  project_url: string;
  /**
   * @example "2016-09-05T14:22:28.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/projects/columns/367
   * @format uri
   */
  url: string;
};

/**
 * A projects v2 project
 */
export type ProjectsV2 = {
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  created_at: string;
  creator: SimpleUser;
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  deleted_at: string | null;
  deleted_by: NullableSimpleUser;
  description: string | null;
  id: number;
  node_id: string;
  number: number;
  owner: SimpleUser;
  public: boolean;
  short_description: string | null;
  title: string;
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  updated_at: string;
};

/**
 * An item belonging to a project
 */
export type ProjectsV2Item = {
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  archived_at: string | null;
  content_node_id: string;
  content_type: ProjectsV2ItemContentType;
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  created_at: string;
  creator?: SimpleUser;
  id: number;
  node_id?: string;
  project_node_id?: string;
  /**
   * @example "2022-04-28T12:00:00.000Z"
   * @format date-time
   */
  updated_at: string;
};

/**
 * The type of content tracked in a project item
 */
export type ProjectsV2ItemContentType = "Issue" | "PullRequest" | "DraftIssue";

/**
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  allow_deletions?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  enforce_admins?: {
    enabled: boolean;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    bypass_pull_request_allowances?: {
      apps?: Integration[];
      teams: Team[];
      users: SimpleUser[];
    };
    dismiss_stale_reviews?: boolean;
    dismissal_restrictions?: {
      apps?: Integration[];
      teams: Team[];
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri
       */
      url: string;
      users: SimpleUser[];
      /**
       * @format uri
       */
      users_url: string;
    };
    require_code_owner_reviews?: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     *
     * @default false
     */
    require_last_push_approval?: boolean;
    required_approving_review_count?: number;
    /**
     * @format uri
     */
    url: string;
  };
  required_signatures?: {
    /**
     * @example true
     */
    enabled: boolean;
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     * @format uri
     */
    url: string;
  };
  required_status_checks?: StatusCheckPolicy;
  restrictions?: BranchRestrictionPolicy;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  /**
   * @example true
   */
  enabled: boolean;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
   * @format uri
   */
  url: string;
};

/**
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of apps allowed to bypass pull request requirements.
     */
    apps?: Integration[];
    /**
     * The list of teams allowed to bypass pull request requirements.
     */
    teams?: Team[];
    /**
     * The list of users allowed to bypass pull request requirements.
     */
    users?: SimpleUser[];
  };
  /**
   * @example true
   */
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    /**
     * The list of apps with review dismissal access.
     */
    apps?: Integration[];
    /**
     * The list of teams with review dismissal access.
     */
    teams?: Team[];
    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
     */
    teams_url?: string;
    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
     */
    url?: string;
    /**
     * The list of users with review dismissal access.
     */
    users?: SimpleUser[];
    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
     */
    users_url?: string;
  };
  /**
   * @example true
   */
  require_code_owner_reviews: boolean;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   *
   * @default false
   * @example true
   */
  require_last_push_approval?: boolean;
  /**
   * @example 2
   * @maximum 6
   * @minimum 0
   */
  required_approving_review_count?: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
   * @format uri
   */
  url?: string;
};

/**
 * Protected Branch Required Status Check
 */
export type ProtectedBranchRequiredStatusCheck = {
  checks: {
    app_id: number | null;
    context: string;
  }[];
  contexts: string[];
  contexts_url?: string;
  enforcement_level?: string;
  strict?: boolean;
  url?: string;
};

/**
 * Public User
 */
export type PublicUser = {
  /**
   * @format uri
   */
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  /**
   * @example 3
   */
  collaborators?: number;
  company: string | null;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @example 1
   */
  disk_usage?: number;
  /**
   * @format email
   */
  email: string | null;
  events_url: string;
  followers: number;
  /**
   * @format uri
   */
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  /**
   * @format uri
   */
  organizations_url: string;
  /**
   * @example 2
   */
  owned_private_repos?: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /**
   * @example 1
   */
  private_gists?: number;
  public_gists: number;
  public_repos: number;
  /**
   * @format uri
   */
  received_events_url: string;
  /**
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  /**
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @format date-time
   */
  suspended_at?: string | null;
  /**
   * @example 2
   */
  total_private_repos?: number;
  twitter_username?: string | null;
  type: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /**
   * @example too heated
   */
  active_lock_reason?: string | null;
  /**
   * @example 100
   */
  additions: number;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: {
      allow_forking?: boolean;
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_discussions: boolean;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /**
       * @format uri
       */
      homepage: string | null;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /**
       * @format uri
       */
      languages_url: string;
      license: NullableLicenseSimple;
      master_branch?: string;
      /**
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /**
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /**
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /**
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /**
         * @format uri
         */
        organizations_url: string;
        /**
         * @format uri
         */
        received_events_url: string;
        /**
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /**
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /**
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      private: boolean;
      pulls_url: string;
      /**
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /**
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      svn_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    user: {
      /**
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /**
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /**
       * @format uri
       */
      organizations_url: string;
      /**
       * @format uri
       */
      received_events_url: string;
      /**
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /**
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /**
       * @format uri
       */
      url: string;
    };
  };
  /**
   * @example Please pull these awesome changes
   */
  body: string | null;
  /**
   * @example 5
   */
  changed_files: number;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /**
   * @example 10
   */
  comments: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /**
   * @example 3
   */
  commits: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example 3
   */
  deletions: number;
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: {
      allow_forking?: boolean;
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format date-time
       */
      created_at: string;
      default_branch: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_discussions: boolean;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /**
       * @format uri
       */
      homepage: string | null;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /**
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string | null;
        /**
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /**
       * @format uri
       */
      merges_url: string;
      milestones_url: string;
      /**
       * @format uri
       */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /**
         * @format uri
         */
        avatar_url: string;
        events_url: string;
        /**
         * @format uri
         */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /**
         * @format uri
         */
        organizations_url: string;
        /**
         * @format uri
         */
        received_events_url: string;
        /**
         * @format uri
         */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /**
         * @format uri
         */
        subscriptions_url: string;
        type: string;
        /**
         * @format uri
         */
        url: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      private: boolean;
      pulls_url: string;
      /**
       * @format date-time
       */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /**
       * @format uri
       */
      stargazers_url: string;
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      svn_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean;
    } | null;
    sha: string;
    user: {
      /**
       * @format uri
       */
      avatar_url: string;
      events_url: string;
      /**
       * @format uri
       */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /**
       * @format uri
       */
      organizations_url: string;
      /**
       * @format uri
       */
      received_events_url: string;
      /**
       * @format uri
       */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /**
       * @format uri
       */
      subscriptions_url: string;
      type: string;
      /**
       * @format uri
       */
      url: string;
    };
  };
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color: string;
    ["default"]: boolean;
    description: string | null;
    /**
     * @format int64
     */
    id: number;
    name: string;
    node_id: string;
    url: string;
  }[];
  /**
   * @example true
   */
  locked: boolean;
  /**
   * Indicates whether maintainers can modify the pull request.
   *
   * @example true
   */
  maintainer_can_modify: boolean;
  /**
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /**
   * @example true
   */
  mergeable: boolean | null;
  /**
   * @example clean
   */
  mergeable_state: string;
  merged: boolean;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  merged_by: NullableSimpleUser;
  milestone: NullableMilestone;
  /**
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   *
   * @example 42
   */
  number: number;
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  /**
   * @example true
   */
  rebaseable?: boolean | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /**
   * @example 0
   */
  review_comments: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   *
   * @example open
   */
  state: "open" | "closed";
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /**
   * The title of the pull request.
   *
   * @example Amazing new feature
   */
  title: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  merged: boolean;
  message: string;
  sha: string;
};

export type PullRequestMinimal = {
  base: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  head: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  id: number;
  number: number;
  url: string;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /**
   * The text of the review.
   *
   * @example This looks great.
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /**
   * A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   *
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string | null;
  /**
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the review
   *
   * @example 42
   */
  id: number;
  /**
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   * @format uri
   */
  pull_request_url: string;
  /**
   * @example CHANGES_REQUESTED
   */
  state: string;
  /**
   * @format date-time
   */
  submitted_at?: string;
  user: NullableSimpleUser;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  _links: {
    html: {
      /**
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       * @format uri
       */
      href: string;
    };
    pull_request: {
      /**
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       * @format uri
       */
      href: string;
    };
    self: {
      /**
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       * @format uri
       */
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /**
   * The text of the comment.
   *
   * @example We should probably include a check for null values here.
   */
  body: string;
  /**
   * @example "<p>comment body</p>"
   */
  body_html?: string;
  /**
   * @example "comment body"
   */
  body_text?: string;
  /**
   * The SHA of the commit to which the comment applies.
   *
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * The diff of the line that the comment refers to.
   *
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /**
   * HTML URL for the pull request review comment.
   *
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /**
   * The ID of the pull request review comment.
   *
   * @example 1
   */
  id: number;
  /**
   * The comment ID to reply to.
   *
   * @example 8
   */
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /**
   * The node ID of the pull request review comment.
   *
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   *
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
   *
   * @example 4
   */
  original_position: number;
  /**
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * The relative path of the file to which the comment applies.
   *
   * @example config/database.yaml
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
   *
   * @example 1
   */
  position: number;
  /**
   * The ID of the pull request review to which the comment belongs.
   *
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * URL for the pull request that the review comment belongs to.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  reactions?: ReactionRollup;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the pull request review comment
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   */
  url: string;
  user: SimpleUser;
};

/**
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  teams: Team[];
  users: SimpleUser[];
};

/**
 * Pull Request Simple
 */
export type PullRequestSimple = {
  _links: {
    comments: Link;
    commits: Link;
    html: Link;
    issue: Link;
    review_comment: Link;
    review_comments: Link;
    self: Link;
    statuses: Link;
  };
  /**
   * @example too heated
   */
  active_lock_reason?: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: NullableSimpleUser;
  };
  /**
   * @example Please pull these awesome changes
   */
  body: string | null;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  closed_at: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   * @format uri
   */
  comments_url: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   * @format uri
   */
  commits_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   * @format uri
   */
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   *
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: NullableSimpleUser;
  };
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_url: string;
  labels: {
    color: string;
    ["default"]: boolean;
    description: string;
    /**
     * @format int64
     */
    id: number;
    name: string;
    node_id: string;
    url: string;
  }[];
  /**
   * @example true
   */
  locked: boolean;
  /**
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  merged_at: string | null;
  milestone: NullableMilestone;
  /**
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;
  /**
   * @example 1347
   */
  number: number;
  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   * @format uri
   */
  patch_url: string;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: Team[] | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   * @format uri
   */
  review_comments_url: string;
  /**
   * @example open
   */
  state: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   * @format uri
   */
  statuses_url: string;
  /**
   * @example new-feature
   */
  title: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};

/**
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  rate: RateLimit;
  resources: {
    actions_runner_registration?: RateLimit;
    code_scanning_upload?: RateLimit;
    core: RateLimit;
    dependency_snapshots?: RateLimit;
    graphql?: RateLimit;
    integration_manifest?: RateLimit;
    scim?: RateLimit;
    search: RateLimit;
    source_import?: RateLimit;
  };
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  /**
   * The reaction to use
   *
   * @example heart
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * @example "2016-05-20T20:09:31.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example MDg6UmVhY3Rpb24x
   */
  node_id: string;
  user: NullableSimpleUser;
};

export type ReactionRollup = {
  ["+1"]: number;
  ["-1"]: number;
  confused: number;
  eyes: number;
  heart: number;
  hooray: number;
  laugh: number;
  rocket: number;
  total_count: number;
  /**
   * @format uri
   */
  url: string;
};

/**
 * A workflow referenced/reused by the initial caller workflow
 */
export type ReferencedWorkflow = {
  path: string;
  ref?: string;
  sha: string;
};

/**
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  /**
   * @example 4
   */
  count: number;
  /**
   * @example Google
   */
  referrer: string;
  /**
   * @example 3
   */
  uniques: number;
};

/**
 * A release.
 */
export type Release = {
  assets: ReleaseAsset[];
  /**
   * @format uri
   */
  assets_url: string;
  author: SimpleUser;
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The URL of the release discussion.
   *
   * @format uri
   */
  discussion_url?: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   *
   * @example false
   */
  draft: boolean;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  mentions_count?: number;
  name: string | null;
  node_id: string;
  /**
   * Whether to identify the release as a prerelease or a full release.
   *
   * @example false
   */
  prerelease: boolean;
  /**
   * @format date-time
   */
  published_at: string | null;
  reactions?: ReactionRollup;
  /**
   * The name of the tag.
   *
   * @example v1.0.0
   */
  tag_name: string;
  /**
   * @format uri
   */
  tarball_url: string | null;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   *
   * @example master
   */
  target_commitish: string;
  upload_url: string;
  /**
   * @format uri
   */
  url: string;
  /**
   * @format uri
   */
  zipball_url: string | null;
};

/**
 * Data related to a release.
 */
export type ReleaseAsset = {
  /**
   * @format uri
   */
  browser_download_url: string;
  content_type: string;
  /**
   * @format date-time
   */
  created_at: string;
  download_count: number;
  id: number;
  label: string | null;
  /**
   * The file name of the asset.
   *
   * @example Team Environment
   */
  name: string;
  node_id: string;
  size: number;
  /**
   * State of the release asset.
   */
  state: "uploaded" | "open";
  /**
   * @format date-time
   */
  updated_at: string;
  uploader: NullableSimpleUser;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Generated name and body describing a release
 */
export type ReleaseNotesContent = {
  /**
   * The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;
  /**
   * The generated name of the release
   *
   * @example Release v1.0.0 is now available!
   */
  name: string;
};

/**
 * Removed from Project Issue Event
 */
export type RemovedFromProjectIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format uri
     */
    url: string;
  };
  url: string;
};

/**
 * Renamed Issue Event
 */
export type RenamedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  rename: {
    from: string;
    to: string;
  };
  url: string;
};

/**
 * Set repository secrets for GitHub Codespaces.
 */
export type RepoCodespacesSecret = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The name of the secret.
   *
   * @example SECRET_TOKEN
   */
  name: string;
  /**
   * @format date-time
   */
  updated_at: string;
};

/**
 * A GitHub Actions required workflow
 */
export type RepoRequiredWorkflow = {
  /**
   * @example https://github.com/sample-org/sample-repo/workflows/required/sample-org/source-repo/.github/workflows/required_ci.yaml/badge.svg
   */
  badge_url: string;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://github.com/sample-org/source-repo/blob/main/.github/workflows/required_ci.yaml
   */
  html_url: string;
  /**
   * @example 5
   */
  id: number;
  /**
   * @example Required CI
   */
  name: string;
  /**
   * @example MDg6V29ya2Zsb3cxMg==
   */
  node_id: string;
  /**
   * @example .github/workflows/required_ci.yaml
   */
  path: string;
  source_repository: MinimalRepository;
  /**
   * @example active
   */
  state: "active" | "deleted";
  /**
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/sample-org/sample-repo/actions/required_workflows/5
   */
  url: string;
};

/**
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  allow_auto_merge?: boolean;
  allow_forking?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  /**
   * @format uri
   */
  contributors_url: string;
  /**
   * @format date-time
   */
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  /**
   * @format uri
   */
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * @format uri
   */
  downloads_url: string;
  /**
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  /**
   * @format uri
   */
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_discussions?: boolean;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  /**
   * @format uri
   */
  homepage: string | null;
  /**
   * @format uri
   */
  hooks_url: string;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  /**
   * @format uri
   */
  languages_url: string;
  license: NullableLicenseSimple;
  master_branch?: string;
  /**
   * @format uri
   */
  merges_url: string;
  milestones_url: string;
  /**
   * @format uri
   */
  mirror_url: string | null;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: NullableSimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  private: boolean;
  pulls_url: string;
  /**
   * @format date-time
   */
  pushed_at: string;
  releases_url: string;
  score: number;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  /**
   * @format uri
   */
  stargazers_url: string;
  statuses_url: string;
  /**
   * @format uri
   */
  subscribers_url: string;
  /**
   * @format uri
   */
  subscription_url: string;
  /**
   * @format uri
   */
  svn_url: string;
  /**
   * @format uri
   */
  tags_url: string;
  /**
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  text_matches?: SearchResultTextMatches;
  topics?: string[];
  trees_url: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * A repository on GitHub.
 */
export type Repository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   *
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /**
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /**
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /**
   * Whether discussions are enabled.
   *
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /**
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license: NullableLicenseSimple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /**
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /**
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /**
   * @example 0
   */
  open_issues_count: number;
  organization?: NullableSimpleUser;
  owner: SimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   *
   * @example 108
   */
  size: number;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /**
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_auto_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      pull?: boolean;
      push?: boolean;
      triage?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: string[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    use_squash_pr_title_as_default?: boolean;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   *
   * @default false
   * @deprecated true
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   *
   * @default false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  /**
   * @example admin
   */
  role_name: string;
  user: NullableCollaborator;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /**
   * @example "2016-06-13T19:52:50.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  /**
   * @example https://github.com/octocat/Hello-World/invitations
   */
  html_url: string;
  /**
   * Unique identifier of the repository invitation.
   *
   * @example 42
   */
  id: number;
  invitee: NullableSimpleUser;
  inviter: NullableSimpleUser;
  node_id: string;
  /**
   * The permission associated with the invitation.
   *
   * @example read
   */
  permissions: "read" | "write" | "admin" | "triage" | "maintain";
  repository: MinimalRepository;
  /**
   * URL for the repository invitation
   *
   * @example https://api.github.com/user/repository-invitations/1
   */
  url: string;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  /**
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;
  /**
   * @example https://api.github.com/repos/octocat/example
   * @format uri
   */
  repository_url: string;
  /**
   * Determines if notifications should be received from this repository.
   *
   * @example true
   */
  subscribed: boolean;
  /**
   * @example https://api.github.com/repos/octocat/example/subscription
   * @format uri
   */
  url: string;
};

export type RequiredWorkflow = {
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * Unique identifier for a required workflow
   */
  id: number;
  /**
   * Name present in the workflow file
   */
  name: string;
  /**
   * Path of the workflow file
   */
  path: string;
  /**
   * Ref at which the workflow file will be selected
   */
  ref: string;
  repository: MinimalRepository;
  /**
   * Scope of the required workflow
   */
  scope: "all" | "selected";
  /**
   * @example https://api.github.com/organizations/org/actions/required_workflows/1/repositories
   * @format uri
   */
  selected_repositories_url?: string;
  /**
   * State of the required workflow
   */
  state: "active" | "deleted";
  /**
   * @format date-time
   */
  updated_at: string;
};

/**
 * Legacy Review Comment
 */
export type ReviewComment = {
  _links: {
    html: Link;
    pull_request: Link;
    self: Link;
  };
  author_association: AuthorAssociation;
  /**
   * @example Great stuff
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;
  /**
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   * @format uri
   */
  html_url: string;
  /**
   * @example 10
   */
  id: number;
  /**
   * @example 8
   */
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  line?: number;
  /**
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;
  /**
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   *
   * @example 2
   */
  original_line?: number;
  /**
   * @example 4
   */
  original_position: number;
  /**
   * The original first line of the range for a multi-line comment.
   *
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * @example file1.txt
   */
  path: string;
  /**
   * @example 1
   */
  position: number | null;
  /**
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   * @format uri
   */
  pull_request_url: string;
  reactions?: ReactionRollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The first line of the range for a multi-line comment.
   *
   * @example 2
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   *
   * @default RIGHT
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   * @format uri
   */
  url: string;
  user: NullableSimpleUser;
};

/**
 * Review Dismissed Issue Event
 */
export type ReviewDismissedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  dismissed_review: {
    dismissal_commit_id?: string;
    dismissal_message: string | null;
    review_id: number;
    state: string;
  };
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * Review Request Removed Issue Event
 */
export type ReviewRequestRemovedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  requested_reviewer?: SimpleUser;
  requested_team?: Team;
  review_requester: SimpleUser;
  url: string;
};

/**
 * Review Requested Issue Event
 */
export type ReviewRequestedIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  requested_reviewer?: SimpleUser;
  requested_team?: Team;
  review_requester: SimpleUser;
  url: string;
};

export type Root = {
  /**
   * @format uri-template
   */
  authorizations_url: string;
  /**
   * @format uri-template
   */
  code_search_url: string;
  /**
   * @format uri-template
   */
  commit_search_url: string;
  /**
   * @format uri-template
   */
  current_user_authorizations_html_url: string;
  /**
   * @format uri-template
   */
  current_user_repositories_url: string;
  /**
   * @format uri-template
   */
  current_user_url: string;
  /**
   * @format uri-template
   */
  emails_url: string;
  /**
   * @format uri-template
   */
  emojis_url: string;
  /**
   * @format uri-template
   */
  events_url: string;
  /**
   * @format uri-template
   */
  feeds_url: string;
  /**
   * @format uri-template
   */
  followers_url: string;
  /**
   * @format uri-template
   */
  following_url: string;
  /**
   * @format uri-template
   */
  gists_url: string;
  /**
   * @format uri-template
   */
  hub_url: string;
  /**
   * @format uri-template
   */
  issue_search_url: string;
  /**
   * @format uri-template
   */
  issues_url: string;
  /**
   * @format uri-template
   */
  keys_url: string;
  /**
   * @format uri-template
   */
  label_search_url: string;
  /**
   * @format uri-template
   */
  notifications_url: string;
  /**
   * @format uri-template
   */
  organization_repositories_url: string;
  /**
   * @format uri-template
   */
  organization_teams_url: string;
  /**
   * @format uri-template
   */
  organization_url: string;
  /**
   * @format uri-template
   */
  public_gists_url: string;
  /**
   * @format uri-template
   */
  rate_limit_url: string;
  /**
   * @format uri-template
   */
  repository_search_url: string;
  /**
   * @format uri-template
   */
  repository_url: string;
  /**
   * @format uri-template
   */
  starred_gists_url: string;
  /**
   * @format uri-template
   */
  starred_url: string;
  /**
   * @format uri-template
   */
  topic_search_url?: string;
  /**
   * @format uri-template
   */
  user_organizations_url: string;
  /**
   * @format uri-template
   */
  user_repositories_url: string;
  /**
   * @format uri-template
   */
  user_search_url: string;
  /**
   * @format uri-template
   */
  user_url: string;
};

/**
 * A self hosted runner
 */
export type Runner = {
  busy: boolean;
  /**
   * The id of the runner.
   *
   * @example 5
   */
  id: number;
  labels: RunnerLabel[];
  /**
   * The name of the runner.
   *
   * @example iMac
   */
  name: string;
  /**
   * The Operating System of the runner.
   *
   * @example macos
   */
  os: string;
  /**
   * The status of the runner.
   *
   * @example online
   */
  status: string;
};

/**
 * Runner Application
 */
export type RunnerApplication = {
  architecture: string;
  download_url: string;
  filename: string;
  os: string;
  sha256_checksum?: string;
  /**
   * A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
};

/**
 * A label for a self hosted runner
 */
export type RunnerLabel = {
  /**
   * Unique identifier of the label.
   */
  id?: number;
  /**
   * Name of the label.
   */
  name: string;
  /**
   * The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: "read-only" | "custom";
};

/**
 * Scim Error
 */
export type ScimError = {
  detail?: string | null;
  documentation_url?: string | null;
  message?: string | null;
  schemas?: string[];
  scimType?: string | null;
  status?: number;
};

export type SearchResultTextMatches = {
  fragment?: string;
  matches?: {
    indices?: number[];
    text?: string;
  }[];
  object_type?: string | null;
  object_url?: string;
  property?: string;
}[];

export type SecretScanningAlert = {
  created_at?: AlertCreatedAt;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   *
   * @format uri
   */
  locations_url?: string;
  number?: AlertNumber;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypassed_by?: NullableSimpleUser;
  resolution?: SecretScanningAlertResolution;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  resolved_at?: string | null;
  resolved_by?: NullableSimpleUser;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  state?: SecretScanningAlertState;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
};

/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert.
 */
export type SecretScanningAlertResolution =
  | any
  | "false_positive"
  | "wont_fix"
  | "revoked"
  | "used_in_tests"
  | null;

/**
 * An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.
 */
export type SecretScanningAlertResolutionComment = string | null;

/**
 * Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
 */
export type SecretScanningAlertState = "open" | "resolved";

export type SecretScanningLocation = {
  details:
    | SecretScanningLocationCommit
    | SecretScanningLocationIssueTitle
    | SecretScanningLocationIssueBody
    | SecretScanningLocationIssueComment;
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
   *
   * @example commit
   */
  type: "commit" | "issue_title" | "issue_body" | "issue_comment";
};

/**
 * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
export type SecretScanningLocationCommit = {
  /**
   * SHA-1 hash ID of the associated blob
   *
   * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
   */
  blob_sha: string;
  /**
   * The API URL to get the associated blob resource
   */
  blob_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   *
   * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
   */
  commit_sha: string;
  /**
   * The API URL to get the associated commit resource
   */
  commit_url: string;
  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;
  /**
   * Line number at which the secret ends in the file
   */
  end_line: number;
  /**
   * The file path in the repository
   *
   * @example /example/secrets.txt
   */
  path: string;
  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;
  /**
   * Line number at which the secret starts in the file
   */
  start_line: number;
};

/**
 * Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
 */
export type SecretScanningLocationIssueBody = {
  /**
   * The API URL to get the issue where the secret was detected.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_body_url: string;
};

/**
 * Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
 */
export type SecretScanningLocationIssueComment = {
  /**
   * The API URL to get the issue comment where the secret was detected.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451
   * @format uri
   */
  issue_comment_url: string;
};

/**
 * Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
 */
export type SecretScanningLocationIssueTitle = {
  /**
   * The API URL to get the issue where the secret was detected.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   * @format uri
   */
  issue_title_url: string;
};

export type SecurityAndAnalysis = {
  advanced_security?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_push_protection?: {
    status?: "enabled" | "disabled";
  };
} | null;

export type SelectedActions = {
  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   *
   * **Note**: The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: string[];
  /**
   * Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;
};

/**
 * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
 */
export type SelectedActionsUrl = string;

/**
 * Short Blob
 */
export type ShortBlob = {
  sha: string;
  url: string;
};

/**
 * Short Branch
 */
export type ShortBranch = {
  commit: {
    sha: string;
    /**
     * @format uri
     */
    url: string;
  };
  name: string;
  protected: boolean;
  protection?: BranchProtection;
  /**
   * @format uri
   */
  protection_url?: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type SimpleCheckSuite = {
  /**
   * @example d6fde92930d4715a2b49857d24b940956b26d2d3
   */
  after?: string | null;
  app?: Integration;
  /**
   * @example 146e867f55c26428e5f9fade55a9bbf5e95a7912
   */
  before?: string | null;
  /**
   * @example neutral
   */
  conclusion?:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "stale"
    | "startup_failure"
    | null;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @example master
   */
  head_branch?: string | null;
  /**
   * The SHA of the head commit that is being checked.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha?: string;
  /**
   * @example 5
   */
  id?: number;
  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id?: string;
  pull_requests?: PullRequestMinimal[];
  repository?: MinimalRepository;
  /**
   * @example completed
   */
  status?: "queued" | "in_progress" | "completed" | "pending" | "waiting";
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @example https://api.github.com/repos/github/hello-world/check-suites/5
   */
  url?: string;
};

/**
 * A commit.
 */
export type SimpleCommit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  /**
   * @format date-time
   */
  timestamp: string;
  tree_id: string;
};

export type SimpleCommitStatus = {
  /**
   * @format uri
   */
  avatar_url: string | null;
  context: string;
  /**
   * @format date-time
   */
  created_at: string;
  description: string | null;
  id: number;
  node_id: string;
  required?: boolean | null;
  state: string;
  /**
   * @format uri
   */
  target_url: string | null;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
 */
export type SimpleInstallation = {
  /**
   * The ID of the installation.
   *
   * @example 1
   */
  id: number;
  /**
   * The global node ID of the installation.
   *
   * @example MDQ6VXNlcjU4MzIzMQ==
   */
  node_id: string;
};

/**
 * A GitHub repository.
 */
export type SimpleRepository = {
  /**
   * A template for the API URL to download the repository as an archive.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * The repository description.
   *
   * @example This your first repo!
   */
  description: string | null;
  /**
   * The API URL to list the downloads on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  /**
   * Whether the repository is a fork.
   */
  fork: boolean;
  /**
   * The API URL to list the forks of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * The full, globally unique, name of the repository.
   *
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /**
   * The API URL to list the hooks on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * The URL to view the repository on GitHub.com.
   *
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * A unique identifier of the repository.
   *
   * @example 1296269
   */
  id: number;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /**
   * The name of the repository.
   *
   * @example Hello-World
   */
  name: string;
  /**
   * The GraphQL identifier of the repository.
   *
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  owner: SimpleUser;
  /**
   * Whether the repository is private.
   */
  private: boolean;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   *
   * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * The URL to get more information about the repository from the GitHub API.
   *
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
};

/**
 * A GitHub user.
 */
export type SimpleUser = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   * @format uri
   */
  avatar_url: string;
  email?: string | null;
  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;
  /**
   * @example https://api.github.com/users/octocat/followers
   * @format uri
   */
  followers_url: string;
  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;
  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;
  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example octocat
   */
  login: string;
  name?: string | null;
  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;
  /**
   * @example https://api.github.com/users/octocat/orgs
   * @format uri
   */
  organizations_url: string;
  /**
   * @example https://api.github.com/users/octocat/received_events
   * @format uri
   */
  received_events_url: string;
  /**
   * @example https://api.github.com/users/octocat/repos
   * @format uri
   */
  repos_url: string;
  site_admin: boolean;
  /**
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;
  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;
  /**
   * @example https://api.github.com/users/octocat/subscriptions
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @example User
   */
  type: string;
  /**
   * @example https://api.github.com/users/octocat
   * @format uri
   */
  url: string;
};

/**
 * Create a new snapshot of a repository's dependencies.
 */
export type Snapshot = {
  /**
   * A description of the detector used.
   */
  detector: {
    /**
     * The name of the detector used.
     *
     * @example docker buildtime detector
     */
    name: string;
    /**
     * The url of the detector used.
     *
     * @example http://example.com/docker-buildtimer-detector
     */
    url: string;
    /**
     * The version of the detector used.
     *
     * @example 1.0.0
     */
    version: string;
  };
  job: {
    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     *
     * @example yourworkflowname_yourjobname
     */
    correlator: string;
    /**
     * The url for the job.
     *
     * @example http://example.com/build
     */
    html_url?: string;
    /**
     * The external ID of the job.
     *
     * @example 5622a2b0-63f6-4732-8c34-a1ab27e102a11
     */
    id: string;
  };
  /**
   * A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
   */
  manifests?: {
    [key: string]: Manifest;
  };
  metadata?: Metadata;
  /**
   * The repository branch that triggered this snapshot.
   *
   * @example refs/heads/main
   * @pattern ^refs/
   */
  ref: string;
  /**
   * The time at which the snapshot was scanned.
   *
   * @example "2020-06-13T19:52:50.000Z"
   * @format date-time
   */
  scanned: string;
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   *
   * @example ddc951f4b1293222421f2c8df679786153acf689
   * @maxLength 40
   * @minLength 40
   */
  sha: string;
  /**
   * The version of the repository snapshot submission.
   */
  version: number;
};

/**
 * A public SSH key used to sign Git commits
 */
export type SshSigningKey = {
  /**
   * @format date-time
   */
  created_at: string;
  id: number;
  key: string;
  title: string;
};

/**
 * Stargazer
 */
export type Stargazer = {
  /**
   * @format date-time
   */
  starred_at: string;
  user: NullableSimpleUser;
};

/**
 * Starred Repository
 */
export type StarredRepository = {
  repo: Repository;
  /**
   * @format date-time
   */
  starred_at: string;
};

/**
 * State Change Issue Event
 */
export type StateChangeIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  state_reason?: string | null;
  url: string;
};

/**
 * The status of a commit.
 */
export type Status = {
  avatar_url: string | null;
  context: string;
  created_at: string;
  creator: NullableSimpleUser;
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  target_url: string | null;
  updated_at: string;
  url: string;
};

/**
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  checks: {
    app_id: number | null;
    /**
     * @example continuous-integration/travis-ci
     */
    context: string;
  }[];
  /**
   * @example continuous-integration/travis-ci
   */
  contexts: string[];
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
   * @format uri
   */
  contexts_url: string;
  /**
   * @example true
   */
  strict: boolean;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
   * @format uri
   */
  url: string;
};

/**
 * Tag
 */
export type Tag = {
  commit: {
    sha: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * @example v0.1
   */
  name: string;
  node_id: string;
  /**
   * @example https://github.com/octocat/Hello-World/tarball/v0.1
   * @format uri
   */
  tarball_url: string;
  /**
   * @example https://github.com/octocat/Hello-World/zipball/v0.1
   * @format uri
   */
  zipball_url: string;
};

/**
 * Tag protection
 */
export type TagProtection = {
  /**
   * @example "2011-01-26T19:01:12.000Z"
   */
  created_at?: string;
  /**
   * @example true
   */
  enabled?: boolean;
  /**
   * @example 2
   */
  id?: number;
  /**
   * @example v1.*
   */
  pattern: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   */
  updated_at?: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  description: string | null;
  /**
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  id: number;
  members_url: string;
  name: string;
  node_id: string;
  parent: NullableTeamSimple;
  permission: string;
  permissions?: {
    admin: boolean;
    maintain: boolean;
    pull: boolean;
    push: boolean;
    triage: boolean;
  };
  privacy?: string;
  /**
   * @format uri
   */
  repositories_url: string;
  slug: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  author: NullableSimpleUser;
  /**
   * The main text of the discussion.
   *
   * @example Please suggest improvements to our workflow in comments.
   */
  body: string;
  /**
   * @example <p>Hi! This is an area for us to collaborate as a team</p>
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /**
   * @example 0
   */
  comments_count: number;
  /**
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
   * @format uri
   */
  comments_url: string;
  /**
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1
   * @format uri
   */
  html_url: string;
  /**
   * @format date-time
   */
  last_edited_at: string | null;
  /**
   * @example MDE0OlRlYW1EaXNjdXNzaW9uMQ==
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   *
   * @example 42
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   *
   * @example true
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   *
   * @example true
   */
  private: boolean;
  reactions?: ReactionRollup;
  /**
   * @example https://api.github.com/organizations/1/team/2343027
   * @format uri
   */
  team_url: string;
  /**
   * The title of the discussion.
   *
   * @example How can we improve our workflow?
   */
  title: string;
  /**
   * @example "2018-01-25T18:56:31.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1
   * @format uri
   */
  url: string;
};

/**
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  author: NullableSimpleUser;
  /**
   * The main text of the comment.
   *
   * @example I agree with this suggestion.
   */
  body: string;
  /**
   * @example <p>Do you like apples?</p>
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   *
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  /**
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1
   * @format uri
   */
  discussion_url: string;
  /**
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
   * @format uri
   */
  html_url: string;
  /**
   * @format date-time
   */
  last_edited_at: string | null;
  /**
   * @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   *
   * @example 42
   */
  number: number;
  reactions?: ReactionRollup;
  /**
   * @example "2018-01-15T23:53:58.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
   * @format uri
   */
  url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /**
   * @example "2017-07-14T16:53:42.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example A great team.
   */
  description: string | null;
  /**
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the team
   *
   * @example 42
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /**
   * @example 3
   */
  members_count: number;
  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /**
   * Name of the team
   *
   * @example Developers
   */
  name: string;
  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  organization: TeamOrganization;
  parent?: NullableTeamSimple;
  /**
   * Permission that the team will have for its repositories
   *
   * @example push
   */
  permission: string;
  /**
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: "closed" | "secret";
  /**
   * @example 10
   */
  repos_count: number;
  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /**
   * @example justice-league
   */
  slug: string;
  /**
   * @example "2017-08-17T12:37:15.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
};

/**
 * Team Membership
 */
export type TeamMembership = {
  /**
   * The role of the user in the team.
   *
   * @default member
   * @example member
   */
  role: "member" | "maintainer";
  /**
   * The state of the user's membership in the team.
   */
  state: "active" | "pending";
  /**
   * @format uri
   */
  url: string;
};

/**
 * Team Organization
 */
export type TeamOrganization = {
  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
  /**
   * @example org@example.com
   * @format email
   */
  billing_email?: string | null;
  /**
   * @example https://github.com/blog
   * @format uri
   */
  blog?: string;
  /**
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @example GitHub
   */
  company?: string;
  /**
   * @example "2008-01-14T04:33:35.000Z"
   * @format date-time
   */
  created_at: string;
  default_repository_permission?: string | null;
  /**
   * @example A great organization
   */
  description: string | null;
  /**
   * @example 10000
   */
  disk_usage?: number | null;
  /**
   * @example octocat@github.com
   * @format email
   */
  email?: string;
  /**
   * @example https://api.github.com/orgs/github/events
   * @format uri
   */
  events_url: string;
  /**
   * @example 20
   */
  followers: number;
  /**
   * @example 0
   */
  following: number;
  /**
   * @example true
   */
  has_organization_projects: boolean;
  /**
   * @example true
   */
  has_repository_projects: boolean;
  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat
   * @format uri
   */
  html_url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example true
   */
  is_verified?: boolean;
  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;
  /**
   * @example San Francisco
   */
  location?: string;
  /**
   * @example github
   */
  login: string;
  /**
   * @example all
   */
  members_allowed_repository_creation_type?: string;
  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /**
   * @example false
   */
  members_can_fork_private_repositories?: boolean | null;
  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;
  /**
   * @example github
   */
  name?: string;
  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;
  /**
   * @example 100
   */
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  /**
   * @example 81
   */
  private_gists?: number | null;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example https://api.github.com/orgs/github/repos
   * @format uri
   */
  repos_url: string;
  /**
   * @example 100
   */
  total_private_repos?: number;
  /**
   * @example github
   */
  twitter_username?: string | null;
  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /**
   * @example Organization
   */
  type: string;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/orgs/github
   * @format uri
   */
  url: string;
  /**
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * A team's access to a project.
 */
export type TeamProject = {
  body: string | null;
  columns_url: string;
  created_at: string;
  creator: SimpleUser;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  number: number;
  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
  owner_url: string;
  permissions: {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  state: string;
  updated_at: string;
  url: string;
};

/**
 * A team's access to a repository.
 */
export type TeamRepository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   *
   * @default false
   * @example false
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;
  /**
   * Whether the repository is archived.
   *
   * @default false
   */
  archived: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;
  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   * @format uri
   */
  contributors_url: string;
  /**
   * @example "2011-01-26T19:01:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  /**
   * The default branch of the repository.
   *
   * @example master
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   * @format uri
   */
  deployments_url: string;
  /**
   * @example This your first repo!
   */
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   * @format uri
   */
  downloads_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   * @format uri
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   * @format uri
   */
  forks_url: string;
  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;
  /**
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /**
   * @example https://github.com
   * @format uri
   */
  homepage: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   * @format uri
   */
  hooks_url: string;
  /**
   * @example https://github.com/octocat/Hello-World
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the repository
   *
   * @example 42
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;
  language: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   * @format uri
   */
  languages_url: string;
  license: NullableLicenseSimple;
  master_branch?: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   * @format uri
   */
  merges_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;
  /**
   * @example git:git.example.com/octocat/Hello-World
   * @format uri
   */
  mirror_url: string | null;
  /**
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  network_count?: number;
  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;
  open_issues: number;
  /**
   * @example 0
   */
  open_issues_count: number;
  owner: NullableSimpleUser;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   *
   * @default false
   */
  private: boolean;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;
  /**
   * @example "2011-01-26T19:06:43.000Z"
   * @format date-time
   */
  pushed_at: string | null;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  /**
   * @example admin
   */
  role_name?: string;
  /**
   * @example 108
   */
  size: number;
  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   * @format uri
   */
  stargazers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   * @format uri
   */
  subscribers_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   * @format uri
   */
  subscription_url: string;
  /**
   * @example https://svn.github.com/octocat/Hello-World
   * @format uri
   */
  svn_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   * @format uri
   */
  tags_url: string;
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   * @format uri
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: NullableRepository;
  topics?: string[];
  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  /**
   * @example "2011-01-26T19:14:43.000Z"
   * @format date-time
   */
  updated_at: string | null;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   * @format uri
   */
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   *
   * @default public
   */
  visibility?: string;
  watchers: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   *
   * @default false
   * @example false
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /**
   * Description of the team
   *
   * @example A great team.
   */
  description: string | null;
  /**
   * @example https://github.com/orgs/rails/teams/core
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the team
   *
   * @example 1
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   *
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;
  /**
   * Name of the team
   *
   * @example Justice League
   */
  name: string;
  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;
  /**
   * Permission that the team will have for its repositories
   *
   * @example admin
   */
  permission: string;
  /**
   * The level of privacy this team should have
   *
   * @example closed
   */
  privacy?: string;
  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   * @format uri
   */
  repositories_url: string;
  /**
   * @example justice-league
   */
  slug: string;
  /**
   * URL for the team
   *
   * @example https://api.github.com/organizations/1/team/1
   * @format uri
   */
  url: string;
};

/**
 * Thread
 */
export type Thread = {
  id: string;
  last_read_at: string | null;
  reason: string;
  repository: MinimalRepository;
  subject: {
    latest_comment_url: string;
    title: string;
    type: string;
    url: string;
  };
  /**
   * @example https://api.github.com/notifications/threads/2/subscription
   */
  subscription_url: string;
  unread: boolean;
  updated_at: string;
  url: string;
};

/**
 * Thread Subscription
 */
export type ThreadSubscription = {
  /**
   * @example "2012-10-06T21:34:12.000Z"
   * @format date-time
   */
  created_at: string | null;
  ignored: boolean;
  reason: string | null;
  /**
   * @example https://api.github.com/repos/1
   * @format uri
   */
  repository_url?: string;
  /**
   * @example true
   */
  subscribed: boolean;
  /**
   * @example https://api.github.com/notifications/threads/1
   * @format uri
   */
  thread_url?: string;
  /**
   * @example https://api.github.com/notifications/threads/1/subscription
   * @format uri
   */
  url: string;
};

/**
 * Timeline Assigned Issue Event
 */
export type TimelineAssignedIssueEvent = {
  actor: SimpleUser;
  assignee: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * Timeline Comment Event
 */
export type TimelineCommentEvent = {
  actor: SimpleUser;
  author_association: AuthorAssociation;
  /**
   * Contents of the issue comment
   *
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  created_at: string;
  event: string;
  /**
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the issue comment
   *
   * @example 42
   */
  id: number;
  /**
   * @format uri
   */
  issue_url: string;
  node_id: string;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
  /**
   * @example "2011-04-14T16:00:49.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * URL for the issue comment
   *
   * @example https://api.github.com/repositories/42/issues/comments/1
   * @format uri
   */
  url: string;
  user: SimpleUser;
};

/**
 * Timeline Commit Commented Event
 */
export type TimelineCommitCommentedEvent = {
  comments?: CommitComment[];
  commit_id?: string;
  event?: string;
  node_id?: string;
};

/**
 * Timeline Committed Event
 */
export type TimelineCommittedEvent = {
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /**
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /**
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     *
     * @example "2014-08-08T20:02:04.000Z"
     * @format date-time
     */
    date: string;
    /**
     * Git email address of the user
     *
     * @example monalisa.octocat@example.com
     */
    email: string;
    /**
     * Name of the git user
     *
     * @example Monalisa Octocat
     */
    name: string;
  };
  event?: string;
  /**
   * @format uri
   */
  html_url: string;
  /**
   * Message describing the purpose of the commit
   *
   * @example Fix #42
   */
  message: string;
  node_id: string;
  parents: {
    /**
     * @format uri
     */
    html_url: string;
    /**
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /**
     * @format uri
     */
    url: string;
  }[];
  /**
   * SHA for the commit
   *
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  tree: {
    /**
     * SHA for the commit
     *
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * @format uri
   */
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Timeline Cross Referenced Event
 */
export type TimelineCrossReferencedEvent = {
  actor?: SimpleUser;
  /**
   * @format date-time
   */
  created_at: string;
  event: string;
  source: {
    issue?: Issue;
    type?: string;
  };
  /**
   * @format date-time
   */
  updated_at: string;
};

/**
 * Timeline Event
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;

/**
 * Timeline Line Commented Event
 */
export type TimelineLineCommentedEvent = {
  comments?: PullRequestReviewComment[];
  event?: string;
  node_id?: string;
};

/**
 * Timeline Reviewed Event
 */
export type TimelineReviewedEvent = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: AuthorAssociation;
  /**
   * The text of the review.
   *
   * @example This looks great.
   */
  body: string | null;
  body_html?: string;
  body_text?: string;
  /**
   * A commit SHA for the review.
   *
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string;
  event: string;
  /**
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the review
   *
   * @example 42
   */
  id: number;
  /**
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   * @format uri
   */
  pull_request_url: string;
  /**
   * @example CHANGES_REQUESTED
   */
  state: string;
  /**
   * @format date-time
   */
  submitted_at?: string;
  user: SimpleUser;
};

/**
 * Timeline Unassigned Issue Event
 */
export type TimelineUnassignedIssueEvent = {
  actor: SimpleUser;
  assignee: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: string[];
};

/**
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  /**
   * @format date-time
   */
  created_at: string;
  created_by: string | null;
  curated: boolean;
  description: string | null;
  display_name: string | null;
  featured: boolean;
  /**
   * @format uri
   */
  logo_url?: string | null;
  name: string;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  released: string | null;
  repository_count?: number | null;
  score: number;
  short_description: string | null;
  text_matches?: SearchResultTextMatches;
  /**
   * @format date-time
   */
  updated_at: string;
};

export type Traffic = {
  count: number;
  /**
   * @format date-time
   */
  timestamp: string;
  uniques: number;
};

/**
 * Unassigned Issue Event
 */
export type UnassignedIssueEvent = {
  actor: SimpleUser;
  assignee: SimpleUser;
  assigner: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * Unlabeled Issue Event
 */
export type UnlabeledIssueEvent = {
  actor: SimpleUser;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  label: {
    color: string;
    name: string;
  };
  node_id: string;
  performed_via_github_app: NullableIntegration;
  url: string;
};

/**
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  account: MarketplaceAccount;
  /**
   * @example monthly
   */
  billing_cycle: string;
  /**
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  free_trial_ends_on: string | null;
  /**
   * @example "2017-11-11T00:00:00.000Z"
   * @format date-time
   */
  next_billing_date: string | null;
  /**
   * @example true
   */
  on_free_trial: boolean;
  plan: MarketplaceListingPlan;
  unit_count: number | null;
  /**
   * @example "2017-11-02T01:12:12.000Z"
   * @format date-time
   */
  updated_at: string | null;
};

/**
 * User Search Result Item
 */
export type UserSearchResultItem = {
  /**
   * @format uri
   */
  avatar_url: string;
  bio?: string | null;
  blog?: string | null;
  company?: string | null;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format email
   */
  email?: string | null;
  events_url: string;
  followers?: number;
  /**
   * @format uri
   */
  followers_url: string;
  following?: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable?: boolean | null;
  /**
   * @format uri
   */
  html_url: string;
  id: number;
  location?: string | null;
  login: string;
  name?: string | null;
  node_id: string;
  /**
   * @format uri
   */
  organizations_url: string;
  public_gists?: number;
  public_repos?: number;
  /**
   * @format uri
   */
  received_events_url: string;
  /**
   * @format uri
   */
  repos_url: string;
  score: number;
  site_admin: boolean;
  starred_url: string;
  /**
   * @format uri
   */
  subscriptions_url: string;
  /**
   * @format date-time
   */
  suspended_at?: string | null;
  text_matches?: SearchResultTextMatches;
  type: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @format uri
   */
  url: string;
};

/**
 * Validation Error
 */
export type ValidationError = {
  documentation_url: string;
  errors?: {
    code: string;
    field?: string;
    index?: number;
    message?: string;
    resource?: string;
    value?: (string | null) | (number | null) | (string[] | null);
  }[];
  message: string;
};

/**
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  documentation_url: string;
  errors?: string[];
  message: string;
};

export type Verification = {
  payload: string | null;
  reason: string;
  signature: string | null;
  verified: boolean;
};

/**
 * View Traffic
 */
export type ViewTraffic = {
  /**
   * @example 14850
   */
  count: number;
  /**
   * @example 3782
   */
  uniques: number;
  views: Traffic[];
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 *
 * @example 30
 */
export type WaitTimer = number;

export type WebhookBranchProtectionRuleCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
    allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    /**
     * @format date-time
     */
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | "off"
      | "non_admins"
      | "everyone";
    merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
    name: string;
    pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: "off" | "non_admins" | "everyone";
    required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
    required_status_checks: string[];
    required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
    signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
    strict_required_status_checks_policy: boolean;
    /**
     * @format date-time
     */
    updated_at: string;
  };
  sender: SimpleUser;
};

export type WebhookBranchProtectionRuleDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
    allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    /**
     * @format date-time
     */
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | "off"
      | "non_admins"
      | "everyone";
    merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
    name: string;
    pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: "off" | "non_admins" | "everyone";
    required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
    required_status_checks: string[];
    required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
    signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
    strict_required_status_checks_policy: boolean;
    /**
     * @format date-time
     */
    updated_at: string;
  };
  sender: SimpleUser;
};

export type WebhookBranchProtectionRuleEdited = {
  action: "edited";
  /**
   * If the action was `edited`, the changes to the rule.
   */
  changes?: {
    admin_enforced?: {
      from: boolean | null;
    };
    authorized_actor_names?: {
      from: string[];
    };
    authorized_actors_only?: {
      from: boolean | null;
    };
    authorized_dismissal_actors_only?: {
      from: boolean | null;
    };
    linear_history_requirement_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    required_status_checks?: {
      from: string[];
    };
    required_status_checks_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
    allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    /**
     * @format date-time
     */
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | "off"
      | "non_admins"
      | "everyone";
    merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
    name: string;
    pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: "off" | "non_admins" | "everyone";
    required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
    required_status_checks: string[];
    required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
    signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
    strict_required_status_checks_policy: boolean;
    /**
     * @format date-time
     */
    updated_at: string;
  };
  sender: SimpleUser;
};

export type WebhookCheckRunCompleted = {
  action?: "completed";
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

/**
 * The check_run.completed webhook encoded with URL encoding
 */
export type WebhookCheckRunCompletedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookCheckRunCreated = {
  action?: "created";
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

/**
 * The check_run.created webhook encoded with URL encoding
 */
export type WebhookCheckRunCreatedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookCheckRunRequestedAction = {
  action: "requested_action";
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  /**
   * The action requested by the user.
   */
  requested_action?: {
    /**
     * The integrator reference of the action requested by the user.
     */
    identifier?: string;
  };
  sender: SimpleUser;
};

/**
 * The check_run.requested_action webhook encoded with URL encoding
 */
export type WebhookCheckRunRequestedActionFormEncoded = {
  /**
   * A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookCheckRunRerequested = {
  action?: "rerequested";
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

/**
 * The check_run.rerequested webhook encoded with URL encoding
 */
export type WebhookCheckRunRerequestedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookCheckSuiteCompleted = {
  action: "completed";
  actions_meta?: Record<string, any> | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_group"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "projects_v2_item"
        | "secret_scanning_alert_location"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    };
    before: string | null;
    /**
     * @format uri
     */
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`.
     */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | "skipped"
      | "startup_failure"
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status:
      | "requested"
      | "in_progress"
      | "completed"
      | "queued"
      | any
      | "pending"
      | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     *
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCheckSuiteRequested = {
  action: "requested";
  actions_meta?: Record<string, any> | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "secret_scanning_alert_location"
        | "projects_v2_item"
        | "merge_group"
        | "repository_import"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    };
    before: string | null;
    /**
     * @format uri
     */
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | "skipped"
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status: "requested" | "in_progress" | "completed" | "queued" | any | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     *
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCheckSuiteRerequested = {
  action: "rerequested";
  actions_meta?: {
    rerun_info?: {
      job_ids?: string[];
      plan_id?: string;
    };
  } | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    };
    before: string | null;
    /**
     * @format uri
     */
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status: "requested" | "in_progress" | "completed" | "queued" | any | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     *
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertAppearedInBranch = {
  action: "appeared_in_branch";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    dismissed_at: string | null;
    dismissed_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason:
      | "false positive"
      | "won't fix"
      | "used in tests"
      | any
      | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "open" | "dismissed" | "fixed";
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertClosedByUser = {
  action: "closed_by_user";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    dismissed_at: string;
    dismissed_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason:
      | "false positive"
      | "won't fix"
      | "used in tests"
      | any
      | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "dismissed" | "fixed";
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertCreated = {
  action: "created";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string | null;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: void | null;
    dismissed_by: void | null;
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: void | null;
    fixed_at?: void | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    instances_url?: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "open" | "dismissed";
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    } | null;
    updated_at?: string | null;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertFixed = {
  action: "fixed";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    dismissed_at: string | null;
    dismissed_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason:
      | "false positive"
      | "won't fix"
      | "used in tests"
      | any
      | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    /**
     * @format uri
     */
    instances_url?: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "fixed";
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertReopened = {
  action: "reopened";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string | null;
    dismissed_by: Record<string, any> | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: string | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "open" | "dismissed" | "fixed";
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    /**
     * @format uri
     */
    url: string;
  } | null;
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string | null;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCodeScanningAlertReopenedByUser = {
  action: "reopened_by_user";
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     *
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: void | null;
    dismissed_by: void | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: void | null;
    /**
     * The GitHub URL of the alert resource.
     *
     * @format uri
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: "none" | "note" | "warning" | "error" | any | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: "open" | "fixed";
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookCommitCommentCreated = {
  /**
   * The action performed. Can be `created`.
   */
  action: "created";
  /**
   * The [commit comment](https://docs.github.com/rest/reference/repos#get-a-commit-comment) resource.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * The ID of the commit comment.
     */
    id: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the commit comment.
     */
    node_id: string;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string | null;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

/**
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  content_type?: WebhookConfigContentType;
  insecure_ssl?: WebhookConfigInsecureSsl;
  secret?: WebhookConfigSecret;
  url?: WebhookConfigUrl;
};

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 *
 * @example "json"
 */
export type WebhookConfigContentType = string;

export type WebhookConfigInsecureSsl = string | number;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 *
 * @example "********"
 */
export type WebhookConfigSecret = string;

/**
 * The URL to which the payloads will be delivered.
 *
 * @example https://example.com/webhook
 * @format uri
 */
export type WebhookConfigUrl = string;

export type WebhookCreate = {
  /**
   * The repository's current description.
   */
  description: string | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The name of the repository's default branch (usually `main`).
   */
  master_branch: string;
  organization?: OrganizationSimple;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/reference/git#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object created in the repository.
   */
  ref_type: "tag" | "branch";
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDelete = {
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/reference/git#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object deleted in the repository.
   */
  ref_type: "tag" | "branch";
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDependabotAlertCreated = {
  action: "created";
  alert: DependabotAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDependabotAlertDismissed = {
  action: "dismissed";
  alert: DependabotAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDependabotAlertFixed = {
  action: "fixed";
  alert: DependabotAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDependabotAlertReintroduced = {
  action: "reintroduced";
  alert: DependabotAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDependabotAlertReopened = {
  action: "reopened";
  alert: DependabotAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDeployKeyCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/reference/deployments#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    /**
     * @format uri
     */
    url: string;
    verified: boolean;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDeployKeyDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/reference/deployments#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    /**
     * @format uri
     */
    url: string;
    verified: boolean;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDeploymentCreated = {
  action: "created";
  /**
   * The [deployment](https://docs.github.com/rest/reference/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: Record<string, any> | string;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "workflow_job"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    /**
     * @format uri
     */
    repository_url: string;
    sha: string;
    /**
     * @format uri
     */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow: {
    /**
     * @format uri
     */
    badge_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  } | null;
  workflow_run: {
    actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: void | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: void | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: void | null;
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: void | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /**
     * @format date-time
     */
    run_started_at: string;
    status:
      | "requested"
      | "in_progress"
      | "completed"
      | "queued"
      | "waiting"
      | "pending";
    triggering_actor?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};

export type WebhookDeploymentStatusCreated = {
  action: "created";
  check_run?: {
    /**
     * @format date-time
     */
    completed_at: string | null;
    /**
     * The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | any
      | null;
    /**
     * @format uri
     */
    details_url: string;
    external_id: string;
    /**
     * The SHA of the commit that is being checked.
     */
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * The id of the check.
     */
    id: number;
    /**
     * The name of the check run.
     */
    name: string;
    node_id: string;
    /**
     * @format date-time
     */
    started_at: string;
    /**
     * The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
     */
    status: "queued" | "in_progress" | "completed" | "waiting" | "pending";
    /**
     * @format uri
     */
    url: string;
  } | null;
  /**
   * The [deployment](https://docs.github.com/rest/reference/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: string | Record<string, any> | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_queue_entry"
        | "workflow_job"
        | "pull_request_review_thread"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    /**
     * @format uri
     */
    repository_url: string;
    sha: string;
    /**
     * @format uri
     */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  /**
   * The [deployment status](https://docs.github.com/rest/reference/deployments#list-deployment-statuses).
   */
  deployment_status: {
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    deployment_url: string;
    /**
     * The optional human-readable description added to the status.
     */
    description: string;
    environment: string;
    /**
     * @format uri
     */
    environment_url?: string;
    id: number;
    /**
     * @format uri
     */
    log_url?: string;
    node_id: string;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
        | "merge_group"
        | "secret_scanning_alert_location"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * The new state. Can be `pending`, `success`, `failure`, or `error`.
     */
    state: string;
    /**
     * The optional link added to the status.
     */
    target_url: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow?: {
    /**
     * @format uri
     */
    badge_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  } | null;
  workflow_run?: {
    actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | "startup_failure"
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: void | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: void | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: void | null;
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: void | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /**
     * @format date-time
     */
    run_started_at: string;
    status:
      | "requested"
      | "in_progress"
      | "completed"
      | "queued"
      | "waiting"
      | "pending";
    triggering_actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};

export type WebhookDiscussionAnswered = {
  action: "answered";
  answer: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    /**
     * @format date-time
     */
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: void | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionCategoryChanged = {
  action: "category_changed";
  changes: {
    category: {
      from: {
        /**
         * @format date-time
         */
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
    };
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionCommentCreated = {
  action: "created";
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionCommentDeleted = {
  action: "deleted";
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionCommentEdited = {
  action: "edited";
  changes: {
    body: {
      from: string;
    };
  };
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionCreated = {
  action: "created";
  discussion: {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    answer_chosen_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    answer_html_url: string | null;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string | null;
    category?: {
      /**
       * @format date-time
       */
      created_at: string;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    /**
     * @format date-time
     */
    created_at: string;
    html_url: string;
    id: number;
    locked: false;
    node_id: string;
    number: number;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url?: string;
    state: "open" | "converting" | "transferring" | "transferring";
    timeline_url?: string;
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionDeleted = {
  action: "deleted";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionEdited = {
  action: "edited";
  changes?: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionLabeled = {
  action: "labeled";
  discussion: {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    answer_chosen_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    answer_html_url: string | null;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string | null;
    category: {
      /**
       * @format date-time
       */
      created_at: string;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    /**
     * @format date-time
     */
    created_at: string;
    html_url: string;
    id: number;
    locked: boolean;
    node_id: string;
    number: number;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    state: "open" | "locked" | "converting" | "transferring";
    timeline_url?: string;
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionLocked = {
  action: "locked";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionPinned = {
  action: "pinned";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionTransferred = {
  action: "transferred";
  changes: {
    new_discussion: {
      active_lock_reason: string | null;
      answer_chosen_at: string | null;
      answer_chosen_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      answer_html_url: string | null;
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string;
      category: {
        /**
         * @format date-time
         */
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
      comments: number;
      /**
       * @format date-time
       */
      created_at: string;
      html_url: string;
      id: number;
      locked: boolean;
      node_id: string;
      number: number;
      reactions?: {
        ["+1"]: number;
        ["-1"]: number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /**
         * @format uri
         */
        url: string;
      };
      repository_url: string;
      state: "open" | "locked" | "converting" | "transferring";
      timeline_url?: string;
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       *
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       *
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       *
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       *
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * Whether the repository is archived.
       *
       * @default false
       */
      archived: boolean;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri
       */
      clone_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       *
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      git_url: string;
      /**
       * Whether discussions are enabled.
       *
       * @default false
       */
      has_discussions: boolean;
      /**
       * Whether downloads are enabled.
       *
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       *
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       *
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       *
       * @default true
       */
      has_wiki: boolean;
      homepage: string | null;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      language: string | null;
      /**
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /**
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * @format uri
       */
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      pushed_at: number | string | null;
      /**
       * @format uri-template
       */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      svn_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      topics: string[];
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require contributors to sign off on web-based commits
       */
      web_commit_signoff_required?: boolean;
    };
  };
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionUnanswered = {
  action: "unanswered";
  discussion: Discussion;
  old_answer: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    /**
     * @format date-time
     */
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: void | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    repository_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookDiscussionUnlabeled = {
  action: "unlabeled";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionUnlocked = {
  action: "unlocked";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookDiscussionUnpinned = {
  action: "unpinned";
  discussion: Discussion;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

/**
 * A user forks a repository.
 */
export type WebhookFork = {
  enterprise?: Enterprise;
  /**
   * A git repository
   */
  forkee: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: true;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: (string | null)[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  };
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookGithubAppAuthorizationRevoked = {
  action: "revoked";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookGollum = {
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The pages that were updated.
   */
  pages: {
    /**
     * The action that was performed on the page. Can be `created` or `edited`.
     */
    action: "created" | "edited";
    /**
     * Points to the HTML wiki page.
     *
     * @format uri
     */
    html_url: string;
    /**
     * The name of the page.
     */
    page_name: string;
    /**
     * The latest commit SHA of the page.
     */
    sha: string;
    summary: string | null;
    /**
     * The current page title.
     */
    title: string;
  }[];
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookInstallationCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  requester?: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  sender: SimpleUser;
};

export type WebhookInstallationDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  requester?: void | null;
  sender: SimpleUser;
};

export type WebhookInstallationNewPermissionsAccepted = {
  action: "new_permissions_accepted";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  requester?: void | null;
  sender: SimpleUser;
};

export type WebhookInstallationRepositoriesAdded = {
  action: "added";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: {
    full_name?: string;
    /**
     * Unique identifier of the repository
     */
    id?: number;
    /**
     * The name of the repository.
     */
    name?: string;
    node_id?: string;
    /**
     * Whether the repository is private or public.
     */
    private?: boolean;
  }[];
  repository?: Repository;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  requester: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  sender: SimpleUser;
};

export type WebhookInstallationRepositoriesRemoved = {
  action: "removed";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  requester: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  sender: SimpleUser;
};

export type WebhookInstallationSuspend = {
  action: "suspend";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  requester?: void | null;
  sender: SimpleUser;
};

export type WebhookInstallationTargetRenamed = {
  account: {
    avatar_url: string;
    created_at?: string;
    description?: void | null;
    events_url?: string;
    followers?: number;
    followers_url?: string;
    following?: number;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    hooks_url?: string;
    html_url: string;
    id: number;
    is_verified?: boolean;
    issues_url?: string;
    login?: string;
    members_url?: string;
    name?: string;
    node_id: string;
    organizations_url?: string;
    public_gists?: number;
    public_members_url?: string;
    public_repos?: number;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    slug?: string;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    updated_at?: string;
    url?: string;
    website_url?: void | null;
  };
  action: string;
  changes: {
    login?: {
      from: string;
    };
    slug?: {
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender?: SimpleUser;
  target_type: string;
};

export type WebhookInstallationUnsuspend = {
  action: "unsuspend";
  enterprise?: Enterprise;
  installation: Installation;
  organization?: OrganizationSimple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: Repository;
  requester?: void | null;
  sender: SimpleUser;
};

export type WebhookIssueCommentCreated = {
  action: "created";
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue comment
     */
    body: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url?: string;
    locked: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssueCommentDeleted = {
  action: "deleted";
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue comment
     */
    body: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url?: string;
    locked: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssueCommentEdited = {
  action: "edited";
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue comment
     */
    body: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url?: string;
    locked: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesAssigned = {
  /**
   * The action that was performed.
   */
  action: "assigned";
  assignee?: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesClosed = {
  /**
   * The action that was performed.
   */
  action: "closed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: "closed" | "open";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesDemilestoned = {
  action: "demilestoned";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  /**
   * A collection of related issues and pull requests.
   */
  milestone?: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesEdited = {
  action: "edited";
  /**
   * The changes to the issue.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesLabeled = {
  action: "labeled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesLocked = {
  action: "locked";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked: true;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "security_and_analysis"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesMilestoned = {
  action: "milestoned";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesOpened = {
  action: "opened";
  changes?: {
    /**
     * The [issue](https://docs.github.com/rest/reference/issues) itself.
     */
    old_issue: {
      active_lock_reason:
        | "resolved"
        | "off-topic"
        | "too heated"
        | "spam"
        | any
        | null;
      assignee?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      assignees: ({
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null)[];
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /**
       * Contents of the issue
       */
      body: string | null;
      /**
       * @format date-time
       */
      closed_at: string | null;
      comments: number;
      /**
       * @format uri
       */
      comments_url: string;
      /**
       * @format date-time
       */
      created_at: string;
      draft?: boolean;
      /**
       * @format uri
       */
      events_url: string;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      labels?: {
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        ["default"]: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         *
         * @format uri
         */
        url: string;
      }[];
      /**
       * @format uri-template
       */
      labels_url: string;
      locked?: boolean;
      /**
       * A collection of related issues and pull requests.
       */
      milestone: {
        /**
         * @format date-time
         */
        closed_at: string | null;
        closed_issues: number;
        /**
         * @format date-time
         */
        created_at: string;
        creator: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        description: string | null;
        /**
         * @format date-time
         */
        due_on: string | null;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: "open" | "closed";
        /**
         * The title of the milestone.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /**
         * @format date-time
         */
        created_at: string | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /**
         * @format uri
         */
        external_url: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        /**
         * @format date-time
         */
        updated_at: string | null;
      } | null;
      pull_request?: {
        /**
         * @format uri
         */
        diff_url?: string;
        /**
         * @format uri
         */
        html_url?: string;
        /**
         * @format date-time
         */
        merged_at?: string | null;
        /**
         * @format uri
         */
        patch_url?: string;
        /**
         * @format uri
         */
        url?: string;
      };
      reactions: {
        ["+1"]: number;
        ["-1"]: number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /**
         * @format uri
         */
        url: string;
      };
      /**
       * @format uri
       */
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: "open" | "closed";
      state_reason?: string | null;
      /**
       * @format uri
       */
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * URL for the issue
       *
       * @format uri
       */
      url: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    } | null;
    /**
     * A git repository
     */
    old_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       *
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       *
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       *
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       *
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * Whether the repository is archived.
       *
       * @default false
       */
      archived: boolean;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri
       */
      clone_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       *
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      git_url: string;
      /**
       * Whether downloads are enabled.
       *
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       *
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       *
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       *
       * @default true
       */
      has_wiki: boolean;
      homepage: string | null;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      language: string | null;
      /**
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /**
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * @format uri
       */
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      pushed_at: number | string | null;
      /**
       * @format uri-template
       */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      svn_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      topics: string[];
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesPinned = {
  action: "pinned";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesReopened = {
  action: "reopened";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesTransferred = {
  action: "transferred";
  changes: {
    /**
     * The [issue](https://docs.github.com/rest/reference/issues) itself.
     */
    new_issue: {
      active_lock_reason:
        | "resolved"
        | "off-topic"
        | "too heated"
        | "spam"
        | any
        | null;
      assignee?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      assignees: ({
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null)[];
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /**
       * Contents of the issue
       */
      body: string | null;
      /**
       * @format date-time
       */
      closed_at: string | null;
      comments: number;
      /**
       * @format uri
       */
      comments_url: string;
      /**
       * @format date-time
       */
      created_at: string;
      draft?: boolean;
      /**
       * @format uri
       */
      events_url: string;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      labels?: {
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        ["default"]: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         *
         * @format uri
         */
        url: string;
      }[];
      /**
       * @format uri-template
       */
      labels_url: string;
      locked?: boolean;
      /**
       * A collection of related issues and pull requests.
       */
      milestone: {
        /**
         * @format date-time
         */
        closed_at: string | null;
        closed_issues: number;
        /**
         * @format date-time
         */
        created_at: string;
        creator: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        description: string | null;
        /**
         * @format date-time
         */
        due_on: string | null;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: "open" | "closed";
        /**
         * The title of the milestone.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /**
         * @format date-time
         */
        created_at: string | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /**
         * @format uri
         */
        external_url: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        /**
         * @format date-time
         */
        updated_at: string | null;
      } | null;
      pull_request?: {
        /**
         * @format uri
         */
        diff_url?: string;
        /**
         * @format uri
         */
        html_url?: string;
        /**
         * @format date-time
         */
        merged_at?: string | null;
        /**
         * @format uri
         */
        patch_url?: string;
        /**
         * @format uri
         */
        url?: string;
      };
      reactions: {
        ["+1"]: number;
        ["-1"]: number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /**
         * @format uri
         */
        url: string;
      };
      /**
       * @format uri
       */
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: "open" | "closed";
      state_reason?: string | null;
      /**
       * @format uri
       */
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * URL for the issue
       *
       * @format uri
       */
      url: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       *
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       *
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       *
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       *
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * Whether the repository is archived.
       *
       * @default false
       */
      archived: boolean;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri
       */
      clone_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       *
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      git_url: string;
      /**
       * Whether discussions are enabled.
       *
       * @default false
       */
      has_discussions: boolean;
      /**
       * Whether downloads are enabled.
       *
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       *
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       *
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       *
       * @default true
       */
      has_wiki: boolean;
      homepage: string | null;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      language: string | null;
      /**
       * @format uri
       */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /**
         * @format uri
         */
        url: string | null;
      } | null;
      master_branch?: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * @format uri
       */
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      pushed_at: number | string | null;
      /**
       * @format uri-template
       */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      svn_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      topics: string[];
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require contributors to sign off on web-based commits
       */
      web_commit_signoff_required?: boolean;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesUnassigned = {
  /**
   * The action that was performed.
   */
  action: "unassigned";
  assignee?: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesUnlabeled = {
  action: "unlabeled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesUnlocked = {
  action: "unlocked";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked: false;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookIssuesUnpinned = {
  action: "unpinned";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Contents of the issue
     */
    body: string | null;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments: number;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    draft?: boolean;
    /**
     * @format uri
     */
    events_url: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri-template
     */
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /**
       * @format date-time
       */
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /**
       * @format uri
       */
      external_url: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      /**
       * @format date-time
       */
      updated_at: string | null;
    } | null;
    pull_request?: {
      /**
       * @format uri
       */
      diff_url?: string;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * @format date-time
       */
      merged_at?: string | null;
      /**
       * @format uri
       */
      patch_url?: string;
      /**
       * @format uri
       */
      url?: string;
    };
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: "open" | "closed";
    state_reason?: string | null;
    /**
     * @format uri
     */
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the issue
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookLabelCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookLabelDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookLabelEdited = {
  action: "edited";
  /**
   * The changes to the label if the action was `edited`.
   */
  changes?: {
    color?: {
      /**
       * The previous version of the color if the action was `edited`.
       */
      from: string;
    };
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMarketplacePurchaseCancelled = {
  action: "cancelled";
  effective_date: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account?: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: (string | null)[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  organization?: OrganizationSimple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: void | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookMarketplacePurchaseChanged = {
  action: "changed";
  effective_date: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account?: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: (string | null)[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  organization?: OrganizationSimple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean | null;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookMarketplacePurchasePendingChange = {
  action: "pending_change";
  effective_date: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account?: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: (string | null)[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  organization?: OrganizationSimple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookMarketplacePurchasePendingChangeCancelled = {
  action: "pending_change_cancelled";
  effective_date: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account?: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: void | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  organization?: OrganizationSimple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: void | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookMarketplacePurchasePurchased = {
  action: "purchased";
  effective_date: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account?: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: (string | null)[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  organization?: OrganizationSimple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: void | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookMemberAdded = {
  action: "added";
  changes?: {
    permission?: {
      to: "write" | "admin" | "read";
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  member: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMemberEdited = {
  action: "edited";
  /**
   * The changes to the collaborator permissions
   */
  changes: {
    old_permission?: {
      /**
       * The previous permissions of the collaborator if the action was edited.
       */
      from: string;
    };
    permission?: {
      from?: string | null;
      to?: string | null;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  member: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMemberRemoved = {
  action: "removed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  member: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMembershipAdded = {
  action: "added";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  member: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  organization: OrganizationSimple;
  repository?: Repository;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: "team";
  sender: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookMembershipRemoved = {
  action: "removed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  member: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  organization: OrganizationSimple;
  repository?: Repository;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: "team" | "organization";
  sender: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookMergeGroupChecksRequested = {
  action: string;
  installation?: SimpleInstallation;
  merge_group: {
    /**
     * The full ref of the branch the merge group will be merged into.
     */
    base_ref: string;
    /**
     * The SHA of the merge group's parent commit.
     */
    base_sha: string;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The full ref of the merge group.
     */
    head_ref: string;
    /**
     * The SHA of the merge group.
     */
    head_sha: string;
  };
  organization?: OrganizationSimple;
  repository?: Repository;
  sender?: SimpleUser;
};

export type WebhookMetaDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  /**
   * The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
   */
  hook: {
    active: boolean;
    config: {
      content_type: "json" | "form";
      insecure_ssl: string;
      secret?: string;
      /**
       * @format uri
       */
      url: string;
    };
    created_at: string;
    events: (
      | "*"
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "meta"
      | "milestone"
      | "organization"
      | "org_block"
      | "package"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "pull_request_review_thread"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_import"
      | "repository_vulnerability_alert"
      | "secret_scanning_alert"
      | "secret_scanning_alert_location"
      | "security_and_analysis"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_job"
      | "workflow_run"
      | "repository_dispatch"
      | "projects_v2_item"
    )[];
    id: number;
    name: string;
    type: string;
    updated_at: string;
  };
  /**
   * The id of the modified webhook.
   */
  hook_id: number;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: NullableRepository;
  sender?: SimpleUser;
};

export type WebhookMilestoneClosed = {
  action: "closed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMilestoneCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMilestoneDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMilestoneEdited = {
  action: "edited";
  /**
   * The changes to the milestone if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    due_on?: {
      /**
       * The previous version of the due date if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookMilestoneOpened = {
  action: "opened";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    /**
     * @format date-time
     */
    closed_at: string | null;
    closed_issues: number;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    description: string | null;
    /**
     * @format date-time
     */
    due_on: string | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: "open" | "closed";
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookOrgBlockBlocked = {
  action: "blocked";
  blocked_user: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookOrgBlockUnblocked = {
  action: "unblocked";
  blocked_user: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookOrganizationDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    /**
     * @format uri
     */
    organization_url: string;
    role: string;
    state: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookOrganizationMemberAdded = {
  action: "member_added";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    /**
     * @format uri
     */
    organization_url: string;
    role: string;
    state: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookOrganizationMemberInvited = {
  action: "member_invited";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The invitation for the user or email if the action is `member_invited`.
   */
  invitation: {
    /**
     * @format date-time
     */
    created_at: string;
    email: string | null;
    /**
     * @format date-time
     */
    failed_at: string | null;
    failed_reason: string | null;
    id: number;
    invitation_source?: string;
    /**
     * @format uri
     */
    invitation_teams_url: string;
    inviter: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    login: string | null;
    node_id: string;
    role: string;
    team_count: number;
  };
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  user?: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
};

export type WebhookOrganizationMemberRemoved = {
  action: "member_removed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    /**
     * @format uri
     */
    organization_url: string;
    role: string;
    state: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookOrganizationRenamed = {
  action: "renamed";
  changes?: {
    login?: {
      from?: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    /**
     * @format uri
     */
    organization_url: string;
    role: string;
    state: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  organization: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookPackagePublished = {
  action: "published";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * Information about the package.
   */
  package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      author?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      body?: string | Record<string, any>;
      body_html?: string;
      container_metadata?: {
        labels?: Record<string, any> | null;
        manifest?: Record<string, any> | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      } | null;
      created_at?: string;
      description: string;
      docker_metadata?: any[];
      draft?: boolean;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      npm_metadata?: {
        author?: Record<string, any> | null;
        bin?: Record<string, any>;
        bugs?: Record<string, any> | null;
        commit_oid?: string;
        contributors?: Record<string, any>[];
        cpu?: string[];
        deleted_by_id?: number;
        dependencies?: Record<string, any>;
        description?: string;
        dev_dependencies?: Record<string, any>;
        directories?: Record<string, any> | null;
        dist?: Record<string, any> | null;
        engines?: Record<string, any>;
        files?: string[];
        git_head?: string;
        has_shrinkwrap?: boolean;
        homepage?: string;
        id?: string;
        installation_command?: string;
        keywords?: string[];
        license?: string;
        main?: string;
        maintainers?: Record<string, any>[];
        man?: Record<string, any>;
        name?: string;
        node_version?: string;
        npm_user?: string;
        npm_version?: string;
        optional_dependencies?: Record<string, any>;
        os?: string[];
        peer_dependencies?: Record<string, any>;
        published_via_actions?: boolean;
        readme?: string;
        release_id?: number;
        repository?: Record<string, any> | null;
        scripts?: Record<string, any>;
        version?: string;
      } | null;
      nuget_metadata?:
        | {
            id?: number | string;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  branch?: string;
                  commit?: string;
                  type?: string;
                  url?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        /**
         * @format uri
         */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        author: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        name: string | null;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /**
         * @format uri
         */
        url: string;
      };
      rubygems_metadata?: any[];
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      /**
       * @format uri
       */
      about_url: string;
      name: string;
      type: string;
      /**
       * @format uri
       */
      url: string;
      vendor: string;
    } | null;
    updated_at: string | null;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookPackageUpdated = {
  action: "updated";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * Information about the package.
   */
  package: {
    created_at: string;
    description: string | null;
    ecosystem: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      author: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: any[];
      draft?: boolean;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: any[];
      name: string;
      package_files: {
        content_type: string;
        created_at: string;
        /**
         * @format uri
         */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string;
        size: number;
        state: string;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        author: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /**
         * @format uri
         */
        url: string;
      };
      rubygems_metadata?: any[];
      /**
       * @format uri
       */
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      /**
       * @format uri
       */
      about_url: string;
      name: string;
      type: string;
      /**
       * @format uri
       */
      url: string;
      vendor: string;
    } | null;
    updated_at: string;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPageBuild = {
  /**
   * The [List GitHub Pages builds](https://docs.github.com/rest/reference/repos#list-github-pages-builds) itself.
   */
  build: {
    commit: string | null;
    created_at: string;
    duration: number;
    error: {
      message: string | null;
    };
    pusher: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    status: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  enterprise?: Enterprise;
  id: number;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPing = {
  /**
   * The webhook that is being pinged
   */
  hook?: {
    /**
     * Determines whether the hook is actually triggered for the events it subscribes to.
     */
    active: boolean;
    /**
     * Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.
     */
    app_id?: number;
    config: {
      content_type?: WebhookConfigContentType;
      insecure_ssl?: WebhookConfigInsecureSsl;
      secret?: WebhookConfigSecret;
      url?: WebhookConfigUrl;
    };
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    deliveries_url?: string;
    /**
     * Determines what events the hook is triggered for. Default: ['push'].
     */
    events: string[];
    /**
     * Unique identifier of the webhook.
     */
    id: number;
    last_response?: HookResponse;
    /**
     * The type of webhook. The only valid value is 'web'.
     */
    name: "web";
    /**
     * @format uri
     */
    ping_url?: string;
    /**
     * @format uri
     */
    test_url?: string;
    type: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
  };
  /**
   * The ID of the webhook that triggered the ping.
   */
  hook_id?: number;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender?: SimpleUser;
  /**
   * Random string of GitHub zen.
   */
  zen?: string;
};

/**
 * The webhooks ping payload encoded with URL encoding.
 */
export type WebhookPingFormEncoded = {
  /**
   * A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookProjectCardConverted = {
  action: "converted";
  changes: {
    note: {
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    /**
     * @format uri
     */
    column_url: string;
    /**
     * @format uri
     */
    content_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectCardCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    /**
     * @format uri
     */
    column_url: string;
    /**
     * @format uri
     */
    content_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectCardDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number | null;
    /**
     * @format uri
     */
    column_url: string;
    /**
     * @format uri
     */
    content_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: NullableRepository;
  sender: SimpleUser;
};

export type WebhookProjectCardEdited = {
  action: "edited";
  changes: {
    note: {
      from: string | null;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    /**
     * @format uri
     */
    column_url: string;
    /**
     * @format uri
     */
    content_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectCardMoved = {
  action: "moved";
  changes?: {
    column_id: {
      from: number;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_card: {
    after_id: never;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    /**
     * @format uri
     */
    column_url: string;
    /**
     * @format uri
     */
    content_url?: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectClosed = {
  action: "closed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    /**
     * @format uri
     */
    columns_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: "open" | "closed";
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectColumnCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_column: {
    after_id?: number | null;
    /**
     * @format uri
     */
    cards_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender?: SimpleUser;
};

export type WebhookProjectColumnDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_column: {
    after_id?: number | null;
    /**
     * @format uri
     */
    cards_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: NullableRepository;
  sender?: SimpleUser;
};

export type WebhookProjectColumnEdited = {
  action: "edited";
  changes: {
    name?: {
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_column: {
    after_id?: number | null;
    /**
     * @format uri
     */
    cards_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender?: SimpleUser;
};

export type WebhookProjectColumnMoved = {
  action: "moved";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project_column: {
    after_id?: number | null;
    /**
     * @format uri
     */
    cards_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    /**
     * @format uri
     */
    project_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    /**
     * @format uri
     */
    columns_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: "open" | "closed";
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    /**
     * @format uri
     */
    columns_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: "open" | "closed";
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: NullableRepository;
  sender?: SimpleUser;
};

export type WebhookProjectEdited = {
  action: "edited";
  /**
   * The changes to the project if the action was `edited`.
   */
  changes?: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The changes to the project if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    /**
     * @format uri
     */
    columns_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: "open" | "closed";
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender?: SimpleUser;
};

export type WebhookProjectReopened = {
  action: "reopened";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    /**
     * @format uri
     */
    columns_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    creator: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: "open" | "closed";
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemArchived = {
  action: "archived";
  changes: {
    archived_at?: {
      /**
       * @format date-time
       */
      from?: string | null;
      /**
       * @format date-time
       */
      to?: string | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemConverted = {
  action: "converted";
  changes: {
    content_type?: {
      from?: string | null;
      to?: string;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemCreated = {
  action: "created";
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemDeleted = {
  action: "deleted";
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemEdited = {
  action: "edited";
  changes?:
    | {
        field_value: {
          field_node_id?: string;
          field_type?: string;
        };
      }
    | {
        body: {
          from?: string | null;
          to?: string | null;
        };
      };
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemReordered = {
  action: "reordered";
  changes: {
    previous_projects_v2_item_node_id?: {
      from?: string | null;
      to?: string | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ItemRestored = {
  action: "restored";
  changes: {
    archived_at?: {
      /**
       * @format date-time
       */
      from?: string | null;
      /**
       * @format date-time
       */
      to?: string | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUser;
};

export type WebhookProjectsV2ProjectClosed = {
  action: "closed";
  organization: OrganizationSimple;
  projects_v2: ProjectsV2;
  sender: SimpleUser;
};

/**
 * A project was created
 */
export type WebhookProjectsV2ProjectCreated = {
  action: "created";
  organization: OrganizationSimple;
  projects_v2: ProjectsV2;
  sender: SimpleUser;
};

export type WebhookProjectsV2ProjectEdited = {
  action: "edited";
  changes: {
    description?: {
      from?: string | null;
      to?: string | null;
    };
    public?: {
      from?: boolean;
      to?: boolean;
    };
    short_description?: {
      from?: string | null;
      to?: string | null;
    };
    title?: {
      from?: string;
      to?: string;
    };
  };
  organization: OrganizationSimple;
  projects_v2: ProjectsV2;
  sender: SimpleUser;
};

export type WebhookProjectsV2ProjectReopened = {
  action: "reopened";
  organization: OrganizationSimple;
  projects_v2: ProjectsV2;
  sender: SimpleUser;
};

export type WebhookPublic = {
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestAssigned = {
  action: "assigned";
  assignee: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestAutoMergeDisabled = {
  action: "auto_merge_disabled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  reason: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestAutoMergeEnabled = {
  action: "auto_merge_enabled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  reason?: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestClosed = {
  action: "closed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title.
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id?: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id?: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
      | null
    )[];
    requested_teams: ({
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "closed" | "open";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestConvertedToDraft = {
  action: "converted_to_draft";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         *   - `PR_BODY` - default to the pull request's body.
         *   - `COMMIT_MESSAGES` - default to the branch's commit messages.
         *   - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         *   - `PR_BODY` - default to the pull request's body.
         *   - `COMMIT_MESSAGES` - default to the branch's commit messages.
         *   - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url?: string;
    id?: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: false | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id?: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
      | null
    )[];
    requested_teams: ({
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestDemilestoned = {
  action: "demilestoned";
  enterprise?: Enterprise;
  milestone?: Milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookPullRequestDequeued = {
  action: "dequeued";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  reason: string;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestEdited = {
  action: "edited";
  /**
   * The changes to the comment if the action was `edited`.
   */
  changes: {
    base?: {
      ref: {
        from: string;
      };
      sha: {
        from: string;
      };
    };
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookPullRequestEnqueued = {
  action: "enqueued";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestLabeled = {
  action: "labeled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestLocked = {
  action: "locked";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestMilestoned = {
  action: "milestoned";
  enterprise?: Enterprise;
  milestone?: Milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookPullRequestOpened = {
  action: "opened";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url?: string;
    id?: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id?: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
      | null
    )[];
    requested_teams: ({
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReadyForReview = {
  action: "ready_for_review";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url?: string;
    id?: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id?: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
      | null
    )[];
    requested_teams: ({
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReopened = {
  action: "reopened";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: (string | null)[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url?: string;
    id?: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: ({
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    } | null)[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id?: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
      | null
    )[];
    requested_teams: ({
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url?: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReviewCommentCreated = {
  action: "created";
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     *
     * @format uri
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number | null;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     *
     * @format uri
     */
    pull_request_url: string;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: "LEFT" | "RIGHT";
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     *
     * @default RIGHT
     */
    start_side: "LEFT" | "RIGHT" | any | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the pull request review comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions?: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReviewCommentDeleted = {
  action: "deleted";
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     *
     * @format uri
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     *
     * @format uri
     */
    pull_request_url: string;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: "LEFT" | "RIGHT";
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     *
     * @default RIGHT
     */
    start_side: "LEFT" | "RIGHT" | any | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the pull request review comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReviewCommentEdited = {
  action: "edited";
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     *
     * @format uri
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     *
     * @format uri
     */
    pull_request_url: string;
    reactions: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: "LEFT" | "RIGHT";
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     *
     * @default RIGHT
     */
    start_side: "LEFT" | "RIGHT" | any | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * URL for the pull request review comment
     *
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestReviewDismissed = {
  action: "dismissed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    /**
     * @format uri
     */
    pull_request_url: string;
    state: "dismissed" | "approved" | "changes_requested";
    /**
     * @format date-time
     */
    submitted_at: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  sender: SimpleUser;
};

export type WebhookPullRequestReviewEdited = {
  action: "edited";
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    /**
     * @format uri
     */
    pull_request_url: string;
    state: string;
    /**
     * @format date-time
     */
    submitted_at: string | null;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  sender: SimpleUser;
};

export type WebhookPullRequestReviewRequestRemoved =
  | {
      action: "review_request_removed";
      enterprise?: Enterprise;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimple;
      pull_request: {
        _links: {
          comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          commits: {
            /**
             * @format uri-template
             */
            href: string;
          };
          html: {
            /**
             * @format uri-template
             */
            href: string;
          };
          issue: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comment: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          self: {
            /**
             * @format uri-template
             */
            href: string;
          };
          statuses: {
            /**
             * @format uri-template
             */
            href: string;
          };
        };
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | any
          | null;
        additions?: number;
        assignee: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        assignees: ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)[];
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: "merge" | "squash" | "rebase";
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title.
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        /**
         * @format date-time
         */
        closed_at: string | null;
        comments?: number;
        /**
         * @format uri
         */
        comments_url: string;
        commits?: number;
        /**
         * @format uri
         */
        commits_url: string;
        /**
         * @format date-time
         */
        created_at: string;
        deletions?: number;
        /**
         * @format uri
         */
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          ["default"]: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           *
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /**
         * @format date-time
         */
        merged_at: string | null;
        merged_by?: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          /**
           * @format date-time
           */
          closed_at: string | null;
          closed_issues: number;
          /**
           * @format date-time
           */
          created_at: string;
          creator: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          description: string | null;
          /**
           * @format date-time
           */
          due_on: string | null;
          /**
           * @format uri
           */
          html_url: string;
          id: number;
          /**
           * @format uri
           */
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: "open" | "closed";
          /**
           * The title of the milestone.
           */
          title: string;
          /**
           * @format date-time
           */
          updated_at: string;
          /**
           * @format uri
           */
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        /**
         * @format uri
         */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              /**
               * @format uri
               */
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              /**
               * @format uri-template
               */
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                /**
                 * @format uri
                 */
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                /**
                 * @format uri-template
                 */
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /**
                 * @format uri
                 */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 *
                 * @format uri
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /**
               * @format uri
               */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               *
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }[];
        /**
         * @format uri-template
         */
        review_comment_url: string;
        review_comments?: number;
        /**
         * @format uri
         */
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: "open" | "closed";
        /**
         * @format uri
         */
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        user: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
      };
      repository: Repository;
      requested_reviewer: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      sender: SimpleUser;
    }
  | {
      action: "review_request_removed";
      enterprise?: Enterprise;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimple;
      pull_request: {
        _links: {
          comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          commits: {
            /**
             * @format uri-template
             */
            href: string;
          };
          html: {
            /**
             * @format uri-template
             */
            href: string;
          };
          issue: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comment: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          self: {
            /**
             * @format uri-template
             */
            href: string;
          };
          statuses: {
            /**
             * @format uri-template
             */
            href: string;
          };
        };
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | any
          | null;
        additions?: number;
        assignee: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        assignees: ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)[];
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: "merge" | "squash" | "rebase";
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        /**
         * @format date-time
         */
        closed_at: string | null;
        comments?: number;
        /**
         * @format uri
         */
        comments_url: string;
        commits?: number;
        /**
         * @format uri
         */
        commits_url: string;
        /**
         * @format date-time
         */
        created_at: string;
        deletions?: number;
        /**
         * @format uri
         */
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          ["default"]: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           *
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /**
         * @format date-time
         */
        merged_at: string | null;
        merged_by?: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          /**
           * @format date-time
           */
          closed_at: string | null;
          closed_issues: number;
          /**
           * @format date-time
           */
          created_at: string;
          creator: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          description: string | null;
          /**
           * @format date-time
           */
          due_on: string | null;
          /**
           * @format uri
           */
          html_url: string;
          id: number;
          /**
           * @format uri
           */
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: "open" | "closed";
          /**
           * The title of the milestone.
           */
          title: string;
          /**
           * @format date-time
           */
          updated_at: string;
          /**
           * @format uri
           */
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        /**
         * @format uri
         */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              /**
               * @format uri
               */
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              /**
               * @format uri-template
               */
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                /**
                 * @format uri
                 */
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                /**
                 * @format uri-template
                 */
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /**
                 * @format uri
                 */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 *
                 * @format uri
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /**
               * @format uri
               */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               *
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }[];
        /**
         * @format uri-template
         */
        review_comment_url: string;
        review_comments?: number;
        /**
         * @format uri
         */
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: "open" | "closed";
        /**
         * @format uri
         */
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        user: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
      };
      repository: Repository;
      /**
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      };
      sender: SimpleUser;
    };

export type WebhookPullRequestReviewRequested =
  | {
      action: "review_requested";
      enterprise?: Enterprise;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimple;
      pull_request: {
        _links: {
          comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          commits: {
            /**
             * @format uri-template
             */
            href: string;
          };
          html: {
            /**
             * @format uri-template
             */
            href: string;
          };
          issue: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comment: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          self: {
            /**
             * @format uri-template
             */
            href: string;
          };
          statuses: {
            /**
             * @format uri-template
             */
            href: string;
          };
        };
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | any
          | null;
        additions?: number;
        assignee: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        assignees: ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)[];
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: "merge" | "squash" | "rebase";
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        /**
         * @format date-time
         */
        closed_at: string | null;
        comments?: number;
        /**
         * @format uri
         */
        comments_url: string;
        commits?: number;
        /**
         * @format uri
         */
        commits_url: string;
        /**
         * @format date-time
         */
        created_at: string;
        deletions?: number;
        /**
         * @format uri
         */
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          ["default"]: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           *
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /**
         * @format date-time
         */
        merged_at: string | null;
        merged_by?: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          /**
           * @format date-time
           */
          closed_at: string | null;
          closed_issues: number;
          /**
           * @format date-time
           */
          created_at: string;
          creator: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          description: string | null;
          /**
           * @format date-time
           */
          due_on: string | null;
          /**
           * @format uri
           */
          html_url: string;
          id: number;
          /**
           * @format uri
           */
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: "open" | "closed";
          /**
           * The title of the milestone.
           */
          title: string;
          /**
           * @format date-time
           */
          updated_at: string;
          /**
           * @format uri
           */
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        /**
         * @format uri
         */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              /**
               * @format uri
               */
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              /**
               * @format uri-template
               */
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                /**
                 * @format uri
                 */
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                /**
                 * @format uri-template
                 */
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /**
                 * @format uri
                 */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 *
                 * @format uri
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /**
               * @format uri
               */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               *
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }[];
        /**
         * @format uri-template
         */
        review_comment_url: string;
        review_comments?: number;
        /**
         * @format uri
         */
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: "open" | "closed";
        /**
         * @format uri
         */
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        user: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null;
      };
      repository: Repository;
      requested_reviewer: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      sender: SimpleUser;
    }
  | {
      action: "review_requested";
      enterprise?: Enterprise;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimple;
      pull_request: {
        _links: {
          comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          commits: {
            /**
             * @format uri-template
             */
            href: string;
          };
          html: {
            /**
             * @format uri-template
             */
            href: string;
          };
          issue: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comment: {
            /**
             * @format uri-template
             */
            href: string;
          };
          review_comments: {
            /**
             * @format uri-template
             */
            href: string;
          };
          self: {
            /**
             * @format uri-template
             */
            href: string;
          };
          statuses: {
            /**
             * @format uri-template
             */
            href: string;
          };
        };
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | any
          | null;
        additions?: number;
        assignee: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        assignees: ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)[];
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: "merge" | "squash" | "rebase";
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        /**
         * @format date-time
         */
        closed_at: string | null;
        comments?: number;
        /**
         * @format uri
         */
        comments_url: string;
        commits?: number;
        /**
         * @format uri
         */
        commits_url: string;
        /**
         * @format date-time
         */
        created_at: string;
        deletions?: number;
        /**
         * @format uri
         */
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             *
             * @default false
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             *
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             *
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             *
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /**
             * @format uri-template
             */
            archive_url: string;
            /**
             * Whether the repository is archived.
             *
             * @default false
             */
            archived: boolean;
            /**
             * @format uri-template
             */
            assignees_url: string;
            /**
             * @format uri-template
             */
            blobs_url: string;
            /**
             * @format uri-template
             */
            branches_url: string;
            /**
             * @format uri
             */
            clone_url: string;
            /**
             * @format uri-template
             */
            collaborators_url: string;
            /**
             * @format uri-template
             */
            comments_url: string;
            /**
             * @format uri-template
             */
            commits_url: string;
            /**
             * @format uri-template
             */
            compare_url: string;
            /**
             * @format uri-template
             */
            contents_url: string;
            /**
             * @format uri
             */
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             *
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /**
             * @format uri
             */
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            /**
             * @format uri
             */
            downloads_url: string;
            /**
             * @format uri
             */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /**
             * @format uri
             */
            forks_url: string;
            full_name: string;
            /**
             * @format uri-template
             */
            git_commits_url: string;
            /**
             * @format uri-template
             */
            git_refs_url: string;
            /**
             * @format uri-template
             */
            git_tags_url: string;
            /**
             * @format uri
             */
            git_url: string;
            /**
             * Whether discussions are enabled.
             *
             * @default false
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             *
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             *
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             *
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             *
             * @default true
             */
            has_wiki: boolean;
            homepage: string | null;
            /**
             * @format uri
             */
            hooks_url: string;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            /**
             * @format uri-template
             */
            issue_comment_url: string;
            /**
             * @format uri-template
             */
            issue_events_url: string;
            /**
             * @format uri-template
             */
            issues_url: string;
            /**
             * @format uri-template
             */
            keys_url: string;
            /**
             * @format uri-template
             */
            labels_url: string;
            language: string | null;
            /**
             * @format uri
             */
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /**
               * @format uri
               */
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /**
             * @format uri
             */
            merges_url: string;
            /**
             * @format uri-template
             */
            milestones_url: string;
            /**
             * @format uri
             */
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            /**
             * @format uri-template
             */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            /**
             * @format uri-template
             */
            pulls_url: string;
            pushed_at: number | string | null;
            /**
             * @format uri-template
             */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /**
             * @format uri
             */
            stargazers_url: string;
            /**
             * @format uri-template
             */
            statuses_url: string;
            /**
             * @format uri
             */
            subscribers_url: string;
            /**
             * @format uri
             */
            subscription_url: string;
            /**
             * @format uri
             */
            svn_url: string;
            /**
             * @format uri
             */
            tags_url: string;
            /**
             * @format uri
             */
            teams_url: string;
            topics: string[];
            /**
             * @format uri-template
             */
            trees_url: string;
            /**
             * @format date-time
             */
            updated_at: string;
            /**
             * @format uri
             */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             *
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /**
             * @format uri
             */
            url?: string;
          } | null;
        };
        /**
         * @format uri
         */
        html_url: string;
        id: number;
        /**
         * @format uri
         */
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          ["default"]: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           *
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /**
         * @format date-time
         */
        merged_at: string | null;
        merged_by?: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          /**
           * @format date-time
           */
          closed_at: string | null;
          closed_issues: number;
          /**
           * @format date-time
           */
          created_at: string;
          creator: {
            /**
             * @format uri
             */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /**
             * @format uri-template
             */
            events_url?: string;
            /**
             * @format uri
             */
            followers_url?: string;
            /**
             * @format uri-template
             */
            following_url?: string;
            /**
             * @format uri-template
             */
            gists_url?: string;
            gravatar_id?: string;
            /**
             * @format uri
             */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /**
             * @format uri
             */
            organizations_url?: string;
            /**
             * @format uri
             */
            received_events_url?: string;
            /**
             * @format uri
             */
            repos_url?: string;
            site_admin?: boolean;
            /**
             * @format uri-template
             */
            starred_url?: string;
            /**
             * @format uri
             */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /**
             * @format uri
             */
            url?: string;
          } | null;
          description: string | null;
          /**
           * @format date-time
           */
          due_on: string | null;
          /**
           * @format uri
           */
          html_url: string;
          id: number;
          /**
           * @format uri
           */
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: "open" | "closed";
          /**
           * The title of the milestone.
           */
          title: string;
          /**
           * @format date-time
           */
          updated_at: string;
          /**
           * @format uri
           */
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        /**
         * @format uri
         */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              /**
               * @format uri
               */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /**
               * @format uri-template
               */
              events_url?: string;
              /**
               * @format uri
               */
              followers_url?: string;
              /**
               * @format uri-template
               */
              following_url?: string;
              /**
               * @format uri-template
               */
              gists_url?: string;
              gravatar_id?: string;
              /**
               * @format uri
               */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /**
               * @format uri
               */
              organizations_url?: string;
              /**
               * @format uri
               */
              received_events_url?: string;
              /**
               * @format uri
               */
              repos_url?: string;
              site_admin?: boolean;
              /**
               * @format uri-template
               */
              starred_url?: string;
              /**
               * @format uri
               */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /**
               * @format uri
               */
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description?: string | null;
              /**
               * @format uri
               */
              html_url?: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              /**
               * @format uri-template
               */
              members_url?: string;
              /**
               * Name of the team
               */
              name: string;
              node_id?: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                /**
                 * @format uri
                 */
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                /**
                 * @format uri-template
                 */
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /**
                 * @format uri
                 */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 *
                 * @format uri
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission?: string;
              privacy?: "open" | "closed" | "secret";
              /**
               * @format uri
               */
              repositories_url?: string;
              slug?: string;
              /**
               * URL for the team
               *
               * @format uri
               */
              url?: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }[];
        /**
         * @format uri-template
         */
        review_comment_url: string;
        review_comments?: number;
        /**
         * @format uri
         */
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: "open" | "closed";
        /**
         * @format uri
         */
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        user: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null;
      };
      repository: Repository;
      /**
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description?: string | null;
        /**
         * @format uri
         */
        html_url?: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url?: string;
        /**
         * Name of the team
         */
        name: string;
        node_id?: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission?: string;
        privacy?: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url?: string;
      };
      sender: SimpleUser;
    };

export type WebhookPullRequestReviewSubmitted = {
  action: "submitted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      pull_request: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    /**
     * @format uri
     */
    pull_request_url: string;
    state: string;
    /**
     * @format date-time
     */
    submitted_at: string | null;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  sender: SimpleUser;
};

export type WebhookPullRequestReviewThreadResolved = {
  action: "resolved";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        html: {
          /**
           * @format uri-template
           */
          href: string;
        };
        pull_request: {
          /**
           * @format uri-template
           */
          href: string;
        };
        self: {
          /**
           * @format uri-template
           */
          href: string;
        };
      };
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      /**
       * @format date-time
       */
      created_at: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       *
       * @format uri
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number | null;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       *
       * @format uri
       */
      pull_request_url: string;
      reactions: {
        ["+1"]: number;
        ["-1"]: number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /**
         * @format uri
         */
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: "LEFT" | "RIGHT";
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       *
       * @default RIGHT
       */
      start_side: "LEFT" | "RIGHT" | any | null;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * URL for the pull request review comment
       *
       * @format uri
       */
      url: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    }[];
    node_id: string;
  };
};

export type WebhookPullRequestReviewThreadUnresolved = {
  action: "unresolved";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    /**
     * @format uri
     */
    comments_url: string;
    /**
     * @format uri
     */
    commits_url: string;
    created_at: string;
    /**
     * @format uri
     */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    /**
     * @format uri
     */
    review_comments_url: string;
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    title: string;
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        html: {
          /**
           * @format uri-template
           */
          href: string;
        };
        pull_request: {
          /**
           * @format uri-template
           */
          href: string;
        };
        self: {
          /**
           * @format uri-template
           */
          href: string;
        };
      };
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      /**
       * @format date-time
       */
      created_at: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       *
       * @format uri
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       *
       * @format uri
       */
      pull_request_url: string;
      reactions: {
        ["+1"]: number;
        ["-1"]: number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /**
         * @format uri
         */
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: "LEFT" | "RIGHT";
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       *
       * @default RIGHT
       */
      start_side: "LEFT" | "RIGHT" | any | null;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * URL for the pull request review comment
       *
       * @format uri
       */
      url: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    }[];
    node_id: string;
  };
};

export type WebhookPullRequestSynchronize = {
  action: "synchronize";
  after: string;
  before: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestUnassigned = {
  action: "unassigned";
  assignee?: {
    /**
     * @format uri
     */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /**
     * @format uri-template
     */
    events_url?: string;
    /**
     * @format uri
     */
    followers_url?: string;
    /**
     * @format uri-template
     */
    following_url?: string;
    /**
     * @format uri-template
     */
    gists_url?: string;
    gravatar_id?: string;
    /**
     * @format uri
     */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /**
     * @format uri
     */
    organizations_url?: string;
    /**
     * @format uri
     */
    received_events_url?: string;
    /**
     * @format uri
     */
    repos_url?: string;
    site_admin?: boolean;
    /**
     * @format uri-template
     */
    starred_url?: string;
    /**
     * @format uri
     */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /**
     * @format uri
     */
    url?: string;
  } | null;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookPullRequestUnlabeled = {
  action: "unlabeled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    ["default"]: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     *
     * @format uri
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          /**
           * @format uri
           */
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPullRequestUnlocked = {
  action: "unlocked";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimple;
  pull_request: {
    _links: {
      comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      commits: {
        /**
         * @format uri-template
         */
        href: string;
      };
      html: {
        /**
         * @format uri-template
         */
        href: string;
      };
      issue: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comment: {
        /**
         * @format uri-template
         */
        href: string;
      };
      review_comments: {
        /**
         * @format uri-template
         */
        href: string;
      };
      self: {
        /**
         * @format uri-template
         */
        href: string;
      };
      statuses: {
        /**
         * @format uri-template
         */
        href: string;
      };
    };
    active_lock_reason:
      | "resolved"
      | "off-topic"
      | "too heated"
      | "spam"
      | any
      | null;
    additions?: number;
    assignee: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    assignees: ({
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null)[];
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    /**
     * @format date-time
     */
    closed_at: string | null;
    comments?: number;
    /**
     * @format uri
     */
    comments_url: string;
    commits?: number;
    /**
     * @format uri
     */
    commits_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    deletions?: number;
    /**
     * @format uri
     */
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         *
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         *
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         *
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         *
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /**
         * @format uri-template
         */
        archive_url: string;
        /**
         * Whether the repository is archived.
         *
         * @default false
         */
        archived: boolean;
        /**
         * @format uri-template
         */
        assignees_url: string;
        /**
         * @format uri-template
         */
        blobs_url: string;
        /**
         * @format uri-template
         */
        branches_url: string;
        /**
         * @format uri
         */
        clone_url: string;
        /**
         * @format uri-template
         */
        collaborators_url: string;
        /**
         * @format uri-template
         */
        comments_url: string;
        /**
         * @format uri-template
         */
        commits_url: string;
        /**
         * @format uri-template
         */
        compare_url: string;
        /**
         * @format uri-template
         */
        contents_url: string;
        /**
         * @format uri
         */
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         *
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @format uri
         */
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        /**
         * @format uri
         */
        downloads_url: string;
        /**
         * @format uri
         */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /**
         * @format uri
         */
        forks_url: string;
        full_name: string;
        /**
         * @format uri-template
         */
        git_commits_url: string;
        /**
         * @format uri-template
         */
        git_refs_url: string;
        /**
         * @format uri-template
         */
        git_tags_url: string;
        /**
         * @format uri
         */
        git_url: string;
        /**
         * Whether discussions are enabled.
         *
         * @default false
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         *
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         *
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         *
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         *
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /**
         * @format uri
         */
        hooks_url: string;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        /**
         * @format uri-template
         */
        issue_comment_url: string;
        /**
         * @format uri-template
         */
        issue_events_url: string;
        /**
         * @format uri-template
         */
        issues_url: string;
        /**
         * @format uri-template
         */
        keys_url: string;
        /**
         * @format uri-template
         */
        labels_url: string;
        language: string | null;
        /**
         * @format uri
         */
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /**
           * @format uri
           */
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @format uri
         */
        merges_url: string;
        /**
         * @format uri-template
         */
        milestones_url: string;
        /**
         * @format uri
         */
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * @format uri-template
         */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        /**
         * @format uri-template
         */
        pulls_url: string;
        pushed_at: number | string | null;
        /**
         * @format uri-template
         */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /**
         * @format uri
         */
        stargazers_url: string;
        /**
         * @format uri-template
         */
        statuses_url: string;
        /**
         * @format uri
         */
        subscribers_url: string;
        /**
         * @format uri
         */
        subscription_url: string;
        /**
         * @format uri
         */
        svn_url: string;
        /**
         * @format uri
         */
        tags_url: string;
        /**
         * @format uri
         */
        teams_url: string;
        topics: string[];
        /**
         * @format uri-template
         */
        trees_url: string;
        /**
         * @format date-time
         */
        updated_at: string;
        /**
         * @format uri
         */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         *
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
    };
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      ["default"]: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       *
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /**
     * @format date-time
     */
    merged_at: string | null;
    merged_by?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      /**
       * @format date-time
       */
      closed_at: string | null;
      closed_issues: number;
      /**
       * @format date-time
       */
      created_at: string;
      creator: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      description: string | null;
      /**
       * @format date-time
       */
      due_on: string | null;
      /**
       * @format uri
       */
      html_url: string;
      id: number;
      /**
       * @format uri
       */
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      /**
       * @format date-time
       */
      updated_at: string;
      /**
       * @format uri
       */
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    /**
     * @format uri
     */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          /**
           * @format uri
           */
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          /**
           * @format uri-template
           */
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            /**
             * @format uri
             */
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            /**
             * @format uri-template
             */
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /**
             * @format uri
             */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             *
             * @format uri
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /**
           * @format uri
           */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           *
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      /**
       * @format uri
       */
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        /**
         * @format uri
         */
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        /**
         * @format uri-template
         */
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /**
         * @format uri
         */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         *
         * @format uri
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url?: string;
    }[];
    /**
     * @format uri-template
     */
    review_comment_url: string;
    review_comments?: number;
    /**
     * @format uri
     */
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: "open" | "closed";
    /**
     * @format uri
     */
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    user: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookPush = {
  /**
   * The SHA of the most recent commit on `ref` after the push.
   */
  after: string;
  base_ref: string | null;
  /**
   * The SHA of the most recent commit on `ref` before the push.
   */
  before: string;
  /**
   * An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.
   */
  commits: {
    /**
     * An array of files added in the commit.
     */
    added?: string[];
    /**
     * Metaproperties for Git author/committer information.
     */
    author: {
      /**
       * @format date-time
       */
      date?: string;
      /**
       * @format email
       */
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /**
       * @format date-time
       */
      date?: string;
      /**
       * @format email
       */
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit.
     */
    modified?: string[];
    /**
     * An array of files removed in the commit.
     */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     *
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     *
     * @format uri
     */
    url: string;
  }[];
  /**
   * URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
   */
  compare: string;
  /**
   * Whether this push created the `ref`.
   */
  created: boolean;
  /**
   * Whether this push deleted the `ref`.
   */
  deleted: boolean;
  enterprise?: Enterprise;
  /**
   * Whether this push was a force push of the `ref`.
   */
  forced: boolean;
  head_commit: {
    /**
     * An array of files added in the commit.
     */
    added?: string[];
    /**
     * Metaproperties for Git author/committer information.
     */
    author: {
      /**
       * @format date-time
       */
      date?: string;
      /**
       * @format email
       */
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /**
       * @format date-time
       */
      date?: string;
      /**
       * @format email
       */
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit.
     */
    modified?: string[];
    /**
     * An array of files removed in the commit.
     */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     *
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     *
     * @format uri
     */
    url: string;
  } | null;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * Metaproperties for Git author/committer information.
   */
  pusher: {
    /**
     * @format date-time
     */
    date?: string;
    /**
     * @format email
     */
    email?: string | null;
    /**
     * The git author's name.
     */
    name: string;
    username?: string;
  };
  /**
   * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
   */
  ref: string;
  /**
   * A git repository
   */
  repository: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether discussions are enabled.
     *
     * @default false
     */
    has_discussions: boolean;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  };
  sender?: SimpleUser;
};

export type WebhookRegistryPackagePublished = {
  action: "published";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  registry_package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author?: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body?: string | Record<string, any>;
      body_html?: string;
      container_metadata?: {
        labels?: Record<string, any> | null;
        manifest?: Record<string, any> | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: any[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      npm_metadata?: {
        author?: string | Record<string, any> | null;
        bin?: Record<string, any>;
        bugs?: string | Record<string, any> | null;
        commit_oid?: string;
        contributors?: string[];
        cpu?: string[];
        deleted_by_id?: number;
        dependencies?: Record<string, any>;
        description?: string;
        dev_dependencies?: Record<string, any>;
        directories?: string | Record<string, any> | null;
        dist?: string | Record<string, any> | null;
        engines?: Record<string, any>;
        files?: string[];
        git_head?: string;
        has_shrinkwrap?: boolean;
        homepage?: string;
        id?: string;
        installation_command?: string;
        keywords?: string[];
        license?: string;
        main?: string;
        maintainers?: string[];
        man?: Record<string, any>;
        name?: string;
        node_version?: string;
        npm_user?: string;
        npm_version?: string;
        optional_dependencies?: Record<string, any>;
        os?: string[];
        peer_dependencies?: Record<string, any>;
        published_via_actions?: boolean;
        readme?: string;
        release_id?: number;
        repository?: string | Record<string, any> | null;
        scripts?: Record<string, any>;
        version?: string;
      } | null;
      nuget_metadata?:
        | {
            id?: string | Record<string, any> | number | null;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  branch?: string;
                  commit?: string;
                  type?: string;
                  url?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: string | null;
        prerelease?: boolean;
        published_at?: string;
        tag_name?: string;
        target_commitish?: string;
        url?: string;
      };
      rubygems_metadata?: any[];
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      about_url?: string;
      name?: string;
      type?: string;
      url?: string;
      vendor?: string;
    } | null;
    updated_at: string | null;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookRegistryPackageUpdated = {
  action: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  registry_package: {
    created_at: string;
    description: void | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: (void | null)[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: any[];
      name: string;
      package_files: {
        content_type?: string;
        created_at?: string;
        download_url?: string;
        id?: number;
        md5?: string | null;
        name?: string;
        sha1?: string | null;
        sha256?: string;
        size?: number;
        state?: string;
        updated_at?: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: any[];
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: Record<string, any> | null;
    updated_at: string;
  };
  repository?: Repository;
  sender: SimpleUser;
};

export type WebhookReleaseCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: {
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookReleaseDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: {
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookReleaseEdited = {
  action: "edited";
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: {
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookReleasePrereleased = {
  action: "prereleased";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: ({
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: true;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url?: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookReleasePublished = {
  action: "published";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: ({
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url?: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookReleaseReleased = {
  action: "released";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: {
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    }[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookReleaseUnpublished = {
  action: "unpublished";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: ({
      /**
       * @format uri
       */
      browser_download_url: string;
      content_type: string;
      /**
       * @format date-time
       */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      /**
       * @format date-time
       */
      updated_at: string;
      uploader?: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * @format uri
       */
      url: string;
    } | null)[];
    /**
     * @format uri
     */
    assets_url: string;
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    body: string | null;
    /**
     * @format date-time
     */
    created_at: string | null;
    /**
     * @format uri
     */
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    /**
     * @format date-time
     */
    published_at: string | null;
    reactions?: {
      ["+1"]: number;
      ["-1"]: number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * @format uri
     */
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    /**
     * @format uri-template
     */
    upload_url: string;
    /**
     * @format uri
     */
    url?: string;
    /**
     * @format uri
     */
    zipball_url: string | null;
  };
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookRepositoryArchived = {
  action: "archived";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryDispatchSample = {
  action: string;
  branch: string;
  client_payload: {
    [key: string]: any;
  } | null;
  enterprise?: Enterprise;
  installation: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryEdited = {
  action: "edited";
  changes: {
    default_branch?: {
      from: string;
    };
    description?: {
      from: string | null;
    };
    homepage?: {
      from: string | null;
    };
    topics?: {
      from?: string[] | null;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryImport = {
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  status: "success" | "cancelled" | "failure";
};

export type WebhookRepositoryPrivatized = {
  action: "privatized";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryPublicized = {
  action: "publicized";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryRenamed = {
  action: "renamed";
  changes: {
    repository: {
      name: {
        from: string;
      };
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryTransferred = {
  action: "transferred";
  changes: {
    owner: {
      from: {
        organization?: {
          /**
           * @format uri
           */
          avatar_url: string;
          description: string | null;
          /**
           * @format uri
           */
          events_url: string;
          /**
           * @format uri
           */
          hooks_url: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          /**
           * @format uri
           */
          issues_url: string;
          login: string;
          /**
           * @format uri-template
           */
          members_url: string;
          node_id: string;
          /**
           * @format uri-template
           */
          public_members_url: string;
          /**
           * @format uri
           */
          repos_url: string;
          /**
           * @format uri
           */
          url: string;
        };
        user?: {
          /**
           * @format uri
           */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /**
           * @format uri-template
           */
          events_url?: string;
          /**
           * @format uri
           */
          followers_url?: string;
          /**
           * @format uri-template
           */
          following_url?: string;
          /**
           * @format uri-template
           */
          gists_url?: string;
          gravatar_id?: string;
          /**
           * @format uri
           */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /**
           * @format uri
           */
          organizations_url?: string;
          /**
           * @format uri
           */
          received_events_url?: string;
          /**
           * @format uri
           */
          repos_url?: string;
          site_admin?: boolean;
          /**
           * @format uri-template
           */
          starred_url?: string;
          /**
           * @format uri
           */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /**
           * @format uri
           */
          url?: string;
        } | null;
      };
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryUnarchived = {
  action: "unarchived";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryVulnerabilityAlertCreate = {
  action: "create";
  /**
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    external_identifier: string;
    /**
     * @format uri
     */
    external_reference: string | null;
    fix_reason?: string;
    /**
     * @format date-time
     */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id?: number;
    node_id: string;
    number: number;
    severity: string;
    state: "open" | "dismissed" | "fixed";
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryVulnerabilityAlertDismiss = {
  action: "dismiss";
  /**
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_comment?: string | null;
    dismiss_reason: string;
    dismissed_at: string;
    dismisser: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    external_identifier: string;
    /**
     * @format uri
     */
    external_reference: string | null;
    fix_reason?: string;
    /**
     * @format date-time
     */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity: string;
    state: "dismissed" | "dismissed" | "fixed";
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryVulnerabilityAlertReopen = {
  action: "reopen";
  /**
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    external_identifier: string;
    /**
     * @format uri
     */
    external_reference: string | null;
    fix_reason?: string;
    /**
     * @format date-time
     */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id?: number;
    node_id: string;
    number: number;
    severity: string;
    state: "open" | "dismissed" | "fixed";
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookRepositoryVulnerabilityAlertResolve = {
  action: "resolve";
  /**
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    external_identifier: string;
    /**
     * @format uri
     */
    external_reference: string | null;
    fix_reason?: string;
    /**
     * @format date-time
     */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id?: number;
    node_id: string;
    number: number;
    severity: string;
    state: "fixed" | "open" | "fixed";
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookSecretScanningAlertCreated = {
  action: "created";
  alert: SecretScanningAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookSecretScanningAlertLocationCreated = {
  action?: "created";
  alert: SecretScanningAlert;
  installation?: SimpleInstallation;
  location: SecretScanningLocation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookSecretScanningAlertLocationCreatedFormEncoded = {
  /**
   * A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type WebhookSecretScanningAlertReopened = {
  action: "reopened";
  alert: SecretScanningAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookSecretScanningAlertResolved = {
  action: "resolved";
  alert: {
    created_at?: AlertCreatedAt;
    html_url?: AlertHtmlUrl;
    /**
     * The REST API URL of the code locations for this alert.
     *
     * @format uri
     */
    locations_url?: string;
    number?: AlertNumber;
    /**
     * Whether push protection was bypassed for the detected secret.
     */
    push_protection_bypassed?: boolean | null;
    /**
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    push_protection_bypassed_at?: string | null;
    push_protection_bypassed_by?: NullableSimpleUser;
    /**
     * **Required when the `state` is `resolved`.** The reason for resolving the alert.
     */
    resolution?:
      | any
      | "false_positive"
      | "wont_fix"
      | "revoked"
      | "used_in_tests"
      | "pattern_deleted"
      | "pattern_edited"
      | null;
    /**
     * An optional comment to resolve an alert.
     */
    resolution_comment?: string | null;
    /**
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    resolved_at?: string | null;
    resolved_by?: NullableSimpleUser;
    /**
     * The secret that was detected.
     */
    secret?: string;
    /**
     * The type of secret that secret scanning detected.
     */
    secret_type?: string;
    /**
     * User-friendly name for the detected secret, matching the `secret_type`.
     * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
     */
    secret_type_display_name?: string;
    state?: SecretScanningAlertState;
    updated_at?: AlertUpdatedAt;
    url?: AlertUrl;
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookSecretScanningAlertRevoked = {
  action: "revoked";
  alert: SecretScanningAlert;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender?: SimpleUser;
};

export type WebhookSecurityAdvisoryPublished = {
  action: "published";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      /**
       * @format uri
       */
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string | null;
  };
  sender?: SimpleUser;
};

export type WebhookSecurityAdvisoryUpdated = {
  action: "updated";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      /**
       * @format uri
       */
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string | null;
  };
  sender?: SimpleUser;
};

export type WebhookSecurityAdvisoryWithdrawn = {
  action: "withdrawn";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      /**
       * @format uri
       */
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string;
  };
  sender?: SimpleUser;
};

export type WebhookSecurityAndAnalysis = {
  changes: {
    from?: {
      security_and_analysis?: SecurityAndAnalysis;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: FullRepository;
  sender?: SimpleUser;
};

export type WebhookSponsorshipCancelled = {
  action: "cancelled";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookSponsorshipCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookSponsorshipEdited = {
  action: "edited";
  changes: {
    privacy_level?: {
      /**
       * The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.
       */
      from: string;
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookSponsorshipPendingCancellation = {
  action: "pending_cancellation";
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookSponsorshipPendingTierChange = {
  action: "pending_tier_change";
  changes: {
    tier: {
      /**
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookSponsorshipTierChanged = {
  action: "tier_changed";
  changes: {
    tier: {
      /**
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository?: Repository;
  sender: SimpleUser;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    sponsorable: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type WebhookStarCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: string | null;
};

export type WebhookStarDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: void | null;
};

export type WebhookStatus = {
  /**
   * @format uri
   */
  avatar_url?: string | null;
  /**
   * An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
   */
  branches: {
    commit: {
      sha: string | null;
      /**
       * @format uri
       */
      url: string | null;
    };
    name: string;
    protected: boolean;
  }[];
  commit: {
    author: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    comments_url: string;
    commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date: string;
        /**
         * @format email
         */
        email?: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      comment_count: number;
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date: string;
        /**
         * @format email
         */
        email?: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      message: string;
      tree: {
        sha: string;
        /**
         * @format uri
         */
        url: string;
      };
      /**
       * @format uri
       */
      url: string;
      verification: {
        payload: string | null;
        reason:
          | "expired_key"
          | "not_signing_key"
          | "gpgverify_error"
          | "gpgverify_unavailable"
          | "unsigned"
          | "unknown_signature_type"
          | "no_user"
          | "unverified_email"
          | "bad_email"
          | "unknown_key"
          | "malformed_signature"
          | "invalid"
          | "valid"
          | "bad_cert"
          | "ocsp_pending";
        signature: string | null;
        verified: boolean;
      };
    };
    committer: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    html_url: string;
    node_id: string;
    parents: {
      /**
       * @format uri
       */
      html_url: string;
      sha: string;
      /**
       * @format uri
       */
      url: string;
    }[];
    sha: string;
    /**
     * @format uri
     */
    url: string;
  };
  context: string;
  created_at: string;
  /**
   * The optional human-readable description added to the status.
   */
  description: string | null;
  enterprise?: Enterprise;
  /**
   * The unique identifier of the status.
   */
  id: number;
  installation?: SimpleInstallation;
  name: string;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * The Commit SHA.
   */
  sha: string;
  /**
   * The new state. Can be `pending`, `success`, `failure`, or `error`.
   */
  state: "pending" | "success" | "failure" | "error";
  /**
   * The optional link added to the status.
   */
  target_url: string | null;
  updated_at: string;
};

export type WebhookTeamAdd = {
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookTeamAddedToRepository = {
  action: "added_to_repository";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  sender?: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookTeamCreated = {
  action: "created";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookTeamDeleted = {
  action: "deleted";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  sender?: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookTeamEdited = {
  action: "edited";
  /**
   * The changes to the team if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
    privacy?: {
      /**
       * The previous version of the team's privacy if the action was `edited`.
       */
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          /**
           * The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
           */
          admin?: boolean;
          /**
           * The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
           */
          pull?: boolean;
          /**
           * The previous version of the team member's `push` permission on a repository, if the action was `edited`.
           */
          push?: boolean;
        };
      };
    };
  };
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookTeamRemovedFromRepository = {
  action: "removed_from_repository";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization: OrganizationSimple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     *
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     *
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     *
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     *
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /**
     * @format uri-template
     */
    archive_url: string;
    /**
     * Whether the repository is archived.
     *
     * @default false
     */
    archived: boolean;
    /**
     * @format uri-template
     */
    assignees_url: string;
    /**
     * @format uri-template
     */
    blobs_url: string;
    /**
     * @format uri-template
     */
    branches_url: string;
    /**
     * @format uri
     */
    clone_url: string;
    /**
     * @format uri-template
     */
    collaborators_url: string;
    /**
     * @format uri-template
     */
    comments_url: string;
    /**
     * @format uri-template
     */
    commits_url: string;
    /**
     * @format uri-template
     */
    compare_url: string;
    /**
     * @format uri-template
     */
    contents_url: string;
    /**
     * @format uri
     */
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     *
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /**
     * @format uri
     */
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    /**
     * @format uri
     */
    downloads_url: string;
    /**
     * @format uri
     */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /**
     * @format uri
     */
    forks_url: string;
    full_name: string;
    /**
     * @format uri-template
     */
    git_commits_url: string;
    /**
     * @format uri-template
     */
    git_refs_url: string;
    /**
     * @format uri-template
     */
    git_tags_url: string;
    /**
     * @format uri
     */
    git_url: string;
    /**
     * Whether downloads are enabled.
     *
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     *
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     *
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     *
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /**
     * @format uri
     */
    hooks_url: string;
    /**
     * @format uri
     */
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    /**
     * @format uri-template
     */
    issue_comment_url: string;
    /**
     * @format uri-template
     */
    issue_events_url: string;
    /**
     * @format uri-template
     */
    issues_url: string;
    /**
     * @format uri-template
     */
    keys_url: string;
    /**
     * @format uri-template
     */
    labels_url: string;
    language: string | null;
    /**
     * @format uri
     */
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /**
       * @format uri
       */
      url: string | null;
    } | null;
    master_branch?: string;
    /**
     * @format uri
     */
    merges_url: string;
    /**
     * @format uri-template
     */
    milestones_url: string;
    /**
     * @format uri
     */
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * @format uri-template
     */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    /**
     * @format uri-template
     */
    pulls_url: string;
    pushed_at: number | string | null;
    /**
     * @format uri-template
     */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /**
     * @format uri
     */
    stargazers_url: string;
    /**
     * @format uri-template
     */
    statuses_url: string;
    /**
     * @format uri
     */
    subscribers_url: string;
    /**
     * @format uri
     */
    subscription_url: string;
    /**
     * @format uri
     */
    svn_url: string;
    /**
     * @format uri
     */
    tags_url: string;
    /**
     * @format uri
     */
    teams_url: string;
    topics: string[];
    /**
     * @format uri-template
     */
    trees_url: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUser;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * @format uri
     */
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    /**
     * @format uri-template
     */
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      /**
       * @format uri-template
       */
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /**
       * @format uri
       */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       *
       * @format uri
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /**
     * @format uri
     */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     *
     * @format uri
     */
    url?: string;
  };
};

export type WebhookWatchStarted = {
  action: "started";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
};

export type WebhookWorkflowDispatch = {
  enterprise?: Enterprise;
  inputs: {
    name?: string;
    number?: string;
  } | null;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  ref: string;
  repository: Repository;
  sender: SimpleUser;
  workflow: string;
};

export type WebhookWorkflowJobCompleted = {
  action: "completed";
  deployment?: Deployment;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
   */
  workflow_job: {
    /**
     * @format uri
     */
    check_run_url: string;
    completed_at: string | null;
    conclusion:
      | "success"
      | "failure"
      | "skipped"
      | "cancelled"
      | "action_required"
      | "neutral"
      | "timed_out"
      | "timed_out"
      | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id?: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: (string | null)[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: never;
    /**
     * @format uri
     */
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: never;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: never;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
     */
    status: "queued" | "in_progress" | "completed" | "waiting";
    steps: ({
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | any | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "queued";
    } | null)[];
    /**
     * @format uri
     */
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type WebhookWorkflowJobInProgress = {
  action: "in_progress";
  deployment?: Deployment;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  /**
   * The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
   */
  workflow_job: {
    /**
     * @format uri
     */
    check_run_url: string;
    completed_at: string | null;
    conclusion: "success" | "failure" | any | "cancelled" | "neutral" | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id?: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id?: never;
    /**
     * @format uri
     */
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: never;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: never;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, or `completed`.
     */
    status: "in_progress" | "completed" | "queued";
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | any | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "pending" | "queued";
    }[];
    /**
     * @format uri
     */
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type WebhookWorkflowJobQueued = {
  action: "queued";
  deployment?: Deployment;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow_job: {
    /**
     * @format uri
     */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /**
     * @format uri
     */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /**
     * @format date-time
     */
    started_at: string;
    status: "queued" | "in_progress" | "completed" | "waiting";
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | any | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending";
    }[];
    /**
     * @format uri
     */
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type WebhookWorkflowJobWaiting = {
  action: "waiting";
  deployment?: Deployment;
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow_job: {
    /**
     * @format uri
     */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /**
     * @format uri
     */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /**
     * @format date-time
     */
    started_at: string;
    status: "queued" | "in_progress" | "completed" | "waiting";
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | any | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending" | "waiting";
    }[];
    /**
     * @format uri
     */
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type WebhookWorkflowRunCompleted = {
  action: "completed";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow: {
    /**
     * @format uri
     */
    badge_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  } | null;
  workflow_run: {
    actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    artifacts_url?: string;
    /**
     * @format uri
     */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /**
     * @format uri
     */
    check_suite_url: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | "skipped"
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    jobs_url: string;
    /**
     * @format uri
     */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /**
     * @format uri
     */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /**
     * @format date-time
     */
    run_started_at: string;
    status:
      | "requested"
      | "in_progress"
      | "completed"
      | "queued"
      | "pending"
      | "waiting";
    triggering_actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    workflow_id: number;
    /**
     * @format uri
     */
    workflow_url: string;
  };
};

export type WebhookWorkflowRunInProgress = {
  action: "in_progress";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow: {
    /**
     * @format uri
     */
    badge_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  } | null;
  workflow_run: {
    actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    artifacts_url?: string;
    /**
     * @format uri
     */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /**
     * @format uri
     */
    check_suite_url: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "skipped"
      | "stale"
      | any
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string | null;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    jobs_url: string;
    /**
     * @format uri
     */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /**
     * @format uri
     */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /**
     * @format date-time
     */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending";
    triggering_actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    workflow_id: number;
    /**
     * @format uri
     */
    workflow_url: string;
  };
};

export type WebhookWorkflowRunRequested = {
  action: "requested";
  enterprise?: Enterprise;
  installation?: SimpleInstallation;
  organization?: OrganizationSimple;
  repository: Repository;
  sender: SimpleUser;
  workflow: {
    /**
     * @format uri
     */
    badge_url: string;
    /**
     * @format date-time
     */
    created_at: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
  } | null;
  workflow_run: {
    actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format uri
     */
    artifacts_url: string;
    /**
     * @format uri
     */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /**
     * @format uri
     */
    check_suite_url: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | any
      | "skipped"
      | "startup_failure"
      | null;
    /**
     * @format date-time
     */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /**
         * @format date-time
         */
        date?: string;
        /**
         * @format email
         */
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    head_sha: string;
    /**
     * @format uri
     */
    html_url: string;
    id: number;
    /**
     * @format uri
     */
    jobs_url: string;
    /**
     * @format uri
     */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /**
     * @format uri
     */
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          /**
           * @format uri
           */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /**
       * @format uri
       */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository: {
      /**
       * @format uri-template
       */
      archive_url: string;
      /**
       * @format uri-template
       */
      assignees_url: string;
      /**
       * @format uri-template
       */
      blobs_url: string;
      /**
       * @format uri-template
       */
      branches_url: string;
      /**
       * @format uri-template
       */
      collaborators_url: string;
      /**
       * @format uri-template
       */
      comments_url: string;
      /**
       * @format uri-template
       */
      commits_url: string;
      /**
       * @format uri-template
       */
      compare_url: string;
      /**
       * @format uri-template
       */
      contents_url: string;
      /**
       * @format uri
       */
      contributors_url: string;
      /**
       * @format uri
       */
      deployments_url: string;
      description: string | null;
      /**
       * @format uri
       */
      downloads_url: string;
      /**
       * @format uri
       */
      events_url: string;
      fork: boolean;
      /**
       * @format uri
       */
      forks_url: string;
      full_name: string;
      /**
       * @format uri-template
       */
      git_commits_url: string;
      /**
       * @format uri-template
       */
      git_refs_url: string;
      /**
       * @format uri-template
       */
      git_tags_url: string;
      /**
       * @format uri
       */
      hooks_url: string;
      /**
       * @format uri
       */
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      /**
       * @format uri-template
       */
      issue_comment_url: string;
      /**
       * @format uri-template
       */
      issue_events_url: string;
      /**
       * @format uri-template
       */
      issues_url: string;
      /**
       * @format uri-template
       */
      keys_url: string;
      /**
       * @format uri-template
       */
      labels_url: string;
      /**
       * @format uri
       */
      languages_url: string;
      /**
       * @format uri
       */
      merges_url: string;
      /**
       * @format uri-template
       */
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      /**
       * @format uri-template
       */
      notifications_url: string;
      owner: {
        /**
         * @format uri
         */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /**
         * @format uri-template
         */
        events_url?: string;
        /**
         * @format uri
         */
        followers_url?: string;
        /**
         * @format uri-template
         */
        following_url?: string;
        /**
         * @format uri-template
         */
        gists_url?: string;
        gravatar_id?: string;
        /**
         * @format uri
         */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /**
         * @format uri
         */
        organizations_url?: string;
        /**
         * @format uri
         */
        received_events_url?: string;
        /**
         * @format uri
         */
        repos_url?: string;
        site_admin?: boolean;
        /**
         * @format uri-template
         */
        starred_url?: string;
        /**
         * @format uri
         */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /**
         * @format uri
         */
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      /**
       * @format uri-template
       */
      pulls_url: string;
      /**
       * @format uri-template
       */
      releases_url: string;
      /**
       * @format uri
       */
      stargazers_url: string;
      /**
       * @format uri-template
       */
      statuses_url: string;
      /**
       * @format uri
       */
      subscribers_url: string;
      /**
       * @format uri
       */
      subscription_url: string;
      /**
       * @format uri
       */
      tags_url: string;
      /**
       * @format uri
       */
      teams_url: string;
      /**
       * @format uri-template
       */
      trees_url: string;
      /**
       * @format uri
       */
      url: string;
    };
    /**
     * @format uri
     */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /**
     * @format date-time
     */
    run_started_at: string;
    status:
      | "requested"
      | "in_progress"
      | "completed"
      | "queued"
      | "pending"
      | "waiting";
    triggering_actor: {
      /**
       * @format uri
       */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /**
       * @format uri-template
       */
      events_url?: string;
      /**
       * @format uri
       */
      followers_url?: string;
      /**
       * @format uri-template
       */
      following_url?: string;
      /**
       * @format uri-template
       */
      gists_url?: string;
      gravatar_id?: string;
      /**
       * @format uri
       */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /**
       * @format uri
       */
      organizations_url?: string;
      /**
       * @format uri
       */
      received_events_url?: string;
      /**
       * @format uri
       */
      repos_url?: string;
      site_admin?: boolean;
      /**
       * @format uri-template
       */
      starred_url?: string;
      /**
       * @format uri
       */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /**
       * @format uri
       */
      url?: string;
    } | null;
    /**
     * @format date-time
     */
    updated_at: string;
    /**
     * @format uri
     */
    url: string;
    workflow_id: number;
    /**
     * @format uri
     */
    workflow_url: string;
  };
};

/**
 * A GitHub Actions workflow
 */
export type Workflow = {
  /**
   * @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg
   */
  badge_url: string;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  deleted_at?: string;
  /**
   * @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
   */
  html_url: string;
  /**
   * @example 5
   */
  id: number;
  /**
   * @example CI
   */
  name: string;
  /**
   * @example MDg6V29ya2Zsb3cxMg==
   */
  node_id: string;
  /**
   * @example ruby.yaml
   */
  path: string;
  /**
   * @example active
   */
  state:
    | "active"
    | "deleted"
    | "disabled_fork"
    | "disabled_inactivity"
    | "disabled_manually";
  /**
   * @example "2019-12-06T14:20:20.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example https://api.github.com/repos/actions/setup-ruby/workflows/5
   */
  url: string;
};

/**
 * An invocation of a workflow
 */
export type WorkflowRun = {
  actor?: SimpleUser;
  /**
   * The URL to the artifacts for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
   */
  cancel_url: string;
  /**
   * The ID of the associated check suite.
   *
   * @example 42
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   *
   * @example MDEwOkNoZWNrU3VpdGU0Mg==
   */
  check_suite_node_id?: string;
  /**
   * The URL to the associated check suite.
   *
   * @example https://api.github.com/repos/github/hello-world/check-suites/12
   */
  check_suite_url: string;
  /**
   * @example neutral
   */
  conclusion: string | null;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   *
   * @example Simple Workflow
   */
  display_title: string;
  /**
   * @example push
   */
  event: string;
  /**
   * @example master
   */
  head_branch: string | null;
  head_commit: NullableSimpleCommit;
  head_repository: MinimalRepository;
  /**
   * @example 5
   */
  head_repository_id?: number;
  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   *
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;
  /**
   * @example https://github.com/github/hello-world/suites/4
   */
  html_url: string;
  /**
   * The ID of the workflow run.
   *
   * @example 5
   */
  id: number;
  /**
   * The URL to the jobs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
   */
  logs_url: string;
  /**
   * The name of the workflow run.
   *
   * @example Build
   */
  name?: string | null;
  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;
  /**
   * The full path of the workflow
   *
   * @example octocat/octo-repo/.github/workflows/ci.yml@main
   */
  path: string;
  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
   */
  previous_attempt_url?: string | null;
  pull_requests: PullRequestMinimal[] | null;
  referenced_workflows?: ReferencedWorkflow[] | null;
  repository: MinimalRepository;
  /**
   * The URL to rerun the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
   */
  rerun_url: string;
  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   *
   * @example 1
   */
  run_attempt?: number;
  /**
   * The auto incrementing run number for the workflow run.
   *
   * @example 106
   */
  run_number: number;
  /**
   * The start time of the latest run. Resets on re-run.
   *
   * @format date-time
   */
  run_started_at?: string;
  /**
   * @example completed
   */
  status: string | null;
  triggering_actor?: SimpleUser;
  /**
   * @format date-time
   */
  updated_at: string;
  /**
   * The URL to the workflow run.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  url: string;
  /**
   * The ID of the parent workflow.
   *
   * @example 5
   */
  workflow_id: number;
  /**
   * The URL to the workflow.
   *
   * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
   */
  workflow_url: string;
};

/**
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    MACOS?: {
      job_runs?: {
        duration_ms: number;
        job_id: number;
      }[];
      jobs: number;
      total_ms: number;
    };
    UBUNTU?: {
      job_runs?: {
        duration_ms: number;
        job_id: number;
      }[];
      jobs: number;
      total_ms: number;
    };
    WINDOWS?: {
      job_runs?: {
        duration_ms: number;
        job_id: number;
      }[];
      jobs: number;
      total_ms: number;
    };
  };
  run_duration_ms?: number;
};

/**
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    MACOS?: {
      total_ms?: number;
    };
    UBUNTU?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};
