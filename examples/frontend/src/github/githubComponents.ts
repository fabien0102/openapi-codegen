/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
import * as reactQuery from "@tanstack/react-query";
import { useGithubContext, GithubContext, queryKeyFn } from "./githubContext";
import type * as Fetcher from "./githubFetcher";
import { githubFetch } from "./githubFetcher";
import type * as Schemas from "./githubSchemas";
import type * as Responses from "./githubResponses";

export type MetaRootError = Fetcher.ErrorWrapper<undefined>;

export type MetaRootVariables = GithubContext["fetcherOptions"];

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const fetchMetaRoot = (
  variables: MetaRootVariables,
  signal?: AbortSignal,
) =>
  githubFetch<Schemas.Root, MetaRootError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const metaRootQuery = (
  variables: MetaRootVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Root>;
} => ({
  queryKey: queryKeyFn({
    path: "/",
    operationId: "metaRoot",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMetaRoot(variables, signal),
});

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const useSuspenseMetaRoot = <TData = Schemas.Root>(
  variables: MetaRootVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Root, MetaRootError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Root, MetaRootError, TData>({
    ...metaRootQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const useMetaRoot = <TData = Schemas.Root>(
  variables: MetaRootVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Root, MetaRootError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Root, MetaRootError, TData>({
    ...metaRootQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsGetAuthenticatedError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetAuthenticated = (
  variables: AppsGetAuthenticatedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Integration,
    AppsGetAuthenticatedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/app", method: "get", ...variables, signal });

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetAuthenticatedQuery = (
  variables: AppsGetAuthenticatedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Integration>;
} => ({
  queryKey: queryKeyFn({
    path: "/app",
    operationId: "appsGetAuthenticated",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetAuthenticated(variables, signal),
});

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetAuthenticated = <TData = Schemas.Integration>(
  variables: AppsGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Integration,
      AppsGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Integration,
    AppsGetAuthenticatedError,
    TData
  >({
    ...appsGetAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetAuthenticated = <TData = Schemas.Integration>(
  variables: AppsGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Integration,
      AppsGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Integration,
    AppsGetAuthenticatedError,
    TData
  >({
    ...appsGetAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsCreateFromManifestPathParams = {
  code: string;
};

export type AppsCreateFromManifestError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type AppsCreateFromManifestResponse = {
  /**
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id: string;
  /**
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /**
   * @example The description of the app.
   */
  description: string | null;
  /**
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /**
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /**
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id?: number;
  /**
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name?: string;
  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id?: string;
  owner?: Schemas.NullableSimpleUser;
  /**
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem: string;
  /**
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /**
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /**
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret: string | null;
} & {
  [key: string]: any;
};

export type AppsCreateFromManifestVariables = {
  pathParams: AppsCreateFromManifestPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const fetchAppsCreateFromManifest = (
  variables: AppsCreateFromManifestVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsCreateFromManifestResponse,
    AppsCreateFromManifestError,
    undefined,
    {},
    {},
    AppsCreateFromManifestPathParams
  >({
    url: "/app-manifests/{code}/conversions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const useAppsCreateFromManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AppsCreateFromManifestResponse,
      AppsCreateFromManifestError,
      AppsCreateFromManifestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    AppsCreateFromManifestResponse,
    AppsCreateFromManifestError,
    AppsCreateFromManifestVariables
  >({
    mutationFn: (variables: AppsCreateFromManifestVariables) =>
      fetchAppsCreateFromManifest({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetWebhookConfigForAppError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetWebhookConfigForAppVariables =
  GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetWebhookConfigForApp = (
  variables: AppsGetWebhookConfigForAppVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    AppsGetWebhookConfigForAppError,
    undefined,
    {},
    {},
    {}
  >({ url: "/app/hook/config", method: "get", ...variables, signal });

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetWebhookConfigForAppQuery = (
  variables: AppsGetWebhookConfigForAppVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WebhookConfig>;
} => ({
  queryKey: queryKeyFn({
    path: "/app/hook/config",
    operationId: "appsGetWebhookConfigForApp",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetWebhookConfigForApp(variables, signal),
});

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetWebhookConfigForApp = <
  TData = Schemas.WebhookConfig,
>(
  variables: AppsGetWebhookConfigForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      AppsGetWebhookConfigForAppError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WebhookConfig,
    AppsGetWebhookConfigForAppError,
    TData
  >({
    ...appsGetWebhookConfigForAppQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetWebhookConfigForApp = <TData = Schemas.WebhookConfig>(
  variables: AppsGetWebhookConfigForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      AppsGetWebhookConfigForAppError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    AppsGetWebhookConfigForAppError,
    TData
  >({
    ...appsGetWebhookConfigForAppQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsUpdateWebhookConfigForAppError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsUpdateWebhookConfigForAppRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type AppsUpdateWebhookConfigForAppVariables = {
  body?: AppsUpdateWebhookConfigForAppRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUpdateWebhookConfigForApp = (
  variables: AppsUpdateWebhookConfigForAppVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    AppsUpdateWebhookConfigForAppError,
    AppsUpdateWebhookConfigForAppRequestBody,
    {},
    {},
    {}
  >({ url: "/app/hook/config", method: "patch", ...variables, signal });

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUpdateWebhookConfigForApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      AppsUpdateWebhookConfigForAppError,
      AppsUpdateWebhookConfigForAppVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    AppsUpdateWebhookConfigForAppError,
    AppsUpdateWebhookConfigForAppVariables
  >({
    mutationFn: (variables: AppsUpdateWebhookConfigForAppVariables) =>
      fetchAppsUpdateWebhookConfigForApp({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsListWebhookDeliveriesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
   */
  cursor?: string;
  redelivery?: boolean;
};

export type AppsListWebhookDeliveriesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsListWebhookDeliveriesResponse = Schemas.HookDeliveryItem[];

export type AppsListWebhookDeliveriesVariables = {
  queryParams?: AppsListWebhookDeliveriesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsListWebhookDeliveries = (
  variables: AppsListWebhookDeliveriesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListWebhookDeliveriesResponse,
    AppsListWebhookDeliveriesError,
    undefined,
    {},
    AppsListWebhookDeliveriesQueryParams,
    {}
  >({ url: "/app/hook/deliveries", method: "get", ...variables, signal });

/**
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsListWebhookDeliveriesQuery = (
  variables: AppsListWebhookDeliveriesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListWebhookDeliveriesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/app/hook/deliveries",
    operationId: "appsListWebhookDeliveries",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListWebhookDeliveries(variables, signal),
});

/**
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsListWebhookDeliveries = <
  TData = AppsListWebhookDeliveriesResponse,
>(
  variables: AppsListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListWebhookDeliveriesResponse,
      AppsListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListWebhookDeliveriesResponse,
    AppsListWebhookDeliveriesError,
    TData
  >({
    ...appsListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsListWebhookDeliveries = <
  TData = AppsListWebhookDeliveriesResponse,
>(
  variables: AppsListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListWebhookDeliveriesResponse,
      AppsListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListWebhookDeliveriesResponse,
    AppsListWebhookDeliveriesError,
    TData
  >({
    ...appsListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsGetWebhookDeliveryPathParams = {
  deliveryId: number;
};

export type AppsGetWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsGetWebhookDeliveryVariables = {
  pathParams: AppsGetWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetWebhookDelivery = (
  variables: AppsGetWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.HookDelivery,
    AppsGetWebhookDeliveryError,
    undefined,
    {},
    {},
    AppsGetWebhookDeliveryPathParams
  >({
    url: "/app/hook/deliveries/{deliveryId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetWebhookDeliveryQuery = (
  variables: AppsGetWebhookDeliveryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.HookDelivery>;
} => ({
  queryKey: queryKeyFn({
    path: "/app/hook/deliveries/{deliveryId}",
    operationId: "appsGetWebhookDelivery",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetWebhookDelivery(variables, signal),
});

/**
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetWebhookDelivery = <TData = Schemas.HookDelivery>(
  variables: AppsGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      AppsGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.HookDelivery,
    AppsGetWebhookDeliveryError,
    TData
  >({
    ...appsGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetWebhookDelivery = <TData = Schemas.HookDelivery>(
  variables: AppsGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      AppsGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.HookDelivery,
    AppsGetWebhookDeliveryError,
    TData
  >({
    ...appsGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsRedeliverWebhookDeliveryPathParams = {
  deliveryId: number;
};

export type AppsRedeliverWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsRedeliverWebhookDeliveryVariables = {
  pathParams: AppsRedeliverWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Redeliver a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsRedeliverWebhookDelivery = (
  variables: AppsRedeliverWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    AppsRedeliverWebhookDeliveryError,
    undefined,
    {},
    {},
    AppsRedeliverWebhookDeliveryPathParams
  >({
    url: "/app/hook/deliveries/{deliveryId}/attempts",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Redeliver a delivery for the webhook configured for a GitHub App.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsRedeliverWebhookDelivery = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      AppsRedeliverWebhookDeliveryError,
      AppsRedeliverWebhookDeliveryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    AppsRedeliverWebhookDeliveryError,
    AppsRedeliverWebhookDeliveryVariables
  >({
    mutationFn: (variables: AppsRedeliverWebhookDeliveryVariables) =>
      fetchAppsRedeliverWebhookDelivery({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsListInstallationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  outdated?: string;
};

export type AppsListInstallationsError = Fetcher.ErrorWrapper<undefined>;

export type AppsListInstallationsResponse = Schemas.Installation[];

export type AppsListInstallationsVariables = {
  queryParams?: AppsListInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const fetchAppsListInstallations = (
  variables: AppsListInstallationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListInstallationsResponse,
    AppsListInstallationsError,
    undefined,
    {},
    AppsListInstallationsQueryParams,
    {}
  >({ url: "/app/installations", method: "get", ...variables, signal });

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const appsListInstallationsQuery = (
  variables: AppsListInstallationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListInstallationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/app/installations",
    operationId: "appsListInstallations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListInstallations(variables, signal),
});

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const useSuspenseAppsListInstallations = <
  TData = AppsListInstallationsResponse,
>(
  variables: AppsListInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsResponse,
      AppsListInstallationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListInstallationsResponse,
    AppsListInstallationsError,
    TData
  >({
    ...appsListInstallationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const useAppsListInstallations = <TData = AppsListInstallationsResponse>(
  variables: AppsListInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsResponse,
      AppsListInstallationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsResponse,
    AppsListInstallationsError,
    TData
  >({
    ...appsListInstallationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsDeleteInstallationPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsDeleteInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsDeleteInstallationVariables = {
  pathParams: AppsDeleteInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsDeleteInstallation = (
  variables: AppsDeleteInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsDeleteInstallationError,
    undefined,
    {},
    {},
    AppsDeleteInstallationPathParams
  >({
    url: "/app/installations/{installationId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsDeleteInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteInstallationError,
      AppsDeleteInstallationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteInstallationError,
    AppsDeleteInstallationVariables
  >({
    mutationFn: (variables: AppsDeleteInstallationVariables) =>
      fetchAppsDeleteInstallation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetInstallationPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsGetInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsGetInstallationVariables = {
  pathParams: AppsGetInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetInstallation = (
  variables: AppsGetInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetInstallationError,
    undefined,
    {},
    {},
    AppsGetInstallationPathParams
  >({
    url: "/app/installations/{installationId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetInstallationQuery = (
  variables: AppsGetInstallationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Installation>;
} => ({
  queryKey: queryKeyFn({
    path: "/app/installations/{installationId}",
    operationId: "appsGetInstallation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetInstallation(variables, signal),
});

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetInstallation = <TData = Schemas.Installation>(
  variables: AppsGetInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Installation,
    AppsGetInstallationError,
    TData
  >({
    ...appsGetInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetInstallation = <TData = Schemas.Installation>(
  variables: AppsGetInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetInstallationError,
    TData
  >({
    ...appsGetInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsCreateInstallationAccessTokenPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsCreateInstallationAccessTokenError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsCreateInstallationAccessTokenRequestBody = {
  permissions?: Schemas.AppPermissions;
  /**
   * List of repository names that the token should have access to
   */
  repositories?: string[];
  /**
   * List of repository IDs that the token should have access to
   *
   * @example 1
   */
  repository_ids?: number[];
};

export type AppsCreateInstallationAccessTokenVariables = {
  body?: AppsCreateInstallationAccessTokenRequestBody;
  pathParams: AppsCreateInstallationAccessTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsCreateInstallationAccessToken = (
  variables: AppsCreateInstallationAccessTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InstallationToken,
    AppsCreateInstallationAccessTokenError,
    AppsCreateInstallationAccessTokenRequestBody,
    {},
    {},
    AppsCreateInstallationAccessTokenPathParams
  >({
    url: "/app/installations/{installationId}/access_tokens",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsCreateInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InstallationToken,
      AppsCreateInstallationAccessTokenError,
      AppsCreateInstallationAccessTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InstallationToken,
    AppsCreateInstallationAccessTokenError,
    AppsCreateInstallationAccessTokenVariables
  >({
    mutationFn: (variables: AppsCreateInstallationAccessTokenVariables) =>
      fetchAppsCreateInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AppsUnsuspendInstallationPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsUnsuspendInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsUnsuspendInstallationVariables = {
  pathParams: AppsUnsuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUnsuspendInstallation = (
  variables: AppsUnsuspendInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsUnsuspendInstallationError,
    undefined,
    {},
    {},
    AppsUnsuspendInstallationPathParams
  >({
    url: "/app/installations/{installationId}/suspended",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUnsuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsUnsuspendInstallationError,
      AppsUnsuspendInstallationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsUnsuspendInstallationError,
    AppsUnsuspendInstallationVariables
  >({
    mutationFn: (variables: AppsUnsuspendInstallationVariables) =>
      fetchAppsUnsuspendInstallation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsSuspendInstallationPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsSuspendInstallationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type AppsSuspendInstallationVariables = {
  pathParams: AppsSuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsSuspendInstallation = (
  variables: AppsSuspendInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsSuspendInstallationError,
    undefined,
    {},
    {},
    AppsSuspendInstallationPathParams
  >({
    url: "/app/installations/{installationId}/suspended",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsSuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsSuspendInstallationError,
      AppsSuspendInstallationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsSuspendInstallationError,
    AppsSuspendInstallationVariables
  >({
    mutationFn: (variables: AppsSuspendInstallationVariables) =>
      fetchAppsSuspendInstallation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsDeleteAuthorizationPathParams = {
  /**
   * The client ID of the GitHub app.
   */
  clientId: string;
};

export type AppsDeleteAuthorizationError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsDeleteAuthorizationRequestBody = {
  /**
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token: string;
};

export type AppsDeleteAuthorizationVariables = {
  body: AppsDeleteAuthorizationRequestBody;
  pathParams: AppsDeleteAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchAppsDeleteAuthorization = (
  variables: AppsDeleteAuthorizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsDeleteAuthorizationError,
    AppsDeleteAuthorizationRequestBody,
    {},
    {},
    AppsDeleteAuthorizationPathParams
  >({
    url: "/applications/{clientId}/grant",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const useAppsDeleteAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteAuthorizationError,
      AppsDeleteAuthorizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteAuthorizationError,
    AppsDeleteAuthorizationVariables
  >({
    mutationFn: (variables: AppsDeleteAuthorizationVariables) =>
      fetchAppsDeleteAuthorization({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsDeleteTokenPathParams = {
  /**
   * The client ID of the GitHub app.
   */
  clientId: string;
};

export type AppsDeleteTokenError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsDeleteTokenRequestBody = {
  /**
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token: string;
};

export type AppsDeleteTokenVariables = {
  body: AppsDeleteTokenRequestBody;
  pathParams: AppsDeleteTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const fetchAppsDeleteToken = (
  variables: AppsDeleteTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsDeleteTokenError,
    AppsDeleteTokenRequestBody,
    {},
    {},
    AppsDeleteTokenPathParams
  >({
    url: "/applications/{clientId}/token",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const useAppsDeleteToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsDeleteTokenError,
      AppsDeleteTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsDeleteTokenError,
    AppsDeleteTokenVariables
  >({
    mutationFn: (variables: AppsDeleteTokenVariables) =>
      fetchAppsDeleteToken({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsResetTokenPathParams = {
  /**
   * The client ID of the GitHub app.
   */
  clientId: string;
};

export type AppsResetTokenError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type AppsResetTokenRequestBody = {
  /**
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsResetTokenVariables = {
  body: AppsResetTokenRequestBody;
  pathParams: AppsResetTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsResetToken = (
  variables: AppsResetTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Authorization,
    AppsResetTokenError,
    AppsResetTokenRequestBody,
    {},
    {},
    AppsResetTokenPathParams
  >({
    url: "/applications/{clientId}/token",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsResetToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsResetTokenError,
      AppsResetTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsResetTokenError,
    AppsResetTokenVariables
  >({
    mutationFn: (variables: AppsResetTokenVariables) =>
      fetchAppsResetToken({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsCheckTokenPathParams = {
  /**
   * The client ID of the GitHub app.
   */
  clientId: string;
};

export type AppsCheckTokenError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsCheckTokenRequestBody = {
  /**
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsCheckTokenVariables = {
  body: AppsCheckTokenRequestBody;
  pathParams: AppsCheckTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsCheckToken = (
  variables: AppsCheckTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Authorization,
    AppsCheckTokenError,
    AppsCheckTokenRequestBody,
    {},
    {},
    AppsCheckTokenPathParams
  >({
    url: "/applications/{clientId}/token",
    method: "post",
    ...variables,
    signal,
  });

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsCheckToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsCheckTokenError,
      AppsCheckTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsCheckTokenError,
    AppsCheckTokenVariables
  >({
    mutationFn: (variables: AppsCheckTokenVariables) =>
      fetchAppsCheckToken({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsScopeTokenPathParams = {
  /**
   * The client ID of the GitHub app.
   */
  clientId: string;
};

export type AppsScopeTokenError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsScopeTokenRequestBody = {
  /**
   * The access token used to authenticate to the GitHub API.
   *
   * @example e72e16c7e42f292c6912e7710c838347ae178b4a
   */
  access_token: string;
  permissions?: Schemas.AppPermissions;
  /**
   * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
   */
  repositories?: string[];
  /**
   * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
   *
   * @example 1
   */
  repository_ids?: number[];
  /**
   * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
   *
   * @example octocat
   */
  target?: string;
  /**
   * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
   *
   * @example 1
   */
  target_id?: number;
};

export type AppsScopeTokenVariables = {
  body: AppsScopeTokenRequestBody;
  pathParams: AppsScopeTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsScopeToken = (
  variables: AppsScopeTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Authorization,
    AppsScopeTokenError,
    AppsScopeTokenRequestBody,
    {},
    {},
    AppsScopeTokenPathParams
  >({
    url: "/applications/{clientId}/token/scoped",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsScopeToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      AppsScopeTokenError,
      AppsScopeTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    AppsScopeTokenError,
    AppsScopeTokenVariables
  >({
    mutationFn: (variables: AppsScopeTokenVariables) =>
      fetchAppsScopeToken({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetBySlugPathParams = {
  appSlug: string;
};

export type AppsGetBySlugError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsGetBySlugVariables = {
  pathParams: AppsGetBySlugPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsGetBySlug = (
  variables: AppsGetBySlugVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Integration,
    AppsGetBySlugError,
    undefined,
    {},
    {},
    AppsGetBySlugPathParams
  >({ url: "/apps/{appSlug}", method: "get", ...variables, signal });

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const appsGetBySlugQuery = (
  variables: AppsGetBySlugVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Integration>;
} => ({
  queryKey: queryKeyFn({
    path: "/apps/{appSlug}",
    operationId: "appsGetBySlug",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetBySlug(variables, signal),
});

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useSuspenseAppsGetBySlug = <TData = Schemas.Integration>(
  variables: AppsGetBySlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Integration, AppsGetBySlugError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Integration,
    AppsGetBySlugError,
    TData
  >({
    ...appsGetBySlugQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsGetBySlug = <TData = Schemas.Integration>(
  variables: AppsGetBySlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Integration, AppsGetBySlugError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Integration, AppsGetBySlugError, TData>({
    ...appsGetBySlugQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodesOfConductGetAllCodesOfConductError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type CodesOfConductGetAllCodesOfConductResponse =
  Schemas.CodeOfConduct[];

export type CodesOfConductGetAllCodesOfConductVariables =
  GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetAllCodesOfConduct = (
  variables: CodesOfConductGetAllCodesOfConductVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodesOfConductGetAllCodesOfConductResponse,
    CodesOfConductGetAllCodesOfConductError,
    undefined,
    {},
    {},
    {}
  >({ url: "/codes_of_conduct", method: "get", ...variables, signal });

export const codesOfConductGetAllCodesOfConductQuery = (
  variables: CodesOfConductGetAllCodesOfConductVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodesOfConductGetAllCodesOfConductResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/codes_of_conduct",
    operationId: "codesOfConductGetAllCodesOfConduct",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodesOfConductGetAllCodesOfConduct(variables, signal),
});

export const useSuspenseCodesOfConductGetAllCodesOfConduct = <
  TData = CodesOfConductGetAllCodesOfConductResponse,
>(
  variables: CodesOfConductGetAllCodesOfConductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodesOfConductGetAllCodesOfConductResponse,
      CodesOfConductGetAllCodesOfConductError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodesOfConductGetAllCodesOfConductResponse,
    CodesOfConductGetAllCodesOfConductError,
    TData
  >({
    ...codesOfConductGetAllCodesOfConductQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useCodesOfConductGetAllCodesOfConduct = <
  TData = CodesOfConductGetAllCodesOfConductResponse,
>(
  variables: CodesOfConductGetAllCodesOfConductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodesOfConductGetAllCodesOfConductResponse,
      CodesOfConductGetAllCodesOfConductError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodesOfConductGetAllCodesOfConductResponse,
    CodesOfConductGetAllCodesOfConductError,
    TData
  >({
    ...codesOfConductGetAllCodesOfConductQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodesOfConductGetConductCodePathParams = {
  key: string;
};

export type CodesOfConductGetConductCodeError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type CodesOfConductGetConductCodeVariables = {
  pathParams: CodesOfConductGetConductCodePathParams;
} & GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetConductCode = (
  variables: CodesOfConductGetConductCodeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeOfConduct,
    CodesOfConductGetConductCodeError,
    undefined,
    {},
    {},
    CodesOfConductGetConductCodePathParams
  >({ url: "/codes_of_conduct/{key}", method: "get", ...variables, signal });

export const codesOfConductGetConductCodeQuery = (
  variables: CodesOfConductGetConductCodeVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeOfConduct>;
} => ({
  queryKey: queryKeyFn({
    path: "/codes_of_conduct/{key}",
    operationId: "codesOfConductGetConductCode",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodesOfConductGetConductCode(variables, signal),
});

export const useSuspenseCodesOfConductGetConductCode = <
  TData = Schemas.CodeOfConduct,
>(
  variables: CodesOfConductGetConductCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      CodesOfConductGetConductCodeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeOfConduct,
    CodesOfConductGetConductCodeError,
    TData
  >({
    ...codesOfConductGetConductCodeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useCodesOfConductGetConductCode = <TData = Schemas.CodeOfConduct>(
  variables: CodesOfConductGetConductCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      CodesOfConductGetConductCodeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeOfConduct,
    CodesOfConductGetConductCodeError,
    TData
  >({
    ...codesOfConductGetConductCodeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type EmojisGetError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type EmojisGetResponse = {
  [key: string]: string;
};

export type EmojisGetVariables = GithubContext["fetcherOptions"];

/**
 * Lists all the emojis available to use on GitHub.
 */
export const fetchEmojisGet = (
  variables: EmojisGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<EmojisGetResponse, EmojisGetError, undefined, {}, {}, {}>({
    url: "/emojis",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all the emojis available to use on GitHub.
 */
export const emojisGetQuery = (
  variables: EmojisGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<EmojisGetResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/emojis",
    operationId: "emojisGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchEmojisGet(variables, signal),
});

/**
 * Lists all the emojis available to use on GitHub.
 */
export const useSuspenseEmojisGet = <TData = EmojisGetResponse>(
  variables: EmojisGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<EmojisGetResponse, EmojisGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<EmojisGetResponse, EmojisGetError, TData>({
    ...emojisGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all the emojis available to use on GitHub.
 */
export const useEmojisGet = <TData = EmojisGetResponse>(
  variables: EmojisGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<EmojisGetResponse, EmojisGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<EmojisGetResponse, EmojisGetError, TData>({
    ...emojisGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotListAlertsForEnterprisePathParams = {
  /**
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type DependabotListAlertsForEnterpriseQueryParams = {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   *
   * Can be: `dismissed`, `fixed`, `open`
   */
  state?: string;
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   *
   * Can be: `low`, `medium`, `high`, `critical`
   */
  severity?: string;
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   *
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
  ecosystem?: string;
  /**
   * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
   */
  package?: string;
  /**
   * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
   */
  scope?: "development" | "runtime";
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  after?: string;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   *
   * @default 30
   * @maximum 100
   * @minimum 1
   */
  first?: number;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   *
   * @maximum 100
   * @minimum 1
   */
  last?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type DependabotListAlertsForEnterpriseError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type DependabotListAlertsForEnterpriseResponse =
  Schemas.DependabotAlertWithRepository[];

export type DependabotListAlertsForEnterpriseVariables = {
  pathParams: DependabotListAlertsForEnterprisePathParams;
  queryParams?: DependabotListAlertsForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists Dependabot alerts for repositories that are owned by the specified enterprise.
 * To use this endpoint, you must be a member of the enterprise, and you must use an
 * access token with the `repo` scope or `security_events` scope.
 * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const fetchDependabotListAlertsForEnterprise = (
  variables: DependabotListAlertsForEnterpriseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListAlertsForEnterpriseResponse,
    DependabotListAlertsForEnterpriseError,
    undefined,
    {},
    DependabotListAlertsForEnterpriseQueryParams,
    DependabotListAlertsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/dependabot/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists Dependabot alerts for repositories that are owned by the specified enterprise.
 * To use this endpoint, you must be a member of the enterprise, and you must use an
 * access token with the `repo` scope or `security_events` scope.
 * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const dependabotListAlertsForEnterpriseQuery = (
  variables: DependabotListAlertsForEnterpriseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListAlertsForEnterpriseResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/enterprises/{enterprise}/dependabot/alerts",
    operationId: "dependabotListAlertsForEnterprise",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListAlertsForEnterprise(variables, signal),
});

/**
 * Lists Dependabot alerts for repositories that are owned by the specified enterprise.
 * To use this endpoint, you must be a member of the enterprise, and you must use an
 * access token with the `repo` scope or `security_events` scope.
 * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useSuspenseDependabotListAlertsForEnterprise = <
  TData = DependabotListAlertsForEnterpriseResponse,
>(
  variables: DependabotListAlertsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForEnterpriseResponse,
      DependabotListAlertsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListAlertsForEnterpriseResponse,
    DependabotListAlertsForEnterpriseError,
    TData
  >({
    ...dependabotListAlertsForEnterpriseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists Dependabot alerts for repositories that are owned by the specified enterprise.
 * To use this endpoint, you must be a member of the enterprise, and you must use an
 * access token with the `repo` scope or `security_events` scope.
 * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useDependabotListAlertsForEnterprise = <
  TData = DependabotListAlertsForEnterpriseResponse,
>(
  variables: DependabotListAlertsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForEnterpriseResponse,
      DependabotListAlertsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListAlertsForEnterpriseResponse,
    DependabotListAlertsForEnterpriseError,
    TData
  >({
    ...dependabotListAlertsForEnterpriseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SecretScanningListAlertsForEnterprisePathParams = {
  /**
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type SecretScanningListAlertsForEnterpriseQueryParams = {
  /**
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  state?: "open" | "resolved";
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types.
   */
  secret_type?: string;
  /**
   * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
   */
  resolution?: string;
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  after?: string;
};

export type SecretScanningListAlertsForEnterpriseError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SecretScanningListAlertsForEnterpriseResponse =
  Schemas.OrganizationSecretScanningAlert[];

export type SecretScanningListAlertsForEnterpriseVariables = {
  pathParams: SecretScanningListAlertsForEnterprisePathParams;
  queryParams?: SecretScanningListAlertsForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const fetchSecretScanningListAlertsForEnterprise = (
  variables: SecretScanningListAlertsForEnterpriseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SecretScanningListAlertsForEnterpriseResponse,
    SecretScanningListAlertsForEnterpriseError,
    undefined,
    {},
    SecretScanningListAlertsForEnterpriseQueryParams,
    SecretScanningListAlertsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/secret-scanning/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const secretScanningListAlertsForEnterpriseQuery = (
  variables: SecretScanningListAlertsForEnterpriseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SecretScanningListAlertsForEnterpriseResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/enterprises/{enterprise}/secret-scanning/alerts",
    operationId: "secretScanningListAlertsForEnterprise",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSecretScanningListAlertsForEnterprise(variables, signal),
});

/**
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const useSuspenseSecretScanningListAlertsForEnterprise = <
  TData = SecretScanningListAlertsForEnterpriseResponse,
>(
  variables: SecretScanningListAlertsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForEnterpriseResponse,
      SecretScanningListAlertsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SecretScanningListAlertsForEnterpriseResponse,
    SecretScanningListAlertsForEnterpriseError,
    TData
  >({
    ...secretScanningListAlertsForEnterpriseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 */
export const useSecretScanningListAlertsForEnterprise = <
  TData = SecretScanningListAlertsForEnterpriseResponse,
>(
  variables: SecretScanningListAlertsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForEnterpriseResponse,
      SecretScanningListAlertsForEnterpriseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListAlertsForEnterpriseResponse,
    SecretScanningListAlertsForEnterpriseError,
    TData
  >({
    ...secretScanningListAlertsForEnterpriseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListPublicEventsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ActivityListPublicEventsResponse = Schemas.Event[];

export type ActivityListPublicEventsVariables = {
  queryParams?: ActivityListPublicEventsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const fetchActivityListPublicEvents = (
  variables: ActivityListPublicEventsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListPublicEventsResponse,
    ActivityListPublicEventsError,
    undefined,
    {},
    ActivityListPublicEventsQueryParams,
    {}
  >({ url: "/events", method: "get", ...variables, signal });

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const activityListPublicEventsQuery = (
  variables: ActivityListPublicEventsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListPublicEventsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/events",
    operationId: "activityListPublicEvents",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListPublicEvents(variables, signal),
});

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const useSuspenseActivityListPublicEvents = <
  TData = ActivityListPublicEventsResponse,
>(
  variables: ActivityListPublicEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsResponse,
      ActivityListPublicEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListPublicEventsResponse,
    ActivityListPublicEventsError,
    TData
  >({
    ...activityListPublicEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const useActivityListPublicEvents = <
  TData = ActivityListPublicEventsResponse,
>(
  variables: ActivityListPublicEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsResponse,
      ActivityListPublicEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsResponse,
    ActivityListPublicEventsError,
    TData
  >({
    ...activityListPublicEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityGetFeedsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityGetFeedsVariables = GithubContext["fetcherOptions"];

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const fetchActivityGetFeeds = (
  variables: ActivityGetFeedsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<Schemas.Feed, ActivityGetFeedsError, undefined, {}, {}, {}>({
    url: "/feeds",
    method: "get",
    ...variables,
    signal,
  });

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const activityGetFeedsQuery = (
  variables: ActivityGetFeedsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Feed>;
} => ({
  queryKey: queryKeyFn({
    path: "/feeds",
    operationId: "activityGetFeeds",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityGetFeeds(variables, signal),
});

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const useSuspenseActivityGetFeeds = <TData = Schemas.Feed>(
  variables: ActivityGetFeedsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Feed, ActivityGetFeedsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Feed,
    ActivityGetFeedsError,
    TData
  >({
    ...activityGetFeedsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const useActivityGetFeeds = <TData = Schemas.Feed>(
  variables: ActivityGetFeedsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Feed, ActivityGetFeedsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Feed, ActivityGetFeedsError, TData>({
    ...activityGetFeedsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsListQueryParams = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type GistsListResponse = Schemas.BaseGist[];

export type GistsListVariables = {
  queryParams?: GistsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const fetchGistsList = (
  variables: GistsListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListResponse,
    GistsListError,
    undefined,
    {},
    GistsListQueryParams,
    {}
  >({ url: "/gists", method: "get", ...variables, signal });

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const gistsListQuery = (
  variables: GistsListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<GistsListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists",
    operationId: "gistsList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsList(variables, signal),
});

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const useSuspenseGistsList = <TData = GistsListResponse>(
  variables: GistsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GistsListResponse, GistsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<GistsListResponse, GistsListError, TData>({
    ...gistsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const useGistsList = <TData = GistsListResponse>(
  variables: GistsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GistsListResponse, GistsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<GistsListResponse, GistsListError, TData>({
    ...gistsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsCreateRequestBody = {
  /**
   * Description of the gist
   *
   * @example Example Ruby script
   */
  description?: string;
  /**
   * Names and content for the files that make up the gist
   *
   * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
   */
  files: {
    [key: string]: {
      /**
       * Content of the file
       */
      content: string;
    };
  };
  public?: boolean | ("true" | "false");
};

export type GistsCreateVariables = {
  body: GistsCreateRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const fetchGistsCreate = (
  variables: GistsCreateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistSimple,
    GistsCreateError,
    GistsCreateRequestBody,
    {},
    {},
    {}
  >({ url: "/gists", method: "post", ...variables, signal });

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const useGistsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      GistsCreateError,
      GistsCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    GistsCreateError,
    GistsCreateVariables
  >({
    mutationFn: (variables: GistsCreateVariables) =>
      fetchGistsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsListPublicQueryParams = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListPublicError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsListPublicResponse = Schemas.BaseGist[];

export type GistsListPublicVariables = {
  queryParams?: GistsListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const fetchGistsListPublic = (
  variables: GistsListPublicVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListPublicResponse,
    GistsListPublicError,
    undefined,
    {},
    GistsListPublicQueryParams,
    {}
  >({ url: "/gists/public", method: "get", ...variables, signal });

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const gistsListPublicQuery = (
  variables: GistsListPublicVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListPublicResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/public",
    operationId: "gistsListPublic",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListPublic(variables, signal),
});

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const useSuspenseGistsListPublic = <TData = GistsListPublicResponse>(
  variables: GistsListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListPublicResponse,
      GistsListPublicError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListPublicResponse,
    GistsListPublicError,
    TData
  >({
    ...gistsListPublicQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const useGistsListPublic = <TData = GistsListPublicResponse>(
  variables: GistsListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListPublicResponse,
      GistsListPublicError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListPublicResponse,
    GistsListPublicError,
    TData
  >({
    ...gistsListPublicQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsListStarredQueryParams = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListStarredError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type GistsListStarredResponse = Schemas.BaseGist[];

export type GistsListStarredVariables = {
  queryParams?: GistsListStarredQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the authenticated user's starred gists:
 */
export const fetchGistsListStarred = (
  variables: GistsListStarredVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListStarredResponse,
    GistsListStarredError,
    undefined,
    {},
    GistsListStarredQueryParams,
    {}
  >({ url: "/gists/starred", method: "get", ...variables, signal });

/**
 * List the authenticated user's starred gists:
 */
export const gistsListStarredQuery = (
  variables: GistsListStarredVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListStarredResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/starred",
    operationId: "gistsListStarred",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListStarred(variables, signal),
});

/**
 * List the authenticated user's starred gists:
 */
export const useSuspenseGistsListStarred = <TData = GistsListStarredResponse>(
  variables: GistsListStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListStarredResponse,
      GistsListStarredError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListStarredResponse,
    GistsListStarredError,
    TData
  >({
    ...gistsListStarredQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the authenticated user's starred gists:
 */
export const useGistsListStarred = <TData = GistsListStarredResponse>(
  variables: GistsListStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListStarredResponse,
      GistsListStarredError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListStarredResponse,
    GistsListStarredError,
    TData
  >({
    ...gistsListStarredQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsDeletePathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsDeleteVariables = {
  pathParams: GistsDeletePathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDelete = (
  variables: GistsDeleteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GistsDeleteError,
    undefined,
    {},
    {},
    GistsDeletePathParams
  >({ url: "/gists/{gistId}", method: "delete", ...variables, signal });

export const useGistsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsDeleteError,
      GistsDeleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsDeleteError,
    GistsDeleteVariables
  >({
    mutationFn: (variables: GistsDeleteVariables) =>
      fetchGistsDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsGetPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ForbiddenGist;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsGetVariables = {
  pathParams: GistsGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGet = (
  variables: GistsGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistSimple,
    GistsGetError,
    undefined,
    {},
    {},
    GistsGetPathParams
  >({ url: "/gists/{gistId}", method: "get", ...variables, signal });

export const gistsGetQuery = (
  variables: GistsGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.GistSimple>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}",
    operationId: "gistsGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsGet(variables, signal),
});

export const useSuspenseGistsGet = <TData = Schemas.GistSimple>(
  variables: GistsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GistSimple, GistsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.GistSimple, GistsGetError, TData>({
    ...gistsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsGet = <TData = Schemas.GistSimple>(
  variables: GistsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GistSimple, GistsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistSimple, GistsGetError, TData>({
    ...gistsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsUpdatePathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsUpdateVariables = {
  body?:
    | {
        /**
         * The description of the gist.
         *
         * @example Example Ruby script
         */
        description: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`.
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /**
                 * The new content of the file.
                 */
                content: string;
                /**
                 * The new filename for the file.
                 */
                filename?: string | null;
              }
            | {
                /**
                 * The new content of the file.
                 */
                content?: string;
                /**
                 * The new filename for the file.
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /**
         * The description of the gist.
         *
         * @example Example Ruby script
         */
        description?: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`.
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /**
                 * The new content of the file.
                 */
                content: string;
                /**
                 * The new filename for the file.
                 */
                filename?: string | null;
              }
            | {
                /**
                 * The new content of the file.
                 */
                content?: string;
                /**
                 * The new filename for the file.
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null;
  pathParams: GistsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const fetchGistsUpdate = (
  variables: GistsUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistSimple,
    GistsUpdateError,
    | {
        /**
         * The description of the gist.
         *
         * @example Example Ruby script
         */
        description: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`.
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /**
                 * The new content of the file.
                 */
                content: string;
                /**
                 * The new filename for the file.
                 */
                filename?: string | null;
              }
            | {
                /**
                 * The new content of the file.
                 */
                content?: string;
                /**
                 * The new filename for the file.
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /**
         * The description of the gist.
         *
         * @example Example Ruby script
         */
        description?: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`.
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /**
                 * The new content of the file.
                 */
                content: string;
                /**
                 * The new filename for the file.
                 */
                filename?: string | null;
              }
            | {
                /**
                 * The new content of the file.
                 */
                content?: string;
                /**
                 * The new filename for the file.
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null,
    {},
    {},
    GistsUpdatePathParams
  >({ url: "/gists/{gistId}", method: "patch", ...variables, signal });

/**
 * Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const useGistsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      GistsUpdateError,
      GistsUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    GistsUpdateError,
    GistsUpdateVariables
  >({
    mutationFn: (variables: GistsUpdateVariables) =>
      fetchGistsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsListCommentsPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsListCommentsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListCommentsResponse = Schemas.GistComment[];

export type GistsListCommentsVariables = {
  pathParams: GistsListCommentsPathParams;
  queryParams?: GistsListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListComments = (
  variables: GistsListCommentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListCommentsResponse,
    GistsListCommentsError,
    undefined,
    {},
    GistsListCommentsQueryParams,
    GistsListCommentsPathParams
  >({ url: "/gists/{gistId}/comments", method: "get", ...variables, signal });

export const gistsListCommentsQuery = (
  variables: GistsListCommentsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListCommentsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/comments",
    operationId: "gistsListComments",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListComments(variables, signal),
});

export const useSuspenseGistsListComments = <TData = GistsListCommentsResponse>(
  variables: GistsListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommentsResponse,
      GistsListCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListCommentsResponse,
    GistsListCommentsError,
    TData
  >({
    ...gistsListCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsListComments = <TData = GistsListCommentsResponse>(
  variables: GistsListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommentsResponse,
      GistsListCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommentsResponse,
    GistsListCommentsError,
    TData
  >({
    ...gistsListCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsCreateCommentPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsCreateCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsCreateCommentRequestBody = {
  /**
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsCreateCommentVariables = {
  body: GistsCreateCommentRequestBody;
  pathParams: GistsCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCreateComment = (
  variables: GistsCreateCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistComment,
    GistsCreateCommentError,
    GistsCreateCommentRequestBody,
    {},
    {},
    GistsCreateCommentPathParams
  >({ url: "/gists/{gistId}/comments", method: "post", ...variables, signal });

export const useGistsCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      GistsCreateCommentError,
      GistsCreateCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    GistsCreateCommentError,
    GistsCreateCommentVariables
  >({
    mutationFn: (variables: GistsCreateCommentVariables) =>
      fetchGistsCreateComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsDeleteCommentPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type GistsDeleteCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsDeleteCommentVariables = {
  pathParams: GistsDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDeleteComment = (
  variables: GistsDeleteCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GistsDeleteCommentError,
    undefined,
    {},
    {},
    GistsDeleteCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useGistsDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsDeleteCommentError,
      GistsDeleteCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsDeleteCommentError,
    GistsDeleteCommentVariables
  >({
    mutationFn: (variables: GistsDeleteCommentVariables) =>
      fetchGistsDeleteComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsGetCommentPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type GistsGetCommentError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.ForbiddenGist;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsGetCommentVariables = {
  pathParams: GistsGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetComment = (
  variables: GistsGetCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistComment,
    GistsGetCommentError,
    undefined,
    {},
    {},
    GistsGetCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "get",
    ...variables,
    signal,
  });

export const gistsGetCommentQuery = (
  variables: GistsGetCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.GistComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/comments/{commentId}",
    operationId: "gistsGetComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsGetComment(variables, signal),
});

export const useSuspenseGistsGetComment = <TData = Schemas.GistComment>(
  variables: GistsGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistComment,
      GistsGetCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GistComment,
    GistsGetCommentError,
    TData
  >({
    ...gistsGetCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsGetComment = <TData = Schemas.GistComment>(
  variables: GistsGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistComment,
      GistsGetCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistComment, GistsGetCommentError, TData>({
    ...gistsGetCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsUpdateCommentPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type GistsUpdateCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GistsUpdateCommentRequestBody = {
  /**
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsUpdateCommentVariables = {
  body: GistsUpdateCommentRequestBody;
  pathParams: GistsUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUpdateComment = (
  variables: GistsUpdateCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistComment,
    GistsUpdateCommentError,
    GistsUpdateCommentRequestBody,
    {},
    {},
    GistsUpdateCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useGistsUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      GistsUpdateCommentError,
      GistsUpdateCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    GistsUpdateCommentError,
    GistsUpdateCommentVariables
  >({
    mutationFn: (variables: GistsUpdateCommentVariables) =>
      fetchGistsUpdateComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsListCommitsPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsListCommitsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListCommitsResponse = Schemas.GistCommit[];

export type GistsListCommitsVariables = {
  pathParams: GistsListCommitsPathParams;
  queryParams?: GistsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListCommits = (
  variables: GistsListCommitsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListCommitsResponse,
    GistsListCommitsError,
    undefined,
    {},
    GistsListCommitsQueryParams,
    GistsListCommitsPathParams
  >({ url: "/gists/{gistId}/commits", method: "get", ...variables, signal });

export const gistsListCommitsQuery = (
  variables: GistsListCommitsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListCommitsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/commits",
    operationId: "gistsListCommits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListCommits(variables, signal),
});

export const useSuspenseGistsListCommits = <TData = GistsListCommitsResponse>(
  variables: GistsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommitsResponse,
      GistsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListCommitsResponse,
    GistsListCommitsError,
    TData
  >({
    ...gistsListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsListCommits = <TData = GistsListCommitsResponse>(
  variables: GistsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommitsResponse,
      GistsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommitsResponse,
    GistsListCommitsError,
    TData
  >({
    ...gistsListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsListForksPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsListForksQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForksError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsListForksResponse = Schemas.GistSimple[];

export type GistsListForksVariables = {
  pathParams: GistsListForksPathParams;
  queryParams?: GistsListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListForks = (
  variables: GistsListForksVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListForksResponse,
    GistsListForksError,
    undefined,
    {},
    GistsListForksQueryParams,
    GistsListForksPathParams
  >({ url: "/gists/{gistId}/forks", method: "get", ...variables, signal });

export const gistsListForksQuery = (
  variables: GistsListForksVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListForksResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/forks",
    operationId: "gistsListForks",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListForks(variables, signal),
});

export const useSuspenseGistsListForks = <TData = GistsListForksResponse>(
  variables: GistsListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForksResponse,
      GistsListForksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListForksResponse,
    GistsListForksError,
    TData
  >({
    ...gistsListForksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsListForks = <TData = GistsListForksResponse>(
  variables: GistsListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForksResponse,
      GistsListForksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForksResponse,
    GistsListForksError,
    TData
  >({
    ...gistsListForksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsForkPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsForkError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsForkVariables = {
  pathParams: GistsForkPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsFork = (
  variables: GistsForkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.BaseGist,
    GistsForkError,
    undefined,
    {},
    {},
    GistsForkPathParams
  >({ url: "/gists/{gistId}/forks", method: "post", ...variables, signal });

export const useGistsFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BaseGist,
      GistsForkError,
      GistsForkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BaseGist,
    GistsForkError,
    GistsForkVariables
  >({
    mutationFn: (variables: GistsForkVariables) =>
      fetchGistsFork({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsUnstarPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsUnstarError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsUnstarVariables = {
  pathParams: GistsUnstarPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUnstar = (
  variables: GistsUnstarVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GistsUnstarError,
    undefined,
    {},
    {},
    GistsUnstarPathParams
  >({ url: "/gists/{gistId}/star", method: "delete", ...variables, signal });

export const useGistsUnstar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsUnstarError,
      GistsUnstarVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GistsUnstarError,
    GistsUnstarVariables
  >({
    mutationFn: (variables: GistsUnstarVariables) =>
      fetchGistsUnstar({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsCheckIsStarredPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsCheckIsStarredError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: {};
    }
>;

export type GistsCheckIsStarredVariables = {
  pathParams: GistsCheckIsStarredPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCheckIsStarred = (
  variables: GistsCheckIsStarredVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GistsCheckIsStarredError,
    undefined,
    {},
    {},
    GistsCheckIsStarredPathParams
  >({ url: "/gists/{gistId}/star", method: "get", ...variables, signal });

export const gistsCheckIsStarredQuery = (
  variables: GistsCheckIsStarredVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/star",
    operationId: "gistsCheckIsStarred",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsCheckIsStarred(variables, signal),
});

export const useSuspenseGistsCheckIsStarred = <TData = undefined>(
  variables: GistsCheckIsStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GistsCheckIsStarredError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    GistsCheckIsStarredError,
    TData
  >({
    ...gistsCheckIsStarredQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsCheckIsStarred = <TData = undefined>(
  variables: GistsCheckIsStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GistsCheckIsStarredError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, GistsCheckIsStarredError, TData>({
    ...gistsCheckIsStarredQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GistsStarPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
};

export type GistsStarError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type GistsStarVariables = {
  pathParams: GistsStarPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchGistsStar = (
  variables: GistsStarVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GistsStarError,
    undefined,
    {},
    {},
    GistsStarPathParams
  >({ url: "/gists/{gistId}/star", method: "put", ...variables, signal });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useGistsStar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GistsStarError,
      GistsStarVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<undefined, GistsStarError, GistsStarVariables>({
    mutationFn: (variables: GistsStarVariables) =>
      fetchGistsStar({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GistsGetRevisionPathParams = {
  /**
   * The unique identifier of the gist.
   */
  gistId: string;
  sha: string;
};

export type GistsGetRevisionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GistsGetRevisionVariables = {
  pathParams: GistsGetRevisionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetRevision = (
  variables: GistsGetRevisionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GistSimple,
    GistsGetRevisionError,
    undefined,
    {},
    {},
    GistsGetRevisionPathParams
  >({ url: "/gists/{gistId}/{sha}", method: "get", ...variables, signal });

export const gistsGetRevisionQuery = (
  variables: GistsGetRevisionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.GistSimple>;
} => ({
  queryKey: queryKeyFn({
    path: "/gists/{gistId}/{sha}",
    operationId: "gistsGetRevision",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsGetRevision(variables, signal),
});

export const useSuspenseGistsGetRevision = <TData = Schemas.GistSimple>(
  variables: GistsGetRevisionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistSimple,
      GistsGetRevisionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GistSimple,
    GistsGetRevisionError,
    TData
  >({
    ...gistsGetRevisionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useGistsGetRevision = <TData = Schemas.GistSimple>(
  variables: GistsGetRevisionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistSimple,
      GistsGetRevisionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GistSimple, GistsGetRevisionError, TData>({
    ...gistsGetRevisionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitignoreGetAllTemplatesError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type GitignoreGetAllTemplatesResponse = string[];

export type GitignoreGetAllTemplatesVariables = GithubContext["fetcherOptions"];

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const fetchGitignoreGetAllTemplates = (
  variables: GitignoreGetAllTemplatesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GitignoreGetAllTemplatesResponse,
    GitignoreGetAllTemplatesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/gitignore/templates", method: "get", ...variables, signal });

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const gitignoreGetAllTemplatesQuery = (
  variables: GitignoreGetAllTemplatesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GitignoreGetAllTemplatesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/gitignore/templates",
    operationId: "gitignoreGetAllTemplates",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitignoreGetAllTemplates(variables, signal),
});

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const useSuspenseGitignoreGetAllTemplates = <
  TData = GitignoreGetAllTemplatesResponse,
>(
  variables: GitignoreGetAllTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitignoreGetAllTemplatesResponse,
      GitignoreGetAllTemplatesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GitignoreGetAllTemplatesResponse,
    GitignoreGetAllTemplatesError,
    TData
  >({
    ...gitignoreGetAllTemplatesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const useGitignoreGetAllTemplates = <
  TData = GitignoreGetAllTemplatesResponse,
>(
  variables: GitignoreGetAllTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitignoreGetAllTemplatesResponse,
      GitignoreGetAllTemplatesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GitignoreGetAllTemplatesResponse,
    GitignoreGetAllTemplatesError,
    TData
  >({
    ...gitignoreGetAllTemplatesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitignoreGetTemplatePathParams = {
  name: string;
};

export type GitignoreGetTemplateError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type GitignoreGetTemplateVariables = {
  pathParams: GitignoreGetTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const fetchGitignoreGetTemplate = (
  variables: GitignoreGetTemplateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitignoreTemplate,
    GitignoreGetTemplateError,
    undefined,
    {},
    {},
    GitignoreGetTemplatePathParams
  >({
    url: "/gitignore/templates/{name}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const gitignoreGetTemplateQuery = (
  variables: GitignoreGetTemplateVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.GitignoreTemplate>;
} => ({
  queryKey: queryKeyFn({
    path: "/gitignore/templates/{name}",
    operationId: "gitignoreGetTemplate",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitignoreGetTemplate(variables, signal),
});

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const useSuspenseGitignoreGetTemplate = <
  TData = Schemas.GitignoreTemplate,
>(
  variables: GitignoreGetTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitignoreTemplate,
      GitignoreGetTemplateError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GitignoreTemplate,
    GitignoreGetTemplateError,
    TData
  >({
    ...gitignoreGetTemplateQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const useGitignoreGetTemplate = <TData = Schemas.GitignoreTemplate>(
  variables: GitignoreGetTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitignoreTemplate,
      GitignoreGetTemplateError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitignoreTemplate,
    GitignoreGetTemplateError,
    TData
  >({
    ...gitignoreGetTemplateQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListReposAccessibleToInstallationQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListReposAccessibleToInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type AppsListReposAccessibleToInstallationResponse = {
  repositories: Schemas.Repository[];
  /**
   * @example selected
   */
  repository_selection?: string;
  total_count: number;
};

export type AppsListReposAccessibleToInstallationVariables = {
  queryParams?: AppsListReposAccessibleToInstallationQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsListReposAccessibleToInstallation = (
  variables: AppsListReposAccessibleToInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListReposAccessibleToInstallationResponse,
    AppsListReposAccessibleToInstallationError,
    undefined,
    {},
    AppsListReposAccessibleToInstallationQueryParams,
    {}
  >({ url: "/installation/repositories", method: "get", ...variables, signal });

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const appsListReposAccessibleToInstallationQuery = (
  variables: AppsListReposAccessibleToInstallationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListReposAccessibleToInstallationResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/installation/repositories",
    operationId: "appsListReposAccessibleToInstallation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListReposAccessibleToInstallation(variables, signal),
});

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useSuspenseAppsListReposAccessibleToInstallation = <
  TData = AppsListReposAccessibleToInstallationResponse,
>(
  variables: AppsListReposAccessibleToInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListReposAccessibleToInstallationResponse,
      AppsListReposAccessibleToInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListReposAccessibleToInstallationResponse,
    AppsListReposAccessibleToInstallationError,
    TData
  >({
    ...appsListReposAccessibleToInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsListReposAccessibleToInstallation = <
  TData = AppsListReposAccessibleToInstallationResponse,
>(
  variables: AppsListReposAccessibleToInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListReposAccessibleToInstallationResponse,
      AppsListReposAccessibleToInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListReposAccessibleToInstallationResponse,
    AppsListReposAccessibleToInstallationError,
    TData
  >({
    ...appsListReposAccessibleToInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsRevokeInstallationAccessTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type AppsRevokeInstallationAccessTokenVariables =
  GithubContext["fetcherOptions"];

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsRevokeInstallationAccessToken = (
  variables: AppsRevokeInstallationAccessTokenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsRevokeInstallationAccessTokenError,
    undefined,
    {},
    {},
    {}
  >({ url: "/installation/token", method: "delete", ...variables, signal });

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsRevokeInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRevokeInstallationAccessTokenError,
      AppsRevokeInstallationAccessTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRevokeInstallationAccessTokenError,
    AppsRevokeInstallationAccessTokenVariables
  >({
    mutationFn: (variables: AppsRevokeInstallationAccessTokenVariables) =>
      fetchAppsRevokeInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type IssuesListQueryParams = {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /**
   * Indicates the state of the issues to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  collab?: boolean;
  orgs?: boolean;
  owned?: boolean;
  pulls?: boolean;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListResponse = Schemas.Issue[];

export type IssuesListVariables = {
  queryParams?: IssuesListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesList = (
  variables: IssuesListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListResponse,
    IssuesListError,
    undefined,
    {},
    IssuesListQueryParams,
    {}
  >({ url: "/issues", method: "get", ...variables, signal });

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const issuesListQuery = (
  variables: IssuesListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/issues",
    operationId: "issuesList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesList(variables, signal),
});

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useSuspenseIssuesList = <TData = IssuesListResponse>(
  variables: IssuesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<IssuesListResponse, IssuesListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListResponse,
    IssuesListError,
    TData
  >({
    ...issuesListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesList = <TData = IssuesListResponse>(
  variables: IssuesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<IssuesListResponse, IssuesListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<IssuesListResponse, IssuesListError, TData>({
    ...issuesListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type LicensesGetAllCommonlyUsedQueryParams = {
  featured?: boolean;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type LicensesGetAllCommonlyUsedError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type LicensesGetAllCommonlyUsedResponse = Schemas.LicenseSimple[];

export type LicensesGetAllCommonlyUsedVariables = {
  queryParams?: LicensesGetAllCommonlyUsedQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGetAllCommonlyUsed = (
  variables: LicensesGetAllCommonlyUsedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    LicensesGetAllCommonlyUsedResponse,
    LicensesGetAllCommonlyUsedError,
    undefined,
    {},
    LicensesGetAllCommonlyUsedQueryParams,
    {}
  >({ url: "/licenses", method: "get", ...variables, signal });

export const licensesGetAllCommonlyUsedQuery = (
  variables: LicensesGetAllCommonlyUsedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<LicensesGetAllCommonlyUsedResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/licenses",
    operationId: "licensesGetAllCommonlyUsed",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchLicensesGetAllCommonlyUsed(variables, signal),
});

export const useSuspenseLicensesGetAllCommonlyUsed = <
  TData = LicensesGetAllCommonlyUsedResponse,
>(
  variables: LicensesGetAllCommonlyUsedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      LicensesGetAllCommonlyUsedResponse,
      LicensesGetAllCommonlyUsedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    LicensesGetAllCommonlyUsedResponse,
    LicensesGetAllCommonlyUsedError,
    TData
  >({
    ...licensesGetAllCommonlyUsedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useLicensesGetAllCommonlyUsed = <
  TData = LicensesGetAllCommonlyUsedResponse,
>(
  variables: LicensesGetAllCommonlyUsedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      LicensesGetAllCommonlyUsedResponse,
      LicensesGetAllCommonlyUsedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    LicensesGetAllCommonlyUsedResponse,
    LicensesGetAllCommonlyUsedError,
    TData
  >({
    ...licensesGetAllCommonlyUsedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type LicensesGetPathParams = {
  license: string;
};

export type LicensesGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type LicensesGetVariables = {
  pathParams: LicensesGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGet = (
  variables: LicensesGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.License,
    LicensesGetError,
    undefined,
    {},
    {},
    LicensesGetPathParams
  >({ url: "/licenses/{license}", method: "get", ...variables, signal });

export const licensesGetQuery = (
  variables: LicensesGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.License>;
} => ({
  queryKey: queryKeyFn({
    path: "/licenses/{license}",
    operationId: "licensesGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchLicensesGet(variables, signal),
});

export const useSuspenseLicensesGet = <TData = Schemas.License>(
  variables: LicensesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.License, LicensesGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.License, LicensesGetError, TData>({
    ...licensesGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useLicensesGet = <TData = Schemas.License>(
  variables: LicensesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.License, LicensesGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.License, LicensesGetError, TData>({
    ...licensesGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MarkdownRenderError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MarkdownRenderRequestBody = {
  /**
   * The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
   */
  context?: string;
  /**
   * The rendering mode.
   *
   * @default markdown
   * @example markdown
   */
  mode?: "markdown" | "gfm";
  /**
   * The Markdown text to render in HTML.
   */
  text: string;
};

export type MarkdownRenderVariables = {
  body: MarkdownRenderRequestBody;
} & GithubContext["fetcherOptions"];

export const fetchMarkdownRender = (
  variables: MarkdownRenderVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MarkdownRenderError,
    MarkdownRenderRequestBody,
    {},
    {},
    {}
  >({ url: "/markdown", method: "post", ...variables, signal });

export const useMarkdownRender = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MarkdownRenderError,
      MarkdownRenderVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MarkdownRenderError,
    MarkdownRenderVariables
  >({
    mutationFn: (variables: MarkdownRenderVariables) =>
      fetchMarkdownRender({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MarkdownRenderRawError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MarkdownRenderRawVariables = GithubContext["fetcherOptions"];

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const fetchMarkdownRenderRaw = (
  variables: MarkdownRenderRawVariables,
  signal?: AbortSignal,
) =>
  githubFetch<undefined, MarkdownRenderRawError, undefined, {}, {}, {}>({
    url: "/markdown/raw",
    method: "post",
    ...variables,
    signal,
  });

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const useMarkdownRenderRaw = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MarkdownRenderRawError,
      MarkdownRenderRawVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MarkdownRenderRawError,
    MarkdownRenderRawVariables
  >({
    mutationFn: (variables: MarkdownRenderRawVariables) =>
      fetchMarkdownRenderRaw({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetSubscriptionPlanForAccountPathParams = {
  /**
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Schemas.BasicError;
    }
>;

export type AppsGetSubscriptionPlanForAccountVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccount = (
  variables: AppsGetSubscriptionPlanForAccountVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountError,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountPathParams
  >({
    url: "/marketplace_listing/accounts/{accountId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsGetSubscriptionPlanForAccountQuery = (
  variables: AppsGetSubscriptionPlanForAccountVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.MarketplacePurchase>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/accounts/{accountId}",
    operationId: "appsGetSubscriptionPlanForAccount",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetSubscriptionPlanForAccount(variables, signal),
});

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsGetSubscriptionPlanForAccount = <
  TData = Schemas.MarketplacePurchase,
>(
  variables: AppsGetSubscriptionPlanForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountError,
    TData
  >({
    ...appsGetSubscriptionPlanForAccountQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccount = <
  TData = Schemas.MarketplacePurchase,
>(
  variables: AppsGetSubscriptionPlanForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountError,
    TData
  >({
    ...appsGetSubscriptionPlanForAccountQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListPlansQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsListPlansResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansVariables = {
  queryParams?: AppsListPlansQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlans = (
  variables: AppsListPlansVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListPlansResponse,
    AppsListPlansError,
    undefined,
    {},
    AppsListPlansQueryParams,
    {}
  >({ url: "/marketplace_listing/plans", method: "get", ...variables, signal });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsListPlansQuery = (
  variables: AppsListPlansVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListPlansResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/plans",
    operationId: "appsListPlans",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListPlans(variables, signal),
});

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsListPlans = <TData = AppsListPlansResponse>(
  variables: AppsListPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansResponse,
      AppsListPlansError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListPlansResponse,
    AppsListPlansError,
    TData
  >({
    ...appsListPlansQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlans = <TData = AppsListPlansResponse>(
  variables: AppsListPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansResponse,
      AppsListPlansError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<AppsListPlansResponse, AppsListPlansError, TData>({
    ...appsListPlansQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListAccountsForPlanPathParams = {
  /**
   * The unique identifier of the plan.
   */
  planId: number;
};

export type AppsListAccountsForPlanQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type AppsListAccountsForPlanResponse = Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanVariables = {
  pathParams: AppsListAccountsForPlanPathParams;
  queryParams?: AppsListAccountsForPlanQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlan = (
  variables: AppsListAccountsForPlanVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListAccountsForPlanResponse,
    AppsListAccountsForPlanError,
    undefined,
    {},
    AppsListAccountsForPlanQueryParams,
    AppsListAccountsForPlanPathParams
  >({
    url: "/marketplace_listing/plans/{planId}/accounts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsListAccountsForPlanQuery = (
  variables: AppsListAccountsForPlanVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListAccountsForPlanResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/plans/{planId}/accounts",
    operationId: "appsListAccountsForPlan",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListAccountsForPlan(variables, signal),
});

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsListAccountsForPlan = <
  TData = AppsListAccountsForPlanResponse,
>(
  variables: AppsListAccountsForPlanVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanResponse,
      AppsListAccountsForPlanError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListAccountsForPlanResponse,
    AppsListAccountsForPlanError,
    TData
  >({
    ...appsListAccountsForPlanQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlan = <
  TData = AppsListAccountsForPlanResponse,
>(
  variables: AppsListAccountsForPlanVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanResponse,
      AppsListAccountsForPlanError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanResponse,
    AppsListAccountsForPlanError,
    TData
  >({
    ...appsListAccountsForPlanQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsGetSubscriptionPlanForAccountStubbedPathParams = {
  /**
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountStubbedError =
  Fetcher.ErrorWrapper<{
    status: 401;
    payload: Responses.RequiresAuthentication;
  }>;

export type AppsGetSubscriptionPlanForAccountStubbedVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountStubbedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccountStubbed = (
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountStubbedError,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/accounts/{accountId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsGetSubscriptionPlanForAccountStubbedQuery = (
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.MarketplacePurchase>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/stubbed/accounts/{accountId}",
    operationId: "appsGetSubscriptionPlanForAccountStubbed",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetSubscriptionPlanForAccountStubbed(variables, signal),
});

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsGetSubscriptionPlanForAccountStubbed = <
  TData = Schemas.MarketplacePurchase,
>(
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountStubbedError,
    TData
  >({
    ...appsGetSubscriptionPlanForAccountStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccountStubbed = <
  TData = Schemas.MarketplacePurchase,
>(
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      AppsGetSubscriptionPlanForAccountStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    AppsGetSubscriptionPlanForAccountStubbedError,
    TData
  >({
    ...appsGetSubscriptionPlanForAccountStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListPlansStubbedQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansStubbedError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.RequiresAuthentication;
}>;

export type AppsListPlansStubbedResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansStubbedVariables = {
  queryParams?: AppsListPlansStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlansStubbed = (
  variables: AppsListPlansStubbedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListPlansStubbedResponse,
    AppsListPlansStubbedError,
    undefined,
    {},
    AppsListPlansStubbedQueryParams,
    {}
  >({
    url: "/marketplace_listing/stubbed/plans",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsListPlansStubbedQuery = (
  variables: AppsListPlansStubbedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListPlansStubbedResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/stubbed/plans",
    operationId: "appsListPlansStubbed",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListPlansStubbed(variables, signal),
});

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsListPlansStubbed = <
  TData = AppsListPlansStubbedResponse,
>(
  variables: AppsListPlansStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansStubbedResponse,
      AppsListPlansStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListPlansStubbedResponse,
    AppsListPlansStubbedError,
    TData
  >({
    ...appsListPlansStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlansStubbed = <TData = AppsListPlansStubbedResponse>(
  variables: AppsListPlansStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansStubbedResponse,
      AppsListPlansStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListPlansStubbedResponse,
    AppsListPlansStubbedError,
    TData
  >({
    ...appsListPlansStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListAccountsForPlanStubbedPathParams = {
  /**
   * The unique identifier of the plan.
   */
  planId: number;
};

export type AppsListAccountsForPlanStubbedQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanStubbedError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Responses.RequiresAuthentication;
}>;

export type AppsListAccountsForPlanStubbedResponse =
  Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanStubbedVariables = {
  pathParams: AppsListAccountsForPlanStubbedPathParams;
  queryParams?: AppsListAccountsForPlanStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlanStubbed = (
  variables: AppsListAccountsForPlanStubbedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListAccountsForPlanStubbedResponse,
    AppsListAccountsForPlanStubbedError,
    undefined,
    {},
    AppsListAccountsForPlanStubbedQueryParams,
    AppsListAccountsForPlanStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/plans/{planId}/accounts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const appsListAccountsForPlanStubbedQuery = (
  variables: AppsListAccountsForPlanStubbedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListAccountsForPlanStubbedResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/marketplace_listing/stubbed/plans/{planId}/accounts",
    operationId: "appsListAccountsForPlanStubbed",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListAccountsForPlanStubbed(variables, signal),
});

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useSuspenseAppsListAccountsForPlanStubbed = <
  TData = AppsListAccountsForPlanStubbedResponse,
>(
  variables: AppsListAccountsForPlanStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanStubbedResponse,
      AppsListAccountsForPlanStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListAccountsForPlanStubbedResponse,
    AppsListAccountsForPlanStubbedError,
    TData
  >({
    ...appsListAccountsForPlanStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlanStubbed = <
  TData = AppsListAccountsForPlanStubbedResponse,
>(
  variables: AppsListAccountsForPlanStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanStubbedResponse,
      AppsListAccountsForPlanStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanStubbedResponse,
    AppsListAccountsForPlanStubbedError,
    TData
  >({
    ...appsListAccountsForPlanStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MetaGetError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type MetaGetVariables = GithubContext["fetcherOptions"];

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const fetchMetaGet = (
  variables: MetaGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<Schemas.ApiOverview, MetaGetError, undefined, {}, {}, {}>({
    url: "/meta",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const metaGetQuery = (
  variables: MetaGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ApiOverview>;
} => ({
  queryKey: queryKeyFn({
    path: "/meta",
    operationId: "metaGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMetaGet(variables, signal),
});

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const useSuspenseMetaGet = <TData = Schemas.ApiOverview>(
  variables: MetaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ApiOverview, MetaGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.ApiOverview, MetaGetError, TData>({
    ...metaGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const useMetaGet = <TData = Schemas.ApiOverview>(
  variables: MetaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ApiOverview, MetaGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.ApiOverview, MetaGetError, TData>({
    ...metaGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListPublicEventsForRepoNetworkPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityListPublicEventsForRepoNetworkQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForRepoNetworkError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityListPublicEventsForRepoNetworkResponse = Schemas.Event[];

export type ActivityListPublicEventsForRepoNetworkVariables = {
  pathParams: ActivityListPublicEventsForRepoNetworkPathParams;
  queryParams?: ActivityListPublicEventsForRepoNetworkQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForRepoNetwork = (
  variables: ActivityListPublicEventsForRepoNetworkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListPublicEventsForRepoNetworkResponse,
    ActivityListPublicEventsForRepoNetworkError,
    undefined,
    {},
    ActivityListPublicEventsForRepoNetworkQueryParams,
    ActivityListPublicEventsForRepoNetworkPathParams
  >({
    url: "/networks/{owner}/{repo}/events",
    method: "get",
    ...variables,
    signal,
  });

export const activityListPublicEventsForRepoNetworkQuery = (
  variables: ActivityListPublicEventsForRepoNetworkVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListPublicEventsForRepoNetworkResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/networks/{owner}/{repo}/events",
    operationId: "activityListPublicEventsForRepoNetwork",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListPublicEventsForRepoNetwork(variables, signal),
});

export const useSuspenseActivityListPublicEventsForRepoNetwork = <
  TData = ActivityListPublicEventsForRepoNetworkResponse,
>(
  variables: ActivityListPublicEventsForRepoNetworkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForRepoNetworkResponse,
      ActivityListPublicEventsForRepoNetworkError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListPublicEventsForRepoNetworkResponse,
    ActivityListPublicEventsForRepoNetworkError,
    TData
  >({
    ...activityListPublicEventsForRepoNetworkQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityListPublicEventsForRepoNetwork = <
  TData = ActivityListPublicEventsForRepoNetworkResponse,
>(
  variables: ActivityListPublicEventsForRepoNetworkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForRepoNetworkResponse,
      ActivityListPublicEventsForRepoNetworkError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForRepoNetworkResponse,
    ActivityListPublicEventsForRepoNetworkError,
    TData
  >({
    ...activityListPublicEventsForRepoNetworkQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListNotificationsForAuthenticatedUserQueryParams = {
  /**
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  before?: string;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 50).
   *
   * @default 50
   */
  per_page?: number;
};

export type ActivityListNotificationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type ActivityListNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListNotificationsForAuthenticatedUserVariables = {
  queryParams?: ActivityListNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const fetchActivityListNotificationsForAuthenticatedUser = (
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListNotificationsForAuthenticatedUserResponse,
    ActivityListNotificationsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListNotificationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/notifications", method: "get", ...variables, signal });

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const activityListNotificationsForAuthenticatedUserQuery = (
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListNotificationsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/notifications",
    operationId: "activityListNotificationsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListNotificationsForAuthenticatedUser(variables, signal),
});

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const useSuspenseActivityListNotificationsForAuthenticatedUser = <
  TData = ActivityListNotificationsForAuthenticatedUserResponse,
>(
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListNotificationsForAuthenticatedUserResponse,
      ActivityListNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListNotificationsForAuthenticatedUserResponse,
    ActivityListNotificationsForAuthenticatedUserError,
    TData
  >({
    ...activityListNotificationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const useActivityListNotificationsForAuthenticatedUser = <
  TData = ActivityListNotificationsForAuthenticatedUserResponse,
>(
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListNotificationsForAuthenticatedUserResponse,
      ActivityListNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListNotificationsForAuthenticatedUserResponse,
    ActivityListNotificationsForAuthenticatedUserError,
    TData
  >({
    ...activityListNotificationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityMarkNotificationsAsReadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityMarkNotificationsAsReadResponse = {
  message?: string;
};

export type ActivityMarkNotificationsAsReadRequestBody = {
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   *
   * @format date-time
   */
  last_read_at?: string;
  /**
   * Whether the notification has been read.
   */
  read?: boolean;
};

export type ActivityMarkNotificationsAsReadVariables = {
  body?: ActivityMarkNotificationsAsReadRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkNotificationsAsRead = (
  variables: ActivityMarkNotificationsAsReadVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityMarkNotificationsAsReadResponse,
    ActivityMarkNotificationsAsReadError,
    ActivityMarkNotificationsAsReadRequestBody,
    {},
    {},
    {}
  >({ url: "/notifications", method: "put", ...variables, signal });

/**
 * Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActivityMarkNotificationsAsReadResponse,
      ActivityMarkNotificationsAsReadError,
      ActivityMarkNotificationsAsReadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActivityMarkNotificationsAsReadResponse,
    ActivityMarkNotificationsAsReadError,
    ActivityMarkNotificationsAsReadVariables
  >({
    mutationFn: (variables: ActivityMarkNotificationsAsReadVariables) =>
      fetchActivityMarkNotificationsAsRead({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivityGetThreadPathParams = {
  /**
   * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
   */
  threadId: number;
};

export type ActivityGetThreadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityGetThreadVariables = {
  pathParams: ActivityGetThreadPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about a notification thread.
 */
export const fetchActivityGetThread = (
  variables: ActivityGetThreadVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Thread,
    ActivityGetThreadError,
    undefined,
    {},
    {},
    ActivityGetThreadPathParams
  >({
    url: "/notifications/threads/{threadId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets information about a notification thread.
 */
export const activityGetThreadQuery = (
  variables: ActivityGetThreadVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Thread>;
} => ({
  queryKey: queryKeyFn({
    path: "/notifications/threads/{threadId}",
    operationId: "activityGetThread",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityGetThread(variables, signal),
});

/**
 * Gets information about a notification thread.
 */
export const useSuspenseActivityGetThread = <TData = Schemas.Thread>(
  variables: ActivityGetThreadVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Thread, ActivityGetThreadError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Thread,
    ActivityGetThreadError,
    TData
  >({
    ...activityGetThreadQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets information about a notification thread.
 */
export const useActivityGetThread = <TData = Schemas.Thread>(
  variables: ActivityGetThreadVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Thread, ActivityGetThreadError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Thread, ActivityGetThreadError, TData>({
    ...activityGetThreadQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityMarkThreadAsReadPathParams = {
  /**
   * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
   */
  threadId: number;
};

export type ActivityMarkThreadAsReadError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityMarkThreadAsReadVariables = {
  pathParams: ActivityMarkThreadAsReadPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
 */
export const fetchActivityMarkThreadAsRead = (
  variables: ActivityMarkThreadAsReadVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityMarkThreadAsReadError,
    undefined,
    {},
    {},
    ActivityMarkThreadAsReadPathParams
  >({
    url: "/notifications/threads/{threadId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
 */
export const useActivityMarkThreadAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityMarkThreadAsReadError,
      ActivityMarkThreadAsReadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityMarkThreadAsReadError,
    ActivityMarkThreadAsReadVariables
  >({
    mutationFn: (variables: ActivityMarkThreadAsReadVariables) =>
      fetchActivityMarkThreadAsRead({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivityDeleteThreadSubscriptionPathParams = {
  /**
   * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
   */
  threadId: number;
};

export type ActivityDeleteThreadSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivityDeleteThreadSubscriptionVariables = {
  pathParams: ActivityDeleteThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const fetchActivityDeleteThreadSubscription = (
  variables: ActivityDeleteThreadSubscriptionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityDeleteThreadSubscriptionError,
    undefined,
    {},
    {},
    ActivityDeleteThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const useActivityDeleteThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityDeleteThreadSubscriptionError,
      ActivityDeleteThreadSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityDeleteThreadSubscriptionError,
    ActivityDeleteThreadSubscriptionVariables
  >({
    mutationFn: (variables: ActivityDeleteThreadSubscriptionVariables) =>
      fetchActivityDeleteThreadSubscription({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
   */
  threadId: number;
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityGetThreadSubscriptionForAuthenticatedUserVariables = {
  pathParams: ActivityGetThreadSubscriptionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const fetchActivityGetThreadSubscriptionForAuthenticatedUser = (
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    ActivityGetThreadSubscriptionForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityGetThreadSubscriptionForAuthenticatedUserPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const activityGetThreadSubscriptionForAuthenticatedUserQuery = (
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ThreadSubscription>;
} => ({
  queryKey: queryKeyFn({
    path: "/notifications/threads/{threadId}/subscription",
    operationId: "activityGetThreadSubscriptionForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityGetThreadSubscriptionForAuthenticatedUser(variables, signal),
});

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const useSuspenseActivityGetThreadSubscriptionForAuthenticatedUser = <
  TData = Schemas.ThreadSubscription,
>(
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ThreadSubscription,
      ActivityGetThreadSubscriptionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ThreadSubscription,
    ActivityGetThreadSubscriptionForAuthenticatedUserError,
    TData
  >({
    ...activityGetThreadSubscriptionForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const useActivityGetThreadSubscriptionForAuthenticatedUser = <
  TData = Schemas.ThreadSubscription,
>(
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ThreadSubscription,
      ActivityGetThreadSubscriptionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ThreadSubscription,
    ActivityGetThreadSubscriptionForAuthenticatedUserError,
    TData
  >({
    ...activityGetThreadSubscriptionForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivitySetThreadSubscriptionPathParams = {
  /**
   * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
   */
  threadId: number;
};

export type ActivitySetThreadSubscriptionError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ActivitySetThreadSubscriptionRequestBody = {
  /**
   * Whether to block all notifications from a thread.
   *
   * @default false
   */
  ignored?: boolean;
};

export type ActivitySetThreadSubscriptionVariables = {
  body?: ActivitySetThreadSubscriptionRequestBody;
  pathParams: ActivitySetThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const fetchActivitySetThreadSubscription = (
  variables: ActivitySetThreadSubscriptionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    ActivitySetThreadSubscriptionError,
    ActivitySetThreadSubscriptionRequestBody,
    {},
    {},
    ActivitySetThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "put",
    ...variables,
    signal,
  });

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const useActivitySetThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ThreadSubscription,
      ActivitySetThreadSubscriptionError,
      ActivitySetThreadSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ThreadSubscription,
    ActivitySetThreadSubscriptionError,
    ActivitySetThreadSubscriptionVariables
  >({
    mutationFn: (variables: ActivitySetThreadSubscriptionVariables) =>
      fetchActivitySetThreadSubscription({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MetaGetOctocatQueryParams = {
  /**
   * The words to show in Octocat's speech bubble
   */
  s?: string;
};

export type MetaGetOctocatError = Fetcher.ErrorWrapper<undefined>;

export type MetaGetOctocatVariables = {
  queryParams?: MetaGetOctocatQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the octocat as ASCII art
 */
export const fetchMetaGetOctocat = (
  variables: MetaGetOctocatVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MetaGetOctocatError,
    undefined,
    {},
    MetaGetOctocatQueryParams,
    {}
  >({ url: "/octocat", method: "get", ...variables, signal });

/**
 * Get the octocat as ASCII art
 */
export const metaGetOctocatQuery = (
  variables: MetaGetOctocatVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/octocat",
    operationId: "metaGetOctocat",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMetaGetOctocat(variables, signal),
});

/**
 * Get the octocat as ASCII art
 */
export const useSuspenseMetaGetOctocat = <TData = undefined>(
  variables: MetaGetOctocatVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetOctocatError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<undefined, MetaGetOctocatError, TData>({
    ...metaGetOctocatQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the octocat as ASCII art
 */
export const useMetaGetOctocat = <TData = undefined>(
  variables: MetaGetOctocatVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetOctocatError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, MetaGetOctocatError, TData>({
    ...metaGetOctocatQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListQueryParams = {
  /**
   * An organization ID. Only return organizations with an ID greater than this ID.
   */
  since?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type OrgsListError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type OrgsListResponse = Schemas.OrganizationSimple[];

export type OrgsListVariables = {
  queryParams?: OrgsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const fetchOrgsList = (
  variables: OrgsListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListResponse,
    OrgsListError,
    undefined,
    {},
    OrgsListQueryParams,
    {}
  >({ url: "/organizations", method: "get", ...variables, signal });

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const orgsListQuery = (
  variables: OrgsListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<OrgsListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/organizations",
    operationId: "orgsList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsList(variables, signal),
});

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const useSuspenseOrgsList = <TData = OrgsListResponse>(
  variables: OrgsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<OrgsListResponse, OrgsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<OrgsListResponse, OrgsListError, TData>({
    ...orgsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const useOrgsList = <TData = OrgsListResponse>(
  variables: OrgsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<OrgsListResponse, OrgsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<OrgsListResponse, OrgsListError, TData>({
    ...orgsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsGetPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsGetError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsGetVariables = {
  pathParams: OrgsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const fetchOrgsGet = (
  variables: OrgsGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationFull,
    OrgsGetError,
    undefined,
    {},
    {},
    OrgsGetPathParams
  >({ url: "/orgs/{org}", method: "get", ...variables, signal });

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const orgsGetQuery = (
  variables: OrgsGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrganizationFull>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}",
    operationId: "orgsGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGet(variables, signal),
});

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const useSuspenseOrgsGet = <TData = Schemas.OrganizationFull>(
  variables: OrgsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganizationFull, OrgsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrganizationFull,
    OrgsGetError,
    TData
  >({
    ...orgsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const useOrgsGet = <TData = Schemas.OrganizationFull>(
  variables: OrgsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganizationFull, OrgsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.OrganizationFull, OrgsGetError, TData>({
    ...orgsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsUpdatePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Schemas.ValidationError | Schemas.ValidationErrorSimple;
    }
>;

export type OrgsUpdateRequestBody = {
  /**
   * Whether GitHub Advanced Security is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  /**
   * Billing email address. This address is not publicized.
   */
  billing_email?: string;
  /**
   * @example "http://github.blog"
   */
  blog?: string;
  /**
   * The company name.
   */
  company?: string;
  /**
   * Default permission level members have for organization repositories.
   *
   * @default read
   */
  default_repository_permission?: "read" | "write" | "admin" | "none";
  /**
   * Whether Dependabot alerts is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * Whether Dependabot security updates is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependency graph is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  /**
   * The description of the company.
   */
  description?: string;
  /**
   * The publicly visible email address.
   */
  email?: string;
  /**
   * Whether an organization can use organization projects.
   */
  has_organization_projects?: boolean;
  /**
   * Whether repositories that belong to the organization can use repository projects.
   */
  has_repository_projects?: boolean;
  /**
   * The location.
   */
  location?: string;
  /**
   * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
   * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
   */
  members_allowed_repository_creation_type?: "all" | "private" | "none";
  /**
   * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_pages?: boolean;
  /**
   * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_private_pages?: boolean;
  /**
   * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_private_repositories?: boolean;
  /**
   * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_public_pages?: boolean;
  /**
   * Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_public_repositories?: boolean;
  /**
   * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   *
   * @default true
   */
  members_can_create_repositories?: boolean;
  /**
   * Whether organization members can fork private organization repositories.
   *
   * @default false
   */
  members_can_fork_private_repositories?: boolean;
  /**
   * The shorthand name of the company.
   */
  name?: string;
  /**
   * Whether secret scanning is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
   */
  secret_scanning_push_protection_custom_link?: string;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * Whether secret scanning push protection is automatically enabled for new repositories.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  /**
   * The Twitter username of the company.
   */
  twitter_username?: string;
  /**
   * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
   *
   * @default false
   */
  web_commit_signoff_required?: boolean;
};

export type OrgsUpdateVariables = {
  body?: OrgsUpdateRequestBody;
  pathParams: OrgsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const fetchOrgsUpdate = (
  variables: OrgsUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationFull,
    OrgsUpdateError,
    OrgsUpdateRequestBody,
    {},
    {},
    OrgsUpdatePathParams
  >({ url: "/orgs/{org}", method: "patch", ...variables, signal });

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const useOrgsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationFull,
      OrgsUpdateError,
      OrgsUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationFull,
    OrgsUpdateError,
    OrgsUpdateVariables
  >({
    mutationFn: (variables: OrgsUpdateVariables) =>
      fetchOrgsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetActionsCacheUsageForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsGetActionsCacheUsageForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetActionsCacheUsageForOrgVariables = {
  pathParams: ActionsGetActionsCacheUsageForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const fetchActionsGetActionsCacheUsageForOrg = (
  variables: ActionsGetActionsCacheUsageForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsCacheUsageOrgEnterprise,
    ActionsGetActionsCacheUsageForOrgError,
    undefined,
    {},
    {},
    ActionsGetActionsCacheUsageForOrgPathParams
  >({
    url: "/orgs/{org}/actions/cache/usage",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const actionsGetActionsCacheUsageForOrgQuery = (
  variables: ActionsGetActionsCacheUsageForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsCacheUsageOrgEnterprise>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/cache/usage",
    operationId: "actionsGetActionsCacheUsageForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetActionsCacheUsageForOrg(variables, signal),
});

/**
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetActionsCacheUsageForOrg = <
  TData = Schemas.ActionsCacheUsageOrgEnterprise,
>(
  variables: ActionsGetActionsCacheUsageForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheUsageOrgEnterprise,
      ActionsGetActionsCacheUsageForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsCacheUsageOrgEnterprise,
    ActionsGetActionsCacheUsageForOrgError,
    TData
  >({
    ...actionsGetActionsCacheUsageForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const useActionsGetActionsCacheUsageForOrg = <
  TData = Schemas.ActionsCacheUsageOrgEnterprise,
>(
  variables: ActionsGetActionsCacheUsageForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheUsageOrgEnterprise,
      ActionsGetActionsCacheUsageForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsCacheUsageOrgEnterprise,
    ActionsGetActionsCacheUsageForOrgError,
    TData
  >({
    ...actionsGetActionsCacheUsageForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetActionsCacheUsageByRepoForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsGetActionsCacheUsageByRepoForOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsGetActionsCacheUsageByRepoForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetActionsCacheUsageByRepoForOrgResponse = {
  repository_cache_usages: Schemas.ActionsCacheUsageByRepository[];
  total_count: number;
};

export type ActionsGetActionsCacheUsageByRepoForOrgVariables = {
  pathParams: ActionsGetActionsCacheUsageByRepoForOrgPathParams;
  queryParams?: ActionsGetActionsCacheUsageByRepoForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const fetchActionsGetActionsCacheUsageByRepoForOrg = (
  variables: ActionsGetActionsCacheUsageByRepoForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsGetActionsCacheUsageByRepoForOrgResponse,
    ActionsGetActionsCacheUsageByRepoForOrgError,
    undefined,
    {},
    ActionsGetActionsCacheUsageByRepoForOrgQueryParams,
    ActionsGetActionsCacheUsageByRepoForOrgPathParams
  >({
    url: "/orgs/{org}/actions/cache/usage-by-repository",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const actionsGetActionsCacheUsageByRepoForOrgQuery = (
  variables: ActionsGetActionsCacheUsageByRepoForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsGetActionsCacheUsageByRepoForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/cache/usage-by-repository",
    operationId: "actionsGetActionsCacheUsageByRepoForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetActionsCacheUsageByRepoForOrg(variables, signal),
});

/**
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetActionsCacheUsageByRepoForOrg = <
  TData = ActionsGetActionsCacheUsageByRepoForOrgResponse,
>(
  variables: ActionsGetActionsCacheUsageByRepoForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetActionsCacheUsageByRepoForOrgResponse,
      ActionsGetActionsCacheUsageByRepoForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsGetActionsCacheUsageByRepoForOrgResponse,
    ActionsGetActionsCacheUsageByRepoForOrgError,
    TData
  >({
    ...actionsGetActionsCacheUsageByRepoForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
 */
export const useActionsGetActionsCacheUsageByRepoForOrg = <
  TData = ActionsGetActionsCacheUsageByRepoForOrgResponse,
>(
  variables: ActionsGetActionsCacheUsageByRepoForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetActionsCacheUsageByRepoForOrgResponse,
      ActionsGetActionsCacheUsageByRepoForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetActionsCacheUsageByRepoForOrgResponse,
    ActionsGetActionsCacheUsageByRepoForOrgError,
    TData
  >({
    ...actionsGetActionsCacheUsageByRepoForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OidcGetOidcCustomSubTemplateForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OidcGetOidcCustomSubTemplateForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type OidcGetOidcCustomSubTemplateForOrgVariables = {
  pathParams: OidcGetOidcCustomSubTemplateForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 */
export const fetchOidcGetOidcCustomSubTemplateForOrg = (
  variables: OidcGetOidcCustomSubTemplateForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OidcCustomSub,
    OidcGetOidcCustomSubTemplateForOrgError,
    undefined,
    {},
    {},
    OidcGetOidcCustomSubTemplateForOrgPathParams
  >({
    url: "/orgs/{org}/actions/oidc/customization/sub",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 */
export const oidcGetOidcCustomSubTemplateForOrgQuery = (
  variables: OidcGetOidcCustomSubTemplateForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OidcCustomSub>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/oidc/customization/sub",
    operationId: "oidcGetOidcCustomSubTemplateForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOidcGetOidcCustomSubTemplateForOrg(variables, signal),
});

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 */
export const useSuspenseOidcGetOidcCustomSubTemplateForOrg = <
  TData = Schemas.OidcCustomSub,
>(
  variables: OidcGetOidcCustomSubTemplateForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OidcCustomSub,
      OidcGetOidcCustomSubTemplateForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OidcCustomSub,
    OidcGetOidcCustomSubTemplateForOrgError,
    TData
  >({
    ...oidcGetOidcCustomSubTemplateForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 */
export const useOidcGetOidcCustomSubTemplateForOrg = <
  TData = Schemas.OidcCustomSub,
>(
  variables: OidcGetOidcCustomSubTemplateForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OidcCustomSub,
      OidcGetOidcCustomSubTemplateForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OidcCustomSub,
    OidcGetOidcCustomSubTemplateForOrgError,
    TData
  >({
    ...oidcGetOidcCustomSubTemplateForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OidcUpdateOidcCustomSubTemplateForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OidcUpdateOidcCustomSubTemplateForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OidcUpdateOidcCustomSubTemplateForOrgVariables = {
  body: Schemas.OidcCustomSub;
  pathParams: OidcUpdateOidcCustomSubTemplateForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `write:org` scope to use this endpoint.
 * GitHub Apps must have the `admin:org` permission to use this endpoint.
 */
export const fetchOidcUpdateOidcCustomSubTemplateForOrg = (
  variables: OidcUpdateOidcCustomSubTemplateForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    OidcUpdateOidcCustomSubTemplateForOrgError,
    Schemas.OidcCustomSub,
    {},
    {},
    OidcUpdateOidcCustomSubTemplateForOrgPathParams
  >({
    url: "/orgs/{org}/actions/oidc/customization/sub",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `write:org` scope to use this endpoint.
 * GitHub Apps must have the `admin:org` permission to use this endpoint.
 */
export const useOidcUpdateOidcCustomSubTemplateForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      OidcUpdateOidcCustomSubTemplateForOrgError,
      OidcUpdateOidcCustomSubTemplateForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    OidcUpdateOidcCustomSubTemplateForOrgError,
    OidcUpdateOidcCustomSubTemplateForOrgVariables
  >({
    mutationFn: (variables: OidcUpdateOidcCustomSubTemplateForOrgVariables) =>
      fetchOidcUpdateOidcCustomSubTemplateForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetGithubActionsPermissionsOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsGetGithubActionsPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsPermissionsOrganizationVariables = {
  pathParams: ActionsGetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsOrganization = (
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsOrganizationPermissions,
    ActionsGetGithubActionsPermissionsOrganizationError,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const actionsGetGithubActionsPermissionsOrganizationQuery = (
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsOrganizationPermissions>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/permissions",
    operationId: "actionsGetGithubActionsPermissionsOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetGithubActionsPermissionsOrganization(variables, signal),
});

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useSuspenseActionsGetGithubActionsPermissionsOrganization = <
  TData = Schemas.ActionsOrganizationPermissions,
>(
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsOrganizationPermissions,
      ActionsGetGithubActionsPermissionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsOrganizationPermissions,
    ActionsGetGithubActionsPermissionsOrganizationError,
    TData
  >({
    ...actionsGetGithubActionsPermissionsOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsOrganization = <
  TData = Schemas.ActionsOrganizationPermissions,
>(
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsOrganizationPermissions,
      ActionsGetGithubActionsPermissionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsOrganizationPermissions,
    ActionsGetGithubActionsPermissionsOrganizationError,
    TData
  >({
    ...actionsGetGithubActionsPermissionsOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetGithubActionsPermissionsOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsSetGithubActionsPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsPermissionsOrganizationRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled_repositories: Schemas.EnabledRepositories;
};

export type ActionsSetGithubActionsPermissionsOrganizationVariables = {
  body: ActionsSetGithubActionsPermissionsOrganizationRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsOrganization = (
  variables: ActionsSetGithubActionsPermissionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationError,
    ActionsSetGithubActionsPermissionsOrganizationRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetGithubActionsPermissionsOrganizationError,
      ActionsSetGithubActionsPermissionsOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationError,
    ActionsSetGithubActionsPermissionsOrganizationVariables
  >({
    mutationFn: (
      variables: ActionsSetGithubActionsPermissionsOrganizationVariables,
    ) =>
      fetchActionsSetGithubActionsPermissionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams =
  {
    /**
     * The number of results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /**
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse =
  {
    repositories: Schemas.Repository[];
    total_count: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    pathParams: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
    queryParams?: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
      undefined,
      {},
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "get",
      ...variables,
      signal,
    });

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuery =
  (
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
  ): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({
      signal,
    }: {
      signal?: AbortSignal;
    }) => Promise<ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse>;
  } => ({
    queryKey: queryKeyFn({
      path: "/orgs/{org}/actions/permissions/repositories",
      operationId:
        "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
      variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) =>
      fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization(
        variables,
        signal,
      ),
  });

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useSuspenseActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  <
    TData = ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
  >(
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
      TData
    >({
      ...actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  <
    TData = ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
  >(
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useQuery<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError,
      TData
    >({
      ...actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody =
  {
    /**
     * List of repository IDs to enable for GitHub Actions.
     */
    selected_repository_ids: number[];
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    body: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody;
    pathParams: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody,
      {},
      {},
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "put",
      ...variables,
      signal,
    });

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
      >,
      "mutationFn"
    >,
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
    >({
      mutationFn: (
        variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
      ) =>
        fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      ...options,
    });
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repositoryId: number;
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsDisableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsDisableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
      ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationError,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
  >({
    mutationFn: (
      variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables,
    ) =>
      fetchActionsDisableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repositoryId: number;
  };

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsEnableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsEnableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
      ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationError,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
  >({
    mutationFn: (
      variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables,
    ) =>
      fetchActionsEnableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetAllowedActionsOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsGetAllowedActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetAllowedActionsOrganizationVariables = {
  pathParams: ActionsGetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetAllowedActionsOrganization = (
  variables: ActionsGetAllowedActionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsOrganizationError,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const actionsGetAllowedActionsOrganizationQuery = (
  variables: ActionsGetAllowedActionsOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.SelectedActions>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/permissions/selected-actions",
    operationId: "actionsGetAllowedActionsOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetAllowedActionsOrganization(variables, signal),
});

/**
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useSuspenseActionsGetAllowedActionsOrganization = <
  TData = Schemas.SelectedActions,
>(
  variables: ActionsGetAllowedActionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsOrganizationError,
    TData
  >({
    ...actionsGetAllowedActionsOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetAllowedActionsOrganization = <
  TData = Schemas.SelectedActions,
>(
  variables: ActionsGetAllowedActionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsOrganizationError,
    TData
  >({
    ...actionsGetAllowedActionsOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetAllowedActionsOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsSetAllowedActionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetAllowedActionsOrganizationVariables = {
  body?: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetAllowedActionsOrganization = (
  variables: ActionsSetAllowedActionsOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetAllowedActionsOrganizationError,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetAllowedActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetAllowedActionsOrganizationError,
      ActionsSetAllowedActionsOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetAllowedActionsOrganizationError,
    ActionsSetAllowedActionsOrganizationVariables
  >({
    mutationFn: (variables: ActionsSetAllowedActionsOrganizationVariables) =>
      fetchActionsSetAllowedActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables =
  {
    pathParams: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetGithubActionsDefaultWorkflowPermissionsOrganization =
  (
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError,
      undefined,
      {},
      {},
      ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/workflow",
      method: "get",
      ...variables,
      signal,
    });

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationQuery =
  (
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
  ): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({
      signal,
    }: {
      signal?: AbortSignal;
    }) => Promise<Schemas.ActionsGetDefaultWorkflowPermissions>;
  } => ({
    queryKey: queryKeyFn({
      path: "/orgs/{org}/actions/permissions/workflow",
      operationId:
        "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization",
      variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) =>
      fetchActionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
        variables,
        signal,
      ),
  });

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useSuspenseActionsGetGithubActionsDefaultWorkflowPermissionsOrganization =
  <TData = Schemas.ActionsGetDefaultWorkflowPermissions>(
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.ActionsGetDefaultWorkflowPermissions,
        ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError,
      TData
    >({
      ...actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
 * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetGithubActionsDefaultWorkflowPermissionsOrganization =
  <TData = Schemas.ActionsGetDefaultWorkflowPermissions>(
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.ActionsGetDefaultWorkflowPermissions,
        ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useQuery<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError,
      TData
    >({
      ...actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams =
  {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationVariables =
  {
    body?: Schemas.ActionsSetDefaultWorkflowPermissions;
    pathParams: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
 * can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetGithubActionsDefaultWorkflowPermissionsOrganization =
  (
    variables: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      undefined,
      ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError,
      Schemas.ActionsSetDefaultWorkflowPermissions,
      {},
      {},
      ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/workflow",
      method: "put",
      ...variables,
      signal,
    });

/**
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
 * can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetGithubActionsDefaultWorkflowPermissionsOrganization =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError,
        ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationVariables
      >,
      "mutationFn"
    >,
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError,
      ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationVariables
    >({
      mutationFn: (
        variables: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationVariables,
      ) =>
        fetchActionsSetGithubActionsDefaultWorkflowPermissionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      ...options,
    });
  };

export type ActionsListRequiredWorkflowsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsListRequiredWorkflowsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRequiredWorkflowsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRequiredWorkflowsResponse = {
  required_workflows: Schemas.RequiredWorkflow[];
  total_count: number;
};

export type ActionsListRequiredWorkflowsVariables = {
  pathParams: ActionsListRequiredWorkflowsPathParams;
  queryParams?: ActionsListRequiredWorkflowsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all required workflows in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsListRequiredWorkflows = (
  variables: ActionsListRequiredWorkflowsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRequiredWorkflowsResponse,
    ActionsListRequiredWorkflowsError,
    undefined,
    {},
    ActionsListRequiredWorkflowsQueryParams,
    ActionsListRequiredWorkflowsPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all required workflows in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsListRequiredWorkflowsQuery = (
  variables: ActionsListRequiredWorkflowsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRequiredWorkflowsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/required_workflows",
    operationId: "actionsListRequiredWorkflows",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRequiredWorkflows(variables, signal),
});

/**
 * List all required workflows in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsListRequiredWorkflows = <
  TData = ActionsListRequiredWorkflowsResponse,
>(
  variables: ActionsListRequiredWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRequiredWorkflowsResponse,
      ActionsListRequiredWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRequiredWorkflowsResponse,
    ActionsListRequiredWorkflowsError,
    TData
  >({
    ...actionsListRequiredWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all required workflows in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsListRequiredWorkflows = <
  TData = ActionsListRequiredWorkflowsResponse,
>(
  variables: ActionsListRequiredWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRequiredWorkflowsResponse,
      ActionsListRequiredWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRequiredWorkflowsResponse,
    ActionsListRequiredWorkflowsError,
    TData
  >({
    ...actionsListRequiredWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsCreateRequiredWorkflowError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type ActionsCreateRequiredWorkflowRequestBody = {
  /**
   * The ID of the repository that contains the workflow file.
   */
  repository_id: string;
  /**
   * Enable the required workflow for all repositories or selected repositories in the organization.
   *
   * @default all
   */
  scope?: "selected" | "all";
  /**
   * A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.
   */
  selected_repository_ids?: number[];
  /**
   * Path of the workflow file to be configured as a required workflow.
   */
  workflow_file_path: string;
};

export type ActionsCreateRequiredWorkflowVariables = {
  body: ActionsCreateRequiredWorkflowRequestBody;
  pathParams: ActionsCreateRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a required workflow in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsCreateRequiredWorkflow = (
  variables: ActionsCreateRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RequiredWorkflow,
    ActionsCreateRequiredWorkflowError,
    ActionsCreateRequiredWorkflowRequestBody,
    {},
    {},
    ActionsCreateRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a required workflow in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsCreateRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RequiredWorkflow,
      ActionsCreateRequiredWorkflowError,
      ActionsCreateRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RequiredWorkflow,
    ActionsCreateRequiredWorkflowError,
    ActionsCreateRequiredWorkflowVariables
  >({
    mutationFn: (variables: ActionsCreateRequiredWorkflowVariables) =>
      fetchActionsCreateRequiredWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDeleteRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
};

export type ActionsDeleteRequiredWorkflowError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteRequiredWorkflowVariables = {
  pathParams: ActionsDeleteRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsDeleteRequiredWorkflow = (
  variables: ActionsDeleteRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsDeleteRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsDeleteRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteRequiredWorkflowError,
      ActionsDeleteRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteRequiredWorkflowError,
    ActionsDeleteRequiredWorkflowVariables
  >({
    mutationFn: (variables: ActionsDeleteRequiredWorkflowVariables) =>
      fetchActionsDeleteRequiredWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
};

export type ActionsGetRequiredWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRequiredWorkflowVariables = {
  pathParams: ActionsGetRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsGetRequiredWorkflow = (
  variables: ActionsGetRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RequiredWorkflow,
    ActionsGetRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsGetRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsGetRequiredWorkflowQuery = (
  variables: ActionsGetRequiredWorkflowVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RequiredWorkflow>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}",
    operationId: "actionsGetRequiredWorkflow",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRequiredWorkflow(variables, signal),
});

/**
 * Get a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsGetRequiredWorkflow = <
  TData = Schemas.RequiredWorkflow,
>(
  variables: ActionsGetRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RequiredWorkflow,
      ActionsGetRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RequiredWorkflow,
    ActionsGetRequiredWorkflowError,
    TData
  >({
    ...actionsGetRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get a required workflow configured in an organization.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsGetRequiredWorkflow = <TData = Schemas.RequiredWorkflow>(
  variables: ActionsGetRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RequiredWorkflow,
      ActionsGetRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RequiredWorkflow,
    ActionsGetRequiredWorkflowError,
    TData
  >({
    ...actionsGetRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsUpdateRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
};

export type ActionsUpdateRequiredWorkflowError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type ActionsUpdateRequiredWorkflowRequestBody = {
  /**
   * The ID of the repository that contains the workflow file.
   */
  repository_id?: string;
  /**
   * Enable the required workflow for all repositories or selected repositories in the organization.
   *
   * @default all
   */
  scope?: "selected" | "all";
  /**
   * A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.
   */
  selected_repository_ids?: number[];
  /**
   * Path of the workflow file to be configured as a required workflow.
   */
  workflow_file_path?: string;
};

export type ActionsUpdateRequiredWorkflowVariables = {
  body?: ActionsUpdateRequiredWorkflowRequestBody;
  pathParams: ActionsUpdateRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update a required workflow in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsUpdateRequiredWorkflow = (
  variables: ActionsUpdateRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RequiredWorkflow,
    ActionsUpdateRequiredWorkflowError,
    ActionsUpdateRequiredWorkflowRequestBody,
    {},
    {},
    ActionsUpdateRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Update a required workflow in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsUpdateRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RequiredWorkflow,
      ActionsUpdateRequiredWorkflowError,
      ActionsUpdateRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RequiredWorkflow,
    ActionsUpdateRequiredWorkflowError,
    ActionsUpdateRequiredWorkflowVariables
  >({
    mutationFn: (variables: ActionsUpdateRequiredWorkflowVariables) =>
      fetchActionsUpdateRequiredWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListSelectedRepositoriesRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
};

export type ActionsListSelectedRepositoriesRequiredWorkflowError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedRepositoriesRequiredWorkflowResponse = {
  repositories: Schemas.Repository[];
  total_count: number;
};

export type ActionsListSelectedRepositoriesRequiredWorkflowVariables = {
  pathParams: ActionsListSelectedRepositoriesRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsListSelectedRepositoriesRequiredWorkflow = (
  variables: ActionsListSelectedRepositoriesRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListSelectedRepositoriesRequiredWorkflowResponse,
    ActionsListSelectedRepositoriesRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsListSelectedRepositoriesRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsListSelectedRepositoriesRequiredWorkflowQuery = (
  variables: ActionsListSelectedRepositoriesRequiredWorkflowVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListSelectedRepositoriesRequiredWorkflowResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories",
    operationId: "actionsListSelectedRepositoriesRequiredWorkflow",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListSelectedRepositoriesRequiredWorkflow(variables, signal),
});

/**
 * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsListSelectedRepositoriesRequiredWorkflow = <
  TData = ActionsListSelectedRepositoriesRequiredWorkflowResponse,
>(
  variables: ActionsListSelectedRepositoriesRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedRepositoriesRequiredWorkflowResponse,
      ActionsListSelectedRepositoriesRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListSelectedRepositoriesRequiredWorkflowResponse,
    ActionsListSelectedRepositoriesRequiredWorkflowError,
    TData
  >({
    ...actionsListSelectedRepositoriesRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsListSelectedRepositoriesRequiredWorkflow = <
  TData = ActionsListSelectedRepositoriesRequiredWorkflowResponse,
>(
  variables: ActionsListSelectedRepositoriesRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedRepositoriesRequiredWorkflowResponse,
      ActionsListSelectedRepositoriesRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelectedRepositoriesRequiredWorkflowResponse,
    ActionsListSelectedRepositoriesRequiredWorkflowError,
    TData
  >({
    ...actionsListSelectedRepositoriesRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetSelectedReposToRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
};

export type ActionsSetSelectedReposToRequiredWorkflowError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedReposToRequiredWorkflowRequestBody = {
  /**
   * The IDs of the repositories for which the workflow should be required.
   */
  selected_repository_ids: number[];
};

export type ActionsSetSelectedReposToRequiredWorkflowVariables = {
  body: ActionsSetSelectedReposToRequiredWorkflowRequestBody;
  pathParams: ActionsSetSelectedReposToRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the repositories for a required workflow that is required for selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsSetSelectedReposToRequiredWorkflow = (
  variables: ActionsSetSelectedReposToRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetSelectedReposToRequiredWorkflowError,
    ActionsSetSelectedReposToRequiredWorkflowRequestBody,
    {},
    {},
    ActionsSetSelectedReposToRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the repositories for a required workflow that is required for selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsSetSelectedReposToRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetSelectedReposToRequiredWorkflowError,
      ActionsSetSelectedReposToRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetSelectedReposToRequiredWorkflowError,
    ActionsSetSelectedReposToRequiredWorkflowVariables
  >({
    mutationFn: (
      variables: ActionsSetSelectedReposToRequiredWorkflowVariables,
    ) =>
      fetchActionsSetSelectedReposToRequiredWorkflow({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsRemoveSelectedRepoFromRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
};

export type ActionsRemoveSelectedRepoFromRequiredWorkflowError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveSelectedRepoFromRequiredWorkflowVariables = {
  pathParams: ActionsRemoveSelectedRepoFromRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsRemoveSelectedRepoFromRequiredWorkflow = (
  variables: ActionsRemoveSelectedRepoFromRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsRemoveSelectedRepoFromRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsRemoveSelectedRepoFromRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsRemoveSelectedRepoFromRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveSelectedRepoFromRequiredWorkflowError,
      ActionsRemoveSelectedRepoFromRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveSelectedRepoFromRequiredWorkflowError,
    ActionsRemoveSelectedRepoFromRequiredWorkflowVariables
  >({
    mutationFn: (
      variables: ActionsRemoveSelectedRepoFromRequiredWorkflowVariables,
    ) =>
      fetchActionsRemoveSelectedRepoFromRequiredWorkflow({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsAddSelectedRepoToRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the required workflow.
   */
  requiredWorkflowId: number;
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
};

export type ActionsAddSelectedRepoToRequiredWorkflowError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddSelectedRepoToRequiredWorkflowVariables = {
  pathParams: ActionsAddSelectedRepoToRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsAddSelectedRepoToRequiredWorkflow = (
  variables: ActionsAddSelectedRepoToRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsAddSelectedRepoToRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsAddSelectedRepoToRequiredWorkflowPathParams
  >({
    url: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsAddSelectedRepoToRequiredWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddSelectedRepoToRequiredWorkflowError,
      ActionsAddSelectedRepoToRequiredWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddSelectedRepoToRequiredWorkflowError,
    ActionsAddSelectedRepoToRequiredWorkflowVariables
  >({
    mutationFn: (
      variables: ActionsAddSelectedRepoToRequiredWorkflowVariables,
    ) =>
      fetchActionsAddSelectedRepoToRequiredWorkflow({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListSelfHostedRunnersForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsListSelfHostedRunnersForOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnersForOrgResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnersForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnersForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForOrg = (
  variables: ActionsListSelfHostedRunnersForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForOrgResponse,
    ActionsListSelfHostedRunnersForOrgError,
    undefined,
    {},
    ActionsListSelfHostedRunnersForOrgQueryParams,
    ActionsListSelfHostedRunnersForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const actionsListSelfHostedRunnersForOrgQuery = (
  variables: ActionsListSelfHostedRunnersForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListSelfHostedRunnersForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/runners",
    operationId: "actionsListSelfHostedRunnersForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListSelfHostedRunnersForOrg(variables, signal),
});

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseActionsListSelfHostedRunnersForOrg = <
  TData = ActionsListSelfHostedRunnersForOrgResponse,
>(
  variables: ActionsListSelfHostedRunnersForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForOrgResponse,
      ActionsListSelfHostedRunnersForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListSelfHostedRunnersForOrgResponse,
    ActionsListSelfHostedRunnersForOrgError,
    TData
  >({
    ...actionsListSelfHostedRunnersForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForOrg = <
  TData = ActionsListSelfHostedRunnersForOrgResponse,
>(
  variables: ActionsListSelfHostedRunnersForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForOrgResponse,
      ActionsListSelfHostedRunnersForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForOrgResponse,
    ActionsListSelfHostedRunnersForOrgError,
    TData
  >({
    ...actionsListSelfHostedRunnersForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListRunnerApplicationsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsListRunnerApplicationsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRunnerApplicationsForOrgResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForOrgVariables = {
  pathParams: ActionsListRunnerApplicationsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForOrg = (
  variables: ActionsListRunnerApplicationsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRunnerApplicationsForOrgResponse,
    ActionsListRunnerApplicationsForOrgError,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/downloads",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const actionsListRunnerApplicationsForOrgQuery = (
  variables: ActionsListRunnerApplicationsForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRunnerApplicationsForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/runners/downloads",
    operationId: "actionsListRunnerApplicationsForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRunnerApplicationsForOrg(variables, signal),
});

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseActionsListRunnerApplicationsForOrg = <
  TData = ActionsListRunnerApplicationsForOrgResponse,
>(
  variables: ActionsListRunnerApplicationsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForOrgResponse,
      ActionsListRunnerApplicationsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRunnerApplicationsForOrgResponse,
    ActionsListRunnerApplicationsForOrgError,
    TData
  >({
    ...actionsListRunnerApplicationsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForOrg = <
  TData = ActionsListRunnerApplicationsForOrgResponse,
>(
  variables: ActionsListRunnerApplicationsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForOrgResponse,
      ActionsListRunnerApplicationsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForOrgResponse,
    ActionsListRunnerApplicationsForOrgError,
    TData
  >({
    ...actionsListRunnerApplicationsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateRegistrationTokenForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsCreateRegistrationTokenForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRegistrationTokenForOrgVariables = {
  pathParams: ActionsCreateRegistrationTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForOrg = (
  variables: ActionsCreateRegistrationTokenForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForOrgError,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/registration-token",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRegistrationTokenForOrgError,
      ActionsCreateRegistrationTokenForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForOrgError,
    ActionsCreateRegistrationTokenForOrgVariables
  >({
    mutationFn: (variables: ActionsCreateRegistrationTokenForOrgVariables) =>
      fetchActionsCreateRegistrationTokenForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsCreateRemoveTokenForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsCreateRemoveTokenForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRemoveTokenForOrgVariables = {
  pathParams: ActionsCreateRemoveTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForOrg = (
  variables: ActionsCreateRemoveTokenForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForOrgError,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/remove-token",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRemoveTokenForOrgError,
      ActionsCreateRemoveTokenForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForOrgError,
    ActionsCreateRemoveTokenForOrgVariables
  >({
    mutationFn: (variables: ActionsCreateRemoveTokenForOrgVariables) =>
      fetchActionsCreateRemoveTokenForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDeleteSelfHostedRunnerFromOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteSelfHostedRunnerFromOrgVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromOrg = (
  variables: ActionsDeleteSelfHostedRunnerFromOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteSelfHostedRunnerFromOrgError,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteSelfHostedRunnerFromOrgError,
      ActionsDeleteSelfHostedRunnerFromOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteSelfHostedRunnerFromOrgError,
    ActionsDeleteSelfHostedRunnerFromOrgVariables
  >({
    mutationFn: (variables: ActionsDeleteSelfHostedRunnerFromOrgVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsGetSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForOrg = (
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForOrgError,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const actionsGetSelfHostedRunnerForOrgQuery = (
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Runner>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/runners/{runnerId}",
    operationId: "actionsGetSelfHostedRunnerForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetSelfHostedRunnerForOrg(variables, signal),
});

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseActionsGetSelfHostedRunnerForOrg = <
  TData = Schemas.Runner,
>(
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForOrgError,
    TData
  >({
    ...actionsGetSelfHostedRunnerForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsGetSelfHostedRunnerForOrg = <TData = Schemas.Runner>(
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForOrgError,
    TData
  >({
    ...actionsGetSelfHostedRunnerForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove all custom labels from a self-hosted runner configured in an
 * organization. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg = (
  variables: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabelsReadonly,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError,
    undefined,
    {},
    {},
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}/labels",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove all custom labels from a self-hosted runner configured in an
 * organization. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabelsReadonly,
      ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError,
      ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabelsReadonly,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgVariables
  >({
    mutationFn: (
      variables: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgVariables,
    ) =>
      fetchActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListLabelsForSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsListLabelsForSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ActionsListLabelsForSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsListLabelsForSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListLabelsForSelfHostedRunnerForOrg = (
  variables: ActionsListLabelsForSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForOrgError,
    undefined,
    {},
    {},
    ActionsListLabelsForSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}/labels",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const actionsListLabelsForSelfHostedRunnerForOrgQuery = (
  variables: ActionsListLabelsForSelfHostedRunnerForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Responses.ActionsRunnerLabels>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/runners/{runnerId}/labels",
    operationId: "actionsListLabelsForSelfHostedRunnerForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListLabelsForSelfHostedRunnerForOrg(variables, signal),
});

/**
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseActionsListLabelsForSelfHostedRunnerForOrg = <
  TData = Responses.ActionsRunnerLabels,
>(
  variables: ActionsListLabelsForSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ActionsRunnerLabels,
      ActionsListLabelsForSelfHostedRunnerForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForOrgError,
    TData
  >({
    ...actionsListLabelsForSelfHostedRunnerForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListLabelsForSelfHostedRunnerForOrg = <
  TData = Responses.ActionsRunnerLabels,
>(
  variables: ActionsListLabelsForSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ActionsRunnerLabels,
      ActionsListLabelsForSelfHostedRunnerForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForOrgError,
    TData
  >({
    ...actionsListLabelsForSelfHostedRunnerForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequestBody = {
  /**
   * The names of the custom labels to add to the runner.
   *
   * @maxItems 100
   * @minItems 1
   */
  labels: string[];
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgVariables = {
  body: ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequestBody;
  pathParams: ActionsAddCustomLabelsToSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Add custom labels to a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsAddCustomLabelsToSelfHostedRunnerForOrg = (
  variables: ActionsAddCustomLabelsToSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsAddCustomLabelsToSelfHostedRunnerForOrgError,
    ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequestBody,
    {},
    {},
    ActionsAddCustomLabelsToSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}/labels",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Add custom labels to a self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsAddCustomLabelsToSelfHostedRunnerForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsAddCustomLabelsToSelfHostedRunnerForOrgError,
      ActionsAddCustomLabelsToSelfHostedRunnerForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsAddCustomLabelsToSelfHostedRunnerForOrgError,
    ActionsAddCustomLabelsToSelfHostedRunnerForOrgVariables
  >({
    mutationFn: (
      variables: ActionsAddCustomLabelsToSelfHostedRunnerForOrgVariables,
    ) =>
      fetchActionsAddCustomLabelsToSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequestBody = {
  /**
   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
   *
   * @maxItems 100
   * @minItems 0
   */
  labels: string[];
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgVariables = {
  body: ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequestBody;
  pathParams: ActionsSetCustomLabelsForSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsSetCustomLabelsForSelfHostedRunnerForOrg = (
  variables: ActionsSetCustomLabelsForSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsSetCustomLabelsForSelfHostedRunnerForOrgError,
    ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequestBody,
    {},
    {},
    ActionsSetCustomLabelsForSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}/labels",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsSetCustomLabelsForSelfHostedRunnerForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsSetCustomLabelsForSelfHostedRunnerForOrgError,
      ActionsSetCustomLabelsForSelfHostedRunnerForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsSetCustomLabelsForSelfHostedRunnerForOrgError,
    ActionsSetCustomLabelsForSelfHostedRunnerForOrgVariables
  >({
    mutationFn: (
      variables: ActionsSetCustomLabelsForSelfHostedRunnerForOrgVariables,
    ) =>
      fetchActionsSetCustomLabelsForSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
  /**
   * The name of a self-hosted runner's custom label.
   */
  name: string;
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove a custom label from a self-hosted runner configured
 * in an organization. Returns the remaining labels from the runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveCustomLabelFromSelfHostedRunnerForOrg = (
  variables: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError,
    undefined,
    {},
    {},
    ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}/labels/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove a custom label from a self-hosted runner configured
 * in an organization. Returns the remaining labels from the runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveCustomLabelFromSelfHostedRunnerForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError,
      ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgVariables
  >({
    mutationFn: (
      variables: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgVariables,
    ) =>
      fetchActionsRemoveCustomLabelFromSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListOrgSecretsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsListOrgSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListOrgSecretsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListOrgSecretsResponse = {
  secrets: Schemas.OrganizationActionsSecret[];
  total_count: number;
};

export type ActionsListOrgSecretsVariables = {
  pathParams: ActionsListOrgSecretsPathParams;
  queryParams?: ActionsListOrgSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListOrgSecrets = (
  variables: ActionsListOrgSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListOrgSecretsResponse,
    ActionsListOrgSecretsError,
    undefined,
    {},
    ActionsListOrgSecretsQueryParams,
    ActionsListOrgSecretsPathParams
  >({
    url: "/orgs/{org}/actions/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const actionsListOrgSecretsQuery = (
  variables: ActionsListOrgSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListOrgSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/secrets",
    operationId: "actionsListOrgSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListOrgSecrets(variables, signal),
});

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useSuspenseActionsListOrgSecrets = <
  TData = ActionsListOrgSecretsResponse,
>(
  variables: ActionsListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgSecretsResponse,
      ActionsListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListOrgSecretsResponse,
    ActionsListOrgSecretsError,
    TData
  >({
    ...actionsListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListOrgSecrets = <TData = ActionsListOrgSecretsResponse>(
  variables: ActionsListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgSecretsResponse,
      ActionsListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListOrgSecretsResponse,
    ActionsListOrgSecretsError,
    TData
  >({
    ...actionsListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetOrgPublicKeyPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsGetOrgPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetOrgPublicKeyVariables = {
  pathParams: ActionsGetOrgPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgPublicKey = (
  variables: ActionsGetOrgPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetOrgPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetOrgPublicKeyPathParams
  >({
    url: "/orgs/{org}/actions/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const actionsGetOrgPublicKeyQuery = (
  variables: ActionsGetOrgPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/secrets/public-key",
    operationId: "actionsGetOrgPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetOrgPublicKey(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useSuspenseActionsGetOrgPublicKey = <
  TData = Schemas.ActionsPublicKey,
>(
  variables: ActionsGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsPublicKey,
    ActionsGetOrgPublicKeyError,
    TData
  >({
    ...actionsGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgPublicKey = <TData = Schemas.ActionsPublicKey>(
  variables: ActionsGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetOrgPublicKeyError,
    TData
  >({
    ...actionsGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsDeleteOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteOrgSecretVariables = {
  pathParams: ActionsDeleteOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsDeleteOrgSecret = (
  variables: ActionsDeleteOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteOrgSecretError,
    undefined,
    {},
    {},
    ActionsDeleteOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsDeleteOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteOrgSecretError,
      ActionsDeleteOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteOrgSecretError,
    ActionsDeleteOrgSecretVariables
  >({
    mutationFn: (variables: ActionsDeleteOrgSecretVariables) =>
      fetchActionsDeleteOrgSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsGetOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetOrgSecretVariables = {
  pathParams: ActionsGetOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgSecret = (
  variables: ActionsGetOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationActionsSecret,
    ActionsGetOrgSecretError,
    undefined,
    {},
    {},
    ActionsGetOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const actionsGetOrgSecretQuery = (
  variables: ActionsGetOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrganizationActionsSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/secrets/{secretName}",
    operationId: "actionsGetOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetOrgSecret(variables, signal),
});

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useSuspenseActionsGetOrgSecret = <
  TData = Schemas.OrganizationActionsSecret,
>(
  variables: ActionsGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsSecret,
      ActionsGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrganizationActionsSecret,
    ActionsGetOrgSecretError,
    TData
  >({
    ...actionsGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgSecret = <
  TData = Schemas.OrganizationActionsSecret,
>(
  variables: ActionsGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsSecret,
      ActionsGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationActionsSecret,
    ActionsGetOrgSecretError,
    TData
  >({
    ...actionsGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateOrUpdateOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsCreateOrUpdateOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateOrgSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: number[];
  /**
   * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
   */
  visibility: "all" | "private" | "selected";
};

export type ActionsCreateOrUpdateOrgSecretVariables = {
  body: ActionsCreateOrUpdateOrgSecretRequestBody;
  pathParams: ActionsCreateOrUpdateOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateOrgSecret = (
  variables: ActionsCreateOrUpdateOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateOrgSecretError,
    ActionsCreateOrUpdateOrgSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateOrUpdateOrgSecretError,
      ActionsCreateOrUpdateOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateOrgSecretError,
    ActionsCreateOrUpdateOrgSecretVariables
  >({
    mutationFn: (variables: ActionsCreateOrUpdateOrgSecretVariables) =>
      fetchActionsCreateOrUpdateOrgSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsListSelectedReposForOrgSecretQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedReposForOrgSecretResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type ActionsListSelectedReposForOrgSecretVariables = {
  pathParams: ActionsListSelectedReposForOrgSecretPathParams;
  queryParams?: ActionsListSelectedReposForOrgSecretQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListSelectedReposForOrgSecret = (
  variables: ActionsListSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListSelectedReposForOrgSecretResponse,
    ActionsListSelectedReposForOrgSecretError,
    undefined,
    {},
    ActionsListSelectedReposForOrgSecretQueryParams,
    ActionsListSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const actionsListSelectedReposForOrgSecretQuery = (
  variables: ActionsListSelectedReposForOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListSelectedReposForOrgSecretResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    operationId: "actionsListSelectedReposForOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListSelectedReposForOrgSecret(variables, signal),
});

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useSuspenseActionsListSelectedReposForOrgSecret = <
  TData = ActionsListSelectedReposForOrgSecretResponse,
>(
  variables: ActionsListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgSecretResponse,
      ActionsListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListSelectedReposForOrgSecretResponse,
    ActionsListSelectedReposForOrgSecretError,
    TData
  >({
    ...actionsListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListSelectedReposForOrgSecret = <
  TData = ActionsListSelectedReposForOrgSecretResponse,
>(
  variables: ActionsListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgSecretResponse,
      ActionsListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelectedReposForOrgSecretResponse,
    ActionsListSelectedReposForOrgSecretError,
    TData
  >({
    ...actionsListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsSetSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedReposForOrgSecretRequestBody = {
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids: number[];
};

export type ActionsSetSelectedReposForOrgSecretVariables = {
  body: ActionsSetSelectedReposForOrgSecretRequestBody;
  pathParams: ActionsSetSelectedReposForOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsSetSelectedReposForOrgSecret = (
  variables: ActionsSetSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetSelectedReposForOrgSecretError,
    ActionsSetSelectedReposForOrgSecretRequestBody,
    {},
    {},
    ActionsSetSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsSetSelectedReposForOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetSelectedReposForOrgSecretError,
      ActionsSetSelectedReposForOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetSelectedReposForOrgSecretError,
    ActionsSetSelectedReposForOrgSecretVariables
  >({
    mutationFn: (variables: ActionsSetSelectedReposForOrgSecretVariables) =>
      fetchActionsSetSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsRemoveSelectedRepoFromOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsRemoveSelectedRepoFromOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveSelectedRepoFromOrgSecretVariables = {
  pathParams: ActionsRemoveSelectedRepoFromOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsRemoveSelectedRepoFromOrgSecret = (
  variables: ActionsRemoveSelectedRepoFromOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsRemoveSelectedRepoFromOrgSecretError,
    undefined,
    {},
    {},
    ActionsRemoveSelectedRepoFromOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsRemoveSelectedRepoFromOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveSelectedRepoFromOrgSecretError,
      ActionsRemoveSelectedRepoFromOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveSelectedRepoFromOrgSecretError,
    ActionsRemoveSelectedRepoFromOrgSecretVariables
  >({
    mutationFn: (variables: ActionsRemoveSelectedRepoFromOrgSecretVariables) =>
      fetchActionsRemoveSelectedRepoFromOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsAddSelectedRepoToOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsAddSelectedRepoToOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddSelectedRepoToOrgSecretVariables = {
  pathParams: ActionsAddSelectedRepoToOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsAddSelectedRepoToOrgSecret = (
  variables: ActionsAddSelectedRepoToOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsAddSelectedRepoToOrgSecretError,
    undefined,
    {},
    {},
    ActionsAddSelectedRepoToOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsAddSelectedRepoToOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddSelectedRepoToOrgSecretError,
      ActionsAddSelectedRepoToOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddSelectedRepoToOrgSecretError,
    ActionsAddSelectedRepoToOrgSecretVariables
  >({
    mutationFn: (variables: ActionsAddSelectedRepoToOrgSecretVariables) =>
      fetchActionsAddSelectedRepoToOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListOrgVariablesPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsListOrgVariablesQueryParams = {
  /**
   * The number of results per page (max 30).
   *
   * @default 10
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListOrgVariablesError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListOrgVariablesResponse = {
  total_count: number;
  variables: Schemas.OrganizationActionsVariable[];
};

export type ActionsListOrgVariablesVariables = {
  pathParams: ActionsListOrgVariablesPathParams;
  queryParams?: ActionsListOrgVariablesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const fetchActionsListOrgVariables = (
  variables: ActionsListOrgVariablesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListOrgVariablesResponse,
    ActionsListOrgVariablesError,
    undefined,
    {},
    ActionsListOrgVariablesQueryParams,
    ActionsListOrgVariablesPathParams
  >({
    url: "/orgs/{org}/actions/variables",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const actionsListOrgVariablesQuery = (
  variables: ActionsListOrgVariablesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListOrgVariablesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/variables",
    operationId: "actionsListOrgVariables",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListOrgVariables(variables, signal),
});

/**
 * Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useSuspenseActionsListOrgVariables = <
  TData = ActionsListOrgVariablesResponse,
>(
  variables: ActionsListOrgVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgVariablesResponse,
      ActionsListOrgVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListOrgVariablesResponse,
    ActionsListOrgVariablesError,
    TData
  >({
    ...actionsListOrgVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useActionsListOrgVariables = <
  TData = ActionsListOrgVariablesResponse,
>(
  variables: ActionsListOrgVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgVariablesResponse,
      ActionsListOrgVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListOrgVariablesResponse,
    ActionsListOrgVariablesError,
    TData
  >({
    ...actionsListOrgVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActionsCreateOrgVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrgVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
   */
  selected_repository_ids?: number[];
  /**
   * The value of the variable.
   */
  value: string;
  /**
   * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
   */
  visibility: "all" | "private" | "selected";
};

export type ActionsCreateOrgVariableVariables = {
  body: ActionsCreateOrgVariableRequestBody;
  pathParams: ActionsCreateOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an organization variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsCreateOrgVariable = (
  variables: ActionsCreateOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateOrgVariableError,
    ActionsCreateOrgVariableRequestBody,
    {},
    {},
    ActionsCreateOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates an organization variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsCreateOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateOrgVariableError,
      ActionsCreateOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateOrgVariableError,
    ActionsCreateOrgVariableVariables
  >({
    mutationFn: (variables: ActionsCreateOrgVariableVariables) =>
      fetchActionsCreateOrgVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDeleteOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsDeleteOrgVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteOrgVariableVariables = {
  pathParams: ActionsDeleteOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an organization variable using the variable name.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsDeleteOrgVariable = (
  variables: ActionsDeleteOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteOrgVariableError,
    undefined,
    {},
    {},
    ActionsDeleteOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an organization variable using the variable name.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsDeleteOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteOrgVariableError,
      ActionsDeleteOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteOrgVariableError,
    ActionsDeleteOrgVariableVariables
  >({
    mutationFn: (variables: ActionsDeleteOrgVariableVariables) =>
      fetchActionsDeleteOrgVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsGetOrgVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetOrgVariableVariables = {
  pathParams: ActionsGetOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgVariable = (
  variables: ActionsGetOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationActionsVariable,
    ActionsGetOrgVariableError,
    undefined,
    {},
    {},
    ActionsGetOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const actionsGetOrgVariableQuery = (
  variables: ActionsGetOrgVariableVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrganizationActionsVariable>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/variables/{name}",
    operationId: "actionsGetOrgVariable",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetOrgVariable(variables, signal),
});

/**
 * Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useSuspenseActionsGetOrgVariable = <
  TData = Schemas.OrganizationActionsVariable,
>(
  variables: ActionsGetOrgVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsVariable,
      ActionsGetOrgVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrganizationActionsVariable,
    ActionsGetOrgVariableError,
    TData
  >({
    ...actionsGetOrgVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useActionsGetOrgVariable = <
  TData = Schemas.OrganizationActionsVariable,
>(
  variables: ActionsGetOrgVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsVariable,
      ActionsGetOrgVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationActionsVariable,
    ActionsGetOrgVariableError,
    TData
  >({
    ...actionsGetOrgVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsUpdateOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsUpdateOrgVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsUpdateOrgVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name?: string;
  /**
   * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
   */
  selected_repository_ids?: number[];
  /**
   * The value of the variable.
   */
  value?: string;
  /**
   * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
   */
  visibility?: "all" | "private" | "selected";
};

export type ActionsUpdateOrgVariableVariables = {
  body?: ActionsUpdateOrgVariableRequestBody;
  pathParams: ActionsUpdateOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates an organization variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsUpdateOrgVariable = (
  variables: ActionsUpdateOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsUpdateOrgVariableError,
    ActionsUpdateOrgVariableRequestBody,
    {},
    {},
    ActionsUpdateOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates an organization variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsUpdateOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsUpdateOrgVariableError,
      ActionsUpdateOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsUpdateOrgVariableError,
    ActionsUpdateOrgVariableVariables
  >({
    mutationFn: (variables: ActionsUpdateOrgVariableVariables) =>
      fetchActionsUpdateOrgVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListSelectedReposForOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsListSelectedReposForOrgVariableQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListSelectedReposForOrgVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelectedReposForOrgVariableResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type ActionsListSelectedReposForOrgVariableVariables = {
  pathParams: ActionsListSelectedReposForOrgVariablePathParams;
  queryParams?: ActionsListSelectedReposForOrgVariableQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const fetchActionsListSelectedReposForOrgVariable = (
  variables: ActionsListSelectedReposForOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListSelectedReposForOrgVariableResponse,
    ActionsListSelectedReposForOrgVariableError,
    undefined,
    {},
    ActionsListSelectedReposForOrgVariableQueryParams,
    ActionsListSelectedReposForOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const actionsListSelectedReposForOrgVariableQuery = (
  variables: ActionsListSelectedReposForOrgVariableVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListSelectedReposForOrgVariableResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/actions/variables/{name}/repositories",
    operationId: "actionsListSelectedReposForOrgVariable",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListSelectedReposForOrgVariable(variables, signal),
});

/**
 * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useSuspenseActionsListSelectedReposForOrgVariable = <
  TData = ActionsListSelectedReposForOrgVariableResponse,
>(
  variables: ActionsListSelectedReposForOrgVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgVariableResponse,
      ActionsListSelectedReposForOrgVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListSelectedReposForOrgVariableResponse,
    ActionsListSelectedReposForOrgVariableError,
    TData
  >({
    ...actionsListSelectedReposForOrgVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
 */
export const useActionsListSelectedReposForOrgVariable = <
  TData = ActionsListSelectedReposForOrgVariableResponse,
>(
  variables: ActionsListSelectedReposForOrgVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgVariableResponse,
      ActionsListSelectedReposForOrgVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelectedReposForOrgVariableResponse,
    ActionsListSelectedReposForOrgVariableError,
    TData
  >({
    ...actionsListSelectedReposForOrgVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetSelectedReposForOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsSetSelectedReposForOrgVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetSelectedReposForOrgVariableRequestBody = {
  /**
   * The IDs of the repositories that can access the organization variable.
   */
  selected_repository_ids: number[];
};

export type ActionsSetSelectedReposForOrgVariableVariables = {
  body: ActionsSetSelectedReposForOrgVariableRequestBody;
  pathParams: ActionsSetSelectedReposForOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsSetSelectedReposForOrgVariable = (
  variables: ActionsSetSelectedReposForOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetSelectedReposForOrgVariableError,
    ActionsSetSelectedReposForOrgVariableRequestBody,
    {},
    {},
    ActionsSetSelectedReposForOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsSetSelectedReposForOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetSelectedReposForOrgVariableError,
      ActionsSetSelectedReposForOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetSelectedReposForOrgVariableError,
    ActionsSetSelectedReposForOrgVariableVariables
  >({
    mutationFn: (variables: ActionsSetSelectedReposForOrgVariableVariables) =>
      fetchActionsSetSelectedReposForOrgVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsRemoveSelectedRepoFromOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
  repositoryId: number;
};

export type ActionsRemoveSelectedRepoFromOrgVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsRemoveSelectedRepoFromOrgVariableVariables = {
  pathParams: ActionsRemoveSelectedRepoFromOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsRemoveSelectedRepoFromOrgVariable = (
  variables: ActionsRemoveSelectedRepoFromOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsRemoveSelectedRepoFromOrgVariableError,
    undefined,
    {},
    {},
    ActionsRemoveSelectedRepoFromOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsRemoveSelectedRepoFromOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsRemoveSelectedRepoFromOrgVariableError,
      ActionsRemoveSelectedRepoFromOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsRemoveSelectedRepoFromOrgVariableError,
    ActionsRemoveSelectedRepoFromOrgVariableVariables
  >({
    mutationFn: (
      variables: ActionsRemoveSelectedRepoFromOrgVariableVariables,
    ) =>
      fetchActionsRemoveSelectedRepoFromOrgVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsAddSelectedRepoToOrgVariablePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the variable.
   */
  name: string;
  repositoryId: number;
};

export type ActionsAddSelectedRepoToOrgVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsAddSelectedRepoToOrgVariableVariables = {
  pathParams: ActionsAddSelectedRepoToOrgVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const fetchActionsAddSelectedRepoToOrgVariable = (
  variables: ActionsAddSelectedRepoToOrgVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsAddSelectedRepoToOrgVariableError,
    undefined,
    {},
    {},
    ActionsAddSelectedRepoToOrgVariablePathParams
  >({
    url: "/orgs/{org}/actions/variables/{name}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
 */
export const useActionsAddSelectedRepoToOrgVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsAddSelectedRepoToOrgVariableError,
      ActionsAddSelectedRepoToOrgVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsAddSelectedRepoToOrgVariableError,
    ActionsAddSelectedRepoToOrgVariableVariables
  >({
    mutationFn: (variables: ActionsAddSelectedRepoToOrgVariableVariables) =>
      fetchActionsAddSelectedRepoToOrgVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrgsListBlockedUsersPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListBlockedUsersQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListBlockedUsersError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListBlockedUsersResponse = Schemas.SimpleUser[];

export type OrgsListBlockedUsersVariables = {
  pathParams: OrgsListBlockedUsersPathParams;
  queryParams?: OrgsListBlockedUsersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the users blocked by an organization.
 */
export const fetchOrgsListBlockedUsers = (
  variables: OrgsListBlockedUsersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListBlockedUsersResponse,
    OrgsListBlockedUsersError,
    undefined,
    {},
    OrgsListBlockedUsersQueryParams,
    OrgsListBlockedUsersPathParams
  >({ url: "/orgs/{org}/blocks", method: "get", ...variables, signal });

/**
 * List the users blocked by an organization.
 */
export const orgsListBlockedUsersQuery = (
  variables: OrgsListBlockedUsersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListBlockedUsersResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/blocks",
    operationId: "orgsListBlockedUsers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListBlockedUsers(variables, signal),
});

/**
 * List the users blocked by an organization.
 */
export const useSuspenseOrgsListBlockedUsers = <
  TData = OrgsListBlockedUsersResponse,
>(
  variables: OrgsListBlockedUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListBlockedUsersResponse,
      OrgsListBlockedUsersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListBlockedUsersResponse,
    OrgsListBlockedUsersError,
    TData
  >({
    ...orgsListBlockedUsersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the users blocked by an organization.
 */
export const useOrgsListBlockedUsers = <TData = OrgsListBlockedUsersResponse>(
  variables: OrgsListBlockedUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListBlockedUsersResponse,
      OrgsListBlockedUsersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListBlockedUsersResponse,
    OrgsListBlockedUsersError,
    TData
  >({
    ...orgsListBlockedUsersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsUnblockUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsUnblockUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsUnblockUserVariables = {
  pathParams: OrgsUnblockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUnblockUser = (
  variables: OrgsUnblockUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsUnblockUserError,
    undefined,
    {},
    {},
    OrgsUnblockUserPathParams
  >({
    url: "/orgs/{org}/blocks/{username}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrgsUnblockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsUnblockUserError,
      OrgsUnblockUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsUnblockUserError,
    OrgsUnblockUserVariables
  >({
    mutationFn: (variables: OrgsUnblockUserVariables) =>
      fetchOrgsUnblockUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsCheckBlockedUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsCheckBlockedUserError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type OrgsCheckBlockedUserVariables = {
  pathParams: OrgsCheckBlockedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckBlockedUser = (
  variables: OrgsCheckBlockedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsCheckBlockedUserError,
    undefined,
    {},
    {},
    OrgsCheckBlockedUserPathParams
  >({
    url: "/orgs/{org}/blocks/{username}",
    method: "get",
    ...variables,
    signal,
  });

export const orgsCheckBlockedUserQuery = (
  variables: OrgsCheckBlockedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/blocks/{username}",
    operationId: "orgsCheckBlockedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsCheckBlockedUser(variables, signal),
});

export const useSuspenseOrgsCheckBlockedUser = <TData = undefined>(
  variables: OrgsCheckBlockedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OrgsCheckBlockedUserError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    OrgsCheckBlockedUserError,
    TData
  >({
    ...orgsCheckBlockedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useOrgsCheckBlockedUser = <TData = undefined>(
  variables: OrgsCheckBlockedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OrgsCheckBlockedUserError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, OrgsCheckBlockedUserError, TData>({
    ...orgsCheckBlockedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsBlockUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsBlockUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type OrgsBlockUserVariables = {
  pathParams: OrgsBlockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsBlockUser = (
  variables: OrgsBlockUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsBlockUserError,
    undefined,
    {},
    {},
    OrgsBlockUserPathParams
  >({
    url: "/orgs/{org}/blocks/{username}",
    method: "put",
    ...variables,
    signal,
  });

export const useOrgsBlockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsBlockUserError,
      OrgsBlockUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsBlockUserError,
    OrgsBlockUserVariables
  >({
    mutationFn: (variables: OrgsBlockUserVariables) =>
      fetchOrgsBlockUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodeScanningListAlertsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodeScanningListAlertsForOrgQueryParams = {
  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  after?: string;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * If specified, only code scanning alerts with this state will be returned.
   */
  state?: Schemas.CodeScanningAlertState;
  /**
   * The property by which to sort the results.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * If specified, only code scanning alerts with this severity will be returned.
   */
  severity?: Schemas.CodeScanningAlertSeverity;
};

export type CodeScanningListAlertsForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListAlertsForOrgResponse =
  Schemas.CodeScanningOrganizationAlertItems[];

export type CodeScanningListAlertsForOrgVariables = {
  pathParams: CodeScanningListAlertsForOrgPathParams;
  queryParams?: CodeScanningListAlertsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningListAlertsForOrg = (
  variables: CodeScanningListAlertsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodeScanningListAlertsForOrgResponse,
    CodeScanningListAlertsForOrgError,
    undefined,
    {},
    CodeScanningListAlertsForOrgQueryParams,
    CodeScanningListAlertsForOrgPathParams
  >({
    url: "/orgs/{org}/code-scanning/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const codeScanningListAlertsForOrgQuery = (
  variables: CodeScanningListAlertsForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodeScanningListAlertsForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/code-scanning/alerts",
    operationId: "codeScanningListAlertsForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningListAlertsForOrg(variables, signal),
});

/**
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningListAlertsForOrg = <
  TData = CodeScanningListAlertsForOrgResponse,
>(
  variables: CodeScanningListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForOrgResponse,
      CodeScanningListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodeScanningListAlertsForOrgResponse,
    CodeScanningListAlertsForOrgError,
    TData
  >({
    ...codeScanningListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningListAlertsForOrg = <
  TData = CodeScanningListAlertsForOrgResponse,
>(
  variables: CodeScanningListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForOrgResponse,
      CodeScanningListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsForOrgResponse,
    CodeScanningListAlertsForOrgError,
    TData
  >({
    ...codeScanningListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesListInOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesListInOrganizationQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesListInOrganizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesListInOrganizationResponse = {
  codespaces: Schemas.Codespace[];
  total_count: number;
};

export type CodespacesListInOrganizationVariables = {
  pathParams: CodespacesListInOrganizationPathParams;
  queryParams?: CodespacesListInOrganizationQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesListInOrganization = (
  variables: CodespacesListInOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListInOrganizationResponse,
    CodespacesListInOrganizationError,
    undefined,
    {},
    CodespacesListInOrganizationQueryParams,
    CodespacesListInOrganizationPathParams
  >({ url: "/orgs/{org}/codespaces", method: "get", ...variables, signal });

/**
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesListInOrganizationQuery = (
  variables: CodespacesListInOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListInOrganizationResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/codespaces",
    operationId: "codespacesListInOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListInOrganization(variables, signal),
});

/**
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesListInOrganization = <
  TData = CodespacesListInOrganizationResponse,
>(
  variables: CodespacesListInOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListInOrganizationResponse,
      CodespacesListInOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListInOrganizationResponse,
    CodespacesListInOrganizationError,
    TData
  >({
    ...codespacesListInOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the codespaces associated to a specified organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesListInOrganization = <
  TData = CodespacesListInOrganizationResponse,
>(
  variables: CodespacesListInOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListInOrganizationResponse,
      CodespacesListInOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListInOrganizationResponse,
    CodespacesListInOrganizationError,
    TData
  >({
    ...codespacesListInOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesSetCodespacesBillingPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesSetCodespacesBillingError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesSetCodespacesBillingRequestBody = {
  /**
   * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
   *
   * @maxItems 100
   */
  selected_usernames?: string[];
  /**
   * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
   */
  visibility:
    | "disabled"
    | "selected_members"
    | "all_members"
    | "all_members_and_outside_collaborators";
};

export type CodespacesSetCodespacesBillingVariables = {
  body: CodespacesSetCodespacesBillingRequestBody;
  pathParams: CodespacesSetCodespacesBillingPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesSetCodespacesBilling = (
  variables: CodespacesSetCodespacesBillingVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesSetCodespacesBillingError,
    CodespacesSetCodespacesBillingRequestBody,
    {},
    {},
    CodespacesSetCodespacesBillingPathParams
  >({
    url: "/orgs/{org}/codespaces/billing",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesSetCodespacesBilling = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesSetCodespacesBillingError,
      CodespacesSetCodespacesBillingVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesSetCodespacesBillingError,
    CodespacesSetCodespacesBillingVariables
  >({
    mutationFn: (variables: CodespacesSetCodespacesBillingVariables) =>
      fetchCodespacesSetCodespacesBilling({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodespacesDeleteCodespacesBillingUsersPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesDeleteCodespacesBillingUsersError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesDeleteCodespacesBillingUsersRequestBody = {
  /**
   * The usernames of the organization members whose codespaces should not be billed to the organization.
   *
   * @maxItems 100
   */
  selected_usernames: string[];
};

export type CodespacesDeleteCodespacesBillingUsersVariables = {
  body: CodespacesDeleteCodespacesBillingUsersRequestBody;
  pathParams: CodespacesDeleteCodespacesBillingUsersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Codespaces for the specified users will no longer be billed to the organization.
 * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesDeleteCodespacesBillingUsers = (
  variables: CodespacesDeleteCodespacesBillingUsersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesDeleteCodespacesBillingUsersError,
    CodespacesDeleteCodespacesBillingUsersRequestBody,
    {},
    {},
    CodespacesDeleteCodespacesBillingUsersPathParams
  >({
    url: "/orgs/{org}/codespaces/billing/selected_users",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Codespaces for the specified users will no longer be billed to the organization.
 * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesDeleteCodespacesBillingUsers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesDeleteCodespacesBillingUsersError,
      CodespacesDeleteCodespacesBillingUsersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesDeleteCodespacesBillingUsersError,
    CodespacesDeleteCodespacesBillingUsersVariables
  >({
    mutationFn: (variables: CodespacesDeleteCodespacesBillingUsersVariables) =>
      fetchCodespacesDeleteCodespacesBillingUsers({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesSetCodespacesBillingUsersPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesSetCodespacesBillingUsersError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesSetCodespacesBillingUsersRequestBody = {
  /**
   * The usernames of the organization members whose codespaces be billed to the organization.
   *
   * @maxItems 100
   */
  selected_usernames: string[];
};

export type CodespacesSetCodespacesBillingUsersVariables = {
  body: CodespacesSetCodespacesBillingUsersRequestBody;
  pathParams: CodespacesSetCodespacesBillingUsersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Codespaces for the specified users will be billed to the organization.
 * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesSetCodespacesBillingUsers = (
  variables: CodespacesSetCodespacesBillingUsersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesSetCodespacesBillingUsersError,
    CodespacesSetCodespacesBillingUsersRequestBody,
    {},
    {},
    CodespacesSetCodespacesBillingUsersPathParams
  >({
    url: "/orgs/{org}/codespaces/billing/selected_users",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Codespaces for the specified users will be billed to the organization.
 * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesSetCodespacesBillingUsers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesSetCodespacesBillingUsersError,
      CodespacesSetCodespacesBillingUsersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesSetCodespacesBillingUsersError,
    CodespacesSetCodespacesBillingUsersVariables
  >({
    mutationFn: (variables: CodespacesSetCodespacesBillingUsersVariables) =>
      fetchCodespacesSetCodespacesBillingUsers({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesListOrgSecretsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesListOrgSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesListOrgSecretsError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesListOrgSecretsResponse = {
  secrets: Schemas.CodespacesOrgSecret[];
  total_count: number;
};

export type CodespacesListOrgSecretsVariables = {
  pathParams: CodespacesListOrgSecretsPathParams;
  queryParams?: CodespacesListOrgSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesListOrgSecrets = (
  variables: CodespacesListOrgSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListOrgSecretsResponse,
    CodespacesListOrgSecretsError,
    undefined,
    {},
    CodespacesListOrgSecretsQueryParams,
    CodespacesListOrgSecretsPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesListOrgSecretsQuery = (
  variables: CodespacesListOrgSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListOrgSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/codespaces/secrets",
    operationId: "codespacesListOrgSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListOrgSecrets(variables, signal),
});

/**
 * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesListOrgSecrets = <
  TData = CodespacesListOrgSecretsResponse,
>(
  variables: CodespacesListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListOrgSecretsResponse,
      CodespacesListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListOrgSecretsResponse,
    CodespacesListOrgSecretsError,
    TData
  >({
    ...codespacesListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesListOrgSecrets = <
  TData = CodespacesListOrgSecretsResponse,
>(
  variables: CodespacesListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListOrgSecretsResponse,
      CodespacesListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListOrgSecretsResponse,
    CodespacesListOrgSecretsError,
    TData
  >({
    ...codespacesListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesGetOrgPublicKeyPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type CodespacesGetOrgPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetOrgPublicKeyVariables = {
  pathParams: CodespacesGetOrgPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesGetOrgPublicKey = (
  variables: CodespacesGetOrgPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespacesPublicKey,
    CodespacesGetOrgPublicKeyError,
    undefined,
    {},
    {},
    CodespacesGetOrgPublicKeyPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesGetOrgPublicKeyQuery = (
  variables: CodespacesGetOrgPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespacesPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/codespaces/secrets/public-key",
    operationId: "codespacesGetOrgPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetOrgPublicKey(variables, signal),
});

/**
 * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesGetOrgPublicKey = <
  TData = Schemas.CodespacesPublicKey,
>(
  variables: CodespacesGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesPublicKey,
      CodespacesGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespacesPublicKey,
    CodespacesGetOrgPublicKeyError,
    TData
  >({
    ...codespacesGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesGetOrgPublicKey = <
  TData = Schemas.CodespacesPublicKey,
>(
  variables: CodespacesGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesPublicKey,
      CodespacesGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespacesPublicKey,
    CodespacesGetOrgPublicKeyError,
    TData
  >({
    ...codespacesGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesDeleteOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesDeleteOrgSecretError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type CodespacesDeleteOrgSecretVariables = {
  pathParams: CodespacesDeleteOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesDeleteOrgSecret = (
  variables: CodespacesDeleteOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesDeleteOrgSecretError,
    undefined,
    {},
    {},
    CodespacesDeleteOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesDeleteOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesDeleteOrgSecretError,
      CodespacesDeleteOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesDeleteOrgSecretError,
    CodespacesDeleteOrgSecretVariables
  >({
    mutationFn: (variables: CodespacesDeleteOrgSecretVariables) =>
      fetchCodespacesDeleteOrgSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodespacesGetOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesGetOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetOrgSecretVariables = {
  pathParams: CodespacesGetOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets an organization secret without revealing its encrypted value.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesGetOrgSecret = (
  variables: CodespacesGetOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespacesOrgSecret,
    CodespacesGetOrgSecretError,
    undefined,
    {},
    {},
    CodespacesGetOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets an organization secret without revealing its encrypted value.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesGetOrgSecretQuery = (
  variables: CodespacesGetOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespacesOrgSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/codespaces/secrets/{secretName}",
    operationId: "codespacesGetOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetOrgSecret(variables, signal),
});

/**
 * Gets an organization secret without revealing its encrypted value.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesGetOrgSecret = <
  TData = Schemas.CodespacesOrgSecret,
>(
  variables: CodespacesGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesOrgSecret,
      CodespacesGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespacesOrgSecret,
    CodespacesGetOrgSecretError,
    TData
  >({
    ...codespacesGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets an organization secret without revealing its encrypted value.
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesGetOrgSecret = <TData = Schemas.CodespacesOrgSecret>(
  variables: CodespacesGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesOrgSecret,
      CodespacesGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespacesOrgSecret,
    CodespacesGetOrgSecretError,
    TData
  >({
    ...codespacesGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCreateOrUpdateOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesCreateOrUpdateOrgSecretError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type CodespacesCreateOrUpdateOrgSecretRequestBody = {
  /**
   * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * The ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /**
   * An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: number[];
  /**
   * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
   */
  visibility: "all" | "private" | "selected";
};

export type CodespacesCreateOrUpdateOrgSecretVariables = {
  body: CodespacesCreateOrUpdateOrgSecretRequestBody;
  pathParams: CodespacesCreateOrUpdateOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchCodespacesCreateOrUpdateOrgSecret = (
  variables: CodespacesCreateOrUpdateOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateOrgSecretError,
    CodespacesCreateOrUpdateOrgSecretRequestBody,
    {},
    {},
    CodespacesCreateOrUpdateOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useCodespacesCreateOrUpdateOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      CodespacesCreateOrUpdateOrgSecretError,
      CodespacesCreateOrUpdateOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateOrgSecretError,
    CodespacesCreateOrUpdateOrgSecretVariables
  >({
    mutationFn: (variables: CodespacesCreateOrUpdateOrgSecretVariables) =>
      fetchCodespacesCreateOrUpdateOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesListSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesListSelectedReposForOrgSecretQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type CodespacesListSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type CodespacesListSelectedReposForOrgSecretResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type CodespacesListSelectedReposForOrgSecretVariables = {
  pathParams: CodespacesListSelectedReposForOrgSecretPathParams;
  queryParams?: CodespacesListSelectedReposForOrgSecretQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesListSelectedReposForOrgSecret = (
  variables: CodespacesListSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListSelectedReposForOrgSecretResponse,
    CodespacesListSelectedReposForOrgSecretError,
    undefined,
    {},
    CodespacesListSelectedReposForOrgSecretQueryParams,
    CodespacesListSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesListSelectedReposForOrgSecretQuery = (
  variables: CodespacesListSelectedReposForOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListSelectedReposForOrgSecretResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/codespaces/secrets/{secretName}/repositories",
    operationId: "codespacesListSelectedReposForOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListSelectedReposForOrgSecret(variables, signal),
});

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesListSelectedReposForOrgSecret = <
  TData = CodespacesListSelectedReposForOrgSecretResponse,
>(
  variables: CodespacesListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListSelectedReposForOrgSecretResponse,
      CodespacesListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListSelectedReposForOrgSecretResponse,
    CodespacesListSelectedReposForOrgSecretError,
    TData
  >({
    ...codespacesListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesListSelectedReposForOrgSecret = <
  TData = CodespacesListSelectedReposForOrgSecretResponse,
>(
  variables: CodespacesListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListSelectedReposForOrgSecretResponse,
      CodespacesListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListSelectedReposForOrgSecretResponse,
    CodespacesListSelectedReposForOrgSecretError,
    TData
  >({
    ...codespacesListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesSetSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesSetSelectedReposForOrgSecretError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type CodespacesSetSelectedReposForOrgSecretRequestBody = {
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids: number[];
};

export type CodespacesSetSelectedReposForOrgSecretVariables = {
  body: CodespacesSetSelectedReposForOrgSecretRequestBody;
  pathParams: CodespacesSetSelectedReposForOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesSetSelectedReposForOrgSecret = (
  variables: CodespacesSetSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesSetSelectedReposForOrgSecretError,
    CodespacesSetSelectedReposForOrgSecretRequestBody,
    {},
    {},
    CodespacesSetSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesSetSelectedReposForOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesSetSelectedReposForOrgSecretError,
      CodespacesSetSelectedReposForOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesSetSelectedReposForOrgSecretError,
    CodespacesSetSelectedReposForOrgSecretVariables
  >({
    mutationFn: (variables: CodespacesSetSelectedReposForOrgSecretVariables) =>
      fetchCodespacesSetSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesRemoveSelectedRepoFromOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type CodespacesRemoveSelectedRepoFromOrgSecretError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type CodespacesRemoveSelectedRepoFromOrgSecretVariables = {
  pathParams: CodespacesRemoveSelectedRepoFromOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesRemoveSelectedRepoFromOrgSecret = (
  variables: CodespacesRemoveSelectedRepoFromOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesRemoveSelectedRepoFromOrgSecretError,
    undefined,
    {},
    {},
    CodespacesRemoveSelectedRepoFromOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesRemoveSelectedRepoFromOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesRemoveSelectedRepoFromOrgSecretError,
      CodespacesRemoveSelectedRepoFromOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesRemoveSelectedRepoFromOrgSecretError,
    CodespacesRemoveSelectedRepoFromOrgSecretVariables
  >({
    mutationFn: (
      variables: CodespacesRemoveSelectedRepoFromOrgSecretVariables,
    ) =>
      fetchCodespacesRemoveSelectedRepoFromOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesAddSelectedRepoToOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type CodespacesAddSelectedRepoToOrgSecretError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type CodespacesAddSelectedRepoToOrgSecretVariables = {
  pathParams: CodespacesAddSelectedRepoToOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesAddSelectedRepoToOrgSecret = (
  variables: CodespacesAddSelectedRepoToOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesAddSelectedRepoToOrgSecretError,
    undefined,
    {},
    {},
    CodespacesAddSelectedRepoToOrgSecretPathParams
  >({
    url: "/orgs/{org}/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesAddSelectedRepoToOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesAddSelectedRepoToOrgSecretError,
      CodespacesAddSelectedRepoToOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesAddSelectedRepoToOrgSecretError,
    CodespacesAddSelectedRepoToOrgSecretVariables
  >({
    mutationFn: (variables: CodespacesAddSelectedRepoToOrgSecretVariables) =>
      fetchCodespacesAddSelectedRepoToOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type DependabotListAlertsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type DependabotListAlertsForOrgQueryParams = {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   *
   * Can be: `dismissed`, `fixed`, `open`
   */
  state?: string;
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   *
   * Can be: `low`, `medium`, `high`, `critical`
   */
  severity?: string;
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   *
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
  ecosystem?: string;
  /**
   * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
   */
  package?: string;
  /**
   * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
   */
  scope?: "development" | "runtime";
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  after?: string;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   *
   * @default 30
   * @maximum 100
   * @minimum 1
   */
  first?: number;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   *
   * @maximum 100
   * @minimum 1
   */
  last?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type DependabotListAlertsForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type DependabotListAlertsForOrgResponse =
  Schemas.DependabotAlertWithRepository[];

export type DependabotListAlertsForOrgVariables = {
  pathParams: DependabotListAlertsForOrgPathParams;
  queryParams?: DependabotListAlertsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists Dependabot alerts for an organization.
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const fetchDependabotListAlertsForOrg = (
  variables: DependabotListAlertsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListAlertsForOrgResponse,
    DependabotListAlertsForOrgError,
    undefined,
    {},
    DependabotListAlertsForOrgQueryParams,
    DependabotListAlertsForOrgPathParams
  >({
    url: "/orgs/{org}/dependabot/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists Dependabot alerts for an organization.
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const dependabotListAlertsForOrgQuery = (
  variables: DependabotListAlertsForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListAlertsForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/dependabot/alerts",
    operationId: "dependabotListAlertsForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListAlertsForOrg(variables, signal),
});

/**
 * Lists Dependabot alerts for an organization.
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useSuspenseDependabotListAlertsForOrg = <
  TData = DependabotListAlertsForOrgResponse,
>(
  variables: DependabotListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForOrgResponse,
      DependabotListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListAlertsForOrgResponse,
    DependabotListAlertsForOrgError,
    TData
  >({
    ...dependabotListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists Dependabot alerts for an organization.
 *
 * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useDependabotListAlertsForOrg = <
  TData = DependabotListAlertsForOrgResponse,
>(
  variables: DependabotListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForOrgResponse,
      DependabotListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListAlertsForOrgResponse,
    DependabotListAlertsForOrgError,
    TData
  >({
    ...dependabotListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotListOrgSecretsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type DependabotListOrgSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type DependabotListOrgSecretsError = Fetcher.ErrorWrapper<undefined>;

export type DependabotListOrgSecretsResponse = {
  secrets: Schemas.OrganizationDependabotSecret[];
  total_count: number;
};

export type DependabotListOrgSecretsVariables = {
  pathParams: DependabotListOrgSecretsPathParams;
  queryParams?: DependabotListOrgSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotListOrgSecrets = (
  variables: DependabotListOrgSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListOrgSecretsResponse,
    DependabotListOrgSecretsError,
    undefined,
    {},
    DependabotListOrgSecretsQueryParams,
    DependabotListOrgSecretsPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const dependabotListOrgSecretsQuery = (
  variables: DependabotListOrgSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListOrgSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/dependabot/secrets",
    operationId: "dependabotListOrgSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListOrgSecrets(variables, signal),
});

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useSuspenseDependabotListOrgSecrets = <
  TData = DependabotListOrgSecretsResponse,
>(
  variables: DependabotListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListOrgSecretsResponse,
      DependabotListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListOrgSecretsResponse,
    DependabotListOrgSecretsError,
    TData
  >({
    ...dependabotListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotListOrgSecrets = <
  TData = DependabotListOrgSecretsResponse,
>(
  variables: DependabotListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListOrgSecretsResponse,
      DependabotListOrgSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListOrgSecretsResponse,
    DependabotListOrgSecretsError,
    TData
  >({
    ...dependabotListOrgSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotGetOrgPublicKeyPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type DependabotGetOrgPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type DependabotGetOrgPublicKeyVariables = {
  pathParams: DependabotGetOrgPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotGetOrgPublicKey = (
  variables: DependabotGetOrgPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependabotPublicKey,
    DependabotGetOrgPublicKeyError,
    undefined,
    {},
    {},
    DependabotGetOrgPublicKeyPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const dependabotGetOrgPublicKeyQuery = (
  variables: DependabotGetOrgPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DependabotPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/dependabot/secrets/public-key",
    operationId: "dependabotGetOrgPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotGetOrgPublicKey(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useSuspenseDependabotGetOrgPublicKey = <
  TData = Schemas.DependabotPublicKey,
>(
  variables: DependabotGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotPublicKey,
      DependabotGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DependabotPublicKey,
    DependabotGetOrgPublicKeyError,
    TData
  >({
    ...dependabotGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotGetOrgPublicKey = <
  TData = Schemas.DependabotPublicKey,
>(
  variables: DependabotGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotPublicKey,
      DependabotGetOrgPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DependabotPublicKey,
    DependabotGetOrgPublicKeyError,
    TData
  >({
    ...dependabotGetOrgPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotDeleteOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotDeleteOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type DependabotDeleteOrgSecretVariables = {
  pathParams: DependabotDeleteOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotDeleteOrgSecret = (
  variables: DependabotDeleteOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    DependabotDeleteOrgSecretError,
    undefined,
    {},
    {},
    DependabotDeleteOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotDeleteOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DependabotDeleteOrgSecretError,
      DependabotDeleteOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    DependabotDeleteOrgSecretError,
    DependabotDeleteOrgSecretVariables
  >({
    mutationFn: (variables: DependabotDeleteOrgSecretVariables) =>
      fetchDependabotDeleteOrgSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DependabotGetOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotGetOrgSecretError = Fetcher.ErrorWrapper<undefined>;

export type DependabotGetOrgSecretVariables = {
  pathParams: DependabotGetOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotGetOrgSecret = (
  variables: DependabotGetOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationDependabotSecret,
    DependabotGetOrgSecretError,
    undefined,
    {},
    {},
    DependabotGetOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const dependabotGetOrgSecretQuery = (
  variables: DependabotGetOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrganizationDependabotSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/dependabot/secrets/{secretName}",
    operationId: "dependabotGetOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotGetOrgSecret(variables, signal),
});

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useSuspenseDependabotGetOrgSecret = <
  TData = Schemas.OrganizationDependabotSecret,
>(
  variables: DependabotGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationDependabotSecret,
      DependabotGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrganizationDependabotSecret,
    DependabotGetOrgSecretError,
    TData
  >({
    ...dependabotGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotGetOrgSecret = <
  TData = Schemas.OrganizationDependabotSecret,
>(
  variables: DependabotGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationDependabotSecret,
      DependabotGetOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationDependabotSecret,
    DependabotGetOrgSecretError,
    TData
  >({
    ...dependabotGetOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotCreateOrUpdateOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotCreateOrUpdateOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotCreateOrUpdateOrgSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: string[];
  /**
   * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
   */
  visibility: "all" | "private" | "selected";
};

export type DependabotCreateOrUpdateOrgSecretVariables = {
  body: DependabotCreateOrUpdateOrgSecretRequestBody;
  pathParams: DependabotCreateOrUpdateOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchDependabotCreateOrUpdateOrgSecret = (
  variables: DependabotCreateOrUpdateOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    DependabotCreateOrUpdateOrgSecretError,
    DependabotCreateOrUpdateOrgSecretRequestBody,
    {},
    {},
    DependabotCreateOrUpdateOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useDependabotCreateOrUpdateOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      DependabotCreateOrUpdateOrgSecretError,
      DependabotCreateOrUpdateOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    DependabotCreateOrUpdateOrgSecretError,
    DependabotCreateOrUpdateOrgSecretVariables
  >({
    mutationFn: (variables: DependabotCreateOrUpdateOrgSecretVariables) =>
      fetchDependabotCreateOrUpdateOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type DependabotListSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotListSelectedReposForOrgSecretQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type DependabotListSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotListSelectedReposForOrgSecretResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type DependabotListSelectedReposForOrgSecretVariables = {
  pathParams: DependabotListSelectedReposForOrgSecretPathParams;
  queryParams?: DependabotListSelectedReposForOrgSecretQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotListSelectedReposForOrgSecret = (
  variables: DependabotListSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListSelectedReposForOrgSecretResponse,
    DependabotListSelectedReposForOrgSecretError,
    undefined,
    {},
    DependabotListSelectedReposForOrgSecretQueryParams,
    DependabotListSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const dependabotListSelectedReposForOrgSecretQuery = (
  variables: DependabotListSelectedReposForOrgSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListSelectedReposForOrgSecretResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/dependabot/secrets/{secretName}/repositories",
    operationId: "dependabotListSelectedReposForOrgSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListSelectedReposForOrgSecret(variables, signal),
});

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useSuspenseDependabotListSelectedReposForOrgSecret = <
  TData = DependabotListSelectedReposForOrgSecretResponse,
>(
  variables: DependabotListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListSelectedReposForOrgSecretResponse,
      DependabotListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListSelectedReposForOrgSecretResponse,
    DependabotListSelectedReposForOrgSecretError,
    TData
  >({
    ...dependabotListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotListSelectedReposForOrgSecret = <
  TData = DependabotListSelectedReposForOrgSecretResponse,
>(
  variables: DependabotListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListSelectedReposForOrgSecretResponse,
      DependabotListSelectedReposForOrgSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListSelectedReposForOrgSecretResponse,
    DependabotListSelectedReposForOrgSecretError,
    TData
  >({
    ...dependabotListSelectedReposForOrgSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotSetSelectedReposForOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotSetSelectedReposForOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotSetSelectedReposForOrgSecretRequestBody = {
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids: number[];
};

export type DependabotSetSelectedReposForOrgSecretVariables = {
  body: DependabotSetSelectedReposForOrgSecretRequestBody;
  pathParams: DependabotSetSelectedReposForOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotSetSelectedReposForOrgSecret = (
  variables: DependabotSetSelectedReposForOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    DependabotSetSelectedReposForOrgSecretError,
    DependabotSetSelectedReposForOrgSecretRequestBody,
    {},
    {},
    DependabotSetSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotSetSelectedReposForOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DependabotSetSelectedReposForOrgSecretError,
      DependabotSetSelectedReposForOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    DependabotSetSelectedReposForOrgSecretError,
    DependabotSetSelectedReposForOrgSecretVariables
  >({
    mutationFn: (variables: DependabotSetSelectedReposForOrgSecretVariables) =>
      fetchDependabotSetSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type DependabotRemoveSelectedRepoFromOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type DependabotRemoveSelectedRepoFromOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotRemoveSelectedRepoFromOrgSecretVariables = {
  pathParams: DependabotRemoveSelectedRepoFromOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotRemoveSelectedRepoFromOrgSecret = (
  variables: DependabotRemoveSelectedRepoFromOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    DependabotRemoveSelectedRepoFromOrgSecretError,
    undefined,
    {},
    {},
    DependabotRemoveSelectedRepoFromOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotRemoveSelectedRepoFromOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DependabotRemoveSelectedRepoFromOrgSecretError,
      DependabotRemoveSelectedRepoFromOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    DependabotRemoveSelectedRepoFromOrgSecretError,
    DependabotRemoveSelectedRepoFromOrgSecretVariables
  >({
    mutationFn: (
      variables: DependabotRemoveSelectedRepoFromOrgSecretVariables,
    ) =>
      fetchDependabotRemoveSelectedRepoFromOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type DependabotAddSelectedRepoToOrgSecretPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type DependabotAddSelectedRepoToOrgSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotAddSelectedRepoToOrgSecretVariables = {
  pathParams: DependabotAddSelectedRepoToOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const fetchDependabotAddSelectedRepoToOrgSecret = (
  variables: DependabotAddSelectedRepoToOrgSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    DependabotAddSelectedRepoToOrgSecretError,
    undefined,
    {},
    {},
    DependabotAddSelectedRepoToOrgSecretPathParams
  >({
    url: "/orgs/{org}/dependabot/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
 */
export const useDependabotAddSelectedRepoToOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DependabotAddSelectedRepoToOrgSecretError,
      DependabotAddSelectedRepoToOrgSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    DependabotAddSelectedRepoToOrgSecretError,
    DependabotAddSelectedRepoToOrgSecretVariables
  >({
    mutationFn: (variables: DependabotAddSelectedRepoToOrgSecretVariables) =>
      fetchDependabotAddSelectedRepoToOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActivityListPublicOrgEventsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActivityListPublicOrgEventsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicOrgEventsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListPublicOrgEventsResponse = Schemas.Event[];

export type ActivityListPublicOrgEventsVariables = {
  pathParams: ActivityListPublicOrgEventsPathParams;
  queryParams?: ActivityListPublicOrgEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicOrgEvents = (
  variables: ActivityListPublicOrgEventsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListPublicOrgEventsResponse,
    ActivityListPublicOrgEventsError,
    undefined,
    {},
    ActivityListPublicOrgEventsQueryParams,
    ActivityListPublicOrgEventsPathParams
  >({ url: "/orgs/{org}/events", method: "get", ...variables, signal });

export const activityListPublicOrgEventsQuery = (
  variables: ActivityListPublicOrgEventsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListPublicOrgEventsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/events",
    operationId: "activityListPublicOrgEvents",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListPublicOrgEvents(variables, signal),
});

export const useSuspenseActivityListPublicOrgEvents = <
  TData = ActivityListPublicOrgEventsResponse,
>(
  variables: ActivityListPublicOrgEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicOrgEventsResponse,
      ActivityListPublicOrgEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListPublicOrgEventsResponse,
    ActivityListPublicOrgEventsError,
    TData
  >({
    ...activityListPublicOrgEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityListPublicOrgEvents = <
  TData = ActivityListPublicOrgEventsResponse,
>(
  variables: ActivityListPublicOrgEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicOrgEventsResponse,
      ActivityListPublicOrgEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicOrgEventsResponse,
    ActivityListPublicOrgEventsError,
    TData
  >({
    ...activityListPublicOrgEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListFailedInvitationsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListFailedInvitationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListFailedInvitationsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListFailedInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListFailedInvitationsVariables = {
  pathParams: OrgsListFailedInvitationsPathParams;
  queryParams?: OrgsListFailedInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const fetchOrgsListFailedInvitations = (
  variables: OrgsListFailedInvitationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListFailedInvitationsResponse,
    OrgsListFailedInvitationsError,
    undefined,
    {},
    OrgsListFailedInvitationsQueryParams,
    OrgsListFailedInvitationsPathParams
  >({
    url: "/orgs/{org}/failed_invitations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const orgsListFailedInvitationsQuery = (
  variables: OrgsListFailedInvitationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListFailedInvitationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/failed_invitations",
    operationId: "orgsListFailedInvitations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListFailedInvitations(variables, signal),
});

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const useSuspenseOrgsListFailedInvitations = <
  TData = OrgsListFailedInvitationsResponse,
>(
  variables: OrgsListFailedInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListFailedInvitationsResponse,
      OrgsListFailedInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListFailedInvitationsResponse,
    OrgsListFailedInvitationsError,
    TData
  >({
    ...orgsListFailedInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const useOrgsListFailedInvitations = <
  TData = OrgsListFailedInvitationsResponse,
>(
  variables: OrgsListFailedInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListFailedInvitationsResponse,
      OrgsListFailedInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListFailedInvitationsResponse,
    OrgsListFailedInvitationsError,
    TData
  >({
    ...orgsListFailedInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListWebhooksPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListWebhooksQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListWebhooksError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListWebhooksResponse = Schemas.OrgHook[];

export type OrgsListWebhooksVariables = {
  pathParams: OrgsListWebhooksPathParams;
  queryParams?: OrgsListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListWebhooks = (
  variables: OrgsListWebhooksVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListWebhooksResponse,
    OrgsListWebhooksError,
    undefined,
    {},
    OrgsListWebhooksQueryParams,
    OrgsListWebhooksPathParams
  >({ url: "/orgs/{org}/hooks", method: "get", ...variables, signal });

export const orgsListWebhooksQuery = (
  variables: OrgsListWebhooksVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListWebhooksResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/hooks",
    operationId: "orgsListWebhooks",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListWebhooks(variables, signal),
});

export const useSuspenseOrgsListWebhooks = <TData = OrgsListWebhooksResponse>(
  variables: OrgsListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhooksResponse,
      OrgsListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListWebhooksResponse,
    OrgsListWebhooksError,
    TData
  >({
    ...orgsListWebhooksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useOrgsListWebhooks = <TData = OrgsListWebhooksResponse>(
  variables: OrgsListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhooksResponse,
      OrgsListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListWebhooksResponse,
    OrgsListWebhooksError,
    TData
  >({
    ...orgsListWebhooksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsCreateWebhookPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsCreateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCreateWebhookRequestBody = {
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
   */
  config: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /**
     * @example "password"
     */
    password?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
    /**
     * @example "kdaigle"
     */
    username?: string;
  };
  /**
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
   *
   * @default push
   */
  events?: string[];
  /**
   * Must be passed as "web".
   */
  name: string;
};

export type OrgsCreateWebhookVariables = {
  body: OrgsCreateWebhookRequestBody;
  pathParams: OrgsCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const fetchOrgsCreateWebhook = (
  variables: OrgsCreateWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsCreateWebhookError,
    OrgsCreateWebhookRequestBody,
    {},
    {},
    OrgsCreateWebhookPathParams
  >({ url: "/orgs/{org}/hooks", method: "post", ...variables, signal });

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const useOrgsCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      OrgsCreateWebhookError,
      OrgsCreateWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    OrgsCreateWebhookError,
    OrgsCreateWebhookVariables
  >({
    mutationFn: (variables: OrgsCreateWebhookVariables) =>
      fetchOrgsCreateWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsDeleteWebhookPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsDeleteWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsDeleteWebhookVariables = {
  pathParams: OrgsDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsDeleteWebhook = (
  variables: OrgsDeleteWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsDeleteWebhookError,
    undefined,
    {},
    {},
    OrgsDeleteWebhookPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrgsDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsDeleteWebhookError,
      OrgsDeleteWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsDeleteWebhookError,
    OrgsDeleteWebhookVariables
  >({
    mutationFn: (variables: OrgsDeleteWebhookVariables) =>
      fetchOrgsDeleteWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsGetWebhookPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsGetWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsGetWebhookVariables = {
  pathParams: OrgsGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsGetWebhook = (
  variables: OrgsGetWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsGetWebhookError,
    undefined,
    {},
    {},
    OrgsGetWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}", method: "get", ...variables, signal });

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const orgsGetWebhookQuery = (
  variables: OrgsGetWebhookVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.OrgHook>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/hooks/{hookId}",
    operationId: "orgsGetWebhook",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGetWebhook(variables, signal),
});

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const useSuspenseOrgsGetWebhook = <TData = Schemas.OrgHook>(
  variables: OrgsGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrgHook, OrgsGetWebhookError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrgHook,
    OrgsGetWebhookError,
    TData
  >({
    ...orgsGetWebhookQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsGetWebhook = <TData = Schemas.OrgHook>(
  variables: OrgsGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrgHook, OrgsGetWebhookError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.OrgHook, OrgsGetWebhookError, TData>({
    ...orgsGetWebhookQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsUpdateWebhookPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsUpdateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsUpdateWebhookRequestBody = {
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
   */
  config?: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /**
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /**
   * @example "web"
   */
  name?: string;
};

export type OrgsUpdateWebhookVariables = {
  body?: OrgsUpdateWebhookRequestBody;
  pathParams: OrgsUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsUpdateWebhook = (
  variables: OrgsUpdateWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsUpdateWebhookError,
    OrgsUpdateWebhookRequestBody,
    {},
    {},
    OrgsUpdateWebhookPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      OrgsUpdateWebhookError,
      OrgsUpdateWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    OrgsUpdateWebhookError,
    OrgsUpdateWebhookVariables
  >({
    mutationFn: (variables: OrgsUpdateWebhookVariables) =>
      fetchOrgsUpdateWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsGetWebhookConfigForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsGetWebhookConfigForOrgError = Fetcher.ErrorWrapper<undefined>;

export type OrgsGetWebhookConfigForOrgVariables = {
  pathParams: OrgsGetWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const fetchOrgsGetWebhookConfigForOrg = (
  variables: OrgsGetWebhookConfigForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    OrgsGetWebhookConfigForOrgError,
    undefined,
    {},
    {},
    OrgsGetWebhookConfigForOrgPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/config",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const orgsGetWebhookConfigForOrgQuery = (
  variables: OrgsGetWebhookConfigForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WebhookConfig>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/hooks/{hookId}/config",
    operationId: "orgsGetWebhookConfigForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGetWebhookConfigForOrg(variables, signal),
});

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const useSuspenseOrgsGetWebhookConfigForOrg = <
  TData = Schemas.WebhookConfig,
>(
  variables: OrgsGetWebhookConfigForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      OrgsGetWebhookConfigForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WebhookConfig,
    OrgsGetWebhookConfigForOrgError,
    TData
  >({
    ...orgsGetWebhookConfigForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const useOrgsGetWebhookConfigForOrg = <TData = Schemas.WebhookConfig>(
  variables: OrgsGetWebhookConfigForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      OrgsGetWebhookConfigForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    OrgsGetWebhookConfigForOrgError,
    TData
  >({
    ...orgsGetWebhookConfigForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsUpdateWebhookConfigForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsUpdateWebhookConfigForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsUpdateWebhookConfigForOrgRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type OrgsUpdateWebhookConfigForOrgVariables = {
  body?: OrgsUpdateWebhookConfigForOrgRequestBody;
  pathParams: OrgsUpdateWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const fetchOrgsUpdateWebhookConfigForOrg = (
  variables: OrgsUpdateWebhookConfigForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    OrgsUpdateWebhookConfigForOrgError,
    OrgsUpdateWebhookConfigForOrgRequestBody,
    {},
    {},
    OrgsUpdateWebhookConfigForOrgPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const useOrgsUpdateWebhookConfigForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      OrgsUpdateWebhookConfigForOrgError,
      OrgsUpdateWebhookConfigForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    OrgsUpdateWebhookConfigForOrgError,
    OrgsUpdateWebhookConfigForOrgVariables
  >({
    mutationFn: (variables: OrgsUpdateWebhookConfigForOrgVariables) =>
      fetchOrgsUpdateWebhookConfigForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsListWebhookDeliveriesPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsListWebhookDeliveriesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
   */
  cursor?: string;
  redelivery?: boolean;
};

export type OrgsListWebhookDeliveriesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsListWebhookDeliveriesResponse = Schemas.HookDeliveryItem[];

export type OrgsListWebhookDeliveriesVariables = {
  pathParams: OrgsListWebhookDeliveriesPathParams;
  queryParams?: OrgsListWebhookDeliveriesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const fetchOrgsListWebhookDeliveries = (
  variables: OrgsListWebhookDeliveriesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListWebhookDeliveriesResponse,
    OrgsListWebhookDeliveriesError,
    undefined,
    {},
    OrgsListWebhookDeliveriesQueryParams,
    OrgsListWebhookDeliveriesPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/deliveries",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const orgsListWebhookDeliveriesQuery = (
  variables: OrgsListWebhookDeliveriesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListWebhookDeliveriesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/hooks/{hookId}/deliveries",
    operationId: "orgsListWebhookDeliveries",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListWebhookDeliveries(variables, signal),
});

/**
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const useSuspenseOrgsListWebhookDeliveries = <
  TData = OrgsListWebhookDeliveriesResponse,
>(
  variables: OrgsListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhookDeliveriesResponse,
      OrgsListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListWebhookDeliveriesResponse,
    OrgsListWebhookDeliveriesError,
    TData
  >({
    ...orgsListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 */
export const useOrgsListWebhookDeliveries = <
  TData = OrgsListWebhookDeliveriesResponse,
>(
  variables: OrgsListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhookDeliveriesResponse,
      OrgsListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListWebhookDeliveriesResponse,
    OrgsListWebhookDeliveriesError,
    TData
  >({
    ...orgsListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsGetWebhookDeliveryPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
  deliveryId: number;
};

export type OrgsGetWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsGetWebhookDeliveryVariables = {
  pathParams: OrgsGetWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a delivery for a webhook configured in an organization.
 */
export const fetchOrgsGetWebhookDelivery = (
  variables: OrgsGetWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.HookDelivery,
    OrgsGetWebhookDeliveryError,
    undefined,
    {},
    {},
    OrgsGetWebhookDeliveryPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a delivery for a webhook configured in an organization.
 */
export const orgsGetWebhookDeliveryQuery = (
  variables: OrgsGetWebhookDeliveryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.HookDelivery>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}",
    operationId: "orgsGetWebhookDelivery",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGetWebhookDelivery(variables, signal),
});

/**
 * Returns a delivery for a webhook configured in an organization.
 */
export const useSuspenseOrgsGetWebhookDelivery = <TData = Schemas.HookDelivery>(
  variables: OrgsGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      OrgsGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.HookDelivery,
    OrgsGetWebhookDeliveryError,
    TData
  >({
    ...orgsGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a delivery for a webhook configured in an organization.
 */
export const useOrgsGetWebhookDelivery = <TData = Schemas.HookDelivery>(
  variables: OrgsGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      OrgsGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.HookDelivery,
    OrgsGetWebhookDeliveryError,
    TData
  >({
    ...orgsGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsRedeliverWebhookDeliveryPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
  deliveryId: number;
};

export type OrgsRedeliverWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsRedeliverWebhookDeliveryVariables = {
  pathParams: OrgsRedeliverWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Redeliver a delivery for a webhook configured in an organization.
 */
export const fetchOrgsRedeliverWebhookDelivery = (
  variables: OrgsRedeliverWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    OrgsRedeliverWebhookDeliveryError,
    undefined,
    {},
    {},
    OrgsRedeliverWebhookDeliveryPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}/attempts",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Redeliver a delivery for a webhook configured in an organization.
 */
export const useOrgsRedeliverWebhookDelivery = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      OrgsRedeliverWebhookDeliveryError,
      OrgsRedeliverWebhookDeliveryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    OrgsRedeliverWebhookDeliveryError,
    OrgsRedeliverWebhookDeliveryVariables
  >({
    mutationFn: (variables: OrgsRedeliverWebhookDeliveryVariables) =>
      fetchOrgsRedeliverWebhookDelivery({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsPingWebhookPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type OrgsPingWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsPingWebhookVariables = {
  pathParams: OrgsPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchOrgsPingWebhook = (
  variables: OrgsPingWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsPingWebhookError,
    undefined,
    {},
    {},
    OrgsPingWebhookPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/pings",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useOrgsPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsPingWebhookError,
      OrgsPingWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsPingWebhookError,
    OrgsPingWebhookVariables
  >({
    mutationFn: (variables: OrgsPingWebhookVariables) =>
      fetchOrgsPingWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetOrgInstallationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type AppsGetOrgInstallationError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetOrgInstallationVariables = {
  pathParams: AppsGetOrgInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetOrgInstallation = (
  variables: AppsGetOrgInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetOrgInstallationError,
    undefined,
    {},
    {},
    AppsGetOrgInstallationPathParams
  >({ url: "/orgs/{org}/installation", method: "get", ...variables, signal });

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetOrgInstallationQuery = (
  variables: AppsGetOrgInstallationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Installation>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/installation",
    operationId: "appsGetOrgInstallation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetOrgInstallation(variables, signal),
});

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetOrgInstallation = <TData = Schemas.Installation>(
  variables: AppsGetOrgInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetOrgInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Installation,
    AppsGetOrgInstallationError,
    TData
  >({
    ...appsGetOrgInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetOrgInstallation = <TData = Schemas.Installation>(
  variables: AppsGetOrgInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetOrgInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetOrgInstallationError,
    TData
  >({
    ...appsGetOrgInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListAppInstallationsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListAppInstallationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListAppInstallationsError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListAppInstallationsResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type OrgsListAppInstallationsVariables = {
  pathParams: OrgsListAppInstallationsPathParams;
  queryParams?: OrgsListAppInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const fetchOrgsListAppInstallations = (
  variables: OrgsListAppInstallationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListAppInstallationsResponse,
    OrgsListAppInstallationsError,
    undefined,
    {},
    OrgsListAppInstallationsQueryParams,
    OrgsListAppInstallationsPathParams
  >({ url: "/orgs/{org}/installations", method: "get", ...variables, signal });

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const orgsListAppInstallationsQuery = (
  variables: OrgsListAppInstallationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListAppInstallationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/installations",
    operationId: "orgsListAppInstallations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListAppInstallations(variables, signal),
});

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const useSuspenseOrgsListAppInstallations = <
  TData = OrgsListAppInstallationsResponse,
>(
  variables: OrgsListAppInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListAppInstallationsResponse,
      OrgsListAppInstallationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListAppInstallationsResponse,
    OrgsListAppInstallationsError,
    TData
  >({
    ...orgsListAppInstallationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const useOrgsListAppInstallations = <
  TData = OrgsListAppInstallationsResponse,
>(
  variables: OrgsListAppInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListAppInstallationsResponse,
      OrgsListAppInstallationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListAppInstallationsResponse,
    OrgsListAppInstallationsError,
    TData
  >({
    ...orgsListAppInstallationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type InteractionsRemoveRestrictionsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type InteractionsRemoveRestrictionsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForOrgVariables = {
  pathParams: InteractionsRemoveRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const fetchInteractionsRemoveRestrictionsForOrg = (
  variables: InteractionsRemoveRestrictionsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForOrgError,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForOrgPathParams
  >({
    url: "/orgs/{org}/interaction-limits",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const useInteractionsRemoveRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForOrgError,
      InteractionsRemoveRestrictionsForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForOrgError,
    InteractionsRemoveRestrictionsForOrgVariables
  >({
    mutationFn: (variables: InteractionsRemoveRestrictionsForOrgVariables) =>
      fetchInteractionsRemoveRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InteractionsGetRestrictionsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type InteractionsGetRestrictionsForOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForOrgVariables = {
  pathParams: InteractionsGetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForOrg = (
  variables: InteractionsGetRestrictionsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForOrgError,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForOrgPathParams
  >({
    url: "/orgs/{org}/interaction-limits",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const interactionsGetRestrictionsForOrgQuery = (
  variables: InteractionsGetRestrictionsForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.InteractionLimitResponse | {}>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/interaction-limits",
    operationId: "interactionsGetRestrictionsForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchInteractionsGetRestrictionsForOrg(variables, signal),
});

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const useSuspenseInteractionsGetRestrictionsForOrg = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForOrgError,
    TData
  >({
    ...interactionsGetRestrictionsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForOrg = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForOrgError,
    TData
  >({
    ...interactionsGetRestrictionsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type InteractionsSetRestrictionsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type InteractionsSetRestrictionsForOrgError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type InteractionsSetRestrictionsForOrgVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const fetchInteractionsSetRestrictionsForOrg = (
  variables: InteractionsSetRestrictionsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForOrgError,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForOrgPathParams
  >({
    url: "/orgs/{org}/interaction-limits",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const useInteractionsSetRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForOrgError,
      InteractionsSetRestrictionsForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForOrgError,
    InteractionsSetRestrictionsForOrgVariables
  >({
    mutationFn: (variables: InteractionsSetRestrictionsForOrgVariables) =>
      fetchInteractionsSetRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrgsListPendingInvitationsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListPendingInvitationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Filter invitations by their member role.
   *
   * @default all
   */
  role?:
    | "all"
    | "admin"
    | "direct_member"
    | "billing_manager"
    | "hiring_manager";
  /**
   * Filter invitations by their invitation source.
   *
   * @default all
   */
  invitation_source?: "all" | "member" | "scim";
};

export type OrgsListPendingInvitationsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListPendingInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListPendingInvitationsVariables = {
  pathParams: OrgsListPendingInvitationsPathParams;
  queryParams?: OrgsListPendingInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchOrgsListPendingInvitations = (
  variables: OrgsListPendingInvitationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListPendingInvitationsResponse,
    OrgsListPendingInvitationsError,
    undefined,
    {},
    OrgsListPendingInvitationsQueryParams,
    OrgsListPendingInvitationsPathParams
  >({ url: "/orgs/{org}/invitations", method: "get", ...variables, signal });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const orgsListPendingInvitationsQuery = (
  variables: OrgsListPendingInvitationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListPendingInvitationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/invitations",
    operationId: "orgsListPendingInvitations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListPendingInvitations(variables, signal),
});

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useSuspenseOrgsListPendingInvitations = <
  TData = OrgsListPendingInvitationsResponse,
>(
  variables: OrgsListPendingInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPendingInvitationsResponse,
      OrgsListPendingInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListPendingInvitationsResponse,
    OrgsListPendingInvitationsError,
    TData
  >({
    ...orgsListPendingInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useOrgsListPendingInvitations = <
  TData = OrgsListPendingInvitationsResponse,
>(
  variables: OrgsListPendingInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPendingInvitationsResponse,
      OrgsListPendingInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPendingInvitationsResponse,
    OrgsListPendingInvitationsError,
    TData
  >({
    ...orgsListPendingInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsCreateInvitationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsCreateInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCreateInvitationRequestBody = {
  /**
   * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
   */
  email?: string;
  /**
   * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
   */
  invitee_id?: number;
  /**
   * The role for the new member.
   *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
   *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
   *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
   *
   * @default direct_member
   */
  role?: "admin" | "direct_member" | "billing_manager";
  /**
   * Specify IDs for the teams you want to invite new members to.
   */
  team_ids?: number[];
};

export type OrgsCreateInvitationVariables = {
  body?: OrgsCreateInvitationRequestBody;
  pathParams: OrgsCreateInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchOrgsCreateInvitation = (
  variables: OrgsCreateInvitationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrganizationInvitation,
    OrgsCreateInvitationError,
    OrgsCreateInvitationRequestBody,
    {},
    {},
    OrgsCreateInvitationPathParams
  >({ url: "/orgs/{org}/invitations", method: "post", ...variables, signal });

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useOrgsCreateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationInvitation,
      OrgsCreateInvitationError,
      OrgsCreateInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationInvitation,
    OrgsCreateInvitationError,
    OrgsCreateInvitationVariables
  >({
    mutationFn: (variables: OrgsCreateInvitationVariables) =>
      fetchOrgsCreateInvitation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsCancelInvitationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type OrgsCancelInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsCancelInvitationVariables = {
  pathParams: OrgsCancelInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const fetchOrgsCancelInvitation = (
  variables: OrgsCancelInvitationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsCancelInvitationError,
    undefined,
    {},
    {},
    OrgsCancelInvitationPathParams
  >({
    url: "/orgs/{org}/invitations/{invitationId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const useOrgsCancelInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsCancelInvitationError,
      OrgsCancelInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsCancelInvitationError,
    OrgsCancelInvitationVariables
  >({
    mutationFn: (variables: OrgsCancelInvitationVariables) =>
      fetchOrgsCancelInvitation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsListInvitationTeamsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type OrgsListInvitationTeamsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListInvitationTeamsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsListInvitationTeamsResponse = Schemas.Team[];

export type OrgsListInvitationTeamsVariables = {
  pathParams: OrgsListInvitationTeamsPathParams;
  queryParams?: OrgsListInvitationTeamsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const fetchOrgsListInvitationTeams = (
  variables: OrgsListInvitationTeamsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListInvitationTeamsResponse,
    OrgsListInvitationTeamsError,
    undefined,
    {},
    OrgsListInvitationTeamsQueryParams,
    OrgsListInvitationTeamsPathParams
  >({
    url: "/orgs/{org}/invitations/{invitationId}/teams",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const orgsListInvitationTeamsQuery = (
  variables: OrgsListInvitationTeamsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListInvitationTeamsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/invitations/{invitationId}/teams",
    operationId: "orgsListInvitationTeams",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListInvitationTeams(variables, signal),
});

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const useSuspenseOrgsListInvitationTeams = <
  TData = OrgsListInvitationTeamsResponse,
>(
  variables: OrgsListInvitationTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListInvitationTeamsResponse,
      OrgsListInvitationTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListInvitationTeamsResponse,
    OrgsListInvitationTeamsError,
    TData
  >({
    ...orgsListInvitationTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const useOrgsListInvitationTeams = <
  TData = OrgsListInvitationTeamsResponse,
>(
  variables: OrgsListInvitationTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListInvitationTeamsResponse,
      OrgsListInvitationTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListInvitationTeamsResponse,
    OrgsListInvitationTeamsError,
    TData
  >({
    ...orgsListInvitationTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesListForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type IssuesListForOrgQueryParams = {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /**
   * Indicates the state of the issues to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListForOrgResponse = Schemas.Issue[];

export type IssuesListForOrgVariables = {
  pathParams: IssuesListForOrgPathParams;
  queryParams?: IssuesListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForOrg = (
  variables: IssuesListForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListForOrgResponse,
    IssuesListForOrgError,
    undefined,
    {},
    IssuesListForOrgQueryParams,
    IssuesListForOrgPathParams
  >({ url: "/orgs/{org}/issues", method: "get", ...variables, signal });

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const issuesListForOrgQuery = (
  variables: IssuesListForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/issues",
    operationId: "issuesListForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListForOrg(variables, signal),
});

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useSuspenseIssuesListForOrg = <TData = IssuesListForOrgResponse>(
  variables: IssuesListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForOrgResponse,
      IssuesListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListForOrgResponse,
    IssuesListForOrgError,
    TData
  >({
    ...issuesListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForOrg = <TData = IssuesListForOrgResponse>(
  variables: IssuesListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForOrgResponse,
      IssuesListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForOrgResponse,
    IssuesListForOrgError,
    TData
  >({
    ...issuesListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListMembersPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListMembersQueryParams = {
  /**
   * Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /**
   * Filter members returned by their role.
   *
   * @default all
   */
  role?: "all" | "admin" | "member";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembersError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type OrgsListMembersResponse = Schemas.SimpleUser[];

export type OrgsListMembersVariables = {
  pathParams: OrgsListMembersPathParams;
  queryParams?: OrgsListMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const fetchOrgsListMembers = (
  variables: OrgsListMembersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListMembersResponse,
    OrgsListMembersError,
    undefined,
    {},
    OrgsListMembersQueryParams,
    OrgsListMembersPathParams
  >({ url: "/orgs/{org}/members", method: "get", ...variables, signal });

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const orgsListMembersQuery = (
  variables: OrgsListMembersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListMembersResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/members",
    operationId: "orgsListMembers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListMembers(variables, signal),
});

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const useSuspenseOrgsListMembers = <TData = OrgsListMembersResponse>(
  variables: OrgsListMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembersResponse,
      OrgsListMembersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListMembersResponse,
    OrgsListMembersError,
    TData
  >({
    ...orgsListMembersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const useOrgsListMembers = <TData = OrgsListMembersResponse>(
  variables: OrgsListMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembersResponse,
      OrgsListMembersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembersResponse,
    OrgsListMembersError,
    TData
  >({
    ...orgsListMembersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsRemoveMemberPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsRemoveMemberError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type OrgsRemoveMemberVariables = {
  pathParams: OrgsRemoveMemberPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const fetchOrgsRemoveMember = (
  variables: OrgsRemoveMemberVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsRemoveMemberError,
    undefined,
    {},
    {},
    OrgsRemoveMemberPathParams
  >({
    url: "/orgs/{org}/members/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const useOrgsRemoveMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveMemberError,
      OrgsRemoveMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveMemberError,
    OrgsRemoveMemberVariables
  >({
    mutationFn: (variables: OrgsRemoveMemberVariables) =>
      fetchOrgsRemoveMember({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsCheckMembershipForUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsCheckMembershipForUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsCheckMembershipForUserVariables = {
  pathParams: OrgsCheckMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const fetchOrgsCheckMembershipForUser = (
  variables: OrgsCheckMembershipForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsCheckMembershipForUserError,
    undefined,
    {},
    {},
    OrgsCheckMembershipForUserPathParams
  >({
    url: "/orgs/{org}/members/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const orgsCheckMembershipForUserQuery = (
  variables: OrgsCheckMembershipForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/members/{username}",
    operationId: "orgsCheckMembershipForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsCheckMembershipForUser(variables, signal),
});

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const useSuspenseOrgsCheckMembershipForUser = <TData = undefined>(
  variables: OrgsCheckMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    OrgsCheckMembershipForUserError,
    TData
  >({
    ...orgsCheckMembershipForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const useOrgsCheckMembershipForUser = <TData = undefined>(
  variables: OrgsCheckMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, OrgsCheckMembershipForUserError, TData>(
    {
      ...orgsCheckMembershipForUserQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export type CodespacesGetCodespacesForUserInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type CodespacesGetCodespacesForUserInOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesGetCodespacesForUserInOrgError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesGetCodespacesForUserInOrgResponse = {
  codespaces: Schemas.Codespace[];
  total_count: number;
};

export type CodespacesGetCodespacesForUserInOrgVariables = {
  pathParams: CodespacesGetCodespacesForUserInOrgPathParams;
  queryParams?: CodespacesGetCodespacesForUserInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesGetCodespacesForUserInOrg = (
  variables: CodespacesGetCodespacesForUserInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesGetCodespacesForUserInOrgResponse,
    CodespacesGetCodespacesForUserInOrgError,
    undefined,
    {},
    CodespacesGetCodespacesForUserInOrgQueryParams,
    CodespacesGetCodespacesForUserInOrgPathParams
  >({
    url: "/orgs/{org}/members/{username}/codespaces",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const codespacesGetCodespacesForUserInOrgQuery = (
  variables: CodespacesGetCodespacesForUserInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesGetCodespacesForUserInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/members/{username}/codespaces",
    operationId: "codespacesGetCodespacesForUserInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetCodespacesForUserInOrg(variables, signal),
});

/**
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useSuspenseCodespacesGetCodespacesForUserInOrg = <
  TData = CodespacesGetCodespacesForUserInOrgResponse,
>(
  variables: CodespacesGetCodespacesForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesGetCodespacesForUserInOrgResponse,
      CodespacesGetCodespacesForUserInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesGetCodespacesForUserInOrgResponse,
    CodespacesGetCodespacesForUserInOrgError,
    TData
  >({
    ...codespacesGetCodespacesForUserInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesGetCodespacesForUserInOrg = <
  TData = CodespacesGetCodespacesForUserInOrgResponse,
>(
  variables: CodespacesGetCodespacesForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesGetCodespacesForUserInOrgResponse,
      CodespacesGetCodespacesForUserInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesGetCodespacesForUserInOrgResponse,
    CodespacesGetCodespacesForUserInOrgError,
    TData
  >({
    ...codespacesGetCodespacesForUserInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesDeleteFromOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesDeleteFromOrganizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesDeleteFromOrganizationVariables = {
  pathParams: CodespacesDeleteFromOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesDeleteFromOrganization = (
  variables: CodespacesDeleteFromOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    CodespacesDeleteFromOrganizationError,
    undefined,
    {},
    {},
    CodespacesDeleteFromOrganizationPathParams
  >({
    url: "/orgs/{org}/members/{username}/codespaces/{codespaceName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesDeleteFromOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      CodespacesDeleteFromOrganizationError,
      CodespacesDeleteFromOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    CodespacesDeleteFromOrganizationError,
    CodespacesDeleteFromOrganizationVariables
  >({
    mutationFn: (variables: CodespacesDeleteFromOrganizationVariables) =>
      fetchCodespacesDeleteFromOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesStopInOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesStopInOrganizationError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesStopInOrganizationVariables = {
  pathParams: CodespacesStopInOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchCodespacesStopInOrganization = (
  variables: CodespacesStopInOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesStopInOrganizationError,
    undefined,
    {},
    {},
    CodespacesStopInOrganizationPathParams
  >({
    url: "/orgs/{org}/members/{username}/codespaces/{codespaceName}/stop",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useCodespacesStopInOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesStopInOrganizationError,
      CodespacesStopInOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesStopInOrganizationError,
    CodespacesStopInOrganizationVariables
  >({
    mutationFn: (variables: CodespacesStopInOrganizationVariables) =>
      fetchCodespacesStopInOrganization({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsRemoveMembershipForUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsRemoveMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsRemoveMembershipForUserVariables = {
  pathParams: OrgsRemoveMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const fetchOrgsRemoveMembershipForUser = (
  variables: OrgsRemoveMembershipForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsRemoveMembershipForUserError,
    undefined,
    {},
    {},
    OrgsRemoveMembershipForUserPathParams
  >({
    url: "/orgs/{org}/memberships/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const useOrgsRemoveMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveMembershipForUserError,
      OrgsRemoveMembershipForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveMembershipForUserError,
    OrgsRemoveMembershipForUserVariables
  >({
    mutationFn: (variables: OrgsRemoveMembershipForUserVariables) =>
      fetchOrgsRemoveMembershipForUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsGetMembershipForUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsGetMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsGetMembershipForUserVariables = {
  pathParams: OrgsGetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
 */
export const fetchOrgsGetMembershipForUser = (
  variables: OrgsGetMembershipForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsGetMembershipForUserError,
    undefined,
    {},
    {},
    OrgsGetMembershipForUserPathParams
  >({
    url: "/orgs/{org}/memberships/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
 */
export const orgsGetMembershipForUserQuery = (
  variables: OrgsGetMembershipForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrgMembership>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/memberships/{username}",
    operationId: "orgsGetMembershipForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGetMembershipForUser(variables, signal),
});

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
 */
export const useSuspenseOrgsGetMembershipForUser = <
  TData = Schemas.OrgMembership,
>(
  variables: OrgsGetMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForUserError,
    TData
  >({
    ...orgsGetMembershipForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
 */
export const useOrgsGetMembershipForUser = <TData = Schemas.OrgMembership>(
  variables: OrgsGetMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForUserError,
    TData
  >({
    ...orgsGetMembershipForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsSetMembershipForUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsSetMembershipForUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsSetMembershipForUserRequestBody = {
  /**
   * The role to give the user in the organization. Can be one of:
   *  * `admin` - The user will become an owner of the organization.
   *  * `member` - The user will become a non-owner member of the organization.
   *
   * @default member
   */
  role?: "admin" | "member";
};

export type OrgsSetMembershipForUserVariables = {
  body?: OrgsSetMembershipForUserRequestBody;
  pathParams: OrgsSetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const fetchOrgsSetMembershipForUser = (
  variables: OrgsSetMembershipForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsSetMembershipForUserError,
    OrgsSetMembershipForUserRequestBody,
    {},
    {},
    OrgsSetMembershipForUserPathParams
  >({
    url: "/orgs/{org}/memberships/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const useOrgsSetMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      OrgsSetMembershipForUserError,
      OrgsSetMembershipForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    OrgsSetMembershipForUserError,
    OrgsSetMembershipForUserVariables
  >({
    mutationFn: (variables: OrgsSetMembershipForUserVariables) =>
      fetchOrgsSetMembershipForUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsListForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type MigrationsListForOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsListForOrgError = Fetcher.ErrorWrapper<undefined>;

export type MigrationsListForOrgResponse = Schemas.Migration[];

export type MigrationsListForOrgVariables = {
  pathParams: MigrationsListForOrgPathParams;
  queryParams?: MigrationsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
 *
 * A list of `repositories` is only returned for export migrations.
 */
export const fetchMigrationsListForOrg = (
  variables: MigrationsListForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsListForOrgResponse,
    MigrationsListForOrgError,
    undefined,
    {},
    MigrationsListForOrgQueryParams,
    MigrationsListForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "get", ...variables, signal });

/**
 * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
 *
 * A list of `repositories` is only returned for export migrations.
 */
export const migrationsListForOrgQuery = (
  variables: MigrationsListForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsListForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/migrations",
    operationId: "migrationsListForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsListForOrg(variables, signal),
});

/**
 * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
 *
 * A list of `repositories` is only returned for export migrations.
 */
export const useSuspenseMigrationsListForOrg = <
  TData = MigrationsListForOrgResponse,
>(
  variables: MigrationsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForOrgResponse,
      MigrationsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsListForOrgResponse,
    MigrationsListForOrgError,
    TData
  >({
    ...migrationsListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
 *
 * A list of `repositories` is only returned for export migrations.
 */
export const useMigrationsListForOrg = <TData = MigrationsListForOrgResponse>(
  variables: MigrationsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForOrgResponse,
      MigrationsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForOrgResponse,
    MigrationsListForOrgError,
    TData
  >({
    ...migrationsListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsStartForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type MigrationsStartForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsStartForOrgRequestBody = {
  /**
   * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
   */
  exclude?: "repositories"[];
  /**
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   *
   * @default false
   * @example true
   */
  exclude_attachments?: boolean;
  /**
   * Indicates whether the repository git data should be excluded from the migration.
   *
   * @default false
   */
  exclude_git_data?: boolean;
  /**
   * Indicates whether metadata should be excluded and only git source should be included for the migration.
   *
   * @default false
   */
  exclude_metadata?: boolean;
  /**
   * Indicates whether projects owned by the organization or users should be excluded. from the migration.
   *
   * @default false
   * @example true
   */
  exclude_owner_projects?: boolean;
  /**
   * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
   *
   * @default false
   * @example true
   */
  exclude_releases?: boolean;
  /**
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   *
   * @default false
   * @example true
   */
  lock_repositories?: boolean;
  /**
   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
   *
   * @default false
   * @example true
   */
  org_metadata_only?: boolean;
  /**
   * A list of arrays indicating which repositories should be migrated.
   */
  repositories: string[];
};

export type MigrationsStartForOrgVariables = {
  body: MigrationsStartForOrgRequestBody;
  pathParams: MigrationsStartForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a migration archive.
 */
export const fetchMigrationsStartForOrg = (
  variables: MigrationsStartForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForOrgError,
    MigrationsStartForOrgRequestBody,
    {},
    {},
    MigrationsStartForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "post", ...variables, signal });

/**
 * Initiates the generation of a migration archive.
 */
export const useMigrationsStartForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      MigrationsStartForOrgError,
      MigrationsStartForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    MigrationsStartForOrgError,
    MigrationsStartForOrgVariables
  >({
    mutationFn: (variables: MigrationsStartForOrgVariables) =>
      fetchMigrationsStartForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsGetStatusForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsGetStatusForOrgQueryParams = {
  /**
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsGetStatusForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsGetStatusForOrgVariables = {
  pathParams: MigrationsGetStatusForOrgPathParams;
  queryParams?: MigrationsGetStatusForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const fetchMigrationsGetStatusForOrg = (
  variables: MigrationsGetStatusForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsGetStatusForOrgError,
    undefined,
    {},
    MigrationsGetStatusForOrgQueryParams,
    MigrationsGetStatusForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const migrationsGetStatusForOrgQuery = (
  variables: MigrationsGetStatusForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Migration>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/migrations/{migrationId}",
    operationId: "migrationsGetStatusForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetStatusForOrg(variables, signal),
});

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const useSuspenseMigrationsGetStatusForOrg = <TData = Schemas.Migration>(
  variables: MigrationsGetStatusForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Migration,
    MigrationsGetStatusForOrgError,
    TData
  >({
    ...migrationsGetStatusForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const useMigrationsGetStatusForOrg = <TData = Schemas.Migration>(
  variables: MigrationsGetStatusForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    MigrationsGetStatusForOrgError,
    TData
  >({
    ...migrationsGetStatusForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsDeleteArchiveForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsDeleteArchiveForOrgVariables = {
  pathParams: MigrationsDeleteArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const fetchMigrationsDeleteArchiveForOrg = (
  variables: MigrationsDeleteArchiveForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsDeleteArchiveForOrgError,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const useMigrationsDeleteArchiveForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsDeleteArchiveForOrgError,
      MigrationsDeleteArchiveForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsDeleteArchiveForOrgError,
    MigrationsDeleteArchiveForOrgVariables
  >({
    mutationFn: (variables: MigrationsDeleteArchiveForOrgVariables) =>
      fetchMigrationsDeleteArchiveForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsDownloadArchiveForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsDownloadArchiveForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsDownloadArchiveForOrgVariables = {
  pathParams: MigrationsDownloadArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to a migration archive.
 */
export const fetchMigrationsDownloadArchiveForOrg = (
  variables: MigrationsDownloadArchiveForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsDownloadArchiveForOrgError,
    undefined,
    {},
    {},
    MigrationsDownloadArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Fetches the URL to a migration archive.
 */
export const migrationsDownloadArchiveForOrgQuery = (
  variables: MigrationsDownloadArchiveForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/migrations/{migrationId}/archive",
    operationId: "migrationsDownloadArchiveForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsDownloadArchiveForOrg(variables, signal),
});

/**
 * Fetches the URL to a migration archive.
 */
export const useSuspenseMigrationsDownloadArchiveForOrg = <TData = undefined>(
  variables: MigrationsDownloadArchiveForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsDownloadArchiveForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    MigrationsDownloadArchiveForOrgError,
    TData
  >({
    ...migrationsDownloadArchiveForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Fetches the URL to a migration archive.
 */
export const useMigrationsDownloadArchiveForOrg = <TData = undefined>(
  variables: MigrationsDownloadArchiveForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsDownloadArchiveForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    MigrationsDownloadArchiveForOrgError,
    TData
  >({
    ...migrationsDownloadArchiveForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsUnlockRepoForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
  /**
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsUnlockRepoForOrgVariables = {
  pathParams: MigrationsUnlockRepoForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const fetchMigrationsUnlockRepoForOrg = (
  variables: MigrationsUnlockRepoForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsUnlockRepoForOrgError,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const useMigrationsUnlockRepoForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsUnlockRepoForOrgError,
      MigrationsUnlockRepoForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsUnlockRepoForOrgError,
    MigrationsUnlockRepoForOrgVariables
  >({
    mutationFn: (variables: MigrationsUnlockRepoForOrgVariables) =>
      fetchMigrationsUnlockRepoForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsListReposForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsListReposForOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForOrgError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MigrationsListReposForOrgResponse = Schemas.MinimalRepository[];

export type MigrationsListReposForOrgVariables = {
  pathParams: MigrationsListReposForOrgPathParams;
  queryParams?: MigrationsListReposForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all the repositories for this organization migration.
 */
export const fetchMigrationsListReposForOrg = (
  variables: MigrationsListReposForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsListReposForOrgResponse,
    MigrationsListReposForOrgError,
    undefined,
    {},
    MigrationsListReposForOrgQueryParams,
    MigrationsListReposForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all the repositories for this organization migration.
 */
export const migrationsListReposForOrgQuery = (
  variables: MigrationsListReposForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsListReposForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/migrations/{migrationId}/repositories",
    operationId: "migrationsListReposForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsListReposForOrg(variables, signal),
});

/**
 * List all the repositories for this organization migration.
 */
export const useSuspenseMigrationsListReposForOrg = <
  TData = MigrationsListReposForOrgResponse,
>(
  variables: MigrationsListReposForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForOrgResponse,
      MigrationsListReposForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsListReposForOrgResponse,
    MigrationsListReposForOrgError,
    TData
  >({
    ...migrationsListReposForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all the repositories for this organization migration.
 */
export const useMigrationsListReposForOrg = <
  TData = MigrationsListReposForOrgResponse,
>(
  variables: MigrationsListReposForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForOrgResponse,
      MigrationsListReposForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForOrgResponse,
    MigrationsListReposForOrgError,
    TData
  >({
    ...migrationsListReposForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListOutsideCollaboratorsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListOutsideCollaboratorsQueryParams = {
  /**
   * Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListOutsideCollaboratorsError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListOutsideCollaboratorsResponse = Schemas.SimpleUser[];

export type OrgsListOutsideCollaboratorsVariables = {
  pathParams: OrgsListOutsideCollaboratorsPathParams;
  queryParams?: OrgsListOutsideCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are outside collaborators of an organization.
 */
export const fetchOrgsListOutsideCollaborators = (
  variables: OrgsListOutsideCollaboratorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListOutsideCollaboratorsResponse,
    OrgsListOutsideCollaboratorsError,
    undefined,
    {},
    OrgsListOutsideCollaboratorsQueryParams,
    OrgsListOutsideCollaboratorsPathParams
  >({
    url: "/orgs/{org}/outside_collaborators",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all users who are outside collaborators of an organization.
 */
export const orgsListOutsideCollaboratorsQuery = (
  variables: OrgsListOutsideCollaboratorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListOutsideCollaboratorsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/outside_collaborators",
    operationId: "orgsListOutsideCollaborators",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListOutsideCollaborators(variables, signal),
});

/**
 * List all users who are outside collaborators of an organization.
 */
export const useSuspenseOrgsListOutsideCollaborators = <
  TData = OrgsListOutsideCollaboratorsResponse,
>(
  variables: OrgsListOutsideCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListOutsideCollaboratorsResponse,
      OrgsListOutsideCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListOutsideCollaboratorsResponse,
    OrgsListOutsideCollaboratorsError,
    TData
  >({
    ...orgsListOutsideCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all users who are outside collaborators of an organization.
 */
export const useOrgsListOutsideCollaborators = <
  TData = OrgsListOutsideCollaboratorsResponse,
>(
  variables: OrgsListOutsideCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListOutsideCollaboratorsResponse,
      OrgsListOutsideCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListOutsideCollaboratorsResponse,
    OrgsListOutsideCollaboratorsError,
    TData
  >({
    ...orgsListOutsideCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsRemoveOutsideCollaboratorPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsRemoveOutsideCollaboratorError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: {
    documentation_url?: string;
    message?: string;
  };
}>;

export type OrgsRemoveOutsideCollaboratorVariables = {
  pathParams: OrgsRemoveOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const fetchOrgsRemoveOutsideCollaborator = (
  variables: OrgsRemoveOutsideCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsRemoveOutsideCollaboratorError,
    undefined,
    {},
    {},
    OrgsRemoveOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const useOrgsRemoveOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveOutsideCollaboratorError,
      OrgsRemoveOutsideCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveOutsideCollaboratorError,
    OrgsRemoveOutsideCollaboratorVariables
  >({
    mutationFn: (variables: OrgsRemoveOutsideCollaboratorVariables) =>
      fetchOrgsRemoveOutsideCollaborator({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsConvertMemberToOutsideCollaboratorPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsConvertMemberToOutsideCollaboratorError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type OrgsConvertMemberToOutsideCollaboratorRequestBody = {
  /**
   * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
   *
   * @default false
   */
  async?: boolean;
};

export type OrgsConvertMemberToOutsideCollaboratorVariables = {
  body?: OrgsConvertMemberToOutsideCollaboratorRequestBody;
  pathParams: OrgsConvertMemberToOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 */
export const fetchOrgsConvertMemberToOutsideCollaborator = (
  variables: OrgsConvertMemberToOutsideCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    {},
    OrgsConvertMemberToOutsideCollaboratorError,
    OrgsConvertMemberToOutsideCollaboratorRequestBody,
    {},
    {},
    OrgsConvertMemberToOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 */
export const useOrgsConvertMemberToOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      OrgsConvertMemberToOutsideCollaboratorError,
      OrgsConvertMemberToOutsideCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    OrgsConvertMemberToOutsideCollaboratorError,
    OrgsConvertMemberToOutsideCollaboratorVariables
  >({
    mutationFn: (variables: OrgsConvertMemberToOutsideCollaboratorVariables) =>
      fetchOrgsConvertMemberToOutsideCollaborator({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesListPackagesForOrganizationPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type PackagesListPackagesForOrganizationQueryParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   *
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
  visibility?: "public" | "private" | "internal";
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type PackagesListPackagesForOrganizationError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type PackagesListPackagesForOrganizationResponse = Schemas.Package[];

export type PackagesListPackagesForOrganizationVariables = {
  pathParams: PackagesListPackagesForOrganizationPathParams;
  queryParams: PackagesListPackagesForOrganizationQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesListPackagesForOrganization = (
  variables: PackagesListPackagesForOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PackagesListPackagesForOrganizationResponse,
    PackagesListPackagesForOrganizationError,
    undefined,
    {},
    PackagesListPackagesForOrganizationQueryParams,
    PackagesListPackagesForOrganizationPathParams
  >({ url: "/orgs/{org}/packages", method: "get", ...variables, signal });

/**
 * Lists packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesListPackagesForOrganizationQuery = (
  variables: PackagesListPackagesForOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PackagesListPackagesForOrganizationResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/packages",
    operationId: "packagesListPackagesForOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesListPackagesForOrganization(variables, signal),
});

/**
 * Lists packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesListPackagesForOrganization = <
  TData = PackagesListPackagesForOrganizationResponse,
>(
  variables: PackagesListPackagesForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForOrganizationResponse,
      PackagesListPackagesForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PackagesListPackagesForOrganizationResponse,
    PackagesListPackagesForOrganizationError,
    TData
  >({
    ...packagesListPackagesForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists packages in an organization readable by the user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesListPackagesForOrganization = <
  TData = PackagesListPackagesForOrganizationResponse,
>(
  variables: PackagesListPackagesForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForOrganizationResponse,
      PackagesListPackagesForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PackagesListPackagesForOrganizationResponse,
    PackagesListPackagesForOrganizationError,
    TData
  >({
    ...packagesListPackagesForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesDeletePackageForOrgPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type PackagesDeletePackageForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageForOrgVariables = {
  pathParams: PackagesDeletePackageForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesDeletePackageForOrg = (
  variables: PackagesDeletePackageForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageForOrgError,
    undefined,
    {},
    {},
    PackagesDeletePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesDeletePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageForOrgError,
      PackagesDeletePackageForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageForOrgError,
    PackagesDeletePackageForOrgVariables
  >({
    mutationFn: (variables: PackagesDeletePackageForOrgVariables) =>
      fetchPackagesDeletePackageForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PackagesGetPackageForOrganizationPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type PackagesGetPackageForOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForOrganizationVariables = {
  pathParams: PackagesGetPackageForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageForOrganization = (
  variables: PackagesGetPackageForOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForOrganizationError,
    undefined,
    {},
    {},
    PackagesGetPackageForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageForOrganizationQuery = (
  variables: PackagesGetPackageForOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Package>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/packages/{packageType}/{packageName}",
    operationId: "packagesGetPackageForOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageForOrganization(variables, signal),
});

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageForOrganization = <
  TData = Schemas.Package,
>(
  variables: PackagesGetPackageForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Package,
    PackagesGetPackageForOrganizationError,
    TData
  >({
    ...packagesGetPackageForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageForOrganization = <TData = Schemas.Package>(
  variables: PackagesGetPackageForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForOrganizationError,
    TData
  >({
    ...packagesGetPackageForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageForOrgPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type PackagesRestorePackageForOrgQueryParams = {
  /**
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageForOrgVariables = {
  pathParams: PackagesRestorePackageForOrgPathParams;
  queryParams?: PackagesRestorePackageForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesRestorePackageForOrg = (
  variables: PackagesRestorePackageForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageForOrgError,
    undefined,
    {},
    PackagesRestorePackageForOrgQueryParams,
    PackagesRestorePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesRestorePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageForOrgError,
      PackagesRestorePackageForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageForOrgError,
    PackagesRestorePackageForOrgVariables
  >({
    mutationFn: (variables: PackagesRestorePackageForOrgVariables) =>
      fetchPackagesRestorePackageForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * The state of the package, either active or deleted.
   *
   * @default active
   */
  state?: "active" | "deleted";
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams;
  queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists package versions for a package owned by an organization.
 *
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
    undefined,
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists package versions for a package owned by an organization.
 *
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetAllPackageVersionsForPackageOwnedByOrgQuery = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/packages/{packageType}/{packageName}/versions",
    operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg(variables, signal),
});

/**
 * Lists package versions for a package owned by an organization.
 *
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetAllPackageVersionsForPackageOwnedByOrg = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
    TData
  >({
    ...packagesGetAllPackageVersionsForPackageOwnedByOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists package versions for a package owned by an organization.
 *
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByOrg = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgError,
    TData
  >({
    ...packagesGetAllPackageVersionsForPackageOwnedByOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesDeletePackageVersionForOrgPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageVersionForOrgVariables = {
  pathParams: PackagesDeletePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesDeletePackageVersionForOrg = (
  variables: PackagesDeletePackageVersionForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageVersionForOrgError,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesDeletePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageVersionForOrgError,
      PackagesDeletePackageVersionForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageVersionForOrgError,
    PackagesDeletePackageVersionForOrgVariables
  >({
    mutationFn: (variables: PackagesDeletePackageVersionForOrgVariables) =>
      fetchPackagesDeletePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesGetPackageVersionForOrganizationPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForOrganizationVariables = {
  pathParams: PackagesGetPackageVersionForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageVersionForOrganization = (
  variables: PackagesGetPackageVersionForOrganizationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForOrganizationError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageVersionForOrganizationQuery = (
  variables: PackagesGetPackageVersionForOrganizationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PackageVersion>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    operationId: "packagesGetPackageVersionForOrganization",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageVersionForOrganization(variables, signal),
});

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageVersionForOrganization = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForOrganizationError,
    TData
  >({
    ...packagesGetPackageVersionForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageVersionForOrganization = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForOrganizationError,
    TData
  >({
    ...packagesGetPackageVersionForOrganizationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageVersionForOrgPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageVersionForOrgVariables = {
  pathParams: PackagesRestorePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesRestorePackageVersionForOrg = (
  variables: PackagesRestorePackageVersionForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageVersionForOrgError,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesRestorePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageVersionForOrgError,
      PackagesRestorePackageVersionForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageVersionForOrgError,
    PackagesRestorePackageVersionForOrgVariables
  >({
    mutationFn: (variables: PackagesRestorePackageVersionForOrgVariables) =>
      fetchPackagesRestorePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProjectsListForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ProjectsListForOrgQueryParams = {
  /**
   * Indicates the state of the projects to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForOrgError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type ProjectsListForOrgResponse = Schemas.Project[];

export type ProjectsListForOrgVariables = {
  pathParams: ProjectsListForOrgPathParams;
  queryParams?: ProjectsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForOrg = (
  variables: ProjectsListForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListForOrgResponse,
    ProjectsListForOrgError,
    undefined,
    {},
    ProjectsListForOrgQueryParams,
    ProjectsListForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "get", ...variables, signal });

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const projectsListForOrgQuery = (
  variables: ProjectsListForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/projects",
    operationId: "projectsListForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListForOrg(variables, signal),
});

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useSuspenseProjectsListForOrg = <
  TData = ProjectsListForOrgResponse,
>(
  variables: ProjectsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForOrgResponse,
      ProjectsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListForOrgResponse,
    ProjectsListForOrgError,
    TData
  >({
    ...projectsListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForOrg = <TData = ProjectsListForOrgResponse>(
  variables: ProjectsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForOrgResponse,
      ProjectsListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForOrgResponse,
    ProjectsListForOrgError,
    TData
  >({
    ...projectsListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsCreateForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ProjectsCreateForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForOrgRequestBody = {
  /**
   * The description of the project.
   */
  body?: string;
  /**
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForOrgVariables = {
  body: ProjectsCreateForOrgRequestBody;
  pathParams: ProjectsCreateForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForOrg = (
  variables: ProjectsCreateForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForOrgError,
    ProjectsCreateForOrgRequestBody,
    {},
    {},
    ProjectsCreateForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "post", ...variables, signal });

/**
 * Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForOrgError,
      ProjectsCreateForOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForOrgError,
    ProjectsCreateForOrgVariables
  >({
    mutationFn: (variables: ProjectsCreateForOrgVariables) =>
      fetchProjectsCreateForOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsListPublicMembersPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListPublicMembersQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListPublicMembersError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListPublicMembersResponse = Schemas.SimpleUser[];

export type OrgsListPublicMembersVariables = {
  pathParams: OrgsListPublicMembersPathParams;
  queryParams?: OrgsListPublicMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const fetchOrgsListPublicMembers = (
  variables: OrgsListPublicMembersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListPublicMembersResponse,
    OrgsListPublicMembersError,
    undefined,
    {},
    OrgsListPublicMembersQueryParams,
    OrgsListPublicMembersPathParams
  >({ url: "/orgs/{org}/public_members", method: "get", ...variables, signal });

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const orgsListPublicMembersQuery = (
  variables: OrgsListPublicMembersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListPublicMembersResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/public_members",
    operationId: "orgsListPublicMembers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListPublicMembers(variables, signal),
});

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const useSuspenseOrgsListPublicMembers = <
  TData = OrgsListPublicMembersResponse,
>(
  variables: OrgsListPublicMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPublicMembersResponse,
      OrgsListPublicMembersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListPublicMembersResponse,
    OrgsListPublicMembersError,
    TData
  >({
    ...orgsListPublicMembersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const useOrgsListPublicMembers = <TData = OrgsListPublicMembersResponse>(
  variables: OrgsListPublicMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPublicMembersResponse,
      OrgsListPublicMembersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPublicMembersResponse,
    OrgsListPublicMembersError,
    TData
  >({
    ...orgsListPublicMembersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsRemovePublicMembershipForAuthenticatedUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsRemovePublicMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsRemovePublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsRemovePublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsRemovePublicMembershipForAuthenticatedUser = (
  variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsRemovePublicMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsRemovePublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrgsRemovePublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemovePublicMembershipForAuthenticatedUserError,
      OrgsRemovePublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemovePublicMembershipForAuthenticatedUserError,
    OrgsRemovePublicMembershipForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables,
    ) =>
      fetchOrgsRemovePublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrgsCheckPublicMembershipForUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsCheckPublicMembershipForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsCheckPublicMembershipForUserVariables = {
  pathParams: OrgsCheckPublicMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckPublicMembershipForUser = (
  variables: OrgsCheckPublicMembershipForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsCheckPublicMembershipForUserError,
    undefined,
    {},
    {},
    OrgsCheckPublicMembershipForUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "get",
    ...variables,
    signal,
  });

export const orgsCheckPublicMembershipForUserQuery = (
  variables: OrgsCheckPublicMembershipForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/public_members/{username}",
    operationId: "orgsCheckPublicMembershipForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsCheckPublicMembershipForUser(variables, signal),
});

export const useSuspenseOrgsCheckPublicMembershipForUser = <TData = undefined>(
  variables: OrgsCheckPublicMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckPublicMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    OrgsCheckPublicMembershipForUserError,
    TData
  >({
    ...orgsCheckPublicMembershipForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useOrgsCheckPublicMembershipForUser = <TData = undefined>(
  variables: OrgsCheckPublicMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      OrgsCheckPublicMembershipForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    OrgsCheckPublicMembershipForUserError,
    TData
  >({
    ...orgsCheckPublicMembershipForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsSetPublicMembershipForAuthenticatedUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsSetPublicMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 403;
    payload: Responses.Forbidden;
  }>;

export type OrgsSetPublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsSetPublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchOrgsSetPublicMembershipForAuthenticatedUser = (
  variables: OrgsSetPublicMembershipForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsSetPublicMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsSetPublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useOrgsSetPublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsSetPublicMembershipForAuthenticatedUserError,
      OrgsSetPublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsSetPublicMembershipForAuthenticatedUserError,
    OrgsSetPublicMembershipForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: OrgsSetPublicMembershipForAuthenticatedUserVariables,
    ) =>
      fetchOrgsSetPublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ReposListForOrgQueryParams = {
  /**
   * Specifies the types of repositories you want returned.
   */
  type?: "all" | "public" | "private" | "forks" | "sources" | "member";
  /**
   * The property to sort the results by.
   *
   * @default created
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForOrgError = Fetcher.ErrorWrapper<undefined>;

export type ReposListForOrgResponse = Schemas.MinimalRepository[];

export type ReposListForOrgVariables = {
  pathParams: ReposListForOrgPathParams;
  queryParams?: ReposListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories for the specified organization.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const fetchReposListForOrg = (
  variables: ReposListForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListForOrgResponse,
    ReposListForOrgError,
    undefined,
    {},
    ReposListForOrgQueryParams,
    ReposListForOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "get", ...variables, signal });

/**
 * Lists repositories for the specified organization.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const reposListForOrgQuery = (
  variables: ReposListForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/repos",
    operationId: "reposListForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListForOrg(variables, signal),
});

/**
 * Lists repositories for the specified organization.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useSuspenseReposListForOrg = <TData = ReposListForOrgResponse>(
  variables: ReposListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForOrgResponse,
      ReposListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListForOrgResponse,
    ReposListForOrgError,
    TData
  >({
    ...reposListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories for the specified organization.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useReposListForOrg = <TData = ReposListForOrgResponse>(
  variables: ReposListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForOrgResponse,
      ReposListForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForOrgResponse,
    ReposListForOrgError,
    TData
  >({
    ...reposListForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ReposCreateInOrgError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateInOrgRequestBody = {
  /**
   * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
   *
   * @default false
   */
  allow_auto_merge?: boolean;
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /**
   * Pass `true` to create an initial commit with empty README.
   *
   * @default false
   */
  auto_init?: boolean;
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  gitignore_template?: string;
  /**
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads?: boolean;
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /**
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  license_template?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The name of the repository.
   */
  name: string;
  /**
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
  /**
   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   *
   * @default false
   * @deprecated true
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The visibility of the repository.
   */
  visibility?: "public" | "private";
};

export type ReposCreateInOrgVariables = {
  body: ReposCreateInOrgRequestBody;
  pathParams: ReposCreateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateInOrg = (
  variables: ReposCreateInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateInOrgError,
    ReposCreateInOrgRequestBody,
    {},
    {},
    ReposCreateInOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "post", ...variables, signal });

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateInOrgError,
      ReposCreateInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateInOrgError,
    ReposCreateInOrgVariables
  >({
    mutationFn: (variables: ReposCreateInOrgVariables) =>
      fetchReposCreateInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SecretScanningListAlertsForOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type SecretScanningListAlertsForOrgQueryParams = {
  /**
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  state?: "open" | "resolved";
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types.
   */
  secret_type?: string;
  /**
   * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
   */
  resolution?: string;
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
   */
  after?: string;
};

export type SecretScanningListAlertsForOrgError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SecretScanningListAlertsForOrgResponse =
  Schemas.OrganizationSecretScanningAlert[];

export type SecretScanningListAlertsForOrgVariables = {
  pathParams: SecretScanningListAlertsForOrgPathParams;
  queryParams?: SecretScanningListAlertsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningListAlertsForOrg = (
  variables: SecretScanningListAlertsForOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SecretScanningListAlertsForOrgResponse,
    SecretScanningListAlertsForOrgError,
    undefined,
    {},
    SecretScanningListAlertsForOrgQueryParams,
    SecretScanningListAlertsForOrgPathParams
  >({
    url: "/orgs/{org}/secret-scanning/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const secretScanningListAlertsForOrgQuery = (
  variables: SecretScanningListAlertsForOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SecretScanningListAlertsForOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/secret-scanning/alerts",
    operationId: "secretScanningListAlertsForOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSecretScanningListAlertsForOrg(variables, signal),
});

/**
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSuspenseSecretScanningListAlertsForOrg = <
  TData = SecretScanningListAlertsForOrgResponse,
>(
  variables: SecretScanningListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForOrgResponse,
      SecretScanningListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SecretScanningListAlertsForOrgResponse,
    SecretScanningListAlertsForOrgError,
    TData
  >({
    ...secretScanningListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningListAlertsForOrg = <
  TData = SecretScanningListAlertsForOrgResponse,
>(
  variables: SecretScanningListAlertsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForOrgResponse,
      SecretScanningListAlertsForOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListAlertsForOrgResponse,
    SecretScanningListAlertsForOrgError,
    TData
  >({
    ...secretScanningListAlertsForOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListSecurityManagerTeamsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsListSecurityManagerTeamsError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListSecurityManagerTeamsResponse = Schemas.TeamSimple[];

export type OrgsListSecurityManagerTeamsVariables = {
  pathParams: OrgsListSecurityManagerTeamsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
 *
 * GitHub Apps must have the `administration` organization read permission to use this endpoint.
 */
export const fetchOrgsListSecurityManagerTeams = (
  variables: OrgsListSecurityManagerTeamsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListSecurityManagerTeamsResponse,
    OrgsListSecurityManagerTeamsError,
    undefined,
    {},
    {},
    OrgsListSecurityManagerTeamsPathParams
  >({
    url: "/orgs/{org}/security-managers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
 *
 * GitHub Apps must have the `administration` organization read permission to use this endpoint.
 */
export const orgsListSecurityManagerTeamsQuery = (
  variables: OrgsListSecurityManagerTeamsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListSecurityManagerTeamsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/security-managers",
    operationId: "orgsListSecurityManagerTeams",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListSecurityManagerTeams(variables, signal),
});

/**
 * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
 *
 * GitHub Apps must have the `administration` organization read permission to use this endpoint.
 */
export const useSuspenseOrgsListSecurityManagerTeams = <
  TData = OrgsListSecurityManagerTeamsResponse,
>(
  variables: OrgsListSecurityManagerTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListSecurityManagerTeamsResponse,
      OrgsListSecurityManagerTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListSecurityManagerTeamsResponse,
    OrgsListSecurityManagerTeamsError,
    TData
  >({
    ...orgsListSecurityManagerTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
 *
 * GitHub Apps must have the `administration` organization read permission to use this endpoint.
 */
export const useOrgsListSecurityManagerTeams = <
  TData = OrgsListSecurityManagerTeamsResponse,
>(
  variables: OrgsListSecurityManagerTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListSecurityManagerTeamsResponse,
      OrgsListSecurityManagerTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListSecurityManagerTeamsResponse,
    OrgsListSecurityManagerTeamsError,
    TData
  >({
    ...orgsListSecurityManagerTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsRemoveSecurityManagerTeamPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type OrgsRemoveSecurityManagerTeamError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsRemoveSecurityManagerTeamVariables = {
  pathParams: OrgsRemoveSecurityManagerTeamPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.
 *
 * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
 */
export const fetchOrgsRemoveSecurityManagerTeam = (
  variables: OrgsRemoveSecurityManagerTeamVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsRemoveSecurityManagerTeamError,
    undefined,
    {},
    {},
    OrgsRemoveSecurityManagerTeamPathParams
  >({
    url: "/orgs/{org}/security-managers/teams/{teamSlug}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.
 *
 * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
 */
export const useOrgsRemoveSecurityManagerTeam = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveSecurityManagerTeamError,
      OrgsRemoveSecurityManagerTeamVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveSecurityManagerTeamError,
    OrgsRemoveSecurityManagerTeamVariables
  >({
    mutationFn: (variables: OrgsRemoveSecurityManagerTeamVariables) =>
      fetchOrgsRemoveSecurityManagerTeam({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OrgsAddSecurityManagerTeamPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type OrgsAddSecurityManagerTeamError = Fetcher.ErrorWrapper<undefined>;

export type OrgsAddSecurityManagerTeamVariables = {
  pathParams: OrgsAddSecurityManagerTeamPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.
 *
 * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
 */
export const fetchOrgsAddSecurityManagerTeam = (
  variables: OrgsAddSecurityManagerTeamVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsAddSecurityManagerTeamError,
    undefined,
    {},
    {},
    OrgsAddSecurityManagerTeamPathParams
  >({
    url: "/orgs/{org}/security-managers/teams/{teamSlug}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
 *
 * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.
 *
 * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
 */
export const useOrgsAddSecurityManagerTeam = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsAddSecurityManagerTeamError,
      OrgsAddSecurityManagerTeamVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsAddSecurityManagerTeamError,
    OrgsAddSecurityManagerTeamVariables
  >({
    mutationFn: (variables: OrgsAddSecurityManagerTeamVariables) =>
      fetchOrgsAddSecurityManagerTeam({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type BillingGetGithubActionsBillingOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type BillingGetGithubActionsBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubActionsBillingOrgVariables = {
  pathParams: BillingGetGithubActionsBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubActionsBillingOrg = (
  variables: BillingGetGithubActionsBillingOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingOrgError,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/actions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const billingGetGithubActionsBillingOrgQuery = (
  variables: BillingGetGithubActionsBillingOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/settings/billing/actions",
    operationId: "billingGetGithubActionsBillingOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetGithubActionsBillingOrg(variables, signal),
});

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useSuspenseBillingGetGithubActionsBillingOrg = <
  TData = Schemas.ActionsBillingUsage,
>(
  variables: BillingGetGithubActionsBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingOrgError,
    TData
  >({
    ...billingGetGithubActionsBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubActionsBillingOrg = <
  TData = Schemas.ActionsBillingUsage,
>(
  variables: BillingGetGithubActionsBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingOrgError,
    TData
  >({
    ...billingGetGithubActionsBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type BillingGetGithubPackagesBillingOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type BillingGetGithubPackagesBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubPackagesBillingOrgVariables = {
  pathParams: BillingGetGithubPackagesBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubPackagesBillingOrg = (
  variables: BillingGetGithubPackagesBillingOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingOrgError,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/packages",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const billingGetGithubPackagesBillingOrgQuery = (
  variables: BillingGetGithubPackagesBillingOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PackagesBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/settings/billing/packages",
    operationId: "billingGetGithubPackagesBillingOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetGithubPackagesBillingOrg(variables, signal),
});

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useSuspenseBillingGetGithubPackagesBillingOrg = <
  TData = Schemas.PackagesBillingUsage,
>(
  variables: BillingGetGithubPackagesBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingOrgError,
    TData
  >({
    ...billingGetGithubPackagesBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubPackagesBillingOrg = <
  TData = Schemas.PackagesBillingUsage,
>(
  variables: BillingGetGithubPackagesBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingOrgError,
    TData
  >({
    ...billingGetGithubPackagesBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type BillingGetSharedStorageBillingOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type BillingGetSharedStorageBillingOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetSharedStorageBillingOrgVariables = {
  pathParams: BillingGetSharedStorageBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetSharedStorageBillingOrg = (
  variables: BillingGetSharedStorageBillingOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingOrgError,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/shared-storage",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const billingGetSharedStorageBillingOrgQuery = (
  variables: BillingGetSharedStorageBillingOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CombinedBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/settings/billing/shared-storage",
    operationId: "billingGetSharedStorageBillingOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetSharedStorageBillingOrg(variables, signal),
});

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useSuspenseBillingGetSharedStorageBillingOrg = <
  TData = Schemas.CombinedBillingUsage,
>(
  variables: BillingGetSharedStorageBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingOrgError,
    TData
  >({
    ...billingGetSharedStorageBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetSharedStorageBillingOrg = <
  TData = Schemas.CombinedBillingUsage,
>(
  variables: BillingGetSharedStorageBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingOrgError,
    TData
  >({
    ...billingGetSharedStorageBillingOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsListPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type TeamsListQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type TeamsListResponse = Schemas.Team[];

export type TeamsListVariables = {
  pathParams: TeamsListPathParams;
  queryParams?: TeamsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const fetchTeamsList = (
  variables: TeamsListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListResponse,
    TeamsListError,
    undefined,
    {},
    TeamsListQueryParams,
    TeamsListPathParams
  >({ url: "/orgs/{org}/teams", method: "get", ...variables, signal });

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const teamsListQuery = (
  variables: TeamsListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<TeamsListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams",
    operationId: "teamsList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsList(variables, signal),
});

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const useSuspenseTeamsList = <TData = TeamsListResponse>(
  variables: TeamsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TeamsListResponse, TeamsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<TeamsListResponse, TeamsListError, TData>({
    ...teamsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const useTeamsList = <TData = TeamsListResponse>(
  variables: TeamsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TeamsListResponse, TeamsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<TeamsListResponse, TeamsListError, TData>({
    ...teamsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsCreatePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type TeamsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsCreateRequestBody = {
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * List GitHub IDs for organization members who will become team maintainers.
   */
  maintainers?: string[];
  /**
   * The name of the team.
   */
  name: string;
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number;
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
   *
   * @default pull
   */
  permission?: "pull" | "push";
  /**
   * The level of privacy this team should have. The options are:
   * **For a non-nested team:**
   *  * `secret` - only visible to organization owners and members of this team.
   *  * `closed` - visible to all members of this organization.
   * Default: `secret`
   * **For a parent or child team:**
   *  * `closed` - visible to all members of this organization.
   * Default for child team: `closed`
   */
  privacy?: "secret" | "closed";
  /**
   * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
   */
  repo_names?: string[];
};

export type TeamsCreateVariables = {
  body: TeamsCreateRequestBody;
  pathParams: TeamsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const fetchTeamsCreate = (
  variables: TeamsCreateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsCreateError,
    TeamsCreateRequestBody,
    {},
    {},
    TeamsCreatePathParams
  >({ url: "/orgs/{org}/teams", method: "post", ...variables, signal });

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const useTeamsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsCreateError,
      TeamsCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsCreateError,
    TeamsCreateVariables
  >({
    mutationFn: (variables: TeamsCreateVariables) =>
      fetchTeamsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsDeleteInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsDeleteInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteInOrgVariables = {
  pathParams: TeamsDeleteInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsDeleteInOrg = (
  variables: TeamsDeleteInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsDeleteInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteInOrgError,
      TeamsDeleteInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteInOrgError,
    TeamsDeleteInOrgVariables
  >({
    mutationFn: (variables: TeamsDeleteInOrgVariables) =>
      fetchTeamsDeleteInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsGetByNamePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsGetByNameError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetByNameVariables = {
  pathParams: TeamsGetByNamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsGetByName = (
  variables: TeamsGetByNameVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsGetByNameError,
    undefined,
    {},
    {},
    TeamsGetByNamePathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const teamsGetByNameQuery = (
  variables: TeamsGetByNameVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.TeamFull>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}",
    operationId: "teamsGetByName",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetByName(variables, signal),
});

/**
 * Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const useSuspenseTeamsGetByName = <TData = Schemas.TeamFull>(
  variables: TeamsGetByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetByNameError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamFull,
    TeamsGetByNameError,
    TData
  >({
    ...teamsGetByNameQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsGetByName = <TData = Schemas.TeamFull>(
  variables: TeamsGetByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetByNameError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.TeamFull, TeamsGetByNameError, TData>({
    ...teamsGetByNameQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsUpdateInOrgError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsUpdateInOrgRequestBody = {
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * The name of the team.
   */
  name?: string;
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
   * **For a non-nested team:**
   *  * `secret` - only visible to organization owners and members of this team.
   *  * `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   *  * `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateInOrgVariables = {
  body?: TeamsUpdateInOrgRequestBody;
  pathParams: TeamsUpdateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsUpdateInOrg = (
  variables: TeamsUpdateInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateInOrgError,
    TeamsUpdateInOrgRequestBody,
    {},
    {},
    TeamsUpdateInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsUpdateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsUpdateInOrgError,
      TeamsUpdateInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsUpdateInOrgError,
    TeamsUpdateInOrgVariables
  >({
    mutationFn: (variables: TeamsUpdateInOrgVariables) =>
      fetchTeamsUpdateInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsListDiscussionsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListDiscussionsInOrgQueryParams = {
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Pinned discussions only filter
   */
  pinned?: string;
};

export type TeamsListDiscussionsInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionsInOrgResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsInOrgVariables = {
  pathParams: TeamsListDiscussionsInOrgPathParams;
  queryParams?: TeamsListDiscussionsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsListDiscussionsInOrg = (
  variables: TeamsListDiscussionsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListDiscussionsInOrgResponse,
    TeamsListDiscussionsInOrgError,
    undefined,
    {},
    TeamsListDiscussionsInOrgQueryParams,
    TeamsListDiscussionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const teamsListDiscussionsInOrgQuery = (
  variables: TeamsListDiscussionsInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListDiscussionsInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions",
    operationId: "teamsListDiscussionsInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListDiscussionsInOrg(variables, signal),
});

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useSuspenseTeamsListDiscussionsInOrg = <
  TData = TeamsListDiscussionsInOrgResponse,
>(
  variables: TeamsListDiscussionsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsInOrgResponse,
      TeamsListDiscussionsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListDiscussionsInOrgResponse,
    TeamsListDiscussionsInOrgError,
    TData
  >({
    ...teamsListDiscussionsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsListDiscussionsInOrg = <
  TData = TeamsListDiscussionsInOrgResponse,
>(
  variables: TeamsListDiscussionsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsInOrgResponse,
      TeamsListDiscussionsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsInOrgResponse,
    TeamsListDiscussionsInOrgError,
    TData
  >({
    ...teamsListDiscussionsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsCreateDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsCreateDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionInOrgRequestBody = {
  /**
   * The discussion post's body text.
   */
  body: string;
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /**
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionInOrgVariables = {
  body: TeamsCreateDiscussionInOrgRequestBody;
  pathParams: TeamsCreateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsCreateDiscussionInOrg = (
  variables: TeamsCreateDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionInOrgError,
    TeamsCreateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsCreateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsCreateDiscussionInOrgError,
      TeamsCreateDiscussionInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionInOrgError,
    TeamsCreateDiscussionInOrgVariables
  >({
    mutationFn: (variables: TeamsCreateDiscussionInOrgVariables) =>
      fetchTeamsCreateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsDeleteDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsDeleteDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionInOrgVariables = {
  pathParams: TeamsDeleteDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsDeleteDiscussionInOrg = (
  variables: TeamsDeleteDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsDeleteDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionInOrgError,
      TeamsDeleteDiscussionInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionInOrgError,
    TeamsDeleteDiscussionInOrgVariables
  >({
    mutationFn: (variables: TeamsDeleteDiscussionInOrgVariables) =>
      fetchTeamsDeleteDiscussionInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsGetDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsGetDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionInOrgVariables = {
  pathParams: TeamsGetDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsGetDiscussionInOrg = (
  variables: TeamsGetDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionInOrgError,
    undefined,
    {},
    {},
    TeamsGetDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const teamsGetDiscussionInOrgQuery = (
  variables: TeamsGetDiscussionInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamDiscussion>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    operationId: "teamsGetDiscussionInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetDiscussionInOrg(variables, signal),
});

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useSuspenseTeamsGetDiscussionInOrg = <
  TData = Schemas.TeamDiscussion,
>(
  variables: TeamsGetDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionInOrgError,
    TData
  >({
    ...teamsGetDiscussionInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsGetDiscussionInOrg = <TData = Schemas.TeamDiscussion>(
  variables: TeamsGetDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionInOrgError,
    TData
  >({
    ...teamsGetDiscussionInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsUpdateDiscussionInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionInOrgRequestBody = {
  /**
   * The discussion post's body text.
   */
  body?: string;
  /**
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionInOrgVariables = {
  body?: TeamsUpdateDiscussionInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsUpdateDiscussionInOrg = (
  variables: TeamsUpdateDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionInOrgError,
    TeamsUpdateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsUpdateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsUpdateDiscussionInOrgError,
      TeamsUpdateDiscussionInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionInOrgError,
    TeamsUpdateDiscussionInOrgVariables
  >({
    mutationFn: (variables: TeamsUpdateDiscussionInOrgVariables) =>
      fetchTeamsUpdateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsListDiscussionCommentsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsInOrgQueryParams = {
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionCommentsInOrgResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsInOrgVariables = {
  pathParams: TeamsListDiscussionCommentsInOrgPathParams;
  queryParams?: TeamsListDiscussionCommentsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsListDiscussionCommentsInOrg = (
  variables: TeamsListDiscussionCommentsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListDiscussionCommentsInOrgResponse,
    TeamsListDiscussionCommentsInOrgError,
    undefined,
    {},
    TeamsListDiscussionCommentsInOrgQueryParams,
    TeamsListDiscussionCommentsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const teamsListDiscussionCommentsInOrgQuery = (
  variables: TeamsListDiscussionCommentsInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListDiscussionCommentsInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    operationId: "teamsListDiscussionCommentsInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListDiscussionCommentsInOrg(variables, signal),
});

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useSuspenseTeamsListDiscussionCommentsInOrg = <
  TData = TeamsListDiscussionCommentsInOrgResponse,
>(
  variables: TeamsListDiscussionCommentsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsInOrgResponse,
      TeamsListDiscussionCommentsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListDiscussionCommentsInOrgResponse,
    TeamsListDiscussionCommentsInOrgError,
    TData
  >({
    ...teamsListDiscussionCommentsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsListDiscussionCommentsInOrg = <
  TData = TeamsListDiscussionCommentsInOrgResponse,
>(
  variables: TeamsListDiscussionCommentsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsInOrgResponse,
      TeamsListDiscussionCommentsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsInOrgResponse,
    TeamsListDiscussionCommentsInOrgError,
    TData
  >({
    ...teamsListDiscussionCommentsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsCreateDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionCommentInOrgRequestBody = {
  /**
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentInOrgVariables = {
  body: TeamsCreateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsCreateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsCreateDiscussionCommentInOrg = (
  variables: TeamsCreateDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentInOrgError,
    TeamsCreateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsCreateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsCreateDiscussionCommentInOrgError,
      TeamsCreateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentInOrgError,
    TeamsCreateDiscussionCommentInOrgVariables
  >({
    mutationFn: (variables: TeamsCreateDiscussionCommentInOrgVariables) =>
      fetchTeamsCreateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsDeleteDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionCommentInOrgVariables = {
  pathParams: TeamsDeleteDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsDeleteDiscussionCommentInOrg = (
  variables: TeamsDeleteDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionCommentInOrgError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsDeleteDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionCommentInOrgError,
      TeamsDeleteDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionCommentInOrgError,
    TeamsDeleteDiscussionCommentInOrgVariables
  >({
    mutationFn: (variables: TeamsDeleteDiscussionCommentInOrgVariables) =>
      fetchTeamsDeleteDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsGetDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsGetDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionCommentInOrgVariables = {
  pathParams: TeamsGetDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsGetDiscussionCommentInOrg = (
  variables: TeamsGetDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentInOrgError,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const teamsGetDiscussionCommentInOrgQuery = (
  variables: TeamsGetDiscussionCommentInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamDiscussionComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    operationId: "teamsGetDiscussionCommentInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetDiscussionCommentInOrg(variables, signal),
});

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useSuspenseTeamsGetDiscussionCommentInOrg = <
  TData = Schemas.TeamDiscussionComment,
>(
  variables: TeamsGetDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentInOrgError,
    TData
  >({
    ...teamsGetDiscussionCommentInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsGetDiscussionCommentInOrg = <
  TData = Schemas.TeamDiscussionComment,
>(
  variables: TeamsGetDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentInOrgError,
    TData
  >({
    ...teamsGetDiscussionCommentInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionCommentInOrgRequestBody = {
  /**
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentInOrgVariables = {
  body: TeamsUpdateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsUpdateDiscussionCommentInOrg = (
  variables: TeamsUpdateDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentInOrgError,
    TeamsUpdateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsUpdateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsUpdateDiscussionCommentInOrgError,
      TeamsUpdateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentInOrgError,
    TeamsUpdateDiscussionCommentInOrgVariables
  >({
    mutationFn: (variables: TeamsUpdateDiscussionCommentInOrgVariables) =>
      fetchTeamsUpdateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsListForTeamDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionCommentInOrgResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionCommentInOrg = (
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    ReactionsListForTeamDiscussionCommentInOrgError,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentInOrgQueryParams,
    ReactionsListForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const reactionsListForTeamDiscussionCommentInOrgQuery = (
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForTeamDiscussionCommentInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    operationId: "reactionsListForTeamDiscussionCommentInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForTeamDiscussionCommentInOrg(variables, signal),
});

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useSuspenseReactionsListForTeamDiscussionCommentInOrg = <
  TData = ReactionsListForTeamDiscussionCommentInOrgResponse,
>(
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentInOrgResponse,
      ReactionsListForTeamDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    ReactionsListForTeamDiscussionCommentInOrgError,
    TData
  >({
    ...reactionsListForTeamDiscussionCommentInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsListForTeamDiscussionCommentInOrg = <
  TData = ReactionsListForTeamDiscussionCommentInOrgResponse,
>(
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentInOrgResponse,
      ReactionsListForTeamDiscussionCommentInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    ReactionsListForTeamDiscussionCommentInOrgError,
    TData
  >({
    ...reactionsListForTeamDiscussionCommentInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForTeamDiscussionCommentInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionCommentInOrgRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionCommentInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionCommentInOrg = (
  variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentInOrgError,
    ReactionsCreateForTeamDiscussionCommentInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionCommentInOrgError,
      ReactionsCreateForTeamDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentInOrgError,
    ReactionsCreateForTeamDiscussionCommentInOrgVariables
  >({
    mutationFn: (
      variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables,
    ) =>
      fetchReactionsCreateForTeamDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsDeleteForTeamDiscussionCommentPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForTeamDiscussionCommentVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussionComment = (
  variables: ReactionsDeleteForTeamDiscussionCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForTeamDiscussionCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionCommentPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussionComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForTeamDiscussionCommentError,
      ReactionsDeleteForTeamDiscussionCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForTeamDiscussionCommentError,
    ReactionsDeleteForTeamDiscussionCommentVariables
  >({
    mutationFn: (variables: ReactionsDeleteForTeamDiscussionCommentVariables) =>
      fetchReactionsDeleteForTeamDiscussionComment({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsListForTeamDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionInOrgQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionInOrgResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionInOrg = (
  variables: ReactionsListForTeamDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForTeamDiscussionInOrgResponse,
    ReactionsListForTeamDiscussionInOrgError,
    undefined,
    {},
    ReactionsListForTeamDiscussionInOrgQueryParams,
    ReactionsListForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const reactionsListForTeamDiscussionInOrgQuery = (
  variables: ReactionsListForTeamDiscussionInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForTeamDiscussionInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    operationId: "reactionsListForTeamDiscussionInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForTeamDiscussionInOrg(variables, signal),
});

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useSuspenseReactionsListForTeamDiscussionInOrg = <
  TData = ReactionsListForTeamDiscussionInOrgResponse,
>(
  variables: ReactionsListForTeamDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionInOrgResponse,
      ReactionsListForTeamDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForTeamDiscussionInOrgResponse,
    ReactionsListForTeamDiscussionInOrgError,
    TData
  >({
    ...reactionsListForTeamDiscussionInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsListForTeamDiscussionInOrg = <
  TData = ReactionsListForTeamDiscussionInOrgResponse,
>(
  variables: ReactionsListForTeamDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionInOrgResponse,
      ReactionsListForTeamDiscussionInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionInOrgResponse,
    ReactionsListForTeamDiscussionInOrgError,
    TData
  >({
    ...reactionsListForTeamDiscussionInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForTeamDiscussionInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionInOrgRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionInOrg = (
  variables: ReactionsCreateForTeamDiscussionInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionInOrgError,
    ReactionsCreateForTeamDiscussionInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionInOrgError,
      ReactionsCreateForTeamDiscussionInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionInOrgError,
    ReactionsCreateForTeamDiscussionInOrgVariables
  >({
    mutationFn: (variables: ReactionsCreateForTeamDiscussionInOrgVariables) =>
      fetchReactionsCreateForTeamDiscussionInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsDeleteForTeamDiscussionPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForTeamDiscussionVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussion = (
  variables: ReactionsDeleteForTeamDiscussionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForTeamDiscussionError,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForTeamDiscussionError,
      ReactionsDeleteForTeamDiscussionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForTeamDiscussionError,
    ReactionsDeleteForTeamDiscussionVariables
  >({
    mutationFn: (variables: ReactionsDeleteForTeamDiscussionVariables) =>
      fetchReactionsDeleteForTeamDiscussion({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListPendingInvitationsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListPendingInvitationsInOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListPendingInvitationsInOrgResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsInOrgVariables = {
  pathParams: TeamsListPendingInvitationsInOrgPathParams;
  queryParams?: TeamsListPendingInvitationsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const fetchTeamsListPendingInvitationsInOrg = (
  variables: TeamsListPendingInvitationsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListPendingInvitationsInOrgResponse,
    TeamsListPendingInvitationsInOrgError,
    undefined,
    {},
    TeamsListPendingInvitationsInOrgQueryParams,
    TeamsListPendingInvitationsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/invitations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const teamsListPendingInvitationsInOrgQuery = (
  variables: TeamsListPendingInvitationsInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListPendingInvitationsInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/invitations",
    operationId: "teamsListPendingInvitationsInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListPendingInvitationsInOrg(variables, signal),
});

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const useSuspenseTeamsListPendingInvitationsInOrg = <
  TData = TeamsListPendingInvitationsInOrgResponse,
>(
  variables: TeamsListPendingInvitationsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsInOrgResponse,
      TeamsListPendingInvitationsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListPendingInvitationsInOrgResponse,
    TeamsListPendingInvitationsInOrgError,
    TData
  >({
    ...teamsListPendingInvitationsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const useTeamsListPendingInvitationsInOrg = <
  TData = TeamsListPendingInvitationsInOrgResponse,
>(
  variables: TeamsListPendingInvitationsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsInOrgResponse,
      TeamsListPendingInvitationsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsInOrgResponse,
    TeamsListPendingInvitationsInOrgError,
    TData
  >({
    ...teamsListPendingInvitationsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsListMembersInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListMembersInOrgQueryParams = {
  /**
   * Filters members returned by their role in the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListMembersInOrgResponse = Schemas.SimpleUser[];

export type TeamsListMembersInOrgVariables = {
  pathParams: TeamsListMembersInOrgPathParams;
  queryParams?: TeamsListMembersInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsListMembersInOrg = (
  variables: TeamsListMembersInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListMembersInOrgResponse,
    TeamsListMembersInOrgError,
    undefined,
    {},
    TeamsListMembersInOrgQueryParams,
    TeamsListMembersInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/members",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const teamsListMembersInOrgQuery = (
  variables: TeamsListMembersInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListMembersInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/members",
    operationId: "teamsListMembersInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListMembersInOrg(variables, signal),
});

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useSuspenseTeamsListMembersInOrg = <
  TData = TeamsListMembersInOrgResponse,
>(
  variables: TeamsListMembersInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersInOrgResponse,
      TeamsListMembersInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListMembersInOrgResponse,
    TeamsListMembersInOrgError,
    TData
  >({
    ...teamsListMembersInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsListMembersInOrg = <TData = TeamsListMembersInOrgResponse>(
  variables: TeamsListMembersInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersInOrgResponse,
      TeamsListMembersInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersInOrgResponse,
    TeamsListMembersInOrgError,
    TData
  >({
    ...teamsListMembersInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveMembershipForUserInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsRemoveMembershipForUserInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMembershipForUserInOrgVariables = {
  pathParams: TeamsRemoveMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsRemoveMembershipForUserInOrg = (
  variables: TeamsRemoveMembershipForUserInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveMembershipForUserInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsRemoveMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMembershipForUserInOrgError,
      TeamsRemoveMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMembershipForUserInOrgError,
    TeamsRemoveMembershipForUserInOrgVariables
  >({
    mutationFn: (variables: TeamsRemoveMembershipForUserInOrgVariables) =>
      fetchTeamsRemoveMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsGetMembershipForUserInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsGetMembershipForUserInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetMembershipForUserInOrgVariables = {
  pathParams: TeamsGetMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserInOrg = (
  variables: TeamsGetMembershipForUserInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserInOrgError,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const teamsGetMembershipForUserInOrgQuery = (
  variables: TeamsGetMembershipForUserInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamMembership>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    operationId: "teamsGetMembershipForUserInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetMembershipForUserInOrg(variables, signal),
});

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useSuspenseTeamsGetMembershipForUserInOrg = <
  TData = Schemas.TeamMembership,
>(
  variables: TeamsGetMembershipForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserInOrgError,
    TData
  >({
    ...teamsGetMembershipForUserInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserInOrg = <
  TData = Schemas.TeamMembership,
>(
  variables: TeamsGetMembershipForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserInOrgError,
    TData
  >({
    ...teamsGetMembershipForUserInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateMembershipForUserInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsAddOrUpdateMembershipForUserInOrgRequestBody = {
  /**
   * The role that this user should have in the team.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserInOrgVariables = {
  body?: TeamsAddOrUpdateMembershipForUserInOrgRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsAddOrUpdateMembershipForUserInOrg = (
  variables: TeamsAddOrUpdateMembershipForUserInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgError,
    TeamsAddOrUpdateMembershipForUserInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsAddOrUpdateMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      TeamsAddOrUpdateMembershipForUserInOrgError,
      TeamsAddOrUpdateMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgError,
    TeamsAddOrUpdateMembershipForUserInOrgVariables
  >({
    mutationFn: (variables: TeamsAddOrUpdateMembershipForUserInOrgVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListProjectsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListProjectsInOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListProjectsInOrgResponse = Schemas.TeamProject[];

export type TeamsListProjectsInOrgVariables = {
  pathParams: TeamsListProjectsInOrgPathParams;
  queryParams?: TeamsListProjectsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const fetchTeamsListProjectsInOrg = (
  variables: TeamsListProjectsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListProjectsInOrgResponse,
    TeamsListProjectsInOrgError,
    undefined,
    {},
    TeamsListProjectsInOrgQueryParams,
    TeamsListProjectsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const teamsListProjectsInOrgQuery = (
  variables: TeamsListProjectsInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListProjectsInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/projects",
    operationId: "teamsListProjectsInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListProjectsInOrg(variables, signal),
});

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const useSuspenseTeamsListProjectsInOrg = <
  TData = TeamsListProjectsInOrgResponse,
>(
  variables: TeamsListProjectsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsInOrgResponse,
      TeamsListProjectsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListProjectsInOrgResponse,
    TeamsListProjectsInOrgError,
    TData
  >({
    ...teamsListProjectsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const useTeamsListProjectsInOrg = <
  TData = TeamsListProjectsInOrgResponse,
>(
  variables: TeamsListProjectsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsInOrgResponse,
      TeamsListProjectsInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsInOrgResponse,
    TeamsListProjectsInOrgError,
    TData
  >({
    ...teamsListProjectsInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveProjectInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsRemoveProjectInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveProjectInOrgVariables = {
  pathParams: TeamsRemoveProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsRemoveProjectInOrg = (
  variables: TeamsRemoveProjectInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveProjectInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveProjectInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsRemoveProjectInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveProjectInOrgError,
      TeamsRemoveProjectInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveProjectInOrgError,
    TeamsRemoveProjectInOrgVariables
  >({
    mutationFn: (variables: TeamsRemoveProjectInOrgVariables) =>
      fetchTeamsRemoveProjectInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsCheckPermissionsForProjectInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsCheckPermissionsForProjectInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForProjectInOrgVariables = {
  pathParams: TeamsCheckPermissionsForProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsCheckPermissionsForProjectInOrg = (
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectInOrgError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const teamsCheckPermissionsForProjectInOrgQuery = (
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamProject>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    operationId: "teamsCheckPermissionsForProjectInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsCheckPermissionsForProjectInOrg(variables, signal),
});

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useSuspenseTeamsCheckPermissionsForProjectInOrg = <
  TData = Schemas.TeamProject,
>(
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectInOrgError,
    TData
  >({
    ...teamsCheckPermissionsForProjectInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsCheckPermissionsForProjectInOrg = <
  TData = Schemas.TeamProject,
>(
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectInOrgError,
    TData
  >({
    ...teamsCheckPermissionsForProjectInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateProjectPermissionsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsInOrgError =
  Fetcher.ErrorWrapper<{
    status: 403;
    payload: {
      documentation_url?: string;
      message?: string;
    };
  }>;

export type TeamsAddOrUpdateProjectPermissionsInOrgVariables = {
  body?: {
    /**
     * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: "read" | "write" | "admin";
  } | null;
  pathParams: TeamsAddOrUpdateProjectPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsInOrg = (
  variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateProjectPermissionsInOrgError,
    {
      /**
       * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
       */
      permission?: "read" | "write" | "admin";
    } | null,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsAddOrUpdateProjectPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateProjectPermissionsInOrgError,
      TeamsAddOrUpdateProjectPermissionsInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateProjectPermissionsInOrgError,
    TeamsAddOrUpdateProjectPermissionsInOrgVariables
  >({
    mutationFn: (variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateProjectPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListReposInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListReposInOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListReposInOrgResponse = Schemas.MinimalRepository[];

export type TeamsListReposInOrgVariables = {
  pathParams: TeamsListReposInOrgPathParams;
  queryParams?: TeamsListReposInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const fetchTeamsListReposInOrg = (
  variables: TeamsListReposInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListReposInOrgResponse,
    TeamsListReposInOrgError,
    undefined,
    {},
    TeamsListReposInOrgQueryParams,
    TeamsListReposInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const teamsListReposInOrgQuery = (
  variables: TeamsListReposInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListReposInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/repos",
    operationId: "teamsListReposInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListReposInOrg(variables, signal),
});

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const useSuspenseTeamsListReposInOrg = <
  TData = TeamsListReposInOrgResponse,
>(
  variables: TeamsListReposInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposInOrgResponse,
      TeamsListReposInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListReposInOrgResponse,
    TeamsListReposInOrgError,
    TData
  >({
    ...teamsListReposInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const useTeamsListReposInOrg = <TData = TeamsListReposInOrgResponse>(
  variables: TeamsListReposInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposInOrgResponse,
      TeamsListReposInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposInOrgResponse,
    TeamsListReposInOrgError,
    TData
  >({
    ...teamsListReposInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveRepoInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsRemoveRepoInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveRepoInOrgVariables = {
  pathParams: TeamsRemoveRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsRemoveRepoInOrg = (
  variables: TeamsRemoveRepoInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveRepoInOrgError,
    undefined,
    {},
    {},
    TeamsRemoveRepoInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsRemoveRepoInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveRepoInOrgError,
      TeamsRemoveRepoInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveRepoInOrgError,
    TeamsRemoveRepoInOrgVariables
  >({
    mutationFn: (variables: TeamsRemoveRepoInOrgVariables) =>
      fetchTeamsRemoveRepoInOrg({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsCheckPermissionsForRepoInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsCheckPermissionsForRepoInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForRepoInOrgVariables = {
  pathParams: TeamsCheckPermissionsForRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsCheckPermissionsForRepoInOrg = (
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoInOrgError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const teamsCheckPermissionsForRepoInOrgQuery = (
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamRepository>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    operationId: "teamsCheckPermissionsForRepoInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsCheckPermissionsForRepoInOrg(variables, signal),
});

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useSuspenseTeamsCheckPermissionsForRepoInOrg = <
  TData = Schemas.TeamRepository,
>(
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamRepository,
      TeamsCheckPermissionsForRepoInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoInOrgError,
    TData
  >({
    ...teamsCheckPermissionsForRepoInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsCheckPermissionsForRepoInOrg = <
  TData = Schemas.TeamRepository,
>(
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamRepository,
      TeamsCheckPermissionsForRepoInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoInOrgError,
    TData
  >({
    ...teamsCheckPermissionsForRepoInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateRepoPermissionsInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsInOrgError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsAddOrUpdateRepoPermissionsInOrgRequestBody = {
  /**
   * The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   *
   * @default push
   */
  permission?: string;
};

export type TeamsAddOrUpdateRepoPermissionsInOrgVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsInOrgRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const fetchTeamsAddOrUpdateRepoPermissionsInOrg = (
  variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgError,
    TeamsAddOrUpdateRepoPermissionsInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const useTeamsAddOrUpdateRepoPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateRepoPermissionsInOrgError,
      TeamsAddOrUpdateRepoPermissionsInOrgVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgError,
    TeamsAddOrUpdateRepoPermissionsInOrgVariables
  >({
    mutationFn: (variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListChildInOrgPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The slug of the team name.
   */
  teamSlug: string;
};

export type TeamsListChildInOrgQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildInOrgError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListChildInOrgResponse = Schemas.Team[];

export type TeamsListChildInOrgVariables = {
  pathParams: TeamsListChildInOrgPathParams;
  queryParams?: TeamsListChildInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const fetchTeamsListChildInOrg = (
  variables: TeamsListChildInOrgVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListChildInOrgResponse,
    TeamsListChildInOrgError,
    undefined,
    {},
    TeamsListChildInOrgQueryParams,
    TeamsListChildInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/teams",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const teamsListChildInOrgQuery = (
  variables: TeamsListChildInOrgVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListChildInOrgResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/orgs/{org}/teams/{teamSlug}/teams",
    operationId: "teamsListChildInOrg",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListChildInOrg(variables, signal),
});

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const useSuspenseTeamsListChildInOrg = <
  TData = TeamsListChildInOrgResponse,
>(
  variables: TeamsListChildInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildInOrgResponse,
      TeamsListChildInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListChildInOrgResponse,
    TeamsListChildInOrgError,
    TData
  >({
    ...teamsListChildInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const useTeamsListChildInOrg = <TData = TeamsListChildInOrgResponse>(
  variables: TeamsListChildInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildInOrgResponse,
      TeamsListChildInOrgError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildInOrgResponse,
    TeamsListChildInOrgError,
    TData
  >({
    ...teamsListChildInOrgQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The security feature to enable or disable.
   */
  securityProduct:
    | "dependency_graph"
    | "dependabot_alerts"
    | "dependabot_security_updates"
    | "advanced_security"
    | "secret_scanning"
    | "secret_scanning_push_protection";
  /**
   * The action to take.
   *
   * `enable_all` means to enable the specified security feature for all repositories in the organization.
   * `disable_all` means to disable the specified security feature for all repositories in the organization.
   */
  enablement: "enable_all" | "disable_all";
};

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposError =
  Fetcher.ErrorWrapper<undefined>;

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposVariables = {
  pathParams: OrgsEnableOrDisableSecurityProductOnAllOrgReposPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables or disables the specified security feature for all repositories in an organization.
 *
 * To use this endpoint, you must be an organization owner or be member of a team with the security manager role.
 * A token with the 'write:org' scope is also required.
 *
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 *
 * For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const fetchOrgsEnableOrDisableSecurityProductOnAllOrgRepos = (
  variables: OrgsEnableOrDisableSecurityProductOnAllOrgReposVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    OrgsEnableOrDisableSecurityProductOnAllOrgReposError,
    undefined,
    {},
    {},
    OrgsEnableOrDisableSecurityProductOnAllOrgReposPathParams
  >({
    url: "/orgs/{org}/{securityProduct}/{enablement}",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Enables or disables the specified security feature for all repositories in an organization.
 *
 * To use this endpoint, you must be an organization owner or be member of a team with the security manager role.
 * A token with the 'write:org' scope is also required.
 *
 * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
 *
 * For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useOrgsEnableOrDisableSecurityProductOnAllOrgRepos = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsEnableOrDisableSecurityProductOnAllOrgReposError,
      OrgsEnableOrDisableSecurityProductOnAllOrgReposVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsEnableOrDisableSecurityProductOnAllOrgReposError,
    OrgsEnableOrDisableSecurityProductOnAllOrgReposVariables
  >({
    mutationFn: (
      variables: OrgsEnableOrDisableSecurityProductOnAllOrgReposVariables,
    ) =>
      fetchOrgsEnableOrDisableSecurityProductOnAllOrgRepos({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProjectsDeleteCardPathParams = {
  /**
   * The unique identifier of the card.
   */
  cardId: number;
};

export type ProjectsDeleteCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsDeleteCardVariables = {
  pathParams: ProjectsDeleteCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteCard = (
  variables: ProjectsDeleteCardVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ProjectsDeleteCardError,
    undefined,
    {},
    {},
    ProjectsDeleteCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProjectsDeleteCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteCardError,
      ProjectsDeleteCardVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteCardError,
    ProjectsDeleteCardVariables
  >({
    mutationFn: (variables: ProjectsDeleteCardVariables) =>
      fetchProjectsDeleteCard({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsGetCardPathParams = {
  /**
   * The unique identifier of the card.
   */
  cardId: number;
};

export type ProjectsGetCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsGetCardVariables = {
  pathParams: ProjectsGetCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetCard = (
  variables: ProjectsGetCardVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsGetCardError,
    undefined,
    {},
    {},
    ProjectsGetCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}",
    method: "get",
    ...variables,
    signal,
  });

export const projectsGetCardQuery = (
  variables: ProjectsGetCardVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProjectCard>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/columns/cards/{cardId}",
    operationId: "projectsGetCard",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsGetCard(variables, signal),
});

export const useSuspenseProjectsGetCard = <TData = Schemas.ProjectCard>(
  variables: ProjectsGetCardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCard,
      ProjectsGetCardError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProjectCard,
    ProjectsGetCardError,
    TData
  >({
    ...projectsGetCardQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useProjectsGetCard = <TData = Schemas.ProjectCard>(
  variables: ProjectsGetCardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCard,
      ProjectsGetCardError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.ProjectCard, ProjectsGetCardError, TData>({
    ...projectsGetCardQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsUpdateCardPathParams = {
  /**
   * The unique identifier of the card.
   */
  cardId: number;
};

export type ProjectsUpdateCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsUpdateCardRequestBody = {
  /**
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  /**
   * The project card's note
   *
   * @example Update all gems
   */
  note?: string | null;
};

export type ProjectsUpdateCardVariables = {
  body?: ProjectsUpdateCardRequestBody;
  pathParams: ProjectsUpdateCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateCard = (
  variables: ProjectsUpdateCardVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsUpdateCardError,
    ProjectsUpdateCardRequestBody,
    {},
    {},
    ProjectsUpdateCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useProjectsUpdateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      ProjectsUpdateCardError,
      ProjectsUpdateCardVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    ProjectsUpdateCardError,
    ProjectsUpdateCardVariables
  >({
    mutationFn: (variables: ProjectsUpdateCardVariables) =>
      fetchProjectsUpdateCard({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsMoveCardPathParams = {
  /**
   * The unique identifier of the card.
   */
  cardId: number;
};

export type ProjectsMoveCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          message?: string;
          resource?: string;
        }[];
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      };
    }
>;

export type ProjectsMoveCardRequestBody = {
  /**
   * The unique identifier of the column the card should be moved to
   *
   * @example 42
   */
  column_id?: number;
  /**
   * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
   *
   * @example bottom
   * @pattern ^(?:top|bottom|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveCardVariables = {
  body: ProjectsMoveCardRequestBody;
  pathParams: ProjectsMoveCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveCard = (
  variables: ProjectsMoveCardVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    {},
    ProjectsMoveCardError,
    ProjectsMoveCardRequestBody,
    {},
    {},
    ProjectsMoveCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}/moves",
    method: "post",
    ...variables,
    signal,
  });

export const useProjectsMoveCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      ProjectsMoveCardError,
      ProjectsMoveCardVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    ProjectsMoveCardError,
    ProjectsMoveCardVariables
  >({
    mutationFn: (variables: ProjectsMoveCardVariables) =>
      fetchProjectsMoveCard({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsDeleteColumnPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsDeleteColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsDeleteColumnVariables = {
  pathParams: ProjectsDeleteColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteColumn = (
  variables: ProjectsDeleteColumnVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ProjectsDeleteColumnError,
    undefined,
    {},
    {},
    ProjectsDeleteColumnPathParams
  >({
    url: "/projects/columns/{columnId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProjectsDeleteColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteColumnError,
      ProjectsDeleteColumnVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteColumnError,
    ProjectsDeleteColumnVariables
  >({
    mutationFn: (variables: ProjectsDeleteColumnVariables) =>
      fetchProjectsDeleteColumn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsGetColumnPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsGetColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ProjectsGetColumnVariables = {
  pathParams: ProjectsGetColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetColumn = (
  variables: ProjectsGetColumnVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsGetColumnError,
    undefined,
    {},
    {},
    ProjectsGetColumnPathParams
  >({
    url: "/projects/columns/{columnId}",
    method: "get",
    ...variables,
    signal,
  });

export const projectsGetColumnQuery = (
  variables: ProjectsGetColumnVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProjectColumn>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/columns/{columnId}",
    operationId: "projectsGetColumn",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsGetColumn(variables, signal),
});

export const useSuspenseProjectsGetColumn = <TData = Schemas.ProjectColumn>(
  variables: ProjectsGetColumnVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectColumn,
      ProjectsGetColumnError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProjectColumn,
    ProjectsGetColumnError,
    TData
  >({
    ...projectsGetColumnQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useProjectsGetColumn = <TData = Schemas.ProjectColumn>(
  variables: ProjectsGetColumnVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectColumn,
      ProjectsGetColumnError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProjectColumn,
    ProjectsGetColumnError,
    TData
  >({
    ...projectsGetColumnQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsUpdateColumnPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsUpdateColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsUpdateColumnRequestBody = {
  /**
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsUpdateColumnVariables = {
  body: ProjectsUpdateColumnRequestBody;
  pathParams: ProjectsUpdateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateColumn = (
  variables: ProjectsUpdateColumnVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsUpdateColumnError,
    ProjectsUpdateColumnRequestBody,
    {},
    {},
    ProjectsUpdateColumnPathParams
  >({
    url: "/projects/columns/{columnId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useProjectsUpdateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      ProjectsUpdateColumnError,
      ProjectsUpdateColumnVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    ProjectsUpdateColumnError,
    ProjectsUpdateColumnVariables
  >({
    mutationFn: (variables: ProjectsUpdateColumnVariables) =>
      fetchProjectsUpdateColumn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsListCardsPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsListCardsQueryParams = {
  /**
   * Filters the project cards that are returned by the card's state.
   *
   * @default not_archived
   */
  archived_state?: "all" | "archived" | "not_archived";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCardsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsListCardsResponse = Schemas.ProjectCard[];

export type ProjectsListCardsVariables = {
  pathParams: ProjectsListCardsPathParams;
  queryParams?: ProjectsListCardsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListCards = (
  variables: ProjectsListCardsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListCardsResponse,
    ProjectsListCardsError,
    undefined,
    {},
    ProjectsListCardsQueryParams,
    ProjectsListCardsPathParams
  >({
    url: "/projects/columns/{columnId}/cards",
    method: "get",
    ...variables,
    signal,
  });

export const projectsListCardsQuery = (
  variables: ProjectsListCardsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListCardsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/columns/{columnId}/cards",
    operationId: "projectsListCards",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListCards(variables, signal),
});

export const useSuspenseProjectsListCards = <TData = ProjectsListCardsResponse>(
  variables: ProjectsListCardsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCardsResponse,
      ProjectsListCardsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListCardsResponse,
    ProjectsListCardsError,
    TData
  >({
    ...projectsListCardsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useProjectsListCards = <TData = ProjectsListCardsResponse>(
  variables: ProjectsListCardsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCardsResponse,
      ProjectsListCardsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCardsResponse,
    ProjectsListCardsError,
    TData
  >({
    ...projectsListCardsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsCreateCardPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsCreateCardError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Schemas.ValidationError | Schemas.ValidationErrorSimple;
    }
  | {
      status: 503;
      payload: {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      };
    }
>;

export type ProjectsCreateCardVariables = {
  body?:
    | {
        /**
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /**
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /**
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      };
  pathParams: ProjectsCreateCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateCard = (
  variables: ProjectsCreateCardVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsCreateCardError,
    | {
        /**
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /**
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /**
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      },
    {},
    {},
    ProjectsCreateCardPathParams
  >({
    url: "/projects/columns/{columnId}/cards",
    method: "post",
    ...variables,
    signal,
  });

export const useProjectsCreateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      ProjectsCreateCardError,
      ProjectsCreateCardVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    ProjectsCreateCardError,
    ProjectsCreateCardVariables
  >({
    mutationFn: (variables: ProjectsCreateCardVariables) =>
      fetchProjectsCreateCard({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsMoveColumnPathParams = {
  /**
   * The unique identifier of the column.
   */
  columnId: number;
};

export type ProjectsMoveColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsMoveColumnRequestBody = {
  /**
   * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
   *
   * @example last
   * @pattern ^(?:first|last|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveColumnVariables = {
  body: ProjectsMoveColumnRequestBody;
  pathParams: ProjectsMoveColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveColumn = (
  variables: ProjectsMoveColumnVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    {},
    ProjectsMoveColumnError,
    ProjectsMoveColumnRequestBody,
    {},
    {},
    ProjectsMoveColumnPathParams
  >({
    url: "/projects/columns/{columnId}/moves",
    method: "post",
    ...variables,
    signal,
  });

export const useProjectsMoveColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      ProjectsMoveColumnError,
      ProjectsMoveColumnVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    ProjectsMoveColumnError,
    ProjectsMoveColumnVariables
  >({
    mutationFn: (variables: ProjectsMoveColumnVariables) =>
      fetchProjectsMoveColumn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsDeletePathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type ProjectsDeleteVariables = {
  pathParams: ProjectsDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const fetchProjectsDelete = (
  variables: ProjectsDeleteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ProjectsDeleteError,
    undefined,
    {},
    {},
    ProjectsDeletePathParams
  >({ url: "/projects/{projectId}", method: "delete", ...variables, signal });

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const useProjectsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsDeleteError,
      ProjectsDeleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsDeleteError,
    ProjectsDeleteVariables
  >({
    mutationFn: (variables: ProjectsDeleteVariables) =>
      fetchProjectsDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsGetPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsGetVariables = {
  pathParams: ProjectsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsGet = (
  variables: ProjectsGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Project,
    ProjectsGetError,
    undefined,
    {},
    {},
    ProjectsGetPathParams
  >({ url: "/projects/{projectId}", method: "get", ...variables, signal });

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const projectsGetQuery = (
  variables: ProjectsGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Project>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/{projectId}",
    operationId: "projectsGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsGet(variables, signal),
});

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useSuspenseProjectsGet = <TData = Schemas.Project>(
  variables: ProjectsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Project, ProjectsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Project, ProjectsGetError, TData>({
    ...projectsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsGet = <TData = Schemas.Project>(
  variables: ProjectsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Project, ProjectsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Project, ProjectsGetError, TData>({
    ...projectsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsUpdatePathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      };
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsUpdateRequestBody = {
  /**
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /**
   * Name of the project
   *
   * @example Week One Sprint
   */
  name?: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private?: boolean;
  /**
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state?: string;
};

export type ProjectsUpdateVariables = {
  body?: ProjectsUpdateRequestBody;
  pathParams: ProjectsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsUpdate = (
  variables: ProjectsUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Project,
    ProjectsUpdateError,
    ProjectsUpdateRequestBody,
    {},
    {},
    ProjectsUpdatePathParams
  >({ url: "/projects/{projectId}", method: "patch", ...variables, signal });

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsUpdateError,
      ProjectsUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsUpdateError,
    ProjectsUpdateVariables
  >({
    mutationFn: (variables: ProjectsUpdateVariables) =>
      fetchProjectsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsListCollaboratorsPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsListCollaboratorsQueryParams = {
  /**
   * Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCollaboratorsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsListCollaboratorsResponse = Schemas.SimpleUser[];

export type ProjectsListCollaboratorsVariables = {
  pathParams: ProjectsListCollaboratorsPathParams;
  queryParams?: ProjectsListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const fetchProjectsListCollaborators = (
  variables: ProjectsListCollaboratorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListCollaboratorsResponse,
    ProjectsListCollaboratorsError,
    undefined,
    {},
    ProjectsListCollaboratorsQueryParams,
    ProjectsListCollaboratorsPathParams
  >({
    url: "/projects/{projectId}/collaborators",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const projectsListCollaboratorsQuery = (
  variables: ProjectsListCollaboratorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListCollaboratorsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/{projectId}/collaborators",
    operationId: "projectsListCollaborators",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListCollaborators(variables, signal),
});

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const useSuspenseProjectsListCollaborators = <
  TData = ProjectsListCollaboratorsResponse,
>(
  variables: ProjectsListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCollaboratorsResponse,
      ProjectsListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListCollaboratorsResponse,
    ProjectsListCollaboratorsError,
    TData
  >({
    ...projectsListCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const useProjectsListCollaborators = <
  TData = ProjectsListCollaboratorsResponse,
>(
  variables: ProjectsListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCollaboratorsResponse,
      ProjectsListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCollaboratorsResponse,
    ProjectsListCollaboratorsError,
    TData
  >({
    ...projectsListCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsRemoveCollaboratorPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ProjectsRemoveCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsRemoveCollaboratorVariables = {
  pathParams: ProjectsRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const fetchProjectsRemoveCollaborator = (
  variables: ProjectsRemoveCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ProjectsRemoveCollaboratorError,
    undefined,
    {},
    {},
    ProjectsRemoveCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const useProjectsRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsRemoveCollaboratorError,
      ProjectsRemoveCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsRemoveCollaboratorError,
    ProjectsRemoveCollaboratorVariables
  >({
    mutationFn: (variables: ProjectsRemoveCollaboratorVariables) =>
      fetchProjectsRemoveCollaborator({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsAddCollaboratorPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ProjectsAddCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsAddCollaboratorVariables = {
  body?: {
    /**
     * The permission to grant the collaborator.
     *
     * @default write
     * @example write
     */
    permission?: "read" | "write" | "admin";
  } | null;
  pathParams: ProjectsAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const fetchProjectsAddCollaborator = (
  variables: ProjectsAddCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ProjectsAddCollaboratorError,
    {
      /**
       * The permission to grant the collaborator.
       *
       * @default write
       * @example write
       */
      permission?: "read" | "write" | "admin";
    } | null,
    {},
    {},
    ProjectsAddCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const useProjectsAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectsAddCollaboratorError,
      ProjectsAddCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ProjectsAddCollaboratorError,
    ProjectsAddCollaboratorVariables
  >({
    mutationFn: (variables: ProjectsAddCollaboratorVariables) =>
      fetchProjectsAddCollaborator({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProjectsGetPermissionForUserPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ProjectsGetPermissionForUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ProjectsGetPermissionForUserVariables = {
  pathParams: ProjectsGetPermissionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const fetchProjectsGetPermissionForUser = (
  variables: ProjectsGetPermissionForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectCollaboratorPermission,
    ProjectsGetPermissionForUserError,
    undefined,
    {},
    {},
    ProjectsGetPermissionForUserPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}/permission",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const projectsGetPermissionForUserQuery = (
  variables: ProjectsGetPermissionForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProjectCollaboratorPermission>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/{projectId}/collaborators/{username}/permission",
    operationId: "projectsGetPermissionForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsGetPermissionForUser(variables, signal),
});

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const useSuspenseProjectsGetPermissionForUser = <
  TData = Schemas.ProjectCollaboratorPermission,
>(
  variables: ProjectsGetPermissionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCollaboratorPermission,
      ProjectsGetPermissionForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProjectCollaboratorPermission,
    ProjectsGetPermissionForUserError,
    TData
  >({
    ...projectsGetPermissionForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const useProjectsGetPermissionForUser = <
  TData = Schemas.ProjectCollaboratorPermission,
>(
  variables: ProjectsGetPermissionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCollaboratorPermission,
      ProjectsGetPermissionForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProjectCollaboratorPermission,
    ProjectsGetPermissionForUserError,
    TData
  >({
    ...projectsGetPermissionForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsListColumnsPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsListColumnsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListColumnsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type ProjectsListColumnsResponse = Schemas.ProjectColumn[];

export type ProjectsListColumnsVariables = {
  pathParams: ProjectsListColumnsPathParams;
  queryParams?: ProjectsListColumnsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListColumns = (
  variables: ProjectsListColumnsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListColumnsResponse,
    ProjectsListColumnsError,
    undefined,
    {},
    ProjectsListColumnsQueryParams,
    ProjectsListColumnsPathParams
  >({
    url: "/projects/{projectId}/columns",
    method: "get",
    ...variables,
    signal,
  });

export const projectsListColumnsQuery = (
  variables: ProjectsListColumnsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListColumnsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/projects/{projectId}/columns",
    operationId: "projectsListColumns",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListColumns(variables, signal),
});

export const useSuspenseProjectsListColumns = <
  TData = ProjectsListColumnsResponse,
>(
  variables: ProjectsListColumnsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListColumnsResponse,
      ProjectsListColumnsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListColumnsResponse,
    ProjectsListColumnsError,
    TData
  >({
    ...projectsListColumnsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useProjectsListColumns = <TData = ProjectsListColumnsResponse>(
  variables: ProjectsListColumnsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListColumnsResponse,
      ProjectsListColumnsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListColumnsResponse,
    ProjectsListColumnsError,
    TData
  >({
    ...projectsListColumnsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsCreateColumnPathParams = {
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type ProjectsCreateColumnError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateColumnRequestBody = {
  /**
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsCreateColumnVariables = {
  body: ProjectsCreateColumnRequestBody;
  pathParams: ProjectsCreateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateColumn = (
  variables: ProjectsCreateColumnVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsCreateColumnError,
    ProjectsCreateColumnRequestBody,
    {},
    {},
    ProjectsCreateColumnPathParams
  >({
    url: "/projects/{projectId}/columns",
    method: "post",
    ...variables,
    signal,
  });

export const useProjectsCreateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      ProjectsCreateColumnError,
      ProjectsCreateColumnVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    ProjectsCreateColumnError,
    ProjectsCreateColumnVariables
  >({
    mutationFn: (variables: ProjectsCreateColumnVariables) =>
      fetchProjectsCreateColumn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RateLimitGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type RateLimitGetVariables = GithubContext["fetcherOptions"];

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const fetchRateLimitGet = (
  variables: RateLimitGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RateLimitOverview,
    RateLimitGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/rate_limit", method: "get", ...variables, signal });

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const rateLimitGetQuery = (
  variables: RateLimitGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RateLimitOverview>;
} => ({
  queryKey: queryKeyFn({
    path: "/rate_limit",
    operationId: "rateLimitGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchRateLimitGet(variables, signal),
});

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const useSuspenseRateLimitGet = <TData = Schemas.RateLimitOverview>(
  variables: RateLimitGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RateLimitOverview,
      RateLimitGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RateLimitOverview,
    RateLimitGetError,
    TData
  >({
    ...rateLimitGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const useRateLimitGet = <TData = Schemas.RateLimitOverview>(
  variables: RateLimitGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RateLimitOverview,
      RateLimitGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RateLimitOverview,
    RateLimitGetError,
    TData
  >({
    ...rateLimitGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListRepoRequiredWorkflowsPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListRepoRequiredWorkflowsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoRequiredWorkflowsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ActionsListRepoRequiredWorkflowsResponse = {
  required_workflows: Schemas.RepoRequiredWorkflow[];
  total_count: number;
};

export type ActionsListRepoRequiredWorkflowsVariables = {
  pathParams: ActionsListRepoRequiredWorkflowsPathParams;
  queryParams?: ActionsListRepoRequiredWorkflowsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsListRepoRequiredWorkflows = (
  variables: ActionsListRepoRequiredWorkflowsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRepoRequiredWorkflowsResponse,
    ActionsListRepoRequiredWorkflowsError,
    undefined,
    {},
    ActionsListRepoRequiredWorkflowsQueryParams,
    ActionsListRepoRequiredWorkflowsPathParams
  >({
    url: "/repos/{org}/{repo}/actions/required_workflows",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsListRepoRequiredWorkflowsQuery = (
  variables: ActionsListRepoRequiredWorkflowsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRepoRequiredWorkflowsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{org}/{repo}/actions/required_workflows",
    operationId: "actionsListRepoRequiredWorkflows",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRepoRequiredWorkflows(variables, signal),
});

/**
 * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsListRepoRequiredWorkflows = <
  TData = ActionsListRepoRequiredWorkflowsResponse,
>(
  variables: ActionsListRepoRequiredWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoRequiredWorkflowsResponse,
      ActionsListRepoRequiredWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRepoRequiredWorkflowsResponse,
    ActionsListRepoRequiredWorkflowsError,
    TData
  >({
    ...actionsListRepoRequiredWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsListRepoRequiredWorkflows = <
  TData = ActionsListRepoRequiredWorkflowsResponse,
>(
  variables: ActionsListRepoRequiredWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoRequiredWorkflowsResponse,
      ActionsListRepoRequiredWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoRequiredWorkflowsResponse,
    ActionsListRepoRequiredWorkflowsError,
    TData
  >({
    ...actionsListRepoRequiredWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetRepoRequiredWorkflowPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the required workflow that has run at least once in a repository.
   */
  requiredWorkflowIdForRepo: number;
};

export type ActionsGetRepoRequiredWorkflowError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ActionsGetRepoRequiredWorkflowVariables = {
  pathParams: ActionsGetRepoRequiredWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsGetRepoRequiredWorkflow = (
  variables: ActionsGetRepoRequiredWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepoRequiredWorkflow,
    ActionsGetRepoRequiredWorkflowError,
    undefined,
    {},
    {},
    ActionsGetRepoRequiredWorkflowPathParams
  >({
    url: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsGetRepoRequiredWorkflowQuery = (
  variables: ActionsGetRepoRequiredWorkflowVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RepoRequiredWorkflow>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}",
    operationId: "actionsGetRepoRequiredWorkflow",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRepoRequiredWorkflow(variables, signal),
});

/**
 * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsGetRepoRequiredWorkflow = <
  TData = Schemas.RepoRequiredWorkflow,
>(
  variables: ActionsGetRepoRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepoRequiredWorkflow,
      ActionsGetRepoRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RepoRequiredWorkflow,
    ActionsGetRepoRequiredWorkflowError,
    TData
  >({
    ...actionsGetRepoRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsGetRepoRequiredWorkflow = <
  TData = Schemas.RepoRequiredWorkflow,
>(
  variables: ActionsGetRepoRequiredWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepoRequiredWorkflow,
      ActionsGetRepoRequiredWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepoRequiredWorkflow,
    ActionsGetRepoRequiredWorkflowError,
    TData
  >({
    ...actionsGetRepoRequiredWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetRepoRequiredWorkflowUsagePathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the required workflow that has run at least once in a repository.
   */
  requiredWorkflowIdForRepo: number;
};

export type ActionsGetRepoRequiredWorkflowUsageError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ActionsGetRepoRequiredWorkflowUsageVariables = {
  pathParams: ActionsGetRepoRequiredWorkflowUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
 *
 * Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetRepoRequiredWorkflowUsage = (
  variables: ActionsGetRepoRequiredWorkflowUsageVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WorkflowUsage,
    ActionsGetRepoRequiredWorkflowUsageError,
    undefined,
    {},
    {},
    ActionsGetRepoRequiredWorkflowUsagePathParams
  >({
    url: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/timing",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
 *
 * Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetRepoRequiredWorkflowUsageQuery = (
  variables: ActionsGetRepoRequiredWorkflowUsageVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WorkflowUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/timing",
    operationId: "actionsGetRepoRequiredWorkflowUsage",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRepoRequiredWorkflowUsage(variables, signal),
});

/**
 * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
 *
 * Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetRepoRequiredWorkflowUsage = <
  TData = Schemas.WorkflowUsage,
>(
  variables: ActionsGetRepoRequiredWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      ActionsGetRepoRequiredWorkflowUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WorkflowUsage,
    ActionsGetRepoRequiredWorkflowUsageError,
    TData
  >({
    ...actionsGetRepoRequiredWorkflowUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
 *
 * Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetRepoRequiredWorkflowUsage = <
  TData = Schemas.WorkflowUsage,
>(
  variables: ActionsGetRepoRequiredWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      ActionsGetRepoRequiredWorkflowUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowUsage,
    ActionsGetRepoRequiredWorkflowUsageError,
    TData
  >({
    ...actionsGetRepoRequiredWorkflowUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeletePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposDeleteError = Fetcher.ErrorWrapper<
  | {
      status: 307;
      payload: Responses.TemporaryRedirect;
    }
  | {
      status: 403;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposDeleteVariables = {
  pathParams: ReposDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const fetchReposDelete = (
  variables: ReposDeleteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteError,
    undefined,
    {},
    {},
    ReposDeletePathParams
  >({ url: "/repos/{owner}/{repo}", method: "delete", ...variables, signal });

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const useReposDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteError,
      ReposDeleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteError,
    ReposDeleteVariables
  >({
    mutationFn: (variables: ReposDeleteVariables) =>
      fetchReposDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetVariables = {
  pathParams: ReposGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const fetchReposGet = (
  variables: ReposGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.FullRepository,
    ReposGetError,
    undefined,
    {},
    {},
    ReposGetPathParams
  >({ url: "/repos/{owner}/{repo}", method: "get", ...variables, signal });

/**
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const reposGetQuery = (
  variables: ReposGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.FullRepository>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}",
    operationId: "reposGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGet(variables, signal),
});

/**
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useSuspenseReposGet = <TData = Schemas.FullRepository>(
  variables: ReposGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FullRepository, ReposGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.FullRepository,
    ReposGetError,
    TData
  >({
    ...reposGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 *
 * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 */
export const useReposGet = <TData = Schemas.FullRepository>(
  variables: ReposGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FullRepository, ReposGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.FullRepository, ReposGetError, TData>({
    ...reposGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 307;
      payload: Responses.TemporaryRedirect;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateRequestBody = {
  /**
   * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
   *
   * @default false
   */
  allow_auto_merge?: boolean;
  /**
   * Either `true` to allow private forks, or `false` to prevent private forks.
   *
   * @default false
   */
  allow_forking?: boolean;
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /**
   * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
   *
   * @default false
   */
  allow_update_branch?: boolean;
  /**
   * Whether to archive this repository. `false` will unarchive a previously archived repository.
   *
   * @default false
   */
  archived?: boolean;
  /**
   * Updates the default branch for this repository.
   */
  default_branch?: string;
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The name of the repository.
   */
  name?: string;
  /**
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   *
   * @default false
   */
  private?: boolean;
  /**
   * Specify which security and analysis features to enable or disable for the repository.
   *
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
   * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
   *
   * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
   */
  security_and_analysis?: {
    /**
     * Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
     */
    advanced_security?: {
      /**
       * Can be `enabled` or `disabled`.
       */
      status?: string;
    };
    /**
     * Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
     */
    secret_scanning?: {
      /**
       * Can be `enabled` or `disabled`.
       */
      status?: string;
    };
    /**
     * Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
     */
    secret_scanning_push_protection?: {
      /**
       * Can be `enabled` or `disabled`.
       */
      status?: string;
    };
  } | null;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   *
   * @default false
   * @deprecated true
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The visibility of the repository.
   */
  visibility?: "public" | "private";
  /**
   * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
   *
   * @default false
   */
  web_commit_signoff_required?: boolean;
};

export type ReposUpdateVariables = {
  body?: ReposUpdateRequestBody;
  pathParams: ReposUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const fetchReposUpdate = (
  variables: ReposUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.FullRepository,
    ReposUpdateError,
    ReposUpdateRequestBody,
    {},
    {},
    ReposUpdatePathParams
  >({ url: "/repos/{owner}/{repo}", method: "patch", ...variables, signal });

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const useReposUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FullRepository,
      ReposUpdateError,
      ReposUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FullRepository,
    ReposUpdateError,
    ReposUpdateVariables
  >({
    mutationFn: (variables: ReposUpdateVariables) =>
      fetchReposUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListArtifactsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListArtifactsForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Filters artifacts by exact match on their name field.
   */
  name?: string;
};

export type ActionsListArtifactsForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListArtifactsForRepoResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListArtifactsForRepoVariables = {
  pathParams: ActionsListArtifactsForRepoPathParams;
  queryParams?: ActionsListArtifactsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListArtifactsForRepo = (
  variables: ActionsListArtifactsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListArtifactsForRepoResponse,
    ActionsListArtifactsForRepoError,
    undefined,
    {},
    ActionsListArtifactsForRepoQueryParams,
    ActionsListArtifactsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsListArtifactsForRepoQuery = (
  variables: ActionsListArtifactsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListArtifactsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/artifacts",
    operationId: "actionsListArtifactsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListArtifactsForRepo(variables, signal),
});

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsListArtifactsForRepo = <
  TData = ActionsListArtifactsForRepoResponse,
>(
  variables: ActionsListArtifactsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListArtifactsForRepoResponse,
      ActionsListArtifactsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListArtifactsForRepoResponse,
    ActionsListArtifactsForRepoError,
    TData
  >({
    ...actionsListArtifactsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListArtifactsForRepo = <
  TData = ActionsListArtifactsForRepoResponse,
>(
  variables: ActionsListArtifactsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListArtifactsForRepoResponse,
      ActionsListArtifactsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListArtifactsForRepoResponse,
    ActionsListArtifactsForRepoError,
    TData
  >({
    ...actionsListArtifactsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteArtifactPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the artifact.
   */
  artifactId: number;
};

export type ActionsDeleteArtifactError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteArtifactVariables = {
  pathParams: ActionsDeleteArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteArtifact = (
  variables: ActionsDeleteArtifactVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteArtifactError,
    undefined,
    {},
    {},
    ActionsDeleteArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteArtifact = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteArtifactError,
      ActionsDeleteArtifactVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteArtifactError,
    ActionsDeleteArtifactVariables
  >({
    mutationFn: (variables: ActionsDeleteArtifactVariables) =>
      fetchActionsDeleteArtifact({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetArtifactPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the artifact.
   */
  artifactId: number;
};

export type ActionsGetArtifactError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetArtifactVariables = {
  pathParams: ActionsGetArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetArtifact = (
  variables: ActionsGetArtifactVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Artifact,
    ActionsGetArtifactError,
    undefined,
    {},
    {},
    ActionsGetArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetArtifactQuery = (
  variables: ActionsGetArtifactVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Artifact>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    operationId: "actionsGetArtifact",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetArtifact(variables, signal),
});

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetArtifact = <TData = Schemas.Artifact>(
  variables: ActionsGetArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Artifact,
      ActionsGetArtifactError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Artifact,
    ActionsGetArtifactError,
    TData
  >({
    ...actionsGetArtifactQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetArtifact = <TData = Schemas.Artifact>(
  variables: ActionsGetArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Artifact,
      ActionsGetArtifactError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Artifact, ActionsGetArtifactError, TData>({
    ...actionsGetArtifactQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDownloadArtifactPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the artifact.
   */
  artifactId: number;
  archiveFormat: string;
};

export type ActionsDownloadArtifactError = Fetcher.ErrorWrapper<{
  status: 410;
  payload: Responses.Gone;
}>;

export type ActionsDownloadArtifactVariables = {
  pathParams: ActionsDownloadArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadArtifact = (
  variables: ActionsDownloadArtifactVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDownloadArtifactError,
    undefined,
    {},
    {},
    ActionsDownloadArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsDownloadArtifactQuery = (
  variables: ActionsDownloadArtifactVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}",
    operationId: "actionsDownloadArtifact",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsDownloadArtifact(variables, signal),
});

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsDownloadArtifact = <TData = undefined>(
  variables: ActionsDownloadArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ActionsDownloadArtifactError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ActionsDownloadArtifactError,
    TData
  >({
    ...actionsDownloadArtifactQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadArtifact = <TData = undefined>(
  variables: ActionsDownloadArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ActionsDownloadArtifactError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, ActionsDownloadArtifactError, TData>({
    ...actionsDownloadArtifactQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetActionsCacheUsagePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetActionsCacheUsageError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetActionsCacheUsageVariables = {
  pathParams: ActionsGetActionsCacheUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetActionsCacheUsage = (
  variables: ActionsGetActionsCacheUsageVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsCacheUsageByRepository,
    ActionsGetActionsCacheUsageError,
    undefined,
    {},
    {},
    ActionsGetActionsCacheUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/cache/usage",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetActionsCacheUsageQuery = (
  variables: ActionsGetActionsCacheUsageVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsCacheUsageByRepository>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/cache/usage",
    operationId: "actionsGetActionsCacheUsage",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetActionsCacheUsage(variables, signal),
});

/**
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetActionsCacheUsage = <
  TData = Schemas.ActionsCacheUsageByRepository,
>(
  variables: ActionsGetActionsCacheUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheUsageByRepository,
      ActionsGetActionsCacheUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsCacheUsageByRepository,
    ActionsGetActionsCacheUsageError,
    TData
  >({
    ...actionsGetActionsCacheUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetActionsCacheUsage = <
  TData = Schemas.ActionsCacheUsageByRepository,
>(
  variables: ActionsGetActionsCacheUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheUsageByRepository,
      ActionsGetActionsCacheUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsCacheUsageByRepository,
    ActionsGetActionsCacheUsageError,
    TData
  >({
    ...actionsGetActionsCacheUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteActionsCacheByKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsDeleteActionsCacheByKeyQueryParams = {
  /**
   * A key for identifying the cache.
   */
  key: string;
  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
};

export type ActionsDeleteActionsCacheByKeyError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteActionsCacheByKeyVariables = {
  pathParams: ActionsDeleteActionsCacheByKeyPathParams;
  queryParams: ActionsDeleteActionsCacheByKeyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteActionsCacheByKey = (
  variables: ActionsDeleteActionsCacheByKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsCacheList,
    ActionsDeleteActionsCacheByKeyError,
    undefined,
    {},
    ActionsDeleteActionsCacheByKeyQueryParams,
    ActionsDeleteActionsCacheByKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/caches",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteActionsCacheByKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ActionsCacheList,
      ActionsDeleteActionsCacheByKeyError,
      ActionsDeleteActionsCacheByKeyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ActionsCacheList,
    ActionsDeleteActionsCacheByKeyError,
    ActionsDeleteActionsCacheByKeyVariables
  >({
    mutationFn: (variables: ActionsDeleteActionsCacheByKeyVariables) =>
      fetchActionsDeleteActionsCacheByKey({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetActionsCacheListPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetActionsCacheListQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /**
   * An explicit key or prefix for identifying the cache
   */
  key?: string;
  /**
   * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
   *
   * @default last_accessed_at
   */
  sort?: "created_at" | "last_accessed_at" | "size_in_bytes";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
};

export type ActionsGetActionsCacheListError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetActionsCacheListVariables = {
  pathParams: ActionsGetActionsCacheListPathParams;
  queryParams?: ActionsGetActionsCacheListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetActionsCacheList = (
  variables: ActionsGetActionsCacheListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsCacheList,
    ActionsGetActionsCacheListError,
    undefined,
    {},
    ActionsGetActionsCacheListQueryParams,
    ActionsGetActionsCacheListPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/caches",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetActionsCacheListQuery = (
  variables: ActionsGetActionsCacheListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsCacheList>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/caches",
    operationId: "actionsGetActionsCacheList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetActionsCacheList(variables, signal),
});

/**
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetActionsCacheList = <
  TData = Schemas.ActionsCacheList,
>(
  variables: ActionsGetActionsCacheListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheList,
      ActionsGetActionsCacheListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsCacheList,
    ActionsGetActionsCacheListError,
    TData
  >({
    ...actionsGetActionsCacheListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the GitHub Actions caches for a repository.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetActionsCacheList = <TData = Schemas.ActionsCacheList>(
  variables: ActionsGetActionsCacheListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsCacheList,
      ActionsGetActionsCacheListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsCacheList,
    ActionsGetActionsCacheListError,
    TData
  >({
    ...actionsGetActionsCacheListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteActionsCacheByIdPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the GitHub Actions cache.
   */
  cacheId: number;
};

export type ActionsDeleteActionsCacheByIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteActionsCacheByIdVariables = {
  pathParams: ActionsDeleteActionsCacheByIdPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a GitHub Actions cache for a repository, using a cache ID.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteActionsCacheById = (
  variables: ActionsDeleteActionsCacheByIdVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteActionsCacheByIdError,
    undefined,
    {},
    {},
    ActionsDeleteActionsCacheByIdPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/caches/{cacheId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a GitHub Actions cache for a repository, using a cache ID.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteActionsCacheById = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteActionsCacheByIdError,
      ActionsDeleteActionsCacheByIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteActionsCacheByIdError,
    ActionsDeleteActionsCacheByIdVariables
  >({
    mutationFn: (variables: ActionsDeleteActionsCacheByIdVariables) =>
      fetchActionsDeleteActionsCacheById({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetJobForWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the job.
   */
  jobId: number;
};

export type ActionsGetJobForWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetJobForWorkflowRunVariables = {
  pathParams: ActionsGetJobForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetJobForWorkflowRun = (
  variables: ActionsGetJobForWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Job,
    ActionsGetJobForWorkflowRunError,
    undefined,
    {},
    {},
    ActionsGetJobForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetJobForWorkflowRunQuery = (
  variables: ActionsGetJobForWorkflowRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Job>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/jobs/{jobId}",
    operationId: "actionsGetJobForWorkflowRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetJobForWorkflowRun(variables, signal),
});

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetJobForWorkflowRun = <TData = Schemas.Job>(
  variables: ActionsGetJobForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Job,
      ActionsGetJobForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Job,
    ActionsGetJobForWorkflowRunError,
    TData
  >({
    ...actionsGetJobForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetJobForWorkflowRun = <TData = Schemas.Job>(
  variables: ActionsGetJobForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Job,
      ActionsGetJobForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Job,
    ActionsGetJobForWorkflowRunError,
    TData
  >({
    ...actionsGetJobForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDownloadJobLogsForWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the job.
   */
  jobId: number;
};

export type ActionsDownloadJobLogsForWorkflowRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadJobLogsForWorkflowRunVariables = {
  pathParams: ActionsDownloadJobLogsForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadJobLogsForWorkflowRun = (
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDownloadJobLogsForWorkflowRunError,
    undefined,
    {},
    {},
    ActionsDownloadJobLogsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}/logs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const actionsDownloadJobLogsForWorkflowRunQuery = (
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/jobs/{jobId}/logs",
    operationId: "actionsDownloadJobLogsForWorkflowRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsDownloadJobLogsForWorkflowRun(variables, signal),
});

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsDownloadJobLogsForWorkflowRun = <
  TData = undefined,
>(
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadJobLogsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ActionsDownloadJobLogsForWorkflowRunError,
    TData
  >({
    ...actionsDownloadJobLogsForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadJobLogsForWorkflowRun = <TData = undefined>(
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadJobLogsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActionsDownloadJobLogsForWorkflowRunError,
    TData
  >({
    ...actionsDownloadJobLogsForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsReRunJobForWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the job.
   */
  jobId: number;
};

export type ActionsReRunJobForWorkflowRunError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ActionsReRunJobForWorkflowRunVariables = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     *
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null;
  pathParams: ActionsReRunJobForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsReRunJobForWorkflowRun = (
  variables: ActionsReRunJobForWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsReRunJobForWorkflowRunError,
    {
      /**
       * Whether to enable debug logging for the re-run.
       *
       * @default false
       */
      enable_debug_logging?: boolean;
    } | null,
    {},
    {},
    ActionsReRunJobForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}/rerun",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsReRunJobForWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsReRunJobForWorkflowRunError,
      ActionsReRunJobForWorkflowRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsReRunJobForWorkflowRunError,
    ActionsReRunJobForWorkflowRunVariables
  >({
    mutationFn: (variables: ActionsReRunJobForWorkflowRunVariables) =>
      fetchActionsReRunJobForWorkflowRun({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetCustomOidcSubClaimForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetCustomOidcSubClaimForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActionsGetCustomOidcSubClaimForRepoVariables = {
  pathParams: ActionsGetCustomOidcSubClaimForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
 */
export const fetchActionsGetCustomOidcSubClaimForRepo = (
  variables: ActionsGetCustomOidcSubClaimForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OidcCustomSubRepo,
    ActionsGetCustomOidcSubClaimForRepoError,
    undefined,
    {},
    {},
    ActionsGetCustomOidcSubClaimForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/oidc/customization/sub",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
 */
export const actionsGetCustomOidcSubClaimForRepoQuery = (
  variables: ActionsGetCustomOidcSubClaimForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OidcCustomSubRepo>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/oidc/customization/sub",
    operationId: "actionsGetCustomOidcSubClaimForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetCustomOidcSubClaimForRepo(variables, signal),
});

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetCustomOidcSubClaimForRepo = <
  TData = Schemas.OidcCustomSubRepo,
>(
  variables: ActionsGetCustomOidcSubClaimForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OidcCustomSubRepo,
      ActionsGetCustomOidcSubClaimForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OidcCustomSubRepo,
    ActionsGetCustomOidcSubClaimForRepoError,
    TData
  >({
    ...actionsGetCustomOidcSubClaimForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
 */
export const useActionsGetCustomOidcSubClaimForRepo = <
  TData = Schemas.OidcCustomSubRepo,
>(
  variables: ActionsGetCustomOidcSubClaimForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OidcCustomSubRepo,
      ActionsGetCustomOidcSubClaimForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OidcCustomSubRepo,
    ActionsGetCustomOidcSubClaimForRepoError,
    TData
  >({
    ...actionsGetCustomOidcSubClaimForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetCustomOidcSubClaimForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsSetCustomOidcSubClaimForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ActionsSetCustomOidcSubClaimForRepoRequestBody = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys?: string[];
  /**
   * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
   */
  use_default: boolean;
};

export type ActionsSetCustomOidcSubClaimForRepoVariables = {
  body: ActionsSetCustomOidcSubClaimForRepoRequestBody;
  pathParams: ActionsSetCustomOidcSubClaimForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsSetCustomOidcSubClaimForRepo = (
  variables: ActionsSetCustomOidcSubClaimForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsSetCustomOidcSubClaimForRepoError,
    ActionsSetCustomOidcSubClaimForRepoRequestBody,
    {},
    {},
    ActionsSetCustomOidcSubClaimForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/oidc/customization/sub",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsSetCustomOidcSubClaimForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsSetCustomOidcSubClaimForRepoError,
      ActionsSetCustomOidcSubClaimForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsSetCustomOidcSubClaimForRepoError,
    ActionsSetCustomOidcSubClaimForRepoVariables
  >({
    mutationFn: (variables: ActionsSetCustomOidcSubClaimForRepoVariables) =>
      fetchActionsSetCustomOidcSubClaimForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetGithubActionsPermissionsRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetGithubActionsPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsPermissionsRepositoryVariables = {
  pathParams: ActionsGetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsRepository = (
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsRepositoryPermissions,
    ActionsGetGithubActionsPermissionsRepositoryError,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const actionsGetGithubActionsPermissionsRepositoryQuery = (
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsRepositoryPermissions>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/permissions",
    operationId: "actionsGetGithubActionsPermissionsRepository",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetGithubActionsPermissionsRepository(variables, signal),
});

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useSuspenseActionsGetGithubActionsPermissionsRepository = <
  TData = Schemas.ActionsRepositoryPermissions,
>(
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsRepositoryPermissions,
      ActionsGetGithubActionsPermissionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsRepositoryPermissions,
    ActionsGetGithubActionsPermissionsRepositoryError,
    TData
  >({
    ...actionsGetGithubActionsPermissionsRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsRepository = <
  TData = Schemas.ActionsRepositoryPermissions,
>(
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsRepositoryPermissions,
      ActionsGetGithubActionsPermissionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsRepositoryPermissions,
    ActionsGetGithubActionsPermissionsRepositoryError,
    TData
  >({
    ...actionsGetGithubActionsPermissionsRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetGithubActionsPermissionsRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsSetGithubActionsPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsPermissionsRepositoryRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled: Schemas.ActionsEnabled;
};

export type ActionsSetGithubActionsPermissionsRepositoryVariables = {
  body: ActionsSetGithubActionsPermissionsRepositoryRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsRepository = (
  variables: ActionsSetGithubActionsPermissionsRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryError,
    ActionsSetGithubActionsPermissionsRepositoryRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetGithubActionsPermissionsRepositoryError,
      ActionsSetGithubActionsPermissionsRepositoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryError,
    ActionsSetGithubActionsPermissionsRepositoryVariables
  >({
    mutationFn: (
      variables: ActionsSetGithubActionsPermissionsRepositoryVariables,
    ) =>
      fetchActionsSetGithubActionsPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetWorkflowAccessToRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetWorkflowAccessToRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowAccessToRepositoryVariables = {
  pathParams: ActionsGetWorkflowAccessToRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowAccessToRepository = (
  variables: ActionsGetWorkflowAccessToRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsWorkflowAccessToRepository,
    ActionsGetWorkflowAccessToRepositoryError,
    undefined,
    {},
    {},
    ActionsGetWorkflowAccessToRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/access",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const actionsGetWorkflowAccessToRepositoryQuery = (
  variables: ActionsGetWorkflowAccessToRepositoryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsWorkflowAccessToRepository>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/permissions/access",
    operationId: "actionsGetWorkflowAccessToRepository",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflowAccessToRepository(variables, signal),
});

/**
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const useSuspenseActionsGetWorkflowAccessToRepository = <
  TData = Schemas.ActionsWorkflowAccessToRepository,
>(
  variables: ActionsGetWorkflowAccessToRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsWorkflowAccessToRepository,
      ActionsGetWorkflowAccessToRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsWorkflowAccessToRepository,
    ActionsGetWorkflowAccessToRepositoryError,
    TData
  >({
    ...actionsGetWorkflowAccessToRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const useActionsGetWorkflowAccessToRepository = <
  TData = Schemas.ActionsWorkflowAccessToRepository,
>(
  variables: ActionsGetWorkflowAccessToRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsWorkflowAccessToRepository,
      ActionsGetWorkflowAccessToRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsWorkflowAccessToRepository,
    ActionsGetWorkflowAccessToRepositoryError,
    TData
  >({
    ...actionsGetWorkflowAccessToRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetWorkflowAccessToRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsSetWorkflowAccessToRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetWorkflowAccessToRepositoryVariables = {
  body: Schemas.ActionsWorkflowAccessToRepository;
  pathParams: ActionsSetWorkflowAccessToRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const fetchActionsSetWorkflowAccessToRepository = (
  variables: ActionsSetWorkflowAccessToRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetWorkflowAccessToRepositoryError,
    Schemas.ActionsWorkflowAccessToRepository,
    {},
    {},
    ActionsSetWorkflowAccessToRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/access",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
 * repository `administration` permission to use this endpoint.
 */
export const useActionsSetWorkflowAccessToRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetWorkflowAccessToRepositoryError,
      ActionsSetWorkflowAccessToRepositoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetWorkflowAccessToRepositoryError,
    ActionsSetWorkflowAccessToRepositoryVariables
  >({
    mutationFn: (variables: ActionsSetWorkflowAccessToRepositoryVariables) =>
      fetchActionsSetWorkflowAccessToRepository({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetAllowedActionsRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetAllowedActionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetAllowedActionsRepositoryVariables = {
  pathParams: ActionsGetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetAllowedActionsRepository = (
  variables: ActionsGetAllowedActionsRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsRepositoryError,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const actionsGetAllowedActionsRepositoryQuery = (
  variables: ActionsGetAllowedActionsRepositoryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.SelectedActions>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    operationId: "actionsGetAllowedActionsRepository",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetAllowedActionsRepository(variables, signal),
});

/**
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useSuspenseActionsGetAllowedActionsRepository = <
  TData = Schemas.SelectedActions,
>(
  variables: ActionsGetAllowedActionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsRepositoryError,
    TData
  >({
    ...actionsGetAllowedActionsRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetAllowedActionsRepository = <
  TData = Schemas.SelectedActions,
>(
  variables: ActionsGetAllowedActionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      ActionsGetAllowedActionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    ActionsGetAllowedActionsRepositoryError,
    TData
  >({
    ...actionsGetAllowedActionsRepositoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetAllowedActionsRepositoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsSetAllowedActionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetAllowedActionsRepositoryVariables = {
  body?: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetAllowedActionsRepository = (
  variables: ActionsSetAllowedActionsRepositoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsSetAllowedActionsRepositoryError,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetAllowedActionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetAllowedActionsRepositoryError,
      ActionsSetAllowedActionsRepositoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetAllowedActionsRepositoryError,
    ActionsSetAllowedActionsRepositoryVariables
  >({
    mutationFn: (variables: ActionsSetAllowedActionsRepositoryVariables) =>
      fetchActionsSetAllowedActionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams =
  {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables =
  {
    pathParams: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const fetchActionsGetGithubActionsDefaultWorkflowPermissionsRepository =
  (
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError,
      undefined,
      {},
      {},
      ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams
    >({
      url: "/repos/{owner}/{repo}/actions/permissions/workflow",
      method: "get",
      ...variables,
      signal,
    });

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryQuery =
  (
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
  ): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({
      signal,
    }: {
      signal?: AbortSignal;
    }) => Promise<Schemas.ActionsGetDefaultWorkflowPermissions>;
  } => ({
    queryKey: queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/permissions/workflow",
      operationId:
        "actionsGetGithubActionsDefaultWorkflowPermissionsRepository",
      variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) =>
      fetchActionsGetGithubActionsDefaultWorkflowPermissionsRepository(
        variables,
        signal,
      ),
  });

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const useSuspenseActionsGetGithubActionsDefaultWorkflowPermissionsRepository =
  <TData = Schemas.ActionsGetDefaultWorkflowPermissions>(
    variables: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        Schemas.ActionsGetDefaultWorkflowPermissions,
        ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError,
      TData
    >({
      ...actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
 * as well as if GitHub Actions can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const useActionsGetGithubActionsDefaultWorkflowPermissionsRepository = <
  TData = Schemas.ActionsGetDefaultWorkflowPermissions,
>(
  variables: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsGetDefaultWorkflowPermissions,
      ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsGetDefaultWorkflowPermissions,
    ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError,
    TData
  >({
    ...actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryQuery(
      variables,
    ),
    ...options,
    ...queryOptions,
  });
};

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams =
  {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryVariables =
  {
    body?: Schemas.ActionsSetDefaultWorkflowPermissions;
    pathParams: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
 * can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const fetchActionsSetGithubActionsDefaultWorkflowPermissionsRepository =
  (
    variables: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      undefined,
      ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError,
      Schemas.ActionsSetDefaultWorkflowPermissions,
      {},
      {},
      ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryPathParams
    >({
      url: "/repos/{owner}/{repo}/actions/permissions/workflow",
      method: "put",
      ...variables,
      signal,
    });

/**
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
 * can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
 */
export const useActionsSetGithubActionsDefaultWorkflowPermissionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError,
      ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError,
    ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryVariables
  >({
    mutationFn: (
      variables: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryVariables,
    ) =>
      fetchActionsSetGithubActionsDefaultWorkflowPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListRequiredWorkflowRunsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the required workflow that has run at least once in a repository.
   */
  requiredWorkflowIdForRepo: number;
};

export type ActionsListRequiredWorkflowRunsQueryParams = {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   *
   * @format date-time
   */
  created?: string;
  /**
   * If `true` pull requests are omitted from the response (empty array).
   *
   * @default false
   */
  exclude_pull_requests?: boolean;
  /**
   * Returns workflow runs with the `check_suite_id` that you specify.
   */
  check_suite_id?: number;
  /**
   * Only returns workflow runs that are associated with the specified `head_sha`.
   */
  head_sha?: string;
};

export type ActionsListRequiredWorkflowRunsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRequiredWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListRequiredWorkflowRunsVariables = {
  pathParams: ActionsListRequiredWorkflowRunsPathParams;
  queryParams?: ActionsListRequiredWorkflowRunsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const fetchActionsListRequiredWorkflowRuns = (
  variables: ActionsListRequiredWorkflowRunsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRequiredWorkflowRunsResponse,
    ActionsListRequiredWorkflowRunsError,
    undefined,
    {},
    ActionsListRequiredWorkflowRunsQueryParams,
    ActionsListRequiredWorkflowRunsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/runs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const actionsListRequiredWorkflowRunsQuery = (
  variables: ActionsListRequiredWorkflowRunsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRequiredWorkflowRunsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/runs",
    operationId: "actionsListRequiredWorkflowRuns",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRequiredWorkflowRuns(variables, signal),
});

/**
 * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useSuspenseActionsListRequiredWorkflowRuns = <
  TData = ActionsListRequiredWorkflowRunsResponse,
>(
  variables: ActionsListRequiredWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRequiredWorkflowRunsResponse,
      ActionsListRequiredWorkflowRunsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRequiredWorkflowRunsResponse,
    ActionsListRequiredWorkflowRunsError,
    TData
  >({
    ...actionsListRequiredWorkflowRunsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
 */
export const useActionsListRequiredWorkflowRuns = <
  TData = ActionsListRequiredWorkflowRunsResponse,
>(
  variables: ActionsListRequiredWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRequiredWorkflowRunsResponse,
      ActionsListRequiredWorkflowRunsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRequiredWorkflowRunsResponse,
    ActionsListRequiredWorkflowRunsError,
    TData
  >({
    ...actionsListRequiredWorkflowRunsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListSelfHostedRunnersForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListSelfHostedRunnersForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListSelfHostedRunnersForRepoResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForRepoVariables = {
  pathParams: ActionsListSelfHostedRunnersForRepoPathParams;
  queryParams?: ActionsListSelfHostedRunnersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForRepo = (
  variables: ActionsListSelfHostedRunnersForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForRepoResponse,
    ActionsListSelfHostedRunnersForRepoError,
    undefined,
    {},
    ActionsListSelfHostedRunnersForRepoQueryParams,
    ActionsListSelfHostedRunnersForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const actionsListSelfHostedRunnersForRepoQuery = (
  variables: ActionsListSelfHostedRunnersForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListSelfHostedRunnersForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runners",
    operationId: "actionsListSelfHostedRunnersForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListSelfHostedRunnersForRepo(variables, signal),
});

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useSuspenseActionsListSelfHostedRunnersForRepo = <
  TData = ActionsListSelfHostedRunnersForRepoResponse,
>(
  variables: ActionsListSelfHostedRunnersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForRepoResponse,
      ActionsListSelfHostedRunnersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListSelfHostedRunnersForRepoResponse,
    ActionsListSelfHostedRunnersForRepoError,
    TData
  >({
    ...actionsListSelfHostedRunnersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForRepo = <
  TData = ActionsListSelfHostedRunnersForRepoResponse,
>(
  variables: ActionsListSelfHostedRunnersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForRepoResponse,
      ActionsListSelfHostedRunnersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForRepoResponse,
    ActionsListSelfHostedRunnersForRepoError,
    TData
  >({
    ...actionsListSelfHostedRunnersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListRunnerApplicationsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListRunnerApplicationsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListRunnerApplicationsForRepoResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForRepoVariables = {
  pathParams: ActionsListRunnerApplicationsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForRepo = (
  variables: ActionsListRunnerApplicationsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRunnerApplicationsForRepoResponse,
    ActionsListRunnerApplicationsForRepoError,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/downloads",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const actionsListRunnerApplicationsForRepoQuery = (
  variables: ActionsListRunnerApplicationsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRunnerApplicationsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runners/downloads",
    operationId: "actionsListRunnerApplicationsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRunnerApplicationsForRepo(variables, signal),
});

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useSuspenseActionsListRunnerApplicationsForRepo = <
  TData = ActionsListRunnerApplicationsForRepoResponse,
>(
  variables: ActionsListRunnerApplicationsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForRepoResponse,
      ActionsListRunnerApplicationsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRunnerApplicationsForRepoResponse,
    ActionsListRunnerApplicationsForRepoError,
    TData
  >({
    ...actionsListRunnerApplicationsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForRepo = <
  TData = ActionsListRunnerApplicationsForRepoResponse,
>(
  variables: ActionsListRunnerApplicationsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForRepoResponse,
      ActionsListRunnerApplicationsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForRepoResponse,
    ActionsListRunnerApplicationsForRepoError,
    TData
  >({
    ...actionsListRunnerApplicationsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateRegistrationTokenForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsCreateRegistrationTokenForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRegistrationTokenForRepoVariables = {
  pathParams: ActionsCreateRegistrationTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForRepo = (
  variables: ActionsCreateRegistrationTokenForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForRepoError,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/registration-token",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRegistrationTokenForRepoError,
      ActionsCreateRegistrationTokenForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRegistrationTokenForRepoError,
    ActionsCreateRegistrationTokenForRepoVariables
  >({
    mutationFn: (variables: ActionsCreateRegistrationTokenForRepoVariables) =>
      fetchActionsCreateRegistrationTokenForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsCreateRemoveTokenForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsCreateRemoveTokenForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRemoveTokenForRepoVariables = {
  pathParams: ActionsCreateRemoveTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForRepo = (
  variables: ActionsCreateRemoveTokenForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForRepoError,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/remove-token",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      ActionsCreateRemoveTokenForRepoError,
      ActionsCreateRemoveTokenForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    ActionsCreateRemoveTokenForRepoError,
    ActionsCreateRemoveTokenForRepoVariables
  >({
    mutationFn: (variables: ActionsCreateRemoveTokenForRepoVariables) =>
      fetchActionsCreateRemoveTokenForRepo({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDeleteSelfHostedRunnerFromRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteSelfHostedRunnerFromRepoVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromRepo = (
  variables: ActionsDeleteSelfHostedRunnerFromRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteSelfHostedRunnerFromRepoError,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteSelfHostedRunnerFromRepoError,
      ActionsDeleteSelfHostedRunnerFromRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteSelfHostedRunnerFromRepoError,
    ActionsDeleteSelfHostedRunnerFromRepoVariables
  >({
    mutationFn: (variables: ActionsDeleteSelfHostedRunnerFromRepoVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetSelfHostedRunnerForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsGetSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForRepo = (
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForRepoError,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const actionsGetSelfHostedRunnerForRepoQuery = (
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Runner>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    operationId: "actionsGetSelfHostedRunnerForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetSelfHostedRunnerForRepo(variables, signal),
});

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useSuspenseActionsGetSelfHostedRunnerForRepo = <
  TData = Schemas.Runner,
>(
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForRepoError,
    TData
  >({
    ...actionsGetSelfHostedRunnerForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsGetSelfHostedRunnerForRepo = <TData = Schemas.Runner>(
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Runner,
      ActionsGetSelfHostedRunnerForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Runner,
    ActionsGetSelfHostedRunnerForRepoError,
    TData
  >({
    ...actionsGetSelfHostedRunnerForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoPathParams =
  {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runnerId: number;
  };

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo = (
  variables: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabelsReadonly,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError,
    undefined,
    {},
    {},
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels from the runner.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabelsReadonly,
      ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError,
      ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabelsReadonly,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError,
    ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoVariables
  >({
    mutationFn: (
      variables: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoVariables,
    ) =>
      fetchActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListLabelsForSelfHostedRunnerForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsListLabelsForSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ActionsListLabelsForSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsListLabelsForSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsListLabelsForSelfHostedRunnerForRepo = (
  variables: ActionsListLabelsForSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForRepoError,
    undefined,
    {},
    {},
    ActionsListLabelsForSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const actionsListLabelsForSelfHostedRunnerForRepoQuery = (
  variables: ActionsListLabelsForSelfHostedRunnerForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Responses.ActionsRunnerLabels>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    operationId: "actionsListLabelsForSelfHostedRunnerForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListLabelsForSelfHostedRunnerForRepo(variables, signal),
});

/**
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useSuspenseActionsListLabelsForSelfHostedRunnerForRepo = <
  TData = Responses.ActionsRunnerLabels,
>(
  variables: ActionsListLabelsForSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ActionsRunnerLabels,
      ActionsListLabelsForSelfHostedRunnerForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForRepoError,
    TData
  >({
    ...actionsListLabelsForSelfHostedRunnerForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsListLabelsForSelfHostedRunnerForRepo = <
  TData = Responses.ActionsRunnerLabels,
>(
  variables: ActionsListLabelsForSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Responses.ActionsRunnerLabels,
      ActionsListLabelsForSelfHostedRunnerForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Responses.ActionsRunnerLabels,
    ActionsListLabelsForSelfHostedRunnerForRepoError,
    TData
  >({
    ...actionsListLabelsForSelfHostedRunnerForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequestBody = {
  /**
   * The names of the custom labels to add to the runner.
   *
   * @maxItems 100
   * @minItems 1
   */
  labels: string[];
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoVariables = {
  body: ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequestBody;
  pathParams: ActionsAddCustomLabelsToSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Add custom labels to a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsAddCustomLabelsToSelfHostedRunnerForRepo = (
  variables: ActionsAddCustomLabelsToSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsAddCustomLabelsToSelfHostedRunnerForRepoError,
    ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequestBody,
    {},
    {},
    ActionsAddCustomLabelsToSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Add custom labels to a self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsAddCustomLabelsToSelfHostedRunnerForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsAddCustomLabelsToSelfHostedRunnerForRepoError,
      ActionsAddCustomLabelsToSelfHostedRunnerForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsAddCustomLabelsToSelfHostedRunnerForRepoError,
    ActionsAddCustomLabelsToSelfHostedRunnerForRepoVariables
  >({
    mutationFn: (
      variables: ActionsAddCustomLabelsToSelfHostedRunnerForRepoVariables,
    ) =>
      fetchActionsAddCustomLabelsToSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequestBody = {
  /**
   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
   *
   * @maxItems 100
   * @minItems 0
   */
  labels: string[];
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoVariables = {
  body: ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequestBody;
  pathParams: ActionsSetCustomLabelsForSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsSetCustomLabelsForSelfHostedRunnerForRepo = (
  variables: ActionsSetCustomLabelsForSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsSetCustomLabelsForSelfHostedRunnerForRepoError,
    ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequestBody,
    {},
    {},
    ActionsSetCustomLabelsForSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsSetCustomLabelsForSelfHostedRunnerForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsSetCustomLabelsForSelfHostedRunnerForRepoError,
      ActionsSetCustomLabelsForSelfHostedRunnerForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsSetCustomLabelsForSelfHostedRunnerForRepoError,
    ActionsSetCustomLabelsForSelfHostedRunnerForRepoVariables
  >({
    mutationFn: (
      variables: ActionsSetCustomLabelsForSelfHostedRunnerForRepoVariables,
    ) =>
      fetchActionsSetCustomLabelsForSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
  /**
   * The name of a self-hosted runner's custom label.
   */
  name: string;
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailedSimple;
      }
  >;

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsRemoveCustomLabelFromSelfHostedRunnerForRepo = (
  variables: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.ActionsRunnerLabels,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError,
    undefined,
    {},
    {},
    ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsRemoveCustomLabelFromSelfHostedRunnerForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.ActionsRunnerLabels,
      ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError,
      ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.ActionsRunnerLabels,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError,
    ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoVariables
  >({
    mutationFn: (
      variables: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoVariables,
    ) =>
      fetchActionsRemoveCustomLabelFromSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListWorkflowRunsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListWorkflowRunsForRepoQueryParams = {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   *
   * @format date-time
   */
  created?: string;
  /**
   * If `true` pull requests are omitted from the response (empty array).
   *
   * @default false
   */
  exclude_pull_requests?: boolean;
  /**
   * Returns workflow runs with the `check_suite_id` that you specify.
   */
  check_suite_id?: number;
  /**
   * Only returns workflow runs that are associated with the specified `head_sha`.
   */
  head_sha?: string;
};

export type ActionsListWorkflowRunsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunsForRepoResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsForRepoVariables = {
  pathParams: ActionsListWorkflowRunsForRepoPathParams;
  queryParams?: ActionsListWorkflowRunsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunsForRepo = (
  variables: ActionsListWorkflowRunsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListWorkflowRunsForRepoResponse,
    ActionsListWorkflowRunsForRepoError,
    undefined,
    {},
    ActionsListWorkflowRunsForRepoQueryParams,
    ActionsListWorkflowRunsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsListWorkflowRunsForRepoQuery = (
  variables: ActionsListWorkflowRunsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListWorkflowRunsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs",
    operationId: "actionsListWorkflowRunsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListWorkflowRunsForRepo(variables, signal),
});

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsListWorkflowRunsForRepo = <
  TData = ActionsListWorkflowRunsForRepoResponse,
>(
  variables: ActionsListWorkflowRunsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsForRepoResponse,
      ActionsListWorkflowRunsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListWorkflowRunsForRepoResponse,
    ActionsListWorkflowRunsForRepoError,
    TData
  >({
    ...actionsListWorkflowRunsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunsForRepo = <
  TData = ActionsListWorkflowRunsForRepoResponse,
>(
  variables: ActionsListWorkflowRunsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsForRepoResponse,
      ActionsListWorkflowRunsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsForRepoResponse,
    ActionsListWorkflowRunsForRepoError,
    TData
  >({
    ...actionsListWorkflowRunsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteWorkflowRunVariables = {
  pathParams: ActionsDeleteWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const fetchActionsDeleteWorkflowRun = (
  variables: ActionsDeleteWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteWorkflowRunError,
    undefined,
    {},
    {},
    ActionsDeleteWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const useActionsDeleteWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteWorkflowRunError,
      ActionsDeleteWorkflowRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteWorkflowRunError,
    ActionsDeleteWorkflowRunVariables
  >({
    mutationFn: (variables: ActionsDeleteWorkflowRunVariables) =>
      fetchActionsDeleteWorkflowRun({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsGetWorkflowRunQueryParams = {
  /**
   * If `true` pull requests are omitted from the response (empty array).
   *
   * @default false
   */
  exclude_pull_requests?: boolean;
};

export type ActionsGetWorkflowRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowRunVariables = {
  pathParams: ActionsGetWorkflowRunPathParams;
  queryParams?: ActionsGetWorkflowRunQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRun = (
  variables: ActionsGetWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunError,
    undefined,
    {},
    ActionsGetWorkflowRunQueryParams,
    ActionsGetWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetWorkflowRunQuery = (
  variables: ActionsGetWorkflowRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WorkflowRun>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}",
    operationId: "actionsGetWorkflowRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflowRun(variables, signal),
});

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetWorkflowRun = <TData = Schemas.WorkflowRun>(
  variables: ActionsGetWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      ActionsGetWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunError,
    TData
  >({
    ...actionsGetWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRun = <TData = Schemas.WorkflowRun>(
  variables: ActionsGetWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      ActionsGetWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunError,
    TData
  >({
    ...actionsGetWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetReviewsForRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsGetReviewsForRunError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetReviewsForRunResponse = Schemas.EnvironmentApprovals[];

export type ActionsGetReviewsForRunVariables = {
  pathParams: ActionsGetReviewsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetReviewsForRun = (
  variables: ActionsGetReviewsForRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsGetReviewsForRunResponse,
    ActionsGetReviewsForRunError,
    undefined,
    {},
    {},
    ActionsGetReviewsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/approvals",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetReviewsForRunQuery = (
  variables: ActionsGetReviewsForRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsGetReviewsForRunResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/approvals",
    operationId: "actionsGetReviewsForRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetReviewsForRun(variables, signal),
});

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetReviewsForRun = <
  TData = ActionsGetReviewsForRunResponse,
>(
  variables: ActionsGetReviewsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetReviewsForRunResponse,
      ActionsGetReviewsForRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsGetReviewsForRunResponse,
    ActionsGetReviewsForRunError,
    TData
  >({
    ...actionsGetReviewsForRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetReviewsForRun = <
  TData = ActionsGetReviewsForRunResponse,
>(
  variables: ActionsGetReviewsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetReviewsForRunResponse,
      ActionsGetReviewsForRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetReviewsForRunResponse,
    ActionsGetReviewsForRunError,
    TData
  >({
    ...actionsGetReviewsForRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsApproveWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsApproveWorkflowRunError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActionsApproveWorkflowRunVariables = {
  pathParams: ActionsApproveWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsApproveWorkflowRun = (
  variables: ActionsApproveWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsApproveWorkflowRunError,
    undefined,
    {},
    {},
    ActionsApproveWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/approve",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsApproveWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsApproveWorkflowRunError,
      ActionsApproveWorkflowRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsApproveWorkflowRunError,
    ActionsApproveWorkflowRunVariables
  >({
    mutationFn: (variables: ActionsApproveWorkflowRunVariables) =>
      fetchActionsApproveWorkflowRun({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListWorkflowRunArtifactsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsListWorkflowRunArtifactsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunArtifactsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunArtifactsResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListWorkflowRunArtifactsVariables = {
  pathParams: ActionsListWorkflowRunArtifactsPathParams;
  queryParams?: ActionsListWorkflowRunArtifactsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunArtifacts = (
  variables: ActionsListWorkflowRunArtifactsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListWorkflowRunArtifactsResponse,
    ActionsListWorkflowRunArtifactsError,
    undefined,
    {},
    ActionsListWorkflowRunArtifactsQueryParams,
    ActionsListWorkflowRunArtifactsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/artifacts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsListWorkflowRunArtifactsQuery = (
  variables: ActionsListWorkflowRunArtifactsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListWorkflowRunArtifactsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/artifacts",
    operationId: "actionsListWorkflowRunArtifacts",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListWorkflowRunArtifacts(variables, signal),
});

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsListWorkflowRunArtifacts = <
  TData = ActionsListWorkflowRunArtifactsResponse,
>(
  variables: ActionsListWorkflowRunArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunArtifactsResponse,
      ActionsListWorkflowRunArtifactsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListWorkflowRunArtifactsResponse,
    ActionsListWorkflowRunArtifactsError,
    TData
  >({
    ...actionsListWorkflowRunArtifactsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunArtifacts = <
  TData = ActionsListWorkflowRunArtifactsResponse,
>(
  variables: ActionsListWorkflowRunArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunArtifactsResponse,
      ActionsListWorkflowRunArtifactsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunArtifactsResponse,
    ActionsListWorkflowRunArtifactsError,
    TData
  >({
    ...actionsListWorkflowRunArtifactsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetWorkflowRunAttemptPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
  /**
   * The attempt number of the workflow run.
   */
  attemptNumber: number;
};

export type ActionsGetWorkflowRunAttemptQueryParams = {
  /**
   * If `true` pull requests are omitted from the response (empty array).
   *
   * @default false
   */
  exclude_pull_requests?: boolean;
};

export type ActionsGetWorkflowRunAttemptError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowRunAttemptVariables = {
  pathParams: ActionsGetWorkflowRunAttemptPathParams;
  queryParams?: ActionsGetWorkflowRunAttemptQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
 * use this endpoint.
 */
export const fetchActionsGetWorkflowRunAttempt = (
  variables: ActionsGetWorkflowRunAttemptVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunAttemptError,
    undefined,
    {},
    ActionsGetWorkflowRunAttemptQueryParams,
    ActionsGetWorkflowRunAttemptPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
 * use this endpoint.
 */
export const actionsGetWorkflowRunAttemptQuery = (
  variables: ActionsGetWorkflowRunAttemptVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WorkflowRun>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}",
    operationId: "actionsGetWorkflowRunAttempt",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflowRunAttempt(variables, signal),
});

/**
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
 * use this endpoint.
 */
export const useSuspenseActionsGetWorkflowRunAttempt = <
  TData = Schemas.WorkflowRun,
>(
  variables: ActionsGetWorkflowRunAttemptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      ActionsGetWorkflowRunAttemptError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunAttemptError,
    TData
  >({
    ...actionsGetWorkflowRunAttemptQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific workflow run attempt. Anyone with read access to the repository
 * can use this endpoint. If the repository is private you must use an access token
 * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
 * use this endpoint.
 */
export const useActionsGetWorkflowRunAttempt = <TData = Schemas.WorkflowRun>(
  variables: ActionsGetWorkflowRunAttemptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      ActionsGetWorkflowRunAttemptError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRun,
    ActionsGetWorkflowRunAttemptError,
    TData
  >({
    ...actionsGetWorkflowRunAttemptQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListJobsForWorkflowRunAttemptPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
  /**
   * The attempt number of the workflow run.
   */
  attemptNumber: number;
};

export type ActionsListJobsForWorkflowRunAttemptQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListJobsForWorkflowRunAttemptError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ActionsListJobsForWorkflowRunAttemptResponse = {
  jobs: Schemas.Job[];
  total_count: number;
};

export type ActionsListJobsForWorkflowRunAttemptVariables = {
  pathParams: ActionsListJobsForWorkflowRunAttemptPathParams;
  queryParams?: ActionsListJobsForWorkflowRunAttemptQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const fetchActionsListJobsForWorkflowRunAttempt = (
  variables: ActionsListJobsForWorkflowRunAttemptVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListJobsForWorkflowRunAttemptResponse,
    ActionsListJobsForWorkflowRunAttemptError,
    undefined,
    {},
    ActionsListJobsForWorkflowRunAttemptQueryParams,
    ActionsListJobsForWorkflowRunAttemptPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/jobs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const actionsListJobsForWorkflowRunAttemptQuery = (
  variables: ActionsListJobsForWorkflowRunAttemptVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListJobsForWorkflowRunAttemptResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/jobs",
    operationId: "actionsListJobsForWorkflowRunAttempt",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListJobsForWorkflowRunAttempt(variables, signal),
});

/**
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useSuspenseActionsListJobsForWorkflowRunAttempt = <
  TData = ActionsListJobsForWorkflowRunAttemptResponse,
>(
  variables: ActionsListJobsForWorkflowRunAttemptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunAttemptResponse,
      ActionsListJobsForWorkflowRunAttemptError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListJobsForWorkflowRunAttemptResponse,
    ActionsListJobsForWorkflowRunAttemptError,
    TData
  >({
    ...actionsListJobsForWorkflowRunAttemptQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useActionsListJobsForWorkflowRunAttempt = <
  TData = ActionsListJobsForWorkflowRunAttemptResponse,
>(
  variables: ActionsListJobsForWorkflowRunAttemptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunAttemptResponse,
      ActionsListJobsForWorkflowRunAttemptError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListJobsForWorkflowRunAttemptResponse,
    ActionsListJobsForWorkflowRunAttemptError,
    TData
  >({
    ...actionsListJobsForWorkflowRunAttemptQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDownloadWorkflowRunAttemptLogsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
  /**
   * The attempt number of the workflow run.
   */
  attemptNumber: number;
};

export type ActionsDownloadWorkflowRunAttemptLogsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadWorkflowRunAttemptLogsVariables = {
  pathParams: ActionsDownloadWorkflowRunAttemptLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadWorkflowRunAttemptLogs = (
  variables: ActionsDownloadWorkflowRunAttemptLogsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDownloadWorkflowRunAttemptLogsError,
    undefined,
    {},
    {},
    ActionsDownloadWorkflowRunAttemptLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/logs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsDownloadWorkflowRunAttemptLogsQuery = (
  variables: ActionsDownloadWorkflowRunAttemptLogsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/logs",
    operationId: "actionsDownloadWorkflowRunAttemptLogs",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsDownloadWorkflowRunAttemptLogs(variables, signal),
});

/**
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsDownloadWorkflowRunAttemptLogs = <
  TData = undefined,
>(
  variables: ActionsDownloadWorkflowRunAttemptLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadWorkflowRunAttemptLogsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ActionsDownloadWorkflowRunAttemptLogsError,
    TData
  >({
    ...actionsDownloadWorkflowRunAttemptLogsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadWorkflowRunAttemptLogs = <TData = undefined>(
  variables: ActionsDownloadWorkflowRunAttemptLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadWorkflowRunAttemptLogsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActionsDownloadWorkflowRunAttemptLogsError,
    TData
  >({
    ...actionsDownloadWorkflowRunAttemptLogsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCancelWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsCancelWorkflowRunError = Fetcher.ErrorWrapper<{
  status: 409;
  payload: Responses.Conflict;
}>;

export type ActionsCancelWorkflowRunVariables = {
  pathParams: ActionsCancelWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsCancelWorkflowRun = (
  variables: ActionsCancelWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCancelWorkflowRunError,
    undefined,
    {},
    {},
    ActionsCancelWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/cancel",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsCancelWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCancelWorkflowRunError,
      ActionsCancelWorkflowRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCancelWorkflowRunError,
    ActionsCancelWorkflowRunVariables
  >({
    mutationFn: (variables: ActionsCancelWorkflowRunVariables) =>
      fetchActionsCancelWorkflowRun({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListJobsForWorkflowRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsListJobsForWorkflowRunQueryParams = {
  /**
   * Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListJobsForWorkflowRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListJobsForWorkflowRunResponse = {
  jobs: Schemas.Job[];
  total_count: number;
};

export type ActionsListJobsForWorkflowRunVariables = {
  pathParams: ActionsListJobsForWorkflowRunPathParams;
  queryParams?: ActionsListJobsForWorkflowRunQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const fetchActionsListJobsForWorkflowRun = (
  variables: ActionsListJobsForWorkflowRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListJobsForWorkflowRunResponse,
    ActionsListJobsForWorkflowRunError,
    undefined,
    {},
    ActionsListJobsForWorkflowRunQueryParams,
    ActionsListJobsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/jobs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const actionsListJobsForWorkflowRunQuery = (
  variables: ActionsListJobsForWorkflowRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListJobsForWorkflowRunResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/jobs",
    operationId: "actionsListJobsForWorkflowRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListJobsForWorkflowRun(variables, signal),
});

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useSuspenseActionsListJobsForWorkflowRun = <
  TData = ActionsListJobsForWorkflowRunResponse,
>(
  variables: ActionsListJobsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunResponse,
      ActionsListJobsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListJobsForWorkflowRunResponse,
    ActionsListJobsForWorkflowRunError,
    TData
  >({
    ...actionsListJobsForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useActionsListJobsForWorkflowRun = <
  TData = ActionsListJobsForWorkflowRunResponse,
>(
  variables: ActionsListJobsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunResponse,
      ActionsListJobsForWorkflowRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListJobsForWorkflowRunResponse,
    ActionsListJobsForWorkflowRunError,
    TData
  >({
    ...actionsListJobsForWorkflowRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteWorkflowRunLogsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunLogsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type ActionsDeleteWorkflowRunLogsVariables = {
  pathParams: ActionsDeleteWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteWorkflowRunLogs = (
  variables: ActionsDeleteWorkflowRunLogsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteWorkflowRunLogsError,
    undefined,
    {},
    {},
    ActionsDeleteWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteWorkflowRunLogs = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteWorkflowRunLogsError,
      ActionsDeleteWorkflowRunLogsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteWorkflowRunLogsError,
    ActionsDeleteWorkflowRunLogsVariables
  >({
    mutationFn: (variables: ActionsDeleteWorkflowRunLogsVariables) =>
      fetchActionsDeleteWorkflowRunLogs({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDownloadWorkflowRunLogsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsDownloadWorkflowRunLogsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDownloadWorkflowRunLogsVariables = {
  pathParams: ActionsDownloadWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadWorkflowRunLogs = (
  variables: ActionsDownloadWorkflowRunLogsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDownloadWorkflowRunLogsError,
    undefined,
    {},
    {},
    ActionsDownloadWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const actionsDownloadWorkflowRunLogsQuery = (
  variables: ActionsDownloadWorkflowRunLogsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    operationId: "actionsDownloadWorkflowRunLogs",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsDownloadWorkflowRunLogs(variables, signal),
});

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsDownloadWorkflowRunLogs = <TData = undefined>(
  variables: ActionsDownloadWorkflowRunLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadWorkflowRunLogsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ActionsDownloadWorkflowRunLogsError,
    TData
  >({
    ...actionsDownloadWorkflowRunLogsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadWorkflowRunLogs = <TData = undefined>(
  variables: ActionsDownloadWorkflowRunLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActionsDownloadWorkflowRunLogsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActionsDownloadWorkflowRunLogsError,
    TData
  >({
    ...actionsDownloadWorkflowRunLogsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetPendingDeploymentsForRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsGetPendingDeploymentsForRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetPendingDeploymentsForRunResponse =
  Schemas.PendingDeployment[];

export type ActionsGetPendingDeploymentsForRunVariables = {
  pathParams: ActionsGetPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetPendingDeploymentsForRun = (
  variables: ActionsGetPendingDeploymentsForRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsGetPendingDeploymentsForRunResponse,
    ActionsGetPendingDeploymentsForRunError,
    undefined,
    {},
    {},
    ActionsGetPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetPendingDeploymentsForRunQuery = (
  variables: ActionsGetPendingDeploymentsForRunVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsGetPendingDeploymentsForRunResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    operationId: "actionsGetPendingDeploymentsForRun",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetPendingDeploymentsForRun(variables, signal),
});

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetPendingDeploymentsForRun = <
  TData = ActionsGetPendingDeploymentsForRunResponse,
>(
  variables: ActionsGetPendingDeploymentsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetPendingDeploymentsForRunResponse,
      ActionsGetPendingDeploymentsForRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsGetPendingDeploymentsForRunResponse,
    ActionsGetPendingDeploymentsForRunError,
    TData
  >({
    ...actionsGetPendingDeploymentsForRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetPendingDeploymentsForRun = <
  TData = ActionsGetPendingDeploymentsForRunResponse,
>(
  variables: ActionsGetPendingDeploymentsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetPendingDeploymentsForRunResponse,
      ActionsGetPendingDeploymentsForRunError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetPendingDeploymentsForRunResponse,
    ActionsGetPendingDeploymentsForRunError,
    TData
  >({
    ...actionsGetPendingDeploymentsForRunQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsReviewPendingDeploymentsForRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsReviewPendingDeploymentsForRunError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsReviewPendingDeploymentsForRunResponse =
  Schemas.Deployment[];

export type ActionsReviewPendingDeploymentsForRunRequestBody = {
  /**
   * A comment to accompany the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /**
   * The list of environment ids to approve or reject
   *
   * @example 161171787
   * @example 161171795
   */
  environment_ids: number[];
  /**
   * Whether to approve or reject deployment to the specified environments.
   *
   * @example approved
   */
  state: "approved" | "rejected";
};

export type ActionsReviewPendingDeploymentsForRunVariables = {
  body: ActionsReviewPendingDeploymentsForRunRequestBody;
  pathParams: ActionsReviewPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsReviewPendingDeploymentsForRun = (
  variables: ActionsReviewPendingDeploymentsForRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsReviewPendingDeploymentsForRunResponse,
    ActionsReviewPendingDeploymentsForRunError,
    ActionsReviewPendingDeploymentsForRunRequestBody,
    {},
    {},
    ActionsReviewPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsReviewPendingDeploymentsForRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActionsReviewPendingDeploymentsForRunResponse,
      ActionsReviewPendingDeploymentsForRunError,
      ActionsReviewPendingDeploymentsForRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActionsReviewPendingDeploymentsForRunResponse,
    ActionsReviewPendingDeploymentsForRunError,
    ActionsReviewPendingDeploymentsForRunVariables
  >({
    mutationFn: (variables: ActionsReviewPendingDeploymentsForRunVariables) =>
      fetchActionsReviewPendingDeploymentsForRun({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsReRunWorkflowPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsReRunWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsReRunWorkflowVariables = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     *
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null;
  pathParams: ActionsReRunWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsReRunWorkflow = (
  variables: ActionsReRunWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsReRunWorkflowError,
    {
      /**
       * Whether to enable debug logging for the re-run.
       *
       * @default false
       */
      enable_debug_logging?: boolean;
    } | null,
    {},
    {},
    ActionsReRunWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/rerun",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsReRunWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsReRunWorkflowError,
      ActionsReRunWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsReRunWorkflowError,
    ActionsReRunWorkflowVariables
  >({
    mutationFn: (variables: ActionsReRunWorkflowVariables) =>
      fetchActionsReRunWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsReRunWorkflowFailedJobsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsReRunWorkflowFailedJobsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsReRunWorkflowFailedJobsVariables = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     *
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null;
  pathParams: ActionsReRunWorkflowFailedJobsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsReRunWorkflowFailedJobs = (
  variables: ActionsReRunWorkflowFailedJobsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsReRunWorkflowFailedJobsError,
    {
      /**
       * Whether to enable debug logging for the re-run.
       *
       * @default false
       */
      enable_debug_logging?: boolean;
    } | null,
    {},
    {},
    ActionsReRunWorkflowFailedJobsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/rerun-failed-jobs",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsReRunWorkflowFailedJobs = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsReRunWorkflowFailedJobsError,
      ActionsReRunWorkflowFailedJobsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsReRunWorkflowFailedJobsError,
    ActionsReRunWorkflowFailedJobsVariables
  >({
    mutationFn: (variables: ActionsReRunWorkflowFailedJobsVariables) =>
      fetchActionsReRunWorkflowFailedJobs({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetWorkflowRunUsagePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the workflow run.
   */
  runId: number;
};

export type ActionsGetWorkflowRunUsageError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowRunUsageVariables = {
  pathParams: ActionsGetWorkflowRunUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRunUsage = (
  variables: ActionsGetWorkflowRunUsageVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WorkflowRunUsage,
    ActionsGetWorkflowRunUsageError,
    undefined,
    {},
    {},
    ActionsGetWorkflowRunUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/timing",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetWorkflowRunUsageQuery = (
  variables: ActionsGetWorkflowRunUsageVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WorkflowRunUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/runs/{runId}/timing",
    operationId: "actionsGetWorkflowRunUsage",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflowRunUsage(variables, signal),
});

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetWorkflowRunUsage = <
  TData = Schemas.WorkflowRunUsage,
>(
  variables: ActionsGetWorkflowRunUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRunUsage,
      ActionsGetWorkflowRunUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WorkflowRunUsage,
    ActionsGetWorkflowRunUsageError,
    TData
  >({
    ...actionsGetWorkflowRunUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRunUsage = <TData = Schemas.WorkflowRunUsage>(
  variables: ActionsGetWorkflowRunUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRunUsage,
      ActionsGetWorkflowRunUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRunUsage,
    ActionsGetWorkflowRunUsageError,
    TData
  >({
    ...actionsGetWorkflowRunUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListRepoSecretsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListRepoSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoSecretsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListRepoSecretsVariables = {
  pathParams: ActionsListRepoSecretsPathParams;
  queryParams?: ActionsListRepoSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListRepoSecrets = (
  variables: ActionsListRepoSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRepoSecretsResponse,
    ActionsListRepoSecretsError,
    undefined,
    {},
    ActionsListRepoSecretsQueryParams,
    ActionsListRepoSecretsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsListRepoSecretsQuery = (
  variables: ActionsListRepoSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRepoSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/secrets",
    operationId: "actionsListRepoSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRepoSecrets(variables, signal),
});

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsListRepoSecrets = <
  TData = ActionsListRepoSecretsResponse,
>(
  variables: ActionsListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoSecretsResponse,
      ActionsListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRepoSecretsResponse,
    ActionsListRepoSecretsError,
    TData
  >({
    ...actionsListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListRepoSecrets = <
  TData = ActionsListRepoSecretsResponse,
>(
  variables: ActionsListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoSecretsResponse,
      ActionsListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoSecretsResponse,
    ActionsListRepoSecretsError,
    TData
  >({
    ...actionsListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetRepoPublicKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsGetRepoPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRepoPublicKeyVariables = {
  pathParams: ActionsGetRepoPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoPublicKey = (
  variables: ActionsGetRepoPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetRepoPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetRepoPublicKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsGetRepoPublicKeyQuery = (
  variables: ActionsGetRepoPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/secrets/public-key",
    operationId: "actionsGetRepoPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRepoPublicKey(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetRepoPublicKey = <
  TData = Schemas.ActionsPublicKey,
>(
  variables: ActionsGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsPublicKey,
    ActionsGetRepoPublicKeyError,
    TData
  >({
    ...actionsGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoPublicKey = <TData = Schemas.ActionsPublicKey>(
  variables: ActionsGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetRepoPublicKeyError,
    TData
  >({
    ...actionsGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsDeleteRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteRepoSecretVariables = {
  pathParams: ActionsDeleteRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteRepoSecret = (
  variables: ActionsDeleteRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteRepoSecretError,
    undefined,
    {},
    {},
    ActionsDeleteRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteRepoSecretError,
      ActionsDeleteRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteRepoSecretError,
    ActionsDeleteRepoSecretVariables
  >({
    mutationFn: (variables: ActionsDeleteRepoSecretVariables) =>
      fetchActionsDeleteRepoSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsGetRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRepoSecretVariables = {
  pathParams: ActionsGetRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoSecret = (
  variables: ActionsGetRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsSecret,
    ActionsGetRepoSecretError,
    undefined,
    {},
    {},
    ActionsGetRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsGetRepoSecretQuery = (
  variables: ActionsGetRepoSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    operationId: "actionsGetRepoSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRepoSecret(variables, signal),
});

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetRepoSecret = <TData = Schemas.ActionsSecret>(
  variables: ActionsGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsSecret,
    ActionsGetRepoSecretError,
    TData
  >({
    ...actionsGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoSecret = <TData = Schemas.ActionsSecret>(
  variables: ActionsGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    ActionsGetRepoSecretError,
    TData
  >({
    ...actionsGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateOrUpdateRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsCreateOrUpdateRepoSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateRepoSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type ActionsCreateOrUpdateRepoSecretVariables = {
  body?: ActionsCreateOrUpdateRepoSecretRequestBody;
  pathParams: ActionsCreateOrUpdateRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateRepoSecret = (
  variables: ActionsCreateOrUpdateRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateRepoSecretError,
    ActionsCreateOrUpdateRepoSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateOrUpdateRepoSecretError,
      ActionsCreateOrUpdateRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateRepoSecretError,
    ActionsCreateOrUpdateRepoSecretVariables
  >({
    mutationFn: (variables: ActionsCreateOrUpdateRepoSecretVariables) =>
      fetchActionsCreateOrUpdateRepoSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListRepoVariablesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListRepoVariablesQueryParams = {
  /**
   * The number of results per page (max 30).
   *
   * @default 10
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoVariablesError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoVariablesResponse = {
  total_count: number;
  variables: Schemas.ActionsVariable[];
};

export type ActionsListRepoVariablesVariables = {
  pathParams: ActionsListRepoVariablesPathParams;
  queryParams?: ActionsListRepoVariablesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const fetchActionsListRepoVariables = (
  variables: ActionsListRepoVariablesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRepoVariablesResponse,
    ActionsListRepoVariablesError,
    undefined,
    {},
    ActionsListRepoVariablesQueryParams,
    ActionsListRepoVariablesPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/variables",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const actionsListRepoVariablesQuery = (
  variables: ActionsListRepoVariablesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRepoVariablesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/variables",
    operationId: "actionsListRepoVariables",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRepoVariables(variables, signal),
});

/**
 * Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const useSuspenseActionsListRepoVariables = <
  TData = ActionsListRepoVariablesResponse,
>(
  variables: ActionsListRepoVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoVariablesResponse,
      ActionsListRepoVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRepoVariablesResponse,
    ActionsListRepoVariablesError,
    TData
  >({
    ...actionsListRepoVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const useActionsListRepoVariables = <
  TData = ActionsListRepoVariablesResponse,
>(
  variables: ActionsListRepoVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoVariablesResponse,
      ActionsListRepoVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoVariablesResponse,
    ActionsListRepoVariablesError,
    TData
  >({
    ...actionsListRepoVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateRepoVariablePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsCreateRepoVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateRepoVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * The value of the variable.
   */
  value: string;
};

export type ActionsCreateRepoVariableVariables = {
  body: ActionsCreateRepoVariableRequestBody;
  pathParams: ActionsCreateRepoVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a repository variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const fetchActionsCreateRepoVariable = (
  variables: ActionsCreateRepoVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateRepoVariableError,
    ActionsCreateRepoVariableRequestBody,
    {},
    {},
    ActionsCreateRepoVariablePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/variables",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a repository variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const useActionsCreateRepoVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateRepoVariableError,
      ActionsCreateRepoVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateRepoVariableError,
    ActionsCreateRepoVariableVariables
  >({
    mutationFn: (variables: ActionsCreateRepoVariableVariables) =>
      fetchActionsCreateRepoVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsDeleteRepoVariablePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsDeleteRepoVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteRepoVariableVariables = {
  pathParams: ActionsDeleteRepoVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a repository variable using the variable name.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const fetchActionsDeleteRepoVariable = (
  variables: ActionsDeleteRepoVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteRepoVariableError,
    undefined,
    {},
    {},
    ActionsDeleteRepoVariablePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/variables/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a repository variable using the variable name.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const useActionsDeleteRepoVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteRepoVariableError,
      ActionsDeleteRepoVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteRepoVariableError,
    ActionsDeleteRepoVariableVariables
  >({
    mutationFn: (variables: ActionsDeleteRepoVariableVariables) =>
      fetchActionsDeleteRepoVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetRepoVariablePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsGetRepoVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetRepoVariableVariables = {
  pathParams: ActionsGetRepoVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoVariable = (
  variables: ActionsGetRepoVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsVariable,
    ActionsGetRepoVariableError,
    undefined,
    {},
    {},
    ActionsGetRepoVariablePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/variables/{name}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const actionsGetRepoVariableQuery = (
  variables: ActionsGetRepoVariableVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsVariable>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/variables/{name}",
    operationId: "actionsGetRepoVariable",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetRepoVariable(variables, signal),
});

/**
 * Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetRepoVariable = <
  TData = Schemas.ActionsVariable,
>(
  variables: ActionsGetRepoVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsVariable,
      ActionsGetRepoVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsVariable,
    ActionsGetRepoVariableError,
    TData
  >({
    ...actionsGetRepoVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
 */
export const useActionsGetRepoVariable = <TData = Schemas.ActionsVariable>(
  variables: ActionsGetRepoVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsVariable,
      ActionsGetRepoVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsVariable,
    ActionsGetRepoVariableError,
    TData
  >({
    ...actionsGetRepoVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsUpdateRepoVariablePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsUpdateRepoVariableError = Fetcher.ErrorWrapper<undefined>;

export type ActionsUpdateRepoVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name?: string;
  /**
   * The value of the variable.
   */
  value?: string;
};

export type ActionsUpdateRepoVariableVariables = {
  body?: ActionsUpdateRepoVariableRequestBody;
  pathParams: ActionsUpdateRepoVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a repository variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const fetchActionsUpdateRepoVariable = (
  variables: ActionsUpdateRepoVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsUpdateRepoVariableError,
    ActionsUpdateRepoVariableRequestBody,
    {},
    {},
    ActionsUpdateRepoVariablePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/variables/{name}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates a repository variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
 */
export const useActionsUpdateRepoVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsUpdateRepoVariableError,
      ActionsUpdateRepoVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsUpdateRepoVariableError,
    ActionsUpdateRepoVariableVariables
  >({
    mutationFn: (variables: ActionsUpdateRepoVariableVariables) =>
      fetchActionsUpdateRepoVariable({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListRepoWorkflowsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActionsListRepoWorkflowsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoWorkflowsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListRepoWorkflowsResponse = {
  total_count: number;
  workflows: Schemas.Workflow[];
};

export type ActionsListRepoWorkflowsVariables = {
  pathParams: ActionsListRepoWorkflowsPathParams;
  queryParams?: ActionsListRepoWorkflowsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListRepoWorkflows = (
  variables: ActionsListRepoWorkflowsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListRepoWorkflowsResponse,
    ActionsListRepoWorkflowsError,
    undefined,
    {},
    ActionsListRepoWorkflowsQueryParams,
    ActionsListRepoWorkflowsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsListRepoWorkflowsQuery = (
  variables: ActionsListRepoWorkflowsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListRepoWorkflowsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/workflows",
    operationId: "actionsListRepoWorkflows",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListRepoWorkflows(variables, signal),
});

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsListRepoWorkflows = <
  TData = ActionsListRepoWorkflowsResponse,
>(
  variables: ActionsListRepoWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoWorkflowsResponse,
      ActionsListRepoWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListRepoWorkflowsResponse,
    ActionsListRepoWorkflowsError,
    TData
  >({
    ...actionsListRepoWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListRepoWorkflows = <
  TData = ActionsListRepoWorkflowsResponse,
>(
  variables: ActionsListRepoWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoWorkflowsResponse,
      ActionsListRepoWorkflowsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoWorkflowsResponse,
    ActionsListRepoWorkflowsError,
    TData
  >({
    ...actionsListRepoWorkflowsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetWorkflowPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowVariables = {
  pathParams: ActionsGetWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflow = (
  variables: ActionsGetWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Workflow,
    ActionsGetWorkflowError,
    undefined,
    {},
    {},
    ActionsGetWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetWorkflowQuery = (
  variables: ActionsGetWorkflowVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Workflow>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}",
    operationId: "actionsGetWorkflow",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflow(variables, signal),
});

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetWorkflow = <TData = Schemas.Workflow>(
  variables: ActionsGetWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Workflow,
      ActionsGetWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Workflow,
    ActionsGetWorkflowError,
    TData
  >({
    ...actionsGetWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflow = <TData = Schemas.Workflow>(
  variables: ActionsGetWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Workflow,
      ActionsGetWorkflowError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Workflow, ActionsGetWorkflowError, TData>({
    ...actionsGetWorkflowQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDisableWorkflowPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsDisableWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsDisableWorkflowVariables = {
  pathParams: ActionsDisableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDisableWorkflow = (
  variables: ActionsDisableWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDisableWorkflowError,
    undefined,
    {},
    {},
    ActionsDisableWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/disable",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDisableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDisableWorkflowError,
      ActionsDisableWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDisableWorkflowError,
    ActionsDisableWorkflowVariables
  >({
    mutationFn: (variables: ActionsDisableWorkflowVariables) =>
      fetchActionsDisableWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsCreateWorkflowDispatchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsCreateWorkflowDispatchError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateWorkflowDispatchRequestBody = {
  /**
   * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
   *
   * @maxProperties 10
   */
  inputs?: {
    [key: string]: string;
  };
  /**
   * The git reference for the workflow. The reference can be a branch or tag name.
   */
  ref: string;
};

export type ActionsCreateWorkflowDispatchVariables = {
  body: ActionsCreateWorkflowDispatchRequestBody;
  pathParams: ActionsCreateWorkflowDispatchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const fetchActionsCreateWorkflowDispatch = (
  variables: ActionsCreateWorkflowDispatchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsCreateWorkflowDispatchError,
    ActionsCreateWorkflowDispatchRequestBody,
    {},
    {},
    ActionsCreateWorkflowDispatchPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/dispatches",
    method: "post",
    ...variables,
    signal,
  });

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const useActionsCreateWorkflowDispatch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsCreateWorkflowDispatchError,
      ActionsCreateWorkflowDispatchVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsCreateWorkflowDispatchError,
    ActionsCreateWorkflowDispatchVariables
  >({
    mutationFn: (variables: ActionsCreateWorkflowDispatchVariables) =>
      fetchActionsCreateWorkflowDispatch({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsEnableWorkflowPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsEnableWorkflowError = Fetcher.ErrorWrapper<undefined>;

export type ActionsEnableWorkflowVariables = {
  pathParams: ActionsEnableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsEnableWorkflow = (
  variables: ActionsEnableWorkflowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsEnableWorkflowError,
    undefined,
    {},
    {},
    ActionsEnableWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/enable",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsEnableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsEnableWorkflowError,
      ActionsEnableWorkflowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsEnableWorkflowError,
    ActionsEnableWorkflowVariables
  >({
    mutationFn: (variables: ActionsEnableWorkflowVariables) =>
      fetchActionsEnableWorkflow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsListWorkflowRunsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsListWorkflowRunsQueryParams = {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   *
   * @format date-time
   */
  created?: string;
  /**
   * If `true` pull requests are omitted from the response (empty array).
   *
   * @default false
   */
  exclude_pull_requests?: boolean;
  /**
   * Returns workflow runs with the `check_suite_id` that you specify.
   */
  check_suite_id?: number;
  /**
   * Only returns workflow runs that are associated with the specified `head_sha`.
   */
  head_sha?: string;
};

export type ActionsListWorkflowRunsError = Fetcher.ErrorWrapper<undefined>;

export type ActionsListWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsVariables = {
  pathParams: ActionsListWorkflowRunsPathParams;
  queryParams?: ActionsListWorkflowRunsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const fetchActionsListWorkflowRuns = (
  variables: ActionsListWorkflowRunsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListWorkflowRunsResponse,
    ActionsListWorkflowRunsError,
    undefined,
    {},
    ActionsListWorkflowRunsQueryParams,
    ActionsListWorkflowRunsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const actionsListWorkflowRunsQuery = (
  variables: ActionsListWorkflowRunsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListWorkflowRunsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs",
    operationId: "actionsListWorkflowRuns",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListWorkflowRuns(variables, signal),
});

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const useSuspenseActionsListWorkflowRuns = <
  TData = ActionsListWorkflowRunsResponse,
>(
  variables: ActionsListWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsResponse,
      ActionsListWorkflowRunsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListWorkflowRunsResponse,
    ActionsListWorkflowRunsError,
    TData
  >({
    ...actionsListWorkflowRunsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const useActionsListWorkflowRuns = <
  TData = ActionsListWorkflowRunsResponse,
>(
  variables: ActionsListWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsResponse,
      ActionsListWorkflowRunsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsResponse,
    ActionsListWorkflowRunsError,
    TData
  >({
    ...actionsListWorkflowRunsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetWorkflowUsagePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowUsageError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetWorkflowUsageVariables = {
  pathParams: ActionsGetWorkflowUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowUsage = (
  variables: ActionsGetWorkflowUsageVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WorkflowUsage,
    ActionsGetWorkflowUsageError,
    undefined,
    {},
    {},
    ActionsGetWorkflowUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const actionsGetWorkflowUsageQuery = (
  variables: ActionsGetWorkflowUsageVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WorkflowUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing",
    operationId: "actionsGetWorkflowUsage",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetWorkflowUsage(variables, signal),
});

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseActionsGetWorkflowUsage = <
  TData = Schemas.WorkflowUsage,
>(
  variables: ActionsGetWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      ActionsGetWorkflowUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WorkflowUsage,
    ActionsGetWorkflowUsageError,
    TData
  >({
    ...actionsGetWorkflowUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowUsage = <TData = Schemas.WorkflowUsage>(
  variables: ActionsGetWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      ActionsGetWorkflowUsageError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowUsage,
    ActionsGetWorkflowUsageError,
    TData
  >({
    ...actionsGetWorkflowUsageQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesListAssigneesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListAssigneesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListAssigneesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListAssigneesResponse = Schemas.SimpleUser[];

export type IssuesListAssigneesVariables = {
  pathParams: IssuesListAssigneesPathParams;
  queryParams?: IssuesListAssigneesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const fetchIssuesListAssignees = (
  variables: IssuesListAssigneesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListAssigneesResponse,
    IssuesListAssigneesError,
    undefined,
    {},
    IssuesListAssigneesQueryParams,
    IssuesListAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/assignees",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const issuesListAssigneesQuery = (
  variables: IssuesListAssigneesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListAssigneesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/assignees",
    operationId: "issuesListAssignees",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListAssignees(variables, signal),
});

/**
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const useSuspenseIssuesListAssignees = <
  TData = IssuesListAssigneesResponse,
>(
  variables: IssuesListAssigneesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListAssigneesResponse,
      IssuesListAssigneesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListAssigneesResponse,
    IssuesListAssigneesError,
    TData
  >({
    ...issuesListAssigneesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const useIssuesListAssignees = <TData = IssuesListAssigneesResponse>(
  variables: IssuesListAssigneesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListAssigneesResponse,
      IssuesListAssigneesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListAssigneesResponse,
    IssuesListAssigneesError,
    TData
  >({
    ...issuesListAssigneesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesCheckUserCanBeAssignedPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  assignee: string;
};

export type IssuesCheckUserCanBeAssignedError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type IssuesCheckUserCanBeAssignedVariables = {
  pathParams: IssuesCheckUserCanBeAssignedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const fetchIssuesCheckUserCanBeAssigned = (
  variables: IssuesCheckUserCanBeAssignedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesCheckUserCanBeAssignedError,
    undefined,
    {},
    {},
    IssuesCheckUserCanBeAssignedPathParams
  >({
    url: "/repos/{owner}/{repo}/assignees/{assignee}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const issuesCheckUserCanBeAssignedQuery = (
  variables: IssuesCheckUserCanBeAssignedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/assignees/{assignee}",
    operationId: "issuesCheckUserCanBeAssigned",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesCheckUserCanBeAssigned(variables, signal),
});

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useSuspenseIssuesCheckUserCanBeAssigned = <TData = undefined>(
  variables: IssuesCheckUserCanBeAssignedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      IssuesCheckUserCanBeAssignedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    IssuesCheckUserCanBeAssignedError,
    TData
  >({
    ...issuesCheckUserCanBeAssignedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useIssuesCheckUserCanBeAssigned = <TData = undefined>(
  variables: IssuesCheckUserCanBeAssignedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      IssuesCheckUserCanBeAssignedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    IssuesCheckUserCanBeAssignedError,
    TData
  >({
    ...issuesCheckUserCanBeAssignedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListAutolinksPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListAutolinksQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListAutolinksError = Fetcher.ErrorWrapper<undefined>;

export type ReposListAutolinksResponse = Schemas.Autolink[];

export type ReposListAutolinksVariables = {
  pathParams: ReposListAutolinksPathParams;
  queryParams?: ReposListAutolinksQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const fetchReposListAutolinks = (
  variables: ReposListAutolinksVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListAutolinksResponse,
    ReposListAutolinksError,
    undefined,
    {},
    ReposListAutolinksQueryParams,
    ReposListAutolinksPathParams
  >({
    url: "/repos/{owner}/{repo}/autolinks",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const reposListAutolinksQuery = (
  variables: ReposListAutolinksVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListAutolinksResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/autolinks",
    operationId: "reposListAutolinks",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListAutolinks(variables, signal),
});

/**
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const useSuspenseReposListAutolinks = <
  TData = ReposListAutolinksResponse,
>(
  variables: ReposListAutolinksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListAutolinksResponse,
      ReposListAutolinksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListAutolinksResponse,
    ReposListAutolinksError,
    TData
  >({
    ...reposListAutolinksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This returns a list of autolinks configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const useReposListAutolinks = <TData = ReposListAutolinksResponse>(
  variables: ReposListAutolinksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListAutolinksResponse,
      ReposListAutolinksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListAutolinksResponse,
    ReposListAutolinksError,
    TData
  >({
    ...reposListAutolinksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateAutolinkPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateAutolinkError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateAutolinkRequestBody = {
  /**
   * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
   *
   * @default true
   */
  is_alphanumeric?: boolean;
  /**
   * This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
   */
  key_prefix: string;
  /**
   * The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
   */
  url_template: string;
};

export type ReposCreateAutolinkVariables = {
  body: ReposCreateAutolinkRequestBody;
  pathParams: ReposCreateAutolinkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with admin access to the repository can create an autolink.
 */
export const fetchReposCreateAutolink = (
  variables: ReposCreateAutolinkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Autolink,
    ReposCreateAutolinkError,
    ReposCreateAutolinkRequestBody,
    {},
    {},
    ReposCreateAutolinkPathParams
  >({
    url: "/repos/{owner}/{repo}/autolinks",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Users with admin access to the repository can create an autolink.
 */
export const useReposCreateAutolink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Autolink,
      ReposCreateAutolinkError,
      ReposCreateAutolinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Autolink,
    ReposCreateAutolinkError,
    ReposCreateAutolinkVariables
  >({
    mutationFn: (variables: ReposCreateAutolinkVariables) =>
      fetchReposCreateAutolink({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteAutolinkPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the autolink.
   */
  autolinkId: number;
};

export type ReposDeleteAutolinkError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteAutolinkVariables = {
  pathParams: ReposDeleteAutolinkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const fetchReposDeleteAutolink = (
  variables: ReposDeleteAutolinkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteAutolinkError,
    undefined,
    {},
    {},
    ReposDeleteAutolinkPathParams
  >({
    url: "/repos/{owner}/{repo}/autolinks/{autolinkId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const useReposDeleteAutolink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAutolinkError,
      ReposDeleteAutolinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAutolinkError,
    ReposDeleteAutolinkVariables
  >({
    mutationFn: (variables: ReposDeleteAutolinkVariables) =>
      fetchReposDeleteAutolink({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetAutolinkPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the autolink.
   */
  autolinkId: number;
};

export type ReposGetAutolinkError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAutolinkVariables = {
  pathParams: ReposGetAutolinkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const fetchReposGetAutolink = (
  variables: ReposGetAutolinkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Autolink,
    ReposGetAutolinkError,
    undefined,
    {},
    {},
    ReposGetAutolinkPathParams
  >({
    url: "/repos/{owner}/{repo}/autolinks/{autolinkId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const reposGetAutolinkQuery = (
  variables: ReposGetAutolinkVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Autolink>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/autolinks/{autolinkId}",
    operationId: "reposGetAutolink",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAutolink(variables, signal),
});

/**
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const useSuspenseReposGetAutolink = <TData = Schemas.Autolink>(
  variables: ReposGetAutolinkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Autolink, ReposGetAutolinkError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Autolink,
    ReposGetAutolinkError,
    TData
  >({
    ...reposGetAutolinkQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about autolinks are only available to repository administrators.
 */
export const useReposGetAutolink = <TData = Schemas.Autolink>(
  variables: ReposGetAutolinkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Autolink, ReposGetAutolinkError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Autolink, ReposGetAutolinkError, TData>({
    ...reposGetAutolinkQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDisableAutomatedSecurityFixesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposDisableAutomatedSecurityFixesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDisableAutomatedSecurityFixesVariables = {
  pathParams: ReposDisableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 */
export const fetchReposDisableAutomatedSecurityFixes = (
  variables: ReposDisableAutomatedSecurityFixesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDisableAutomatedSecurityFixesError,
    undefined,
    {},
    {},
    ReposDisableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 */
export const useReposDisableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDisableAutomatedSecurityFixesError,
      ReposDisableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDisableAutomatedSecurityFixesError,
    ReposDisableAutomatedSecurityFixesVariables
  >({
    mutationFn: (variables: ReposDisableAutomatedSecurityFixesVariables) =>
      fetchReposDisableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposEnableAutomatedSecurityFixesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposEnableAutomatedSecurityFixesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposEnableAutomatedSecurityFixesVariables = {
  pathParams: ReposEnableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 */
export const fetchReposEnableAutomatedSecurityFixes = (
  variables: ReposEnableAutomatedSecurityFixesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposEnableAutomatedSecurityFixesError,
    undefined,
    {},
    {},
    ReposEnableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 */
export const useReposEnableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposEnableAutomatedSecurityFixesError,
      ReposEnableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposEnableAutomatedSecurityFixesError,
    ReposEnableAutomatedSecurityFixesVariables
  >({
    mutationFn: (variables: ReposEnableAutomatedSecurityFixesVariables) =>
      fetchReposEnableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListBranchesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListBranchesQueryParams = {
  /**
   * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
   */
  protected?: boolean;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListBranchesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListBranchesResponse = Schemas.ShortBranch[];

export type ReposListBranchesVariables = {
  pathParams: ReposListBranchesPathParams;
  queryParams?: ReposListBranchesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListBranches = (
  variables: ReposListBranchesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListBranchesResponse,
    ReposListBranchesError,
    undefined,
    {},
    ReposListBranchesQueryParams,
    ReposListBranchesPathParams
  >({
    url: "/repos/{owner}/{repo}/branches",
    method: "get",
    ...variables,
    signal,
  });

export const reposListBranchesQuery = (
  variables: ReposListBranchesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListBranchesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches",
    operationId: "reposListBranches",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListBranches(variables, signal),
});

export const useSuspenseReposListBranches = <TData = ReposListBranchesResponse>(
  variables: ReposListBranchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesResponse,
      ReposListBranchesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListBranchesResponse,
    ReposListBranchesError,
    TData
  >({
    ...reposListBranchesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListBranches = <TData = ReposListBranchesResponse>(
  variables: ReposListBranchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesResponse,
      ReposListBranchesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesResponse,
    ReposListBranchesError,
    TData
  >({
    ...reposListBranchesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetBranchError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetBranchVariables = {
  pathParams: ReposGetBranchPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetBranch = (
  variables: ReposGetBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.BranchWithProtection,
    ReposGetBranchError,
    undefined,
    {},
    {},
    ReposGetBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetBranchQuery = (
  variables: ReposGetBranchVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.BranchWithProtection>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}",
    operationId: "reposGetBranch",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetBranch(variables, signal),
});

export const useSuspenseReposGetBranch = <TData = Schemas.BranchWithProtection>(
  variables: ReposGetBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchWithProtection,
      ReposGetBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.BranchWithProtection,
    ReposGetBranchError,
    TData
  >({
    ...reposGetBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetBranch = <TData = Schemas.BranchWithProtection>(
  variables: ReposGetBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchWithProtection,
      ReposGetBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchWithProtection,
    ReposGetBranchError,
    TData
  >({
    ...reposGetBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeleteBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposDeleteBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposDeleteBranchProtectionVariables = {
  pathParams: ReposDeleteBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeleteBranchProtection = (
  variables: ReposDeleteBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteBranchProtectionError,
    undefined,
    {},
    {},
    ReposDeleteBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeleteBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteBranchProtectionError,
      ReposDeleteBranchProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteBranchProtectionError,
    ReposDeleteBranchProtectionVariables
  >({
    mutationFn: (variables: ReposDeleteBranchProtectionVariables) =>
      fetchReposDeleteBranchProtection({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetBranchProtectionVariables = {
  pathParams: ReposGetBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetBranchProtection = (
  variables: ReposGetBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.BranchProtection,
    ReposGetBranchProtectionError,
    undefined,
    {},
    {},
    ReposGetBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const reposGetBranchProtectionQuery = (
  variables: ReposGetBranchProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.BranchProtection>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection",
    operationId: "reposGetBranchProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetBranchProtection(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspenseReposGetBranchProtection = <
  TData = Schemas.BranchProtection,
>(
  variables: ReposGetBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchProtection,
      ReposGetBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.BranchProtection,
    ReposGetBranchProtectionError,
    TData
  >({
    ...reposGetBranchProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetBranchProtection = <TData = Schemas.BranchProtection>(
  variables: ReposGetBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchProtection,
      ReposGetBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchProtection,
    ReposGetBranchProtectionError,
    TData
  >({
    ...reposGetBranchProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposUpdateBranchProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposUpdateBranchProtectionRequestBody = {
  /**
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  allow_deletions?: boolean;
  /**
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  allow_force_pushes?: boolean | null;
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
   *
   * @default false
   */
  allow_fork_syncing?: boolean;
  /**
   * If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
   */
  block_creations?: boolean;
  /**
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  enforce_admins: boolean | null;
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
   *
   * @default false
   */
  lock_branch?: boolean;
  /**
   * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
   */
  required_conversation_resolution?: boolean;
  /**
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  required_linear_history?: boolean;
  /**
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  required_pull_request_reviews: {
    /**
     * Allow specific users, teams, or apps to bypass pull request requirements.
     */
    bypass_pull_request_allowances?: {
      /**
       * The list of app `slug`s allowed to bypass pull request requirements.
       */
      apps?: string[];
      /**
       * The list of team `slug`s allowed to bypass pull request requirements.
       */
      teams?: string[];
      /**
       * The list of user `login`s allowed to bypass pull request requirements.
       */
      users?: string[];
    };
    /**
     * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     */
    dismiss_stale_reviews?: boolean;
    /**
     * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
     */
    dismissal_restrictions?: {
      /**
       * The list of app `slug`s with dismissal access
       */
      apps?: string[];
      /**
       * The list of team `slug`s with dismissal access
       */
      teams?: string[];
      /**
       * The list of user `login`s with dismissal access
       */
      users?: string[];
    };
    /**
     * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
     */
    require_code_owner_reviews?: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
     *
     * @default false
     */
    require_last_push_approval?: boolean;
    /**
     * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
     */
    required_approving_review_count?: number;
  } | null;
  /**
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  required_status_checks: {
    /**
     * The list of status checks to require in order to merge into this branch.
     */
    checks?: {
      /**
       * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
       */
      app_id?: number;
      /**
       * The name of the required check
       */
      context: string;
    }[];
    /**
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
     *
     * @deprecated true
     */
    contexts: string[];
    /**
     * Require branches to be up to date before merging.
     */
    strict: boolean;
  } | null;
  /**
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  restrictions: {
    /**
     * The list of app `slug`s with push access
     */
    apps?: string[];
    /**
     * The list of team `slug`s with push access
     */
    teams: string[];
    /**
     * The list of user `login`s with push access
     */
    users: string[];
  } | null;
};

export type ReposUpdateBranchProtectionVariables = {
  body: ReposUpdateBranchProtectionRequestBody;
  pathParams: ReposUpdateBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const fetchReposUpdateBranchProtection = (
  variables: ReposUpdateBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranch,
    ReposUpdateBranchProtectionError,
    ReposUpdateBranchProtectionRequestBody,
    {},
    {},
    ReposUpdateBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const useReposUpdateBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranch,
      ReposUpdateBranchProtectionError,
      ReposUpdateBranchProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranch,
    ReposUpdateBranchProtectionError,
    ReposUpdateBranchProtectionVariables
  >({
    mutationFn: (variables: ReposUpdateBranchProtectionVariables) =>
      fetchReposUpdateBranchProtection({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteAdminBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposDeleteAdminBranchProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteAdminBranchProtectionVariables = {
  pathParams: ReposDeleteAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposDeleteAdminBranchProtection = (
  variables: ReposDeleteAdminBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposDeleteAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposDeleteAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAdminBranchProtectionError,
      ReposDeleteAdminBranchProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAdminBranchProtectionError,
    ReposDeleteAdminBranchProtectionVariables
  >({
    mutationFn: (variables: ReposDeleteAdminBranchProtectionVariables) =>
      fetchReposDeleteAdminBranchProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetAdminBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetAdminBranchProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetAdminBranchProtectionVariables = {
  pathParams: ReposGetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAdminBranchProtection = (
  variables: ReposGetAdminBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposGetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const reposGetAdminBranchProtectionQuery = (
  variables: ReposGetAdminBranchProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProtectedBranchAdminEnforced>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    operationId: "reposGetAdminBranchProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAdminBranchProtection(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspenseReposGetAdminBranchProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced,
>(
  variables: ReposGetAdminBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetAdminBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetAdminBranchProtectionError,
    TData
  >({
    ...reposGetAdminBranchProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAdminBranchProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced,
>(
  variables: ReposGetAdminBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetAdminBranchProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetAdminBranchProtectionError,
    TData
  >({
    ...reposGetAdminBranchProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposSetAdminBranchProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposSetAdminBranchProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposSetAdminBranchProtectionVariables = {
  pathParams: ReposSetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposSetAdminBranchProtection = (
  variables: ReposSetAdminBranchProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposSetAdminBranchProtectionError,
    undefined,
    {},
    {},
    ReposSetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposSetAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposSetAdminBranchProtectionError,
      ReposSetAdminBranchProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    ReposSetAdminBranchProtectionError,
    ReposSetAdminBranchProtectionVariables
  >({
    mutationFn: (variables: ReposSetAdminBranchProtectionVariables) =>
      fetchReposSetAdminBranchProtection({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeletePullRequestReviewProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposDeletePullRequestReviewProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeletePullRequestReviewProtectionVariables = {
  pathParams: ReposDeletePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeletePullRequestReviewProtection = (
  variables: ReposDeletePullRequestReviewProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeletePullRequestReviewProtectionError,
    undefined,
    {},
    {},
    ReposDeletePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeletePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeletePullRequestReviewProtectionError,
      ReposDeletePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeletePullRequestReviewProtectionError,
    ReposDeletePullRequestReviewProtectionVariables
  >({
    mutationFn: (variables: ReposDeletePullRequestReviewProtectionVariables) =>
      fetchReposDeletePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetPullRequestReviewProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetPullRequestReviewProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetPullRequestReviewProtectionVariables = {
  pathParams: ReposGetPullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetPullRequestReviewProtection = (
  variables: ReposGetPullRequestReviewProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchPullRequestReview,
    ReposGetPullRequestReviewProtectionError,
    undefined,
    {},
    {},
    ReposGetPullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const reposGetPullRequestReviewProtectionQuery = (
  variables: ReposGetPullRequestReviewProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProtectedBranchPullRequestReview>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    operationId: "reposGetPullRequestReviewProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetPullRequestReviewProtection(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspenseReposGetPullRequestReviewProtection = <
  TData = Schemas.ProtectedBranchPullRequestReview,
>(
  variables: ReposGetPullRequestReviewProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchPullRequestReview,
      ReposGetPullRequestReviewProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProtectedBranchPullRequestReview,
    ReposGetPullRequestReviewProtectionError,
    TData
  >({
    ...reposGetPullRequestReviewProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetPullRequestReviewProtection = <
  TData = Schemas.ProtectedBranchPullRequestReview,
>(
  variables: ReposGetPullRequestReviewProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchPullRequestReview,
      ReposGetPullRequestReviewProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchPullRequestReview,
    ReposGetPullRequestReviewProtectionError,
    TData
  >({
    ...reposGetPullRequestReviewProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdatePullRequestReviewProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposUpdatePullRequestReviewProtectionError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposUpdatePullRequestReviewProtectionRequestBody = {
  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of app `slug`s allowed to bypass pull request requirements.
     */
    apps?: string[];
    /**
     * The list of team `slug`s allowed to bypass pull request requirements.
     */
    teams?: string[];
    /**
     * The list of user `login`s allowed to bypass pull request requirements.
     */
    users?: string[];
  };
  /**
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  dismiss_stale_reviews?: boolean;
  /**
   * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  dismissal_restrictions?: {
    /**
     * The list of app `slug`s with dismissal access
     */
    apps?: string[];
    /**
     * The list of team `slug`s with dismissal access
     */
    teams?: string[];
    /**
     * The list of user `login`s with dismissal access
     */
    users?: string[];
  };
  /**
   * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
   */
  require_code_owner_reviews?: boolean;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
   *
   * @default false
   */
  require_last_push_approval?: boolean;
  /**
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
   */
  required_approving_review_count?: number;
};

export type ReposUpdatePullRequestReviewProtectionVariables = {
  body?: ReposUpdatePullRequestReviewProtectionRequestBody;
  pathParams: ReposUpdatePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const fetchReposUpdatePullRequestReviewProtection = (
  variables: ReposUpdatePullRequestReviewProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchPullRequestReview,
    ReposUpdatePullRequestReviewProtectionError,
    ReposUpdatePullRequestReviewProtectionRequestBody,
    {},
    {},
    ReposUpdatePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const useReposUpdatePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchPullRequestReview,
      ReposUpdatePullRequestReviewProtectionError,
      ReposUpdatePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchPullRequestReview,
    ReposUpdatePullRequestReviewProtectionError,
    ReposUpdatePullRequestReviewProtectionVariables
  >({
    mutationFn: (variables: ReposUpdatePullRequestReviewProtectionVariables) =>
      fetchReposUpdatePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposDeleteCommitSignatureProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposDeleteCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteCommitSignatureProtectionVariables = {
  pathParams: ReposDeleteCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposDeleteCommitSignatureProtection = (
  variables: ReposDeleteCommitSignatureProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposDeleteCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposDeleteCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteCommitSignatureProtectionError,
      ReposDeleteCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteCommitSignatureProtectionError,
    ReposDeleteCommitSignatureProtectionVariables
  >({
    mutationFn: (variables: ReposDeleteCommitSignatureProtectionVariables) =>
      fetchReposDeleteCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetCommitSignatureProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCommitSignatureProtectionVariables = {
  pathParams: ReposGetCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const fetchReposGetCommitSignatureProtection = (
  variables: ReposGetCommitSignatureProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposGetCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const reposGetCommitSignatureProtectionQuery = (
  variables: ReposGetCommitSignatureProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ProtectedBranchAdminEnforced>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    operationId: "reposGetCommitSignatureProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCommitSignatureProtection(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const useSuspenseReposGetCommitSignatureProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced,
>(
  variables: ReposGetCommitSignatureProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetCommitSignatureProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetCommitSignatureProtectionError,
    TData
  >({
    ...reposGetCommitSignatureProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const useReposGetCommitSignatureProtection = <
  TData = Schemas.ProtectedBranchAdminEnforced,
>(
  variables: ReposGetCommitSignatureProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposGetCommitSignatureProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    ReposGetCommitSignatureProtectionError,
    TData
  >({
    ...reposGetCommitSignatureProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateCommitSignatureProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposCreateCommitSignatureProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposCreateCommitSignatureProtectionVariables = {
  pathParams: ReposCreateCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposCreateCommitSignatureProtection = (
  variables: ReposCreateCommitSignatureProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    ReposCreateCommitSignatureProtectionError,
    undefined,
    {},
    {},
    ReposCreateCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposCreateCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      ReposCreateCommitSignatureProtectionError,
      ReposCreateCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    ReposCreateCommitSignatureProtectionError,
    ReposCreateCommitSignatureProtectionVariables
  >({
    mutationFn: (variables: ReposCreateCommitSignatureProtectionVariables) =>
      fetchReposCreateCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposRemoveStatusCheckProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRemoveStatusCheckProtectionError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposRemoveStatusCheckProtectionVariables = {
  pathParams: ReposRemoveStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckProtection = (
  variables: ReposRemoveStatusCheckProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposRemoveStatusCheckProtectionError,
    undefined,
    {},
    {},
    ReposRemoveStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposRemoveStatusCheckProtectionError,
      ReposRemoveStatusCheckProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposRemoveStatusCheckProtectionError,
    ReposRemoveStatusCheckProtectionVariables
  >({
    mutationFn: (variables: ReposRemoveStatusCheckProtectionVariables) =>
      fetchReposRemoveStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetStatusChecksProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetStatusChecksProtectionError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetStatusChecksProtectionVariables = {
  pathParams: ReposGetStatusChecksProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetStatusChecksProtection = (
  variables: ReposGetStatusChecksProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    ReposGetStatusChecksProtectionError,
    undefined,
    {},
    {},
    ReposGetStatusChecksProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const reposGetStatusChecksProtectionQuery = (
  variables: ReposGetStatusChecksProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.StatusCheckPolicy>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    operationId: "reposGetStatusChecksProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetStatusChecksProtection(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspenseReposGetStatusChecksProtection = <
  TData = Schemas.StatusCheckPolicy,
>(
  variables: ReposGetStatusChecksProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StatusCheckPolicy,
      ReposGetStatusChecksProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.StatusCheckPolicy,
    ReposGetStatusChecksProtectionError,
    TData
  >({
    ...reposGetStatusChecksProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetStatusChecksProtection = <
  TData = Schemas.StatusCheckPolicy,
>(
  variables: ReposGetStatusChecksProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StatusCheckPolicy,
      ReposGetStatusChecksProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.StatusCheckPolicy,
    ReposGetStatusChecksProtectionError,
    TData
  >({
    ...reposGetStatusChecksProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateStatusCheckProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposUpdateStatusCheckProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateStatusCheckProtectionRequestBody = {
  /**
   * The list of status checks to require in order to merge into this branch.
   */
  checks?: {
    /**
     * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
     */
    app_id?: number;
    /**
     * The name of the required check
     */
    context: string;
  }[];
  /**
   * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
   *
   * @deprecated true
   */
  contexts?: string[];
  /**
   * Require branches to be up to date before merging.
   */
  strict?: boolean;
};

export type ReposUpdateStatusCheckProtectionVariables = {
  body?: ReposUpdateStatusCheckProtectionRequestBody;
  pathParams: ReposUpdateStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposUpdateStatusCheckProtection = (
  variables: ReposUpdateStatusCheckProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    ReposUpdateStatusCheckProtectionError,
    ReposUpdateStatusCheckProtectionRequestBody,
    {},
    {},
    ReposUpdateStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposUpdateStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StatusCheckPolicy,
      ReposUpdateStatusCheckProtectionError,
      ReposUpdateStatusCheckProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.StatusCheckPolicy,
    ReposUpdateStatusCheckProtectionError,
    ReposUpdateStatusCheckProtectionVariables
  >({
    mutationFn: (variables: ReposUpdateStatusCheckProtectionVariables) =>
      fetchReposUpdateStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposRemoveStatusCheckContextsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRemoveStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposRemoveStatusCheckContextsResponse = string[];

export type ReposRemoveStatusCheckContextsVariables = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[];
  pathParams: ReposRemoveStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckContexts = (
  variables: ReposRemoveStatusCheckContextsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposRemoveStatusCheckContextsResponse,
    ReposRemoveStatusCheckContextsError,
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
    {},
    {},
    ReposRemoveStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveStatusCheckContextsResponse,
      ReposRemoveStatusCheckContextsError,
      ReposRemoveStatusCheckContextsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveStatusCheckContextsResponse,
    ReposRemoveStatusCheckContextsError,
    ReposRemoveStatusCheckContextsVariables
  >({
    mutationFn: (variables: ReposRemoveStatusCheckContextsVariables) =>
      fetchReposRemoveStatusCheckContexts({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetAllStatusCheckContextsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetAllStatusCheckContextsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAllStatusCheckContextsResponse = string[];

export type ReposGetAllStatusCheckContextsVariables = {
  pathParams: ReposGetAllStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAllStatusCheckContexts = (
  variables: ReposGetAllStatusCheckContextsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetAllStatusCheckContextsResponse,
    ReposGetAllStatusCheckContextsError,
    undefined,
    {},
    {},
    ReposGetAllStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const reposGetAllStatusCheckContextsQuery = (
  variables: ReposGetAllStatusCheckContextsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetAllStatusCheckContextsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    operationId: "reposGetAllStatusCheckContexts",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAllStatusCheckContexts(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspenseReposGetAllStatusCheckContexts = <
  TData = ReposGetAllStatusCheckContextsResponse,
>(
  variables: ReposGetAllStatusCheckContextsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllStatusCheckContextsResponse,
      ReposGetAllStatusCheckContextsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetAllStatusCheckContextsResponse,
    ReposGetAllStatusCheckContextsError,
    TData
  >({
    ...reposGetAllStatusCheckContextsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAllStatusCheckContexts = <
  TData = ReposGetAllStatusCheckContextsResponse,
>(
  variables: ReposGetAllStatusCheckContextsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllStatusCheckContextsResponse,
      ReposGetAllStatusCheckContextsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllStatusCheckContextsResponse,
    ReposGetAllStatusCheckContextsError,
    TData
  >({
    ...reposGetAllStatusCheckContextsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposAddStatusCheckContextsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposAddStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposAddStatusCheckContextsResponse = string[];

export type ReposAddStatusCheckContextsVariables = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[];
  pathParams: ReposAddStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposAddStatusCheckContexts = (
  variables: ReposAddStatusCheckContextsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposAddStatusCheckContextsResponse,
    ReposAddStatusCheckContextsError,
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
    {},
    {},
    ReposAddStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposAddStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddStatusCheckContextsResponse,
      ReposAddStatusCheckContextsError,
      ReposAddStatusCheckContextsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddStatusCheckContextsResponse,
    ReposAddStatusCheckContextsError,
    ReposAddStatusCheckContextsVariables
  >({
    mutationFn: (variables: ReposAddStatusCheckContextsVariables) =>
      fetchReposAddStatusCheckContexts({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposSetStatusCheckContextsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposSetStatusCheckContextsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposSetStatusCheckContextsResponse = string[];

export type ReposSetStatusCheckContextsVariables = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[];
  pathParams: ReposSetStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposSetStatusCheckContexts = (
  variables: ReposSetStatusCheckContextsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposSetStatusCheckContextsResponse,
    ReposSetStatusCheckContextsError,
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
    {},
    {},
    ReposSetStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposSetStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetStatusCheckContextsResponse,
      ReposSetStatusCheckContextsError,
      ReposSetStatusCheckContextsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetStatusCheckContextsResponse,
    ReposSetStatusCheckContextsError,
    ReposSetStatusCheckContextsVariables
  >({
    mutationFn: (variables: ReposSetStatusCheckContextsVariables) =>
      fetchReposSetStatusCheckContexts({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposDeleteAccessRestrictionsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteAccessRestrictionsVariables = {
  pathParams: ReposDeleteAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const fetchReposDeleteAccessRestrictions = (
  variables: ReposDeleteAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteAccessRestrictionsError,
    undefined,
    {},
    {},
    ReposDeleteAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const useReposDeleteAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAccessRestrictionsError,
      ReposDeleteAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAccessRestrictionsError,
    ReposDeleteAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposDeleteAccessRestrictionsVariables) =>
      fetchReposDeleteAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAccessRestrictionsVariables = {
  pathParams: ReposGetAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const fetchReposGetAccessRestrictions = (
  variables: ReposGetAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.BranchRestrictionPolicy,
    ReposGetAccessRestrictionsError,
    undefined,
    {},
    {},
    ReposGetAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const reposGetAccessRestrictionsQuery = (
  variables: ReposGetAccessRestrictionsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.BranchRestrictionPolicy>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    operationId: "reposGetAccessRestrictions",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAccessRestrictions(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const useSuspenseReposGetAccessRestrictions = <
  TData = Schemas.BranchRestrictionPolicy,
>(
  variables: ReposGetAccessRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchRestrictionPolicy,
      ReposGetAccessRestrictionsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.BranchRestrictionPolicy,
    ReposGetAccessRestrictionsError,
    TData
  >({
    ...reposGetAccessRestrictionsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const useReposGetAccessRestrictions = <
  TData = Schemas.BranchRestrictionPolicy,
>(
  variables: ReposGetAccessRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchRestrictionPolicy,
      ReposGetAccessRestrictionsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchRestrictionPolicy,
    ReposGetAccessRestrictionsError,
    TData
  >({
    ...reposGetAccessRestrictionsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposRemoveAppAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRemoveAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposRemoveAppAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[];
  pathParams: ReposRemoveAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposRemoveAppAccessRestrictions = (
  variables: ReposRemoveAppAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposRemoveAppAccessRestrictionsResponse,
    ReposRemoveAppAccessRestrictionsError,
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
    {},
    {},
    ReposRemoveAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposRemoveAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveAppAccessRestrictionsResponse,
      ReposRemoveAppAccessRestrictionsError,
      ReposRemoveAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveAppAccessRestrictionsResponse,
    ReposRemoveAppAccessRestrictionsError,
    ReposRemoveAppAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposRemoveAppAccessRestrictionsVariables) =>
      fetchReposRemoveAppAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetAppsWithAccessToProtectedBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetAppsWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetAppsWithAccessToProtectedBranchResponse =
  Schemas.Integration[];

export type ReposGetAppsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetAppsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposGetAppsWithAccessToProtectedBranch = (
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    ReposGetAppsWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetAppsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const reposGetAppsWithAccessToProtectedBranchQuery = (
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetAppsWithAccessToProtectedBranchResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    operationId: "reposGetAppsWithAccessToProtectedBranch",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAppsWithAccessToProtectedBranch(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useSuspenseReposGetAppsWithAccessToProtectedBranch = <
  TData = ReposGetAppsWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAppsWithAccessToProtectedBranchResponse,
      ReposGetAppsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    ReposGetAppsWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetAppsWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposGetAppsWithAccessToProtectedBranch = <
  TData = ReposGetAppsWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAppsWithAccessToProtectedBranchResponse,
      ReposGetAppsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    ReposGetAppsWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetAppsWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposAddAppAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposAddAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposAddAppAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[];
  pathParams: ReposAddAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposAddAppAccessRestrictions = (
  variables: ReposAddAppAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposAddAppAccessRestrictionsResponse,
    ReposAddAppAccessRestrictionsError,
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
    {},
    {},
    ReposAddAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposAddAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddAppAccessRestrictionsResponse,
      ReposAddAppAccessRestrictionsError,
      ReposAddAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddAppAccessRestrictionsResponse,
    ReposAddAppAccessRestrictionsError,
    ReposAddAppAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposAddAppAccessRestrictionsVariables) =>
      fetchReposAddAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposSetAppAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposSetAppAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposSetAppAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[];
  pathParams: ReposSetAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposSetAppAccessRestrictions = (
  variables: ReposSetAppAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposSetAppAccessRestrictionsResponse,
    ReposSetAppAccessRestrictionsError,
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
    {},
    {},
    ReposSetAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposSetAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetAppAccessRestrictionsResponse,
      ReposSetAppAccessRestrictionsError,
      ReposSetAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetAppAccessRestrictionsResponse,
    ReposSetAppAccessRestrictionsError,
    ReposSetAppAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposSetAppAccessRestrictionsVariables) =>
      fetchReposSetAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposRemoveTeamAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRemoveTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposRemoveTeamAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[];
  pathParams: ReposRemoveTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 */
export const fetchReposRemoveTeamAccessRestrictions = (
  variables: ReposRemoveTeamAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposRemoveTeamAccessRestrictionsResponse,
    ReposRemoveTeamAccessRestrictionsError,
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
    {},
    {},
    ReposRemoveTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 */
export const useReposRemoveTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveTeamAccessRestrictionsResponse,
      ReposRemoveTeamAccessRestrictionsError,
      ReposRemoveTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveTeamAccessRestrictionsResponse,
    ReposRemoveTeamAccessRestrictionsError,
    ReposRemoveTeamAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposRemoveTeamAccessRestrictionsVariables) =>
      fetchReposRemoveTeamAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetTeamsWithAccessToProtectedBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetTeamsWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetTeamsWithAccessToProtectedBranchResponse = Schemas.Team[];

export type ReposGetTeamsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetTeamsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const fetchReposGetTeamsWithAccessToProtectedBranch = (
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    ReposGetTeamsWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetTeamsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const reposGetTeamsWithAccessToProtectedBranchQuery = (
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetTeamsWithAccessToProtectedBranchResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    operationId: "reposGetTeamsWithAccessToProtectedBranch",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetTeamsWithAccessToProtectedBranch(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const useSuspenseReposGetTeamsWithAccessToProtectedBranch = <
  TData = ReposGetTeamsWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTeamsWithAccessToProtectedBranchResponse,
      ReposGetTeamsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    ReposGetTeamsWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetTeamsWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const useReposGetTeamsWithAccessToProtectedBranch = <
  TData = ReposGetTeamsWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTeamsWithAccessToProtectedBranchResponse,
      ReposGetTeamsWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    ReposGetTeamsWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetTeamsWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposAddTeamAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposAddTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposAddTeamAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[];
  pathParams: ReposAddTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 */
export const fetchReposAddTeamAccessRestrictions = (
  variables: ReposAddTeamAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposAddTeamAccessRestrictionsResponse,
    ReposAddTeamAccessRestrictionsError,
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
    {},
    {},
    ReposAddTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 */
export const useReposAddTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddTeamAccessRestrictionsResponse,
      ReposAddTeamAccessRestrictionsError,
      ReposAddTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddTeamAccessRestrictionsResponse,
    ReposAddTeamAccessRestrictionsError,
    ReposAddTeamAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposAddTeamAccessRestrictionsVariables) =>
      fetchReposAddTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposSetTeamAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposSetTeamAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposSetTeamAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[];
  pathParams: ReposSetTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 */
export const fetchReposSetTeamAccessRestrictions = (
  variables: ReposSetTeamAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposSetTeamAccessRestrictionsResponse,
    ReposSetTeamAccessRestrictionsError,
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
    {},
    {},
    ReposSetTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 */
export const useReposSetTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetTeamAccessRestrictionsResponse,
      ReposSetTeamAccessRestrictionsError,
      ReposSetTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetTeamAccessRestrictionsResponse,
    ReposSetTeamAccessRestrictionsError,
    ReposSetTeamAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposSetTeamAccessRestrictionsVariables) =>
      fetchReposSetTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposRemoveUserAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRemoveUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposRemoveUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposRemoveUserAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[];
  pathParams: ReposRemoveUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveUserAccessRestrictions = (
  variables: ReposRemoveUserAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposRemoveUserAccessRestrictionsResponse,
    ReposRemoveUserAccessRestrictionsError,
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
    {},
    {},
    ReposRemoveUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveUserAccessRestrictionsResponse,
      ReposRemoveUserAccessRestrictionsError,
      ReposRemoveUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveUserAccessRestrictionsResponse,
    ReposRemoveUserAccessRestrictionsError,
    ReposRemoveUserAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposRemoveUserAccessRestrictionsVariables) =>
      fetchReposRemoveUserAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetUsersWithAccessToProtectedBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposGetUsersWithAccessToProtectedBranchError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReposGetUsersWithAccessToProtectedBranchResponse =
  Schemas.SimpleUser[];

export type ReposGetUsersWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetUsersWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const fetchReposGetUsersWithAccessToProtectedBranch = (
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    ReposGetUsersWithAccessToProtectedBranchError,
    undefined,
    {},
    {},
    ReposGetUsersWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const reposGetUsersWithAccessToProtectedBranchQuery = (
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetUsersWithAccessToProtectedBranchResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    operationId: "reposGetUsersWithAccessToProtectedBranch",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetUsersWithAccessToProtectedBranch(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const useSuspenseReposGetUsersWithAccessToProtectedBranch = <
  TData = ReposGetUsersWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetUsersWithAccessToProtectedBranchResponse,
      ReposGetUsersWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    ReposGetUsersWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetUsersWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const useReposGetUsersWithAccessToProtectedBranch = <
  TData = ReposGetUsersWithAccessToProtectedBranchResponse,
>(
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetUsersWithAccessToProtectedBranchResponse,
      ReposGetUsersWithAccessToProtectedBranchError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    ReposGetUsersWithAccessToProtectedBranchError,
    TData
  >({
    ...reposGetUsersWithAccessToProtectedBranchQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposAddUserAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposAddUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposAddUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposAddUserAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[];
  pathParams: ReposAddUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddUserAccessRestrictions = (
  variables: ReposAddUserAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposAddUserAccessRestrictionsResponse,
    ReposAddUserAccessRestrictionsError,
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
    {},
    {},
    ReposAddUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddUserAccessRestrictionsResponse,
      ReposAddUserAccessRestrictionsError,
      ReposAddUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddUserAccessRestrictionsResponse,
    ReposAddUserAccessRestrictionsError,
    ReposAddUserAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposAddUserAccessRestrictionsVariables) =>
      fetchReposAddUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposSetUserAccessRestrictionsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposSetUserAccessRestrictionsError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposSetUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposSetUserAccessRestrictionsVariables = {
  body?:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[];
  pathParams: ReposSetUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetUserAccessRestrictions = (
  variables: ReposSetUserAccessRestrictionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposSetUserAccessRestrictionsResponse,
    ReposSetUserAccessRestrictionsError,
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
    {},
    {},
    ReposSetUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetUserAccessRestrictionsResponse,
      ReposSetUserAccessRestrictionsError,
      ReposSetUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetUserAccessRestrictionsResponse,
    ReposSetUserAccessRestrictionsError,
    ReposSetUserAccessRestrictionsVariables
  >({
    mutationFn: (variables: ReposSetUserAccessRestrictionsVariables) =>
      fetchReposSetUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposRenameBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
   */
  branch: string;
};

export type ReposRenameBranchError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposRenameBranchRequestBody = {
  /**
   * The new name of the branch.
   */
  new_name: string;
};

export type ReposRenameBranchVariables = {
  body: ReposRenameBranchRequestBody;
  pathParams: ReposRenameBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const fetchReposRenameBranch = (
  variables: ReposRenameBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.BranchWithProtection,
    ReposRenameBranchError,
    ReposRenameBranchRequestBody,
    {},
    {},
    ReposRenameBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/rename",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const useReposRenameBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BranchWithProtection,
      ReposRenameBranchError,
      ReposRenameBranchVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BranchWithProtection,
    ReposRenameBranchError,
    ReposRenameBranchVariables
  >({
    mutationFn: (variables: ReposRenameBranchVariables) =>
      fetchReposRenameBranch({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksCreatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ChecksCreateError = Fetcher.ErrorWrapper<undefined>;

export type ChecksCreateVariables = {
  body:
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const fetchChecksCreate = (
  variables: ChecksCreateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksCreateError,
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksCreatePathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const useChecksCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      ChecksCreateError,
      ChecksCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    ChecksCreateError,
    ChecksCreateVariables
  >({
    mutationFn: (variables: ChecksCreateVariables) =>
      fetchChecksCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksGetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check run.
   */
  checkRunId: number;
};

export type ChecksGetError = Fetcher.ErrorWrapper<undefined>;

export type ChecksGetVariables = {
  pathParams: ChecksGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksGet = (
  variables: ChecksGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksGetError,
    undefined,
    {},
    {},
    ChecksGetPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const checksGetQuery = (
  variables: ChecksGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.CheckRun>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    operationId: "checksGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksGet(variables, signal),
});

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useSuspenseChecksGet = <TData = Schemas.CheckRun>(
  variables: ChecksGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckRun, ChecksGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.CheckRun, ChecksGetError, TData>({
    ...checksGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksGet = <TData = Schemas.CheckRun>(
  variables: ChecksGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckRun, ChecksGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckRun, ChecksGetError, TData>({
    ...checksGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksUpdatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check run.
   */
  checkRunId: number;
};

export type ChecksUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ChecksUpdateVariables = {
  body?:
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const fetchChecksUpdate = (
  variables: ChecksUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckRun,
    ChecksUpdateError,
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const useChecksUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      ChecksUpdateError,
      ChecksUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    ChecksUpdateError,
    ChecksUpdateVariables
  >({
    mutationFn: (variables: ChecksUpdateVariables) =>
      fetchChecksUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksListAnnotationsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check run.
   */
  checkRunId: number;
};

export type ChecksListAnnotationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListAnnotationsError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListAnnotationsResponse = Schemas.CheckAnnotation[];

export type ChecksListAnnotationsVariables = {
  pathParams: ChecksListAnnotationsPathParams;
  queryParams?: ChecksListAnnotationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const fetchChecksListAnnotations = (
  variables: ChecksListAnnotationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ChecksListAnnotationsResponse,
    ChecksListAnnotationsError,
    undefined,
    {},
    ChecksListAnnotationsQueryParams,
    ChecksListAnnotationsPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const checksListAnnotationsQuery = (
  variables: ChecksListAnnotationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ChecksListAnnotationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations",
    operationId: "checksListAnnotations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksListAnnotations(variables, signal),
});

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const useSuspenseChecksListAnnotations = <
  TData = ChecksListAnnotationsResponse,
>(
  variables: ChecksListAnnotationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListAnnotationsResponse,
      ChecksListAnnotationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ChecksListAnnotationsResponse,
    ChecksListAnnotationsError,
    TData
  >({
    ...checksListAnnotationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const useChecksListAnnotations = <TData = ChecksListAnnotationsResponse>(
  variables: ChecksListAnnotationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListAnnotationsResponse,
      ChecksListAnnotationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListAnnotationsResponse,
    ChecksListAnnotationsError,
    TData
  >({
    ...checksListAnnotationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksRerequestRunPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check run.
   */
  checkRunId: number;
};

export type ChecksRerequestRunError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Schemas.BasicError;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Schemas.BasicError;
    }
>;

export type ChecksRerequestRunVariables = {
  pathParams: ChecksRerequestRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const fetchChecksRerequestRun = (
  variables: ChecksRerequestRunVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ChecksRerequestRunError,
    undefined,
    {},
    {},
    ChecksRerequestRunPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}/rerequest",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const useChecksRerequestRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ChecksRerequestRunError,
      ChecksRerequestRunVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ChecksRerequestRunError,
    ChecksRerequestRunVariables
  >({
    mutationFn: (variables: ChecksRerequestRunVariables) =>
      fetchChecksRerequestRun({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksCreateSuitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ChecksCreateSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksCreateSuiteRequestBody = {
  /**
   * The sha of the head commit.
   */
  head_sha: string;
};

export type ChecksCreateSuiteVariables = {
  body: ChecksCreateSuiteRequestBody;
  pathParams: ChecksCreateSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const fetchChecksCreateSuite = (
  variables: ChecksCreateSuiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckSuite,
    ChecksCreateSuiteError,
    ChecksCreateSuiteRequestBody,
    {},
    {},
    ChecksCreateSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const useChecksCreateSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuite,
      ChecksCreateSuiteError,
      ChecksCreateSuiteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuite,
    ChecksCreateSuiteError,
    ChecksCreateSuiteVariables
  >({
    mutationFn: (variables: ChecksCreateSuiteVariables) =>
      fetchChecksCreateSuite({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksSetSuitesPreferencesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ChecksSetSuitesPreferencesError = Fetcher.ErrorWrapper<undefined>;

export type ChecksSetSuitesPreferencesRequestBody = {
  /**
   * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
   */
  auto_trigger_checks?: {
    /**
     * The `id` of the GitHub App.
     */
    app_id: number;
    /**
     * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
     *
     * @default true
     */
    setting: boolean;
  }[];
};

export type ChecksSetSuitesPreferencesVariables = {
  body?: ChecksSetSuitesPreferencesRequestBody;
  pathParams: ChecksSetSuitesPreferencesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const fetchChecksSetSuitesPreferences = (
  variables: ChecksSetSuitesPreferencesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckSuitePreference,
    ChecksSetSuitesPreferencesError,
    ChecksSetSuitesPreferencesRequestBody,
    {},
    {},
    ChecksSetSuitesPreferencesPathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/preferences",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const useChecksSetSuitesPreferences = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuitePreference,
      ChecksSetSuitesPreferencesError,
      ChecksSetSuitesPreferencesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuitePreference,
    ChecksSetSuitesPreferencesError,
    ChecksSetSuitesPreferencesVariables
  >({
    mutationFn: (variables: ChecksSetSuitesPreferencesVariables) =>
      fetchChecksSetSuitesPreferences({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChecksGetSuitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check suite.
   */
  checkSuiteId: number;
};

export type ChecksGetSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksGetSuiteVariables = {
  pathParams: ChecksGetSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksGetSuite = (
  variables: ChecksGetSuiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CheckSuite,
    ChecksGetSuiteError,
    undefined,
    {},
    {},
    ChecksGetSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const checksGetSuiteQuery = (
  variables: ChecksGetSuiteVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CheckSuite>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}",
    operationId: "checksGetSuite",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksGetSuite(variables, signal),
});

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useSuspenseChecksGetSuite = <TData = Schemas.CheckSuite>(
  variables: ChecksGetSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckSuite, ChecksGetSuiteError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CheckSuite,
    ChecksGetSuiteError,
    TData
  >({
    ...checksGetSuiteQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksGetSuite = <TData = Schemas.CheckSuite>(
  variables: ChecksGetSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckSuite, ChecksGetSuiteError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckSuite, ChecksGetSuiteError, TData>({
    ...checksGetSuiteQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksListForSuitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check suite.
   */
  checkSuiteId: number;
};

export type ChecksListForSuiteQueryParams = {
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * Returns check runs with the specified `status`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListForSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListForSuiteResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForSuiteVariables = {
  pathParams: ChecksListForSuitePathParams;
  queryParams?: ChecksListForSuiteQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForSuite = (
  variables: ChecksListForSuiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ChecksListForSuiteResponse,
    ChecksListForSuiteError,
    undefined,
    {},
    ChecksListForSuiteQueryParams,
    ChecksListForSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const checksListForSuiteQuery = (
  variables: ChecksListForSuiteVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ChecksListForSuiteResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs",
    operationId: "checksListForSuite",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksListForSuite(variables, signal),
});

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useSuspenseChecksListForSuite = <
  TData = ChecksListForSuiteResponse,
>(
  variables: ChecksListForSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForSuiteResponse,
      ChecksListForSuiteError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ChecksListForSuiteResponse,
    ChecksListForSuiteError,
    TData
  >({
    ...checksListForSuiteQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForSuite = <TData = ChecksListForSuiteResponse>(
  variables: ChecksListForSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForSuiteResponse,
      ChecksListForSuiteError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForSuiteResponse,
    ChecksListForSuiteError,
    TData
  >({
    ...checksListForSuiteQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksRerequestSuitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the check suite.
   */
  checkSuiteId: number;
};

export type ChecksRerequestSuiteError = Fetcher.ErrorWrapper<undefined>;

export type ChecksRerequestSuiteVariables = {
  pathParams: ChecksRerequestSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const fetchChecksRerequestSuite = (
  variables: ChecksRerequestSuiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ChecksRerequestSuiteError,
    undefined,
    {},
    {},
    ChecksRerequestSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/rerequest",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const useChecksRerequestSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ChecksRerequestSuiteError,
      ChecksRerequestSuiteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ChecksRerequestSuiteError,
    ChecksRerequestSuiteVariables
  >({
    mutationFn: (variables: ChecksRerequestSuiteVariables) =>
      fetchChecksRerequestSuite({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodeScanningListAlertsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodeScanningListAlertsForRepoQueryParams = {
  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The property by which to sort the results.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * If specified, only code scanning alerts with this state will be returned.
   */
  state?: Schemas.CodeScanningAlertState;
  /**
   * If specified, only code scanning alerts with this severity will be returned.
   */
  severity?: Schemas.CodeScanningAlertSeverity;
};

export type CodeScanningListAlertsForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListAlertsForRepoResponse =
  Schemas.CodeScanningAlertItems[];

export type CodeScanningListAlertsForRepoVariables = {
  pathParams: CodeScanningListAlertsForRepoPathParams;
  queryParams?: CodeScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read
 * permission to use this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used `ref` in the request).
 */
export const fetchCodeScanningListAlertsForRepo = (
  variables: CodeScanningListAlertsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodeScanningListAlertsForRepoResponse,
    CodeScanningListAlertsForRepoError,
    undefined,
    {},
    CodeScanningListAlertsForRepoQueryParams,
    CodeScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read
 * permission to use this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used `ref` in the request).
 */
export const codeScanningListAlertsForRepoQuery = (
  variables: CodeScanningListAlertsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodeScanningListAlertsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/alerts",
    operationId: "codeScanningListAlertsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningListAlertsForRepo(variables, signal),
});

/**
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read
 * permission to use this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used `ref` in the request).
 */
export const useSuspenseCodeScanningListAlertsForRepo = <
  TData = CodeScanningListAlertsForRepoResponse,
>(
  variables: CodeScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForRepoResponse,
      CodeScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodeScanningListAlertsForRepoResponse,
    CodeScanningListAlertsForRepoError,
    TData
  >({
    ...codeScanningListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists code scanning alerts.
 *
 * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
 *
 * GitHub Apps must have the `security_events` read
 * permission to use this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch (or for the specified Git reference if you used `ref` in the request).
 */
export const useCodeScanningListAlertsForRepo = <
  TData = CodeScanningListAlertsForRepoResponse,
>(
  variables: CodeScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForRepoResponse,
      CodeScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsForRepoResponse,
    CodeScanningListAlertsForRepoError,
    TData
  >({
    ...codeScanningListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningGetAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningGetAlertError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetAlertVariables = {
  pathParams: CodeScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningGetAlert = (
  variables: CodeScanningGetAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    CodeScanningGetAlertError,
    undefined,
    {},
    {},
    CodeScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const codeScanningGetAlertQuery = (
  variables: CodeScanningGetAlertVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeScanningAlert>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    operationId: "codeScanningGetAlert",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningGetAlert(variables, signal),
});

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningGetAlert = <
  TData = Schemas.CodeScanningAlert,
>(
  variables: CodeScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAlert,
      CodeScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeScanningAlert,
    CodeScanningGetAlertError,
    TData
  >({
    ...codeScanningGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningGetAlert = <TData = Schemas.CodeScanningAlert>(
  variables: CodeScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAlert,
      CodeScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAlert,
    CodeScanningGetAlertError,
    TData
  >({
    ...codeScanningGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningUpdateAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningUpdateAlertError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningUpdateAlertRequestBody = {
  dismissed_comment?: Schemas.CodeScanningAlertDismissedComment;
  dismissed_reason?: Schemas.CodeScanningAlertDismissedReason;
  state: Schemas.CodeScanningAlertSetState;
};

export type CodeScanningUpdateAlertVariables = {
  body: CodeScanningUpdateAlertRequestBody;
  pathParams: CodeScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const fetchCodeScanningUpdateAlert = (
  variables: CodeScanningUpdateAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    CodeScanningUpdateAlertError,
    CodeScanningUpdateAlertRequestBody,
    {},
    {},
    CodeScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const useCodeScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAlert,
      CodeScanningUpdateAlertError,
      CodeScanningUpdateAlertVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAlert,
    CodeScanningUpdateAlertError,
    CodeScanningUpdateAlertVariables
  >({
    mutationFn: (variables: CodeScanningUpdateAlertVariables) =>
      fetchCodeScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodeScanningListAlertInstancesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningListAlertInstancesQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
};

export type CodeScanningListAlertInstancesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListAlertInstancesResponse =
  Schemas.CodeScanningAlertInstance[];

export type CodeScanningListAlertInstancesVariables = {
  pathParams: CodeScanningListAlertInstancesPathParams;
  queryParams?: CodeScanningListAlertInstancesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningListAlertInstances = (
  variables: CodeScanningListAlertInstancesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodeScanningListAlertInstancesResponse,
    CodeScanningListAlertInstancesError,
    undefined,
    {},
    CodeScanningListAlertInstancesQueryParams,
    CodeScanningListAlertInstancesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const codeScanningListAlertInstancesQuery = (
  variables: CodeScanningListAlertInstancesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodeScanningListAlertInstancesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances",
    operationId: "codeScanningListAlertInstances",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningListAlertInstances(variables, signal),
});

/**
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningListAlertInstances = <
  TData = CodeScanningListAlertInstancesResponse,
>(
  variables: CodeScanningListAlertInstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertInstancesResponse,
      CodeScanningListAlertInstancesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodeScanningListAlertInstancesResponse,
    CodeScanningListAlertInstancesError,
    TData
  >({
    ...codeScanningListAlertInstancesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all instances of the specified code scanning alert.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningListAlertInstances = <
  TData = CodeScanningListAlertInstancesResponse,
>(
  variables: CodeScanningListAlertInstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertInstancesResponse,
      CodeScanningListAlertInstancesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertInstancesResponse,
    CodeScanningListAlertInstancesError,
    TData
  >({
    ...codeScanningListAlertInstancesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningListRecentAnalysesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodeScanningListRecentAnalysesQueryParams = {
  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /**
   * Filter analyses belonging to the same SARIF upload.
   */
  sarif_id?: Schemas.CodeScanningAnalysisSarifId;
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The property by which to sort the results.
   *
   * @default created
   */
  sort?: "created";
};

export type CodeScanningListRecentAnalysesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListRecentAnalysesResponse =
  Schemas.CodeScanningAnalysis[];

export type CodeScanningListRecentAnalysesVariables = {
  pathParams: CodeScanningListRecentAnalysesPathParams;
  queryParams?: CodeScanningListRecentAnalysesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const fetchCodeScanningListRecentAnalyses = (
  variables: CodeScanningListRecentAnalysesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodeScanningListRecentAnalysesResponse,
    CodeScanningListRecentAnalysesError,
    undefined,
    {},
    CodeScanningListRecentAnalysesQueryParams,
    CodeScanningListRecentAnalysesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const codeScanningListRecentAnalysesQuery = (
  variables: CodeScanningListRecentAnalysesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodeScanningListRecentAnalysesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/analyses",
    operationId: "codeScanningListRecentAnalyses",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningListRecentAnalyses(variables, signal),
});

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useSuspenseCodeScanningListRecentAnalyses = <
  TData = CodeScanningListRecentAnalysesResponse,
>(
  variables: CodeScanningListRecentAnalysesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListRecentAnalysesResponse,
      CodeScanningListRecentAnalysesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodeScanningListRecentAnalysesResponse,
    CodeScanningListRecentAnalysesError,
    TData
  >({
    ...codeScanningListRecentAnalysesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useCodeScanningListRecentAnalyses = <
  TData = CodeScanningListRecentAnalysesResponse,
>(
  variables: CodeScanningListRecentAnalysesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListRecentAnalysesResponse,
      CodeScanningListRecentAnalysesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListRecentAnalysesResponse,
    CodeScanningListRecentAnalysesError,
    TData
  >({
    ...codeScanningListRecentAnalysesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningDeleteAnalysisPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningDeleteAnalysisQueryParams = {
  /**
   * Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
   */
  confirm_delete?: string | null;
};

export type CodeScanningDeleteAnalysisError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningDeleteAnalysisVariables = {
  pathParams: CodeScanningDeleteAnalysisPathParams;
  queryParams?: CodeScanningDeleteAnalysisQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` scope.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `category`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set:
 * `next_analysis_url` and `confirm_delete_url`.
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in a set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find an analysis that's identified as deletable.
 * Each set of analyses always has one that's identified as deletable.
 * Having found the deletable analysis for one of the two sets,
 * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
 * Then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const fetchCodeScanningDeleteAnalysis = (
  variables: CodeScanningDeleteAnalysisVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningAnalysisDeletion,
    CodeScanningDeleteAnalysisError,
    undefined,
    {},
    CodeScanningDeleteAnalysisQueryParams,
    CodeScanningDeleteAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` scope.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `category`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set:
 * `next_analysis_url` and `confirm_delete_url`.
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in a set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find an analysis that's identified as deletable.
 * Each set of analyses always has one that's identified as deletable.
 * Having found the deletable analysis for one of the two sets,
 * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
 * Then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const useCodeScanningDeleteAnalysis = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAnalysisDeletion,
      CodeScanningDeleteAnalysisError,
      CodeScanningDeleteAnalysisVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAnalysisDeletion,
    CodeScanningDeleteAnalysisError,
    CodeScanningDeleteAnalysisVariables
  >({
    mutationFn: (variables: CodeScanningDeleteAnalysisVariables) =>
      fetchCodeScanningDeleteAnalysis({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodeScanningGetAnalysisPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningGetAnalysisError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetAnalysisVariables = {
  pathParams: CodeScanningGetAnalysisPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const fetchCodeScanningGetAnalysis = (
  variables: CodeScanningGetAnalysisVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningAnalysis,
    CodeScanningGetAnalysisError,
    undefined,
    {},
    {},
    CodeScanningGetAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const codeScanningGetAnalysisQuery = (
  variables: CodeScanningGetAnalysisVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeScanningAnalysis>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    operationId: "codeScanningGetAnalysis",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningGetAnalysis(variables, signal),
});

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const useSuspenseCodeScanningGetAnalysis = <
  TData = Schemas.CodeScanningAnalysis,
>(
  variables: CodeScanningGetAnalysisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAnalysis,
      CodeScanningGetAnalysisError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeScanningAnalysis,
    CodeScanningGetAnalysisError,
    TData
  >({
    ...codeScanningGetAnalysisQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint with private repos,
 * the `public_repo` scope also grants permission to read security events on public repos only.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 */
export const useCodeScanningGetAnalysis = <
  TData = Schemas.CodeScanningAnalysis,
>(
  variables: CodeScanningGetAnalysisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAnalysis,
      CodeScanningGetAnalysisError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAnalysis,
    CodeScanningGetAnalysisError,
    TData
  >({
    ...codeScanningGetAnalysisQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningListCodeqlDatabasesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodeScanningListCodeqlDatabasesError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningListCodeqlDatabasesResponse =
  Schemas.CodeScanningCodeqlDatabase[];

export type CodeScanningListCodeqlDatabasesVariables = {
  pathParams: CodeScanningListCodeqlDatabasesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the CodeQL databases that are available in a repository.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const fetchCodeScanningListCodeqlDatabases = (
  variables: CodeScanningListCodeqlDatabasesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodeScanningListCodeqlDatabasesResponse,
    CodeScanningListCodeqlDatabasesError,
    undefined,
    {},
    {},
    CodeScanningListCodeqlDatabasesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/codeql/databases",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the CodeQL databases that are available in a repository.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const codeScanningListCodeqlDatabasesQuery = (
  variables: CodeScanningListCodeqlDatabasesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodeScanningListCodeqlDatabasesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/codeql/databases",
    operationId: "codeScanningListCodeqlDatabases",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningListCodeqlDatabases(variables, signal),
});

/**
 * Lists the CodeQL databases that are available in a repository.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningListCodeqlDatabases = <
  TData = CodeScanningListCodeqlDatabasesResponse,
>(
  variables: CodeScanningListCodeqlDatabasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListCodeqlDatabasesResponse,
      CodeScanningListCodeqlDatabasesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodeScanningListCodeqlDatabasesResponse,
    CodeScanningListCodeqlDatabasesError,
    TData
  >({
    ...codeScanningListCodeqlDatabasesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the CodeQL databases that are available in a repository.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const useCodeScanningListCodeqlDatabases = <
  TData = CodeScanningListCodeqlDatabasesResponse,
>(
  variables: CodeScanningListCodeqlDatabasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListCodeqlDatabasesResponse,
      CodeScanningListCodeqlDatabasesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListCodeqlDatabasesResponse,
    CodeScanningListCodeqlDatabasesError,
    TData
  >({
    ...codeScanningListCodeqlDatabasesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningGetCodeqlDatabasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The language of the CodeQL database.
   */
  language: string;
};

export type CodeScanningGetCodeqlDatabaseError = Fetcher.ErrorWrapper<
  | {
      status: 302;
      payload: Responses.Found;
    }
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetCodeqlDatabaseVariables = {
  pathParams: CodeScanningGetCodeqlDatabasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
 * your HTTP client is configured to follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const fetchCodeScanningGetCodeqlDatabase = (
  variables: CodeScanningGetCodeqlDatabaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningCodeqlDatabase,
    CodeScanningGetCodeqlDatabaseError,
    undefined,
    {},
    {},
    CodeScanningGetCodeqlDatabasePathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
 * your HTTP client is configured to follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const codeScanningGetCodeqlDatabaseQuery = (
  variables: CodeScanningGetCodeqlDatabaseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeScanningCodeqlDatabase>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
    operationId: "codeScanningGetCodeqlDatabase",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningGetCodeqlDatabase(variables, signal),
});

/**
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
 * your HTTP client is configured to follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningGetCodeqlDatabase = <
  TData = Schemas.CodeScanningCodeqlDatabase,
>(
  variables: CodeScanningGetCodeqlDatabaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningCodeqlDatabase,
      CodeScanningGetCodeqlDatabaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeScanningCodeqlDatabase,
    CodeScanningGetCodeqlDatabaseError,
    TData
  >({
    ...codeScanningGetCodeqlDatabaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
 * your HTTP client is configured to follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * For private repositories, you must use an access token with the `security_events` scope.
 * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
 * GitHub Apps must have the `contents` read permission to use this endpoint.
 */
export const useCodeScanningGetCodeqlDatabase = <
  TData = Schemas.CodeScanningCodeqlDatabase,
>(
  variables: CodeScanningGetCodeqlDatabaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningCodeqlDatabase,
      CodeScanningGetCodeqlDatabaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningCodeqlDatabase,
    CodeScanningGetCodeqlDatabaseError,
    TData
  >({
    ...codeScanningGetCodeqlDatabaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodeScanningUploadSarifPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodeScanningUploadSarifError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenWrite;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningUploadSarifRequestBody = {
  /**
   * The base directory used in the analysis, as it appears in the SARIF file.
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   *
   * @example file:///github/workspace/
   * @format uri
   */
  checkout_uri?: string;
  commit_sha: Schemas.CodeScanningAnalysisCommitSha;
  ref: Schemas.CodeScanningRef;
  sarif: Schemas.CodeScanningAnalysisSarifFile;
  /**
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  started_at?: string;
  /**
   * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
   */
  tool_name?: string;
  /**
   * Whether the SARIF file will be validated according to the code scanning specifications.
   * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
   */
  validate?: boolean;
};

export type CodeScanningUploadSarifVariables = {
  body: CodeScanningUploadSarifRequestBody;
  pathParams: CodeScanningUploadSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64 -w0
 * ```
 * <br>
 * SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
 * To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.
 *
 *
 * | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
 * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
 * | Runs per file                    |         20         |                                                                                  |
 * | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
 * | Rules per run                    |       25,000       |                                                                                  |
 * | Tool extensions per run          |        100         |                                                                                  |
 * | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
 * | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
 * | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
 *
 *
 * The `202 Accepted` response includes an `id` value.
 * You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const fetchCodeScanningUploadSarif = (
  variables: CodeScanningUploadSarifVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningSarifsReceipt,
    CodeScanningUploadSarifError,
    CodeScanningUploadSarifRequestBody,
    {},
    {},
    CodeScanningUploadSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64 -w0
 * ```
 * <br>
 * SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
 * To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.
 *
 *
 * | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
 * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
 * | Runs per file                    |         20         |                                                                                  |
 * | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
 * | Rules per run                    |       25,000       |                                                                                  |
 * | Tool extensions per run          |        100         |                                                                                  |
 * | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
 * | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
 * | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
 *
 *
 * The `202 Accepted` response includes an `id` value.
 * You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const useCodeScanningUploadSarif = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningSarifsReceipt,
      CodeScanningUploadSarifError,
      CodeScanningUploadSarifVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningSarifsReceipt,
    CodeScanningUploadSarifError,
    CodeScanningUploadSarifVariables
  >({
    mutationFn: (variables: CodeScanningUploadSarifVariables) =>
      fetchCodeScanningUploadSarif({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodeScanningGetSarifPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SARIF ID obtained after uploading.
   */
  sarifId: string;
};

export type CodeScanningGetSarifError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.CodeScanningForbiddenRead;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodeScanningGetSarifVariables = {
  pathParams: CodeScanningGetSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningGetSarif = (
  variables: CodeScanningGetSarifVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeScanningSarifsStatus,
    CodeScanningGetSarifError,
    undefined,
    {},
    {},
    CodeScanningGetSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const codeScanningGetSarifQuery = (
  variables: CodeScanningGetSarifVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeScanningSarifsStatus>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}",
    operationId: "codeScanningGetSarif",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodeScanningGetSarif(variables, signal),
});

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useSuspenseCodeScanningGetSarif = <
  TData = Schemas.CodeScanningSarifsStatus,
>(
  variables: CodeScanningGetSarifVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningSarifsStatus,
      CodeScanningGetSarifError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeScanningSarifsStatus,
    CodeScanningGetSarifError,
    TData
  >({
    ...codeScanningGetSarifQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningGetSarif = <
  TData = Schemas.CodeScanningSarifsStatus,
>(
  variables: CodeScanningGetSarifVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningSarifsStatus,
      CodeScanningGetSarifError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningSarifsStatus,
    CodeScanningGetSarifError,
    TData
  >({
    ...codeScanningGetSarifQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCodeownersErrorsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCodeownersErrorsQueryParams = {
  /**
   * A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
   */
  ref?: string;
};

export type ReposCodeownersErrorsError = Fetcher.ErrorWrapper<undefined>;

export type ReposCodeownersErrorsVariables = {
  pathParams: ReposCodeownersErrorsPathParams;
  queryParams?: ReposCodeownersErrorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
 */
export const fetchReposCodeownersErrors = (
  variables: ReposCodeownersErrorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeownersErrors,
    ReposCodeownersErrorsError,
    undefined,
    {},
    ReposCodeownersErrorsQueryParams,
    ReposCodeownersErrorsPathParams
  >({
    url: "/repos/{owner}/{repo}/codeowners/errors",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
 */
export const reposCodeownersErrorsQuery = (
  variables: ReposCodeownersErrorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeownersErrors>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codeowners/errors",
    operationId: "reposCodeownersErrors",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposCodeownersErrors(variables, signal),
});

/**
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
 */
export const useSuspenseReposCodeownersErrors = <
  TData = Schemas.CodeownersErrors,
>(
  variables: ReposCodeownersErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeownersErrors,
      ReposCodeownersErrorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeownersErrors,
    ReposCodeownersErrorsError,
    TData
  >({
    ...reposCodeownersErrorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS syntax,
 * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
 */
export const useReposCodeownersErrors = <TData = Schemas.CodeownersErrors>(
  variables: ReposCodeownersErrorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeownersErrors,
      ReposCodeownersErrorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeownersErrors,
    ReposCodeownersErrorsError,
    TData
  >({
    ...reposCodeownersErrorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesListInRepositoryForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesListInRepositoryForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesListInRepositoryForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesListInRepositoryForAuthenticatedUserResponse = {
  codespaces: Schemas.Codespace[];
  total_count: number;
};

export type CodespacesListInRepositoryForAuthenticatedUserVariables = {
  pathParams: CodespacesListInRepositoryForAuthenticatedUserPathParams;
  queryParams?: CodespacesListInRepositoryForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesListInRepositoryForAuthenticatedUser = (
  variables: CodespacesListInRepositoryForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListInRepositoryForAuthenticatedUserResponse,
    CodespacesListInRepositoryForAuthenticatedUserError,
    undefined,
    {},
    CodespacesListInRepositoryForAuthenticatedUserQueryParams,
    CodespacesListInRepositoryForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const codespacesListInRepositoryForAuthenticatedUserQuery = (
  variables: CodespacesListInRepositoryForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListInRepositoryForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces",
    operationId: "codespacesListInRepositoryForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListInRepositoryForAuthenticatedUser(variables, signal),
});

/**
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesListInRepositoryForAuthenticatedUser = <
  TData = CodespacesListInRepositoryForAuthenticatedUserResponse,
>(
  variables: CodespacesListInRepositoryForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListInRepositoryForAuthenticatedUserResponse,
      CodespacesListInRepositoryForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListInRepositoryForAuthenticatedUserResponse,
    CodespacesListInRepositoryForAuthenticatedUserError,
    TData
  >({
    ...codespacesListInRepositoryForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesListInRepositoryForAuthenticatedUser = <
  TData = CodespacesListInRepositoryForAuthenticatedUserResponse,
>(
  variables: CodespacesListInRepositoryForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListInRepositoryForAuthenticatedUserResponse,
      CodespacesListInRepositoryForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListInRepositoryForAuthenticatedUserResponse,
    CodespacesListInRepositoryForAuthenticatedUserError,
    TData
  >({
    ...codespacesListInRepositoryForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCreateWithRepoForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesCreateWithRepoForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Responses.BadRequest;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 503;
        payload: Responses.ServiceUnavailable;
      }
  >;

export type CodespacesCreateWithRepoForAuthenticatedUserVariables = {
  body?: {
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    location?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Git ref (typically a branch name) for this codespace
     */
    ref?: string;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
  } | null;
  pathParams: CodespacesCreateWithRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a codespace owned by the authenticated user in the specified repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesCreateWithRepoForAuthenticatedUser = (
  variables: CodespacesCreateWithRepoForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesCreateWithRepoForAuthenticatedUserError,
    {
      /**
       * IP for location auto-detection when proxying a request
       */
      client_ip?: string;
      /**
       * Path to devcontainer.json config to use for this codespace
       */
      devcontainer_path?: string;
      /**
       * Display name for this codespace
       */
      display_name?: string;
      /**
       * Time in minutes before codespace stops from inactivity
       */
      idle_timeout_minutes?: number;
      /**
       * Location for this codespace. Assigned by IP if not provided
       */
      location?: string;
      /**
       * Machine type to use for this codespace
       */
      machine?: string;
      /**
       * Whether to authorize requested permissions from devcontainer.json
       */
      multi_repo_permissions_opt_out?: boolean;
      /**
       * Git ref (typically a branch name) for this codespace
       */
      ref?: string;
      /**
       * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
       */
      retention_period_minutes?: number;
      /**
       * Working directory for this codespace
       */
      working_directory?: string;
    } | null,
    {},
    {},
    CodespacesCreateWithRepoForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a codespace owned by the authenticated user in the specified repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesCreateWithRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesCreateWithRepoForAuthenticatedUserError,
      CodespacesCreateWithRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesCreateWithRepoForAuthenticatedUserError,
    CodespacesCreateWithRepoForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesCreateWithRepoForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesCreateWithRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserPathParams =
  {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserQueryParams =
  {
    /**
     * The number of results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /**
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Responses.BadRequest;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse =
  {
    devcontainers: {
      name?: string;
      path: string;
    }[];
    total_count: number;
  };

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables =
  {
    pathParams: CodespacesListDevcontainersInRepositoryForAuthenticatedUserPathParams;
    queryParams?: CodespacesListDevcontainersInRepositoryForAuthenticatedUserQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const fetchCodespacesListDevcontainersInRepositoryForAuthenticatedUser =
  (
    variables: CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserError,
      undefined,
      {},
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserQueryParams,
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserPathParams
    >({
      url: "/repos/{owner}/{repo}/codespaces/devcontainers",
      method: "get",
      ...variables,
      signal,
    });

/**
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const codespacesListDevcontainersInRepositoryForAuthenticatedUserQuery =
  (
    variables: CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables,
  ): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({
      signal,
    }: {
      signal?: AbortSignal;
    }) => Promise<CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse>;
  } => ({
    queryKey: queryKeyFn({
      path: "/repos/{owner}/{repo}/codespaces/devcontainers",
      operationId:
        "codespacesListDevcontainersInRepositoryForAuthenticatedUser",
      variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) =>
      fetchCodespacesListDevcontainersInRepositoryForAuthenticatedUser(
        variables,
        signal,
      ),
  });

/**
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesListDevcontainersInRepositoryForAuthenticatedUser =
  <TData = CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse>(
    variables: CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
        CodespacesListDevcontainersInRepositoryForAuthenticatedUserError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserError,
      TData
    >({
      ...codespacesListDevcontainersInRepositoryForAuthenticatedUserQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify launchpoint configurations for codespaces created within the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useCodespacesListDevcontainersInRepositoryForAuthenticatedUser = <
  TData = CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
>(
  variables: CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
      CodespacesListDevcontainersInRepositoryForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse,
    CodespacesListDevcontainersInRepositoryForAuthenticatedUserError,
    TData
  >({
    ...codespacesListDevcontainersInRepositoryForAuthenticatedUserQuery(
      variables,
    ),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesRepoMachinesForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesRepoMachinesForAuthenticatedUserQueryParams = {
  /**
   * The location to check for available machines. Assigned by IP if not provided.
   *
   * @example WestUs2
   */
  location?: string;
  /**
   * IP for location auto-detection when proxying a request
   */
  client_ip?: string;
};

export type CodespacesRepoMachinesForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesRepoMachinesForAuthenticatedUserResponse = {
  machines: Schemas.CodespaceMachine[];
  total_count: number;
};

export type CodespacesRepoMachinesForAuthenticatedUserVariables = {
  pathParams: CodespacesRepoMachinesForAuthenticatedUserPathParams;
  queryParams?: CodespacesRepoMachinesForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const fetchCodespacesRepoMachinesForAuthenticatedUser = (
  variables: CodespacesRepoMachinesForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesRepoMachinesForAuthenticatedUserResponse,
    CodespacesRepoMachinesForAuthenticatedUserError,
    undefined,
    {},
    CodespacesRepoMachinesForAuthenticatedUserQueryParams,
    CodespacesRepoMachinesForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/machines",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const codespacesRepoMachinesForAuthenticatedUserQuery = (
  variables: CodespacesRepoMachinesForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesRepoMachinesForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces/machines",
    operationId: "codespacesRepoMachinesForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesRepoMachinesForAuthenticatedUser(variables, signal),
});

/**
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesRepoMachinesForAuthenticatedUser = <
  TData = CodespacesRepoMachinesForAuthenticatedUserResponse,
>(
  variables: CodespacesRepoMachinesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesRepoMachinesForAuthenticatedUserResponse,
      CodespacesRepoMachinesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesRepoMachinesForAuthenticatedUserResponse,
    CodespacesRepoMachinesForAuthenticatedUserError,
    TData
  >({
    ...codespacesRepoMachinesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the machine types available for a given repository based on its configuration.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useCodespacesRepoMachinesForAuthenticatedUser = <
  TData = CodespacesRepoMachinesForAuthenticatedUserResponse,
>(
  variables: CodespacesRepoMachinesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesRepoMachinesForAuthenticatedUserResponse,
      CodespacesRepoMachinesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesRepoMachinesForAuthenticatedUserResponse,
    CodespacesRepoMachinesForAuthenticatedUserError,
    TData
  >({
    ...codespacesRepoMachinesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserQueryParams = {
  /**
   * The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
   *
   * @example main
   */
  ref?: string;
  /**
   * An alternative IP for default location auto-detection, such as when proxying a request.
   *
   * @example 1.2.3.4
   */
  client_ip?: string;
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type CodespacesPreFlightWithRepoForAuthenticatedUserResponse = {
  billable_owner?: Schemas.SimpleUser;
  defaults?: {
    devcontainer_path: string | null;
    location: string;
  };
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserVariables = {
  pathParams: CodespacesPreFlightWithRepoForAuthenticatedUserPathParams;
  queryParams?: CodespacesPreFlightWithRepoForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesPreFlightWithRepoForAuthenticatedUser = (
  variables: CodespacesPreFlightWithRepoForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
    CodespacesPreFlightWithRepoForAuthenticatedUserError,
    undefined,
    {},
    CodespacesPreFlightWithRepoForAuthenticatedUserQueryParams,
    CodespacesPreFlightWithRepoForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/new",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const codespacesPreFlightWithRepoForAuthenticatedUserQuery = (
  variables: CodespacesPreFlightWithRepoForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesPreFlightWithRepoForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces/new",
    operationId: "codespacesPreFlightWithRepoForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesPreFlightWithRepoForAuthenticatedUser(variables, signal),
});

/**
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesPreFlightWithRepoForAuthenticatedUser = <
  TData = CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
>(
  variables: CodespacesPreFlightWithRepoForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
      CodespacesPreFlightWithRepoForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
    CodespacesPreFlightWithRepoForAuthenticatedUserError,
    TData
  >({
    ...codespacesPreFlightWithRepoForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesPreFlightWithRepoForAuthenticatedUser = <
  TData = CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
>(
  variables: CodespacesPreFlightWithRepoForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
      CodespacesPreFlightWithRepoForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesPreFlightWithRepoForAuthenticatedUserResponse,
    CodespacesPreFlightWithRepoForAuthenticatedUserError,
    TData
  >({
    ...codespacesPreFlightWithRepoForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesListRepoSecretsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesListRepoSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesListRepoSecretsError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesListRepoSecretsResponse = {
  secrets: Schemas.RepoCodespacesSecret[];
  total_count: number;
};

export type CodespacesListRepoSecretsVariables = {
  pathParams: CodespacesListRepoSecretsPathParams;
  queryParams?: CodespacesListRepoSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const fetchCodespacesListRepoSecrets = (
  variables: CodespacesListRepoSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListRepoSecretsResponse,
    CodespacesListRepoSecretsError,
    undefined,
    {},
    CodespacesListRepoSecretsQueryParams,
    CodespacesListRepoSecretsPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const codespacesListRepoSecretsQuery = (
  variables: CodespacesListRepoSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListRepoSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces/secrets",
    operationId: "codespacesListRepoSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListRepoSecrets(variables, signal),
});

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesListRepoSecrets = <
  TData = CodespacesListRepoSecretsResponse,
>(
  variables: CodespacesListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListRepoSecretsResponse,
      CodespacesListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListRepoSecretsResponse,
    CodespacesListRepoSecretsError,
    TData
  >({
    ...codespacesListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useCodespacesListRepoSecrets = <
  TData = CodespacesListRepoSecretsResponse,
>(
  variables: CodespacesListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListRepoSecretsResponse,
      CodespacesListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListRepoSecretsResponse,
    CodespacesListRepoSecretsError,
    TData
  >({
    ...codespacesListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesGetRepoPublicKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type CodespacesGetRepoPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetRepoPublicKeyVariables = {
  pathParams: CodespacesGetRepoPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const fetchCodespacesGetRepoPublicKey = (
  variables: CodespacesGetRepoPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespacesPublicKey,
    CodespacesGetRepoPublicKeyError,
    undefined,
    {},
    {},
    CodespacesGetRepoPublicKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const codespacesGetRepoPublicKeyQuery = (
  variables: CodespacesGetRepoPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespacesPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces/secrets/public-key",
    operationId: "codespacesGetRepoPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetRepoPublicKey(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesGetRepoPublicKey = <
  TData = Schemas.CodespacesPublicKey,
>(
  variables: CodespacesGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesPublicKey,
      CodespacesGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespacesPublicKey,
    CodespacesGetRepoPublicKeyError,
    TData
  >({
    ...codespacesGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useCodespacesGetRepoPublicKey = <
  TData = Schemas.CodespacesPublicKey,
>(
  variables: CodespacesGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesPublicKey,
      CodespacesGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespacesPublicKey,
    CodespacesGetRepoPublicKeyError,
    TData
  >({
    ...codespacesGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesDeleteRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesDeleteRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesDeleteRepoSecretVariables = {
  pathParams: CodespacesDeleteRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const fetchCodespacesDeleteRepoSecret = (
  variables: CodespacesDeleteRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesDeleteRepoSecretError,
    undefined,
    {},
    {},
    CodespacesDeleteRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useCodespacesDeleteRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesDeleteRepoSecretError,
      CodespacesDeleteRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesDeleteRepoSecretError,
    CodespacesDeleteRepoSecretVariables
  >({
    mutationFn: (variables: CodespacesDeleteRepoSecretVariables) =>
      fetchCodespacesDeleteRepoSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodespacesGetRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesGetRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetRepoSecretVariables = {
  pathParams: CodespacesGetRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const fetchCodespacesGetRepoSecret = (
  variables: CodespacesGetRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepoCodespacesSecret,
    CodespacesGetRepoSecretError,
    undefined,
    {},
    {},
    CodespacesGetRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const codespacesGetRepoSecretQuery = (
  variables: CodespacesGetRepoSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RepoCodespacesSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    operationId: "codespacesGetRepoSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetRepoSecret(variables, signal),
});

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesGetRepoSecret = <
  TData = Schemas.RepoCodespacesSecret,
>(
  variables: CodespacesGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepoCodespacesSecret,
      CodespacesGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RepoCodespacesSecret,
    CodespacesGetRepoSecretError,
    TData
  >({
    ...codespacesGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
 */
export const useCodespacesGetRepoSecret = <
  TData = Schemas.RepoCodespacesSecret,
>(
  variables: CodespacesGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepoCodespacesSecret,
      CodespacesGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepoCodespacesSecret,
    CodespacesGetRepoSecretError,
    TData
  >({
    ...codespacesGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCreateOrUpdateRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesCreateOrUpdateRepoSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type CodespacesCreateOrUpdateRepoSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type CodespacesCreateOrUpdateRepoSecretVariables = {
  body?: CodespacesCreateOrUpdateRepoSecretRequestBody;
  pathParams: CodespacesCreateOrUpdateRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`
 * repository permission to use this endpoint.
 *
 * #### Example of encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example of encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example of encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example of encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchCodespacesCreateOrUpdateRepoSecret = (
  variables: CodespacesCreateOrUpdateRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateRepoSecretError,
    CodespacesCreateOrUpdateRepoSecretRequestBody,
    {},
    {},
    CodespacesCreateOrUpdateRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`
 * repository permission to use this endpoint.
 *
 * #### Example of encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example of encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example of encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example of encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useCodespacesCreateOrUpdateRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      CodespacesCreateOrUpdateRepoSecretError,
      CodespacesCreateOrUpdateRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateRepoSecretError,
    CodespacesCreateOrUpdateRepoSecretVariables
  >({
    mutationFn: (variables: CodespacesCreateOrUpdateRepoSecretVariables) =>
      fetchCodespacesCreateOrUpdateRepoSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListCollaboratorsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListCollaboratorsQueryParams = {
  /**
   * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /**
   * Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
   */
  permission?: "pull" | "triage" | "push" | "maintain" | "admin";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCollaboratorsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListCollaboratorsResponse = Schemas.Collaborator[];

export type ReposListCollaboratorsVariables = {
  pathParams: ReposListCollaboratorsPathParams;
  queryParams?: ReposListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const fetchReposListCollaborators = (
  variables: ReposListCollaboratorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListCollaboratorsResponse,
    ReposListCollaboratorsError,
    undefined,
    {},
    ReposListCollaboratorsQueryParams,
    ReposListCollaboratorsPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators",
    method: "get",
    ...variables,
    signal,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const reposListCollaboratorsQuery = (
  variables: ReposListCollaboratorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListCollaboratorsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/collaborators",
    operationId: "reposListCollaborators",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListCollaborators(variables, signal),
});

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const useSuspenseReposListCollaborators = <
  TData = ReposListCollaboratorsResponse,
>(
  variables: ReposListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCollaboratorsResponse,
      ReposListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListCollaboratorsResponse,
    ReposListCollaboratorsError,
    TData
  >({
    ...reposListCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const useReposListCollaborators = <
  TData = ReposListCollaboratorsResponse,
>(
  variables: ReposListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCollaboratorsResponse,
      ReposListCollaboratorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCollaboratorsResponse,
    ReposListCollaboratorsError,
    TData
  >({
    ...reposListCollaboratorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposRemoveCollaboratorPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ReposRemoveCollaboratorError = Fetcher.ErrorWrapper<undefined>;

export type ReposRemoveCollaboratorVariables = {
  pathParams: ReposRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposRemoveCollaborator = (
  variables: ReposRemoveCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposRemoveCollaboratorError,
    undefined,
    {},
    {},
    ReposRemoveCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposRemoveCollaboratorError,
      ReposRemoveCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposRemoveCollaboratorError,
    ReposRemoveCollaboratorVariables
  >({
    mutationFn: (variables: ReposRemoveCollaboratorVariables) =>
      fetchReposRemoveCollaborator({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposCheckCollaboratorPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ReposCheckCollaboratorError = Fetcher.ErrorWrapper<undefined>;

export type ReposCheckCollaboratorVariables = {
  pathParams: ReposCheckCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const fetchReposCheckCollaborator = (
  variables: ReposCheckCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposCheckCollaboratorError,
    undefined,
    {},
    {},
    ReposCheckCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const reposCheckCollaboratorQuery = (
  variables: ReposCheckCollaboratorVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/collaborators/{username}",
    operationId: "reposCheckCollaborator",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposCheckCollaborator(variables, signal),
});

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const useSuspenseReposCheckCollaborator = <TData = undefined>(
  variables: ReposCheckCollaboratorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ReposCheckCollaboratorError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ReposCheckCollaboratorError,
    TData
  >({
    ...reposCheckCollaboratorQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 *
 * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
 * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
 * endpoint.
 */
export const useReposCheckCollaborator = <TData = undefined>(
  variables: ReposCheckCollaboratorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ReposCheckCollaboratorError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, ReposCheckCollaboratorError, TData>({
    ...reposCheckCollaboratorQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposAddCollaboratorPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ReposAddCollaboratorError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposAddCollaboratorRequestBody = {
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
   *
   * @default push
   */
  permission?: string;
};

export type ReposAddCollaboratorVariables = {
  body?: ReposAddCollaboratorRequestBody;
  pathParams: ReposAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 *
 * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
 *
 * ```
 * Cannot assign {member} permission of {role name}
 * ```
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Updating an existing collaborator's permission level**
 *
 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
 *
 * **Rate limits**
 *
 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const fetchReposAddCollaborator = (
  variables: ReposAddCollaboratorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposAddCollaboratorError,
    ReposAddCollaboratorRequestBody,
    {},
    {},
    ReposAddCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 *
 * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
 *
 * ```
 * Cannot assign {member} permission of {role name}
 * ```
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Updating an existing collaborator's permission level**
 *
 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
 *
 * **Rate limits**
 *
 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const useReposAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      ReposAddCollaboratorError,
      ReposAddCollaboratorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    ReposAddCollaboratorError,
    ReposAddCollaboratorVariables
  >({
    mutationFn: (variables: ReposAddCollaboratorVariables) =>
      fetchReposAddCollaborator({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetCollaboratorPermissionLevelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ReposGetCollaboratorPermissionLevelError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCollaboratorPermissionLevelVariables = {
  pathParams: ReposGetCollaboratorPermissionLevelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const fetchReposGetCollaboratorPermissionLevel = (
  variables: ReposGetCollaboratorPermissionLevelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepositoryCollaboratorPermission,
    ReposGetCollaboratorPermissionLevelError,
    undefined,
    {},
    {},
    ReposGetCollaboratorPermissionLevelPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}/permission",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const reposGetCollaboratorPermissionLevelQuery = (
  variables: ReposGetCollaboratorPermissionLevelVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RepositoryCollaboratorPermission>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/collaborators/{username}/permission",
    operationId: "reposGetCollaboratorPermissionLevel",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCollaboratorPermissionLevel(variables, signal),
});

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const useSuspenseReposGetCollaboratorPermissionLevel = <
  TData = Schemas.RepositoryCollaboratorPermission,
>(
  variables: ReposGetCollaboratorPermissionLevelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      ReposGetCollaboratorPermissionLevelError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RepositoryCollaboratorPermission,
    ReposGetCollaboratorPermissionLevelError,
    TData
  >({
    ...reposGetCollaboratorPermissionLevelQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const useReposGetCollaboratorPermissionLevel = <
  TData = Schemas.RepositoryCollaboratorPermission,
>(
  variables: ReposGetCollaboratorPermissionLevelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      ReposGetCollaboratorPermissionLevelError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositoryCollaboratorPermission,
    ReposGetCollaboratorPermissionLevelError,
    TData
  >({
    ...reposGetCollaboratorPermissionLevelQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListCommitCommentsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListCommitCommentsForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitCommentsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposListCommitCommentsForRepoResponse = Schemas.CommitComment[];

export type ReposListCommitCommentsForRepoVariables = {
  pathParams: ReposListCommitCommentsForRepoPathParams;
  queryParams?: ReposListCommitCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const fetchReposListCommitCommentsForRepo = (
  variables: ReposListCommitCommentsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListCommitCommentsForRepoResponse,
    ReposListCommitCommentsForRepoError,
    undefined,
    {},
    ReposListCommitCommentsForRepoQueryParams,
    ReposListCommitCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const reposListCommitCommentsForRepoQuery = (
  variables: ReposListCommitCommentsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListCommitCommentsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/comments",
    operationId: "reposListCommitCommentsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListCommitCommentsForRepo(variables, signal),
});

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const useSuspenseReposListCommitCommentsForRepo = <
  TData = ReposListCommitCommentsForRepoResponse,
>(
  variables: ReposListCommitCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitCommentsForRepoResponse,
      ReposListCommitCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListCommitCommentsForRepoResponse,
    ReposListCommitCommentsForRepoError,
    TData
  >({
    ...reposListCommitCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const useReposListCommitCommentsForRepo = <
  TData = ReposListCommitCommentsForRepoResponse,
>(
  variables: ReposListCommitCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitCommentsForRepoResponse,
      ReposListCommitCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitCommentsForRepoResponse,
    ReposListCommitCommentsForRepoError,
    TData
  >({
    ...reposListCommitCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeleteCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReposDeleteCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteCommitCommentVariables = {
  pathParams: ReposDeleteCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteCommitComment = (
  variables: ReposDeleteCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteCommitCommentError,
    undefined,
    {},
    {},
    ReposDeleteCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposDeleteCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteCommitCommentError,
      ReposDeleteCommitCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteCommitCommentError,
    ReposDeleteCommitCommentVariables
  >({
    mutationFn: (variables: ReposDeleteCommitCommentVariables) =>
      fetchReposDeleteCommitComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReposGetCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCommitCommentVariables = {
  pathParams: ReposGetCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetCommitComment = (
  variables: ReposGetCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposGetCommitCommentError,
    undefined,
    {},
    {},
    ReposGetCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetCommitCommentQuery = (
  variables: ReposGetCommitCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CommitComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/comments/{commentId}",
    operationId: "reposGetCommitComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCommitComment(variables, signal),
});

export const useSuspenseReposGetCommitComment = <TData = Schemas.CommitComment>(
  variables: ReposGetCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComment,
      ReposGetCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CommitComment,
    ReposGetCommitCommentError,
    TData
  >({
    ...reposGetCommitCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetCommitComment = <TData = Schemas.CommitComment>(
  variables: ReposGetCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComment,
      ReposGetCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComment,
    ReposGetCommitCommentError,
    TData
  >({
    ...reposGetCommitCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReposUpdateCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposUpdateCommitCommentRequestBody = {
  /**
   * The contents of the comment
   */
  body: string;
};

export type ReposUpdateCommitCommentVariables = {
  body: ReposUpdateCommitCommentRequestBody;
  pathParams: ReposUpdateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateCommitComment = (
  variables: ReposUpdateCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposUpdateCommitCommentError,
    ReposUpdateCommitCommentRequestBody,
    {},
    {},
    ReposUpdateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useReposUpdateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      ReposUpdateCommitCommentError,
      ReposUpdateCommitCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    ReposUpdateCommitCommentError,
    ReposUpdateCommitCommentVariables
  >({
    mutationFn: (variables: ReposUpdateCommitCommentVariables) =>
      fetchReposUpdateCommitComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsListForCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsListForCommitCommentQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForCommitCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReactionsListForCommitCommentResponse = Schemas.Reaction[];

export type ReactionsListForCommitCommentVariables = {
  pathParams: ReactionsListForCommitCommentPathParams;
  queryParams?: ReactionsListForCommitCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsListForCommitComment = (
  variables: ReactionsListForCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForCommitCommentResponse,
    ReactionsListForCommitCommentError,
    undefined,
    {},
    ReactionsListForCommitCommentQueryParams,
    ReactionsListForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const reactionsListForCommitCommentQuery = (
  variables: ReactionsListForCommitCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForCommitCommentResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    operationId: "reactionsListForCommitComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForCommitComment(variables, signal),
});

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useSuspenseReactionsListForCommitComment = <
  TData = ReactionsListForCommitCommentResponse,
>(
  variables: ReactionsListForCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForCommitCommentResponse,
      ReactionsListForCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForCommitCommentResponse,
    ReactionsListForCommitCommentError,
    TData
  >({
    ...reactionsListForCommitCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsListForCommitComment = <
  TData = ReactionsListForCommitCommentResponse,
>(
  variables: ReactionsListForCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForCommitCommentResponse,
      ReactionsListForCommitCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForCommitCommentResponse,
    ReactionsListForCommitCommentError,
    TData
  >({
    ...reactionsListForCommitCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsCreateForCommitCommentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReactionsCreateForCommitCommentRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForCommitCommentVariables = {
  body: ReactionsCreateForCommitCommentRequestBody;
  pathParams: ReactionsCreateForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
 */
export const fetchReactionsCreateForCommitComment = (
  variables: ReactionsCreateForCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForCommitCommentError,
    ReactionsCreateForCommitCommentRequestBody,
    {},
    {},
    ReactionsCreateForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
 */
export const useReactionsCreateForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForCommitCommentError,
      ReactionsCreateForCommitCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForCommitCommentError,
    ReactionsCreateForCommitCommentVariables
  >({
    mutationFn: (variables: ReactionsCreateForCommitCommentVariables) =>
      fetchReactionsCreateForCommitComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsDeleteForCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForCommitCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForCommitCommentVariables = {
  pathParams: ReactionsDeleteForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsDeleteForCommitComment = (
  variables: ReactionsDeleteForCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForCommitCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsDeleteForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForCommitCommentError,
      ReactionsDeleteForCommitCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForCommitCommentError,
    ReactionsDeleteForCommitCommentVariables
  >({
    mutationFn: (variables: ReactionsDeleteForCommitCommentVariables) =>
      fetchReactionsDeleteForCommitComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListCommitsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListCommitsQueryParams = {
  /**
   * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
   */
  sha?: string;
  /**
   * Only commits containing this file path will be returned.
   */
  path?: string;
  /**
   * GitHub login or email address by which to filter by commit author.
   */
  author?: string;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  until?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type ReposListCommitsResponse = Schemas.Commit[];

export type ReposListCommitsVariables = {
  pathParams: ReposListCommitsPathParams;
  queryParams?: ReposListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposListCommits = (
  variables: ReposListCommitsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListCommitsResponse,
    ReposListCommitsError,
    undefined,
    {},
    ReposListCommitsQueryParams,
    ReposListCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/commits",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const reposListCommitsQuery = (
  variables: ReposListCommitsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListCommitsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits",
    operationId: "reposListCommits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListCommits(variables, signal),
});

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useSuspenseReposListCommits = <TData = ReposListCommitsResponse>(
  variables: ReposListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitsResponse,
      ReposListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListCommitsResponse,
    ReposListCommitsError,
    TData
  >({
    ...reposListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposListCommits = <TData = ReposListCommitsResponse>(
  variables: ReposListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitsResponse,
      ReposListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitsResponse,
    ReposListCommitsError,
    TData
  >({
    ...reposListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListBranchesForHeadCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SHA of the commit.
   */
  commitSha: string;
};

export type ReposListBranchesForHeadCommitError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposListBranchesForHeadCommitResponse = Schemas.BranchShort[];

export type ReposListBranchesForHeadCommitVariables = {
  pathParams: ReposListBranchesForHeadCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const fetchReposListBranchesForHeadCommit = (
  variables: ReposListBranchesForHeadCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListBranchesForHeadCommitResponse,
    ReposListBranchesForHeadCommitError,
    undefined,
    {},
    {},
    ReposListBranchesForHeadCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const reposListBranchesForHeadCommitQuery = (
  variables: ReposListBranchesForHeadCommitVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListBranchesForHeadCommitResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head",
    operationId: "reposListBranchesForHeadCommit",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListBranchesForHeadCommit(variables, signal),
});

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const useSuspenseReposListBranchesForHeadCommit = <
  TData = ReposListBranchesForHeadCommitResponse,
>(
  variables: ReposListBranchesForHeadCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesForHeadCommitResponse,
      ReposListBranchesForHeadCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListBranchesForHeadCommitResponse,
    ReposListBranchesForHeadCommitError,
    TData
  >({
    ...reposListBranchesForHeadCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const useReposListBranchesForHeadCommit = <
  TData = ReposListBranchesForHeadCommitResponse,
>(
  variables: ReposListBranchesForHeadCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesForHeadCommitResponse,
      ReposListBranchesForHeadCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesForHeadCommitResponse,
    ReposListBranchesForHeadCommitError,
    TData
  >({
    ...reposListBranchesForHeadCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListCommentsForCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SHA of the commit.
   */
  commitSha: string;
};

export type ReposListCommentsForCommitQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommentsForCommitError = Fetcher.ErrorWrapper<undefined>;

export type ReposListCommentsForCommitResponse = Schemas.CommitComment[];

export type ReposListCommentsForCommitVariables = {
  pathParams: ReposListCommentsForCommitPathParams;
  queryParams?: ReposListCommentsForCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const fetchReposListCommentsForCommit = (
  variables: ReposListCommentsForCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListCommentsForCommitResponse,
    ReposListCommentsForCommitError,
    undefined,
    {},
    ReposListCommentsForCommitQueryParams,
    ReposListCommentsForCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const reposListCommentsForCommitQuery = (
  variables: ReposListCommentsForCommitVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListCommentsForCommitResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    operationId: "reposListCommentsForCommit",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListCommentsForCommit(variables, signal),
});

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const useSuspenseReposListCommentsForCommit = <
  TData = ReposListCommentsForCommitResponse,
>(
  variables: ReposListCommentsForCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommentsForCommitResponse,
      ReposListCommentsForCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListCommentsForCommitResponse,
    ReposListCommentsForCommitError,
    TData
  >({
    ...reposListCommentsForCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const useReposListCommentsForCommit = <
  TData = ReposListCommentsForCommitResponse,
>(
  variables: ReposListCommentsForCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommentsForCommitResponse,
      ReposListCommentsForCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommentsForCommitResponse,
    ReposListCommentsForCommitError,
    TData
  >({
    ...reposListCommentsForCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateCommitCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SHA of the commit.
   */
  commitSha: string;
};

export type ReposCreateCommitCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateCommitCommentRequestBody = {
  /**
   * The contents of the comment.
   */
  body: string;
  /**
   * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
   */
  line?: number;
  /**
   * Relative path of the file to comment on.
   */
  path?: string;
  /**
   * Line index in the diff to comment on.
   */
  position?: number;
};

export type ReposCreateCommitCommentVariables = {
  body: ReposCreateCommitCommentRequestBody;
  pathParams: ReposCreateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchReposCreateCommitComment = (
  variables: ReposCreateCommitCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposCreateCommitCommentError,
    ReposCreateCommitCommentRequestBody,
    {},
    {},
    ReposCreateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useReposCreateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      ReposCreateCommitCommentError,
      ReposCreateCommitCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    ReposCreateCommitCommentError,
    ReposCreateCommitCommentVariables
  >({
    mutationFn: (variables: ReposCreateCommitCommentVariables) =>
      fetchReposCreateCommitComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListPullRequestsAssociatedWithCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SHA of the commit.
   */
  commitSha: string;
};

export type ReposListPullRequestsAssociatedWithCommitQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPullRequestsAssociatedWithCommitError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposListPullRequestsAssociatedWithCommitResponse =
  Schemas.PullRequestSimple[];

export type ReposListPullRequestsAssociatedWithCommitVariables = {
  pathParams: ReposListPullRequestsAssociatedWithCommitPathParams;
  queryParams?: ReposListPullRequestsAssociatedWithCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
 */
export const fetchReposListPullRequestsAssociatedWithCommit = (
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListPullRequestsAssociatedWithCommitResponse,
    ReposListPullRequestsAssociatedWithCommitError,
    undefined,
    {},
    ReposListPullRequestsAssociatedWithCommitQueryParams,
    ReposListPullRequestsAssociatedWithCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/pulls",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
 */
export const reposListPullRequestsAssociatedWithCommitQuery = (
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListPullRequestsAssociatedWithCommitResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{commitSha}/pulls",
    operationId: "reposListPullRequestsAssociatedWithCommit",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListPullRequestsAssociatedWithCommit(variables, signal),
});

/**
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
 */
export const useSuspenseReposListPullRequestsAssociatedWithCommit = <
  TData = ReposListPullRequestsAssociatedWithCommitResponse,
>(
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPullRequestsAssociatedWithCommitResponse,
      ReposListPullRequestsAssociatedWithCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListPullRequestsAssociatedWithCommitResponse,
    ReposListPullRequestsAssociatedWithCommitError,
    TData
  >({
    ...reposListPullRequestsAssociatedWithCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
 */
export const useReposListPullRequestsAssociatedWithCommit = <
  TData = ReposListPullRequestsAssociatedWithCommitResponse,
>(
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPullRequestsAssociatedWithCommitResponse,
      ReposListPullRequestsAssociatedWithCommitError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPullRequestsAssociatedWithCommitResponse,
    ReposListPullRequestsAssociatedWithCommitError,
    TData
  >({
    ...reposListPullRequestsAssociatedWithCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type ReposGetCommitQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetCommitError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ReposGetCommitVariables = {
  pathParams: ReposGetCommitPathParams;
  queryParams?: ReposGetCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposGetCommit = (
  variables: ReposGetCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Commit,
    ReposGetCommitError,
    undefined,
    {},
    ReposGetCommitQueryParams,
    ReposGetCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const reposGetCommitQuery = (
  variables: ReposGetCommitVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Commit>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{ref}",
    operationId: "reposGetCommit",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCommit(variables, signal),
});

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useSuspenseReposGetCommit = <TData = Schemas.Commit>(
  variables: ReposGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Commit, ReposGetCommitError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Commit,
    ReposGetCommitError,
    TData
  >({
    ...reposGetCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposGetCommit = <TData = Schemas.Commit>(
  variables: ReposGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Commit, ReposGetCommitError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Commit, ReposGetCommitError, TData>({
    ...reposGetCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksListForRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type ChecksListForRefQueryParams = {
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * Returns check runs with the specified `status`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  app_id?: number;
};

export type ChecksListForRefError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListForRefResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForRefVariables = {
  pathParams: ChecksListForRefPathParams;
  queryParams?: ChecksListForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForRef = (
  variables: ChecksListForRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ChecksListForRefResponse,
    ChecksListForRefError,
    undefined,
    {},
    ChecksListForRefQueryParams,
    ChecksListForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const checksListForRefQuery = (
  variables: ChecksListForRefVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ChecksListForRefResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
    operationId: "checksListForRef",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksListForRef(variables, signal),
});

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useSuspenseChecksListForRef = <TData = ChecksListForRefResponse>(
  variables: ChecksListForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForRefResponse,
      ChecksListForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ChecksListForRefResponse,
    ChecksListForRefError,
    TData
  >({
    ...checksListForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForRef = <TData = ChecksListForRefResponse>(
  variables: ChecksListForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForRefResponse,
      ChecksListForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForRefResponse,
    ChecksListForRefError,
    TData
  >({
    ...checksListForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ChecksListSuitesForRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type ChecksListSuitesForRefQueryParams = {
  /**
   * Filters check suites by GitHub App `id`.
   */
  app_id?: number;
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListSuitesForRefError = Fetcher.ErrorWrapper<undefined>;

export type ChecksListSuitesForRefResponse = {
  check_suites: Schemas.CheckSuite[];
  total_count: number;
};

export type ChecksListSuitesForRefVariables = {
  pathParams: ChecksListSuitesForRefPathParams;
  queryParams?: ChecksListSuitesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksListSuitesForRef = (
  variables: ChecksListSuitesForRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ChecksListSuitesForRefResponse,
    ChecksListSuitesForRefError,
    undefined,
    {},
    ChecksListSuitesForRefQueryParams,
    ChecksListSuitesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const checksListSuitesForRefQuery = (
  variables: ChecksListSuitesForRefVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ChecksListSuitesForRefResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
    operationId: "checksListSuitesForRef",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchChecksListSuitesForRef(variables, signal),
});

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useSuspenseChecksListSuitesForRef = <
  TData = ChecksListSuitesForRefResponse,
>(
  variables: ChecksListSuitesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListSuitesForRefResponse,
      ChecksListSuitesForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ChecksListSuitesForRefResponse,
    ChecksListSuitesForRefError,
    TData
  >({
    ...checksListSuitesForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksListSuitesForRef = <
  TData = ChecksListSuitesForRefResponse,
>(
  variables: ChecksListSuitesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListSuitesForRefResponse,
      ChecksListSuitesForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListSuitesForRefResponse,
    ChecksListSuitesForRefError,
    TData
  >({
    ...checksListSuitesForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetCombinedStatusForRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type ReposGetCombinedStatusForRefQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposGetCombinedStatusForRefError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetCombinedStatusForRefVariables = {
  pathParams: ReposGetCombinedStatusForRefPathParams;
  queryParams?: ReposGetCombinedStatusForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const fetchReposGetCombinedStatusForRef = (
  variables: ReposGetCombinedStatusForRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CombinedCommitStatus,
    ReposGetCombinedStatusForRefError,
    undefined,
    {},
    ReposGetCombinedStatusForRefQueryParams,
    ReposGetCombinedStatusForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/status",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const reposGetCombinedStatusForRefQuery = (
  variables: ReposGetCombinedStatusForRefVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CombinedCommitStatus>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{ref}/status",
    operationId: "reposGetCombinedStatusForRef",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCombinedStatusForRef(variables, signal),
});

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const useSuspenseReposGetCombinedStatusForRef = <
  TData = Schemas.CombinedCommitStatus,
>(
  variables: ReposGetCombinedStatusForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedCommitStatus,
      ReposGetCombinedStatusForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CombinedCommitStatus,
    ReposGetCombinedStatusForRefError,
    TData
  >({
    ...reposGetCombinedStatusForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const useReposGetCombinedStatusForRef = <
  TData = Schemas.CombinedCommitStatus,
>(
  variables: ReposGetCombinedStatusForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedCommitStatus,
      ReposGetCombinedStatusForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedCommitStatus,
    ReposGetCombinedStatusForRefError,
    TData
  >({
    ...reposGetCombinedStatusForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListCommitStatusesForRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type ReposListCommitStatusesForRefQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitStatusesForRefError = Fetcher.ErrorWrapper<{
  status: 301;
  payload: Responses.MovedPermanently;
}>;

export type ReposListCommitStatusesForRefResponse = Schemas.Status[];

export type ReposListCommitStatusesForRefVariables = {
  pathParams: ReposListCommitStatusesForRefPathParams;
  queryParams?: ReposListCommitStatusesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const fetchReposListCommitStatusesForRef = (
  variables: ReposListCommitStatusesForRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListCommitStatusesForRefResponse,
    ReposListCommitStatusesForRefError,
    undefined,
    {},
    ReposListCommitStatusesForRefQueryParams,
    ReposListCommitStatusesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/statuses",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const reposListCommitStatusesForRefQuery = (
  variables: ReposListCommitStatusesForRefVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListCommitStatusesForRefResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/commits/{ref}/statuses",
    operationId: "reposListCommitStatusesForRef",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListCommitStatusesForRef(variables, signal),
});

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const useSuspenseReposListCommitStatusesForRef = <
  TData = ReposListCommitStatusesForRefResponse,
>(
  variables: ReposListCommitStatusesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitStatusesForRefResponse,
      ReposListCommitStatusesForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListCommitStatusesForRefResponse,
    ReposListCommitStatusesForRefError,
    TData
  >({
    ...reposListCommitStatusesForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const useReposListCommitStatusesForRef = <
  TData = ReposListCommitStatusesForRefResponse,
>(
  variables: ReposListCommitStatusesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitStatusesForRefResponse,
      ReposListCommitStatusesForRefError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitStatusesForRefResponse,
    ReposListCommitStatusesForRefError,
    TData
  >({
    ...reposListCommitStatusesForRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetCommunityProfileMetricsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetCommunityProfileMetricsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetCommunityProfileMetricsVariables = {
  pathParams: ReposGetCommunityProfileMetricsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns all community profile metrics for a repository. The repository cannot be a fork.
 *
 * The returned metrics include an overall health score, the repository description, the presence of documentation, the
 * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const fetchReposGetCommunityProfileMetrics = (
  variables: ReposGetCommunityProfileMetricsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommunityProfile,
    ReposGetCommunityProfileMetricsError,
    undefined,
    {},
    {},
    ReposGetCommunityProfileMetricsPathParams
  >({
    url: "/repos/{owner}/{repo}/community/profile",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns all community profile metrics for a repository. The repository cannot be a fork.
 *
 * The returned metrics include an overall health score, the repository description, the presence of documentation, the
 * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const reposGetCommunityProfileMetricsQuery = (
  variables: ReposGetCommunityProfileMetricsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CommunityProfile>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/community/profile",
    operationId: "reposGetCommunityProfileMetrics",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCommunityProfileMetrics(variables, signal),
});

/**
 * Returns all community profile metrics for a repository. The repository cannot be a fork.
 *
 * The returned metrics include an overall health score, the repository description, the presence of documentation, the
 * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const useSuspenseReposGetCommunityProfileMetrics = <
  TData = Schemas.CommunityProfile,
>(
  variables: ReposGetCommunityProfileMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommunityProfile,
      ReposGetCommunityProfileMetricsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CommunityProfile,
    ReposGetCommunityProfileMetricsError,
    TData
  >({
    ...reposGetCommunityProfileMetricsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns all community profile metrics for a repository. The repository cannot be a fork.
 *
 * The returned metrics include an overall health score, the repository description, the presence of documentation, the
 * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const useReposGetCommunityProfileMetrics = <
  TData = Schemas.CommunityProfile,
>(
  variables: ReposGetCommunityProfileMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommunityProfile,
      ReposGetCommunityProfileMetricsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommunityProfile,
    ReposGetCommunityProfileMetricsError,
    TData
  >({
    ...reposGetCommunityProfileMetricsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCompareCommitsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
   */
  basehead: string;
};

export type ReposCompareCommitsQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposCompareCommitsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ReposCompareCommitsVariables = {
  pathParams: ReposCompareCommitsPathParams;
  queryParams?: ReposCompareCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
 *
 * This endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
 *
 * - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
 * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
 *
 * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposCompareCommits = (
  variables: ReposCompareCommitsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommitComparison,
    ReposCompareCommitsError,
    undefined,
    {},
    ReposCompareCommitsQueryParams,
    ReposCompareCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/compare/{basehead}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
 *
 * This endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
 *
 * - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
 * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
 *
 * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const reposCompareCommitsQuery = (
  variables: ReposCompareCommitsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CommitComparison>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/compare/{basehead}",
    operationId: "reposCompareCommits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposCompareCommits(variables, signal),
});

/**
 * Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
 *
 * This endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
 *
 * - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
 * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
 *
 * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useSuspenseReposCompareCommits = <
  TData = Schemas.CommitComparison,
>(
  variables: ReposCompareCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComparison,
      ReposCompareCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CommitComparison,
    ReposCompareCommitsError,
    TData
  >({
    ...reposCompareCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
 *
 * This endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
 *
 * - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
 * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
 *
 * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposCompareCommits = <TData = Schemas.CommitComparison>(
  variables: ReposCompareCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComparison,
      ReposCompareCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComparison,
    ReposCompareCommitsError,
    TData
  >({
    ...reposCompareCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeleteFilePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * path parameter
   */
  path: string;
};

export type ReposDeleteFileError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type ReposDeleteFileRequestBody = {
  /**
   * object containing information about the author.
   */
  author?: {
    /**
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /**
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /**
   * object containing information about the committer.
   */
  committer?: {
    /**
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /**
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /**
   * The commit message.
   */
  message: string;
  /**
   * The blob SHA of the file being deleted.
   */
  sha: string;
};

export type ReposDeleteFileVariables = {
  body: ReposDeleteFileRequestBody;
  pathParams: ReposDeleteFilePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 *
 * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 */
export const fetchReposDeleteFile = (
  variables: ReposDeleteFileVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.FileCommit,
    ReposDeleteFileError,
    ReposDeleteFileRequestBody,
    {},
    {},
    ReposDeleteFilePathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 *
 * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 */
export const useReposDeleteFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      ReposDeleteFileError,
      ReposDeleteFileVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    ReposDeleteFileError,
    ReposDeleteFileVariables
  >({
    mutationFn: (variables: ReposDeleteFileVariables) =>
      fetchReposDeleteFile({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetContentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * path parameter
   */
  path: string;
};

export type ReposGetContentQueryParams = {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetContentError = Fetcher.ErrorWrapper<
  | {
      status: 302;
      payload: Responses.Found;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetContentVariables = {
  pathParams: ReposGetContentPathParams;
  queryParams?: ReposGetContentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Notes**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
 *  * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const fetchReposGetContent = (
  variables: ReposGetContentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    ReposGetContentError,
    undefined,
    {},
    ReposGetContentQueryParams,
    ReposGetContentPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Notes**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
 *  * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const reposGetContentQuery = (
  variables: ReposGetContentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule
  >;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/contents/{path}",
    operationId: "reposGetContent",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetContent(variables, signal),
});

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Notes**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
 *  * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const useSuspenseReposGetContent = <
  TData =
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
>(
  variables: ReposGetContentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      | Schemas.ContentDirectory
      | Schemas.ContentFile
      | Schemas.ContentSymlink
      | Schemas.ContentSubmodule,
      ReposGetContentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    ReposGetContentError,
    TData
  >({
    ...reposGetContentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Notes**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * #### Size limits
 * If the requested file's size is:
 * * 1 MB or smaller: All features of this endpoint are supported.
 * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
 *  * Greater than 100 MB: This endpoint is not supported.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const useReposGetContent = <
  TData =
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
>(
  variables: ReposGetContentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      | Schemas.ContentDirectory
      | Schemas.ContentFile
      | Schemas.ContentSymlink
      | Schemas.ContentSubmodule,
      ReposGetContentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    ReposGetContentError,
    TData
  >({
    ...reposGetContentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateOrUpdateFileContentsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * path parameter
   */
  path: string;
};

export type ReposCreateOrUpdateFileContentsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateOrUpdateFileContentsRequestBody = {
  /**
   * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
   */
  author?: {
    /**
     * @example "2013-01-15T17:13:22+05:00"
     */
    date?: string;
    /**
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /**
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /**
   * The person that committed the file. Default: the authenticated user.
   */
  committer?: {
    /**
     * @example "2013-01-05T13:13:22+05:00"
     */
    date?: string;
    /**
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /**
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /**
   * The new file content, using Base64 encoding.
   */
  content: string;
  /**
   * The commit message.
   */
  message: string;
  /**
   * **Required if you are updating a file**. The blob SHA of the file being replaced.
   */
  sha?: string;
};

export type ReposCreateOrUpdateFileContentsVariables = {
  body: ReposCreateOrUpdateFileContentsRequestBody;
  pathParams: ReposCreateOrUpdateFileContentsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
 *
 * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 */
export const fetchReposCreateOrUpdateFileContents = (
  variables: ReposCreateOrUpdateFileContentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.FileCommit,
    ReposCreateOrUpdateFileContentsError,
    ReposCreateOrUpdateFileContentsRequestBody,
    {},
    {},
    ReposCreateOrUpdateFileContentsPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
 *
 * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 */
export const useReposCreateOrUpdateFileContents = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      ReposCreateOrUpdateFileContentsError,
      ReposCreateOrUpdateFileContentsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    ReposCreateOrUpdateFileContentsError,
    ReposCreateOrUpdateFileContentsVariables
  >({
    mutationFn: (variables: ReposCreateOrUpdateFileContentsVariables) =>
      fetchReposCreateOrUpdateFileContents({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListContributorsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListContributorsQueryParams = {
  /**
   * Set to `1` or `true` to include anonymous contributors in results.
   */
  anon?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListContributorsError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposListContributorsResponse = Schemas.Contributor[];

export type ReposListContributorsVariables = {
  pathParams: ReposListContributorsPathParams;
  queryParams?: ReposListContributorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const fetchReposListContributors = (
  variables: ReposListContributorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListContributorsResponse,
    ReposListContributorsError,
    undefined,
    {},
    ReposListContributorsQueryParams,
    ReposListContributorsPathParams
  >({
    url: "/repos/{owner}/{repo}/contributors",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const reposListContributorsQuery = (
  variables: ReposListContributorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListContributorsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/contributors",
    operationId: "reposListContributors",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListContributors(variables, signal),
});

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const useSuspenseReposListContributors = <
  TData = ReposListContributorsResponse,
>(
  variables: ReposListContributorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListContributorsResponse,
      ReposListContributorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListContributorsResponse,
    ReposListContributorsError,
    TData
  >({
    ...reposListContributorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const useReposListContributors = <TData = ReposListContributorsResponse>(
  variables: ReposListContributorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListContributorsResponse,
      ReposListContributorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListContributorsResponse,
    ReposListContributorsError,
    TData
  >({
    ...reposListContributorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotListAlertsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type DependabotListAlertsForRepoQueryParams = {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   *
   * Can be: `dismissed`, `fixed`, `open`
   */
  state?: string;
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   *
   * Can be: `low`, `medium`, `high`, `critical`
   */
  severity?: string;
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   *
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
  ecosystem?: string;
  /**
   * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
   */
  package?: string;
  /**
   * A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
   */
  manifest?: string;
  /**
   * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
   */
  scope?: "development" | "runtime";
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  after?: string;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   *
   * @default 30
   * @maximum 100
   * @minimum 1
   */
  first?: number;
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   *
   * @maximum 100
   * @minimum 1
   */
  last?: number;
};

export type DependabotListAlertsForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type DependabotListAlertsForRepoResponse = Schemas.DependabotAlert[];

export type DependabotListAlertsForRepoVariables = {
  pathParams: DependabotListAlertsForRepoPathParams;
  queryParams?: DependabotListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const fetchDependabotListAlertsForRepo = (
  variables: DependabotListAlertsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListAlertsForRepoResponse,
    DependabotListAlertsForRepoError,
    undefined,
    {},
    DependabotListAlertsForRepoQueryParams,
    DependabotListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const dependabotListAlertsForRepoQuery = (
  variables: DependabotListAlertsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListAlertsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependabot/alerts",
    operationId: "dependabotListAlertsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListAlertsForRepo(variables, signal),
});

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useSuspenseDependabotListAlertsForRepo = <
  TData = DependabotListAlertsForRepoResponse,
>(
  variables: DependabotListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForRepoResponse,
      DependabotListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListAlertsForRepoResponse,
    DependabotListAlertsForRepoError,
    TData
  >({
    ...dependabotListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useDependabotListAlertsForRepo = <
  TData = DependabotListAlertsForRepoResponse,
>(
  variables: DependabotListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListAlertsForRepoResponse,
      DependabotListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListAlertsForRepoResponse,
    DependabotListAlertsForRepoError,
    TData
  >({
    ...dependabotListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotGetAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies a Dependabot alert in its repository.
   * You can find this at the end of the URL for a Dependabot alert within GitHub,
   * or in `number` fields in the response from the
   * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type DependabotGetAlertError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type DependabotGetAlertVariables = {
  pathParams: DependabotGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const fetchDependabotGetAlert = (
  variables: DependabotGetAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependabotAlert,
    DependabotGetAlertError,
    undefined,
    {},
    {},
    DependabotGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const dependabotGetAlertQuery = (
  variables: DependabotGetAlertVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DependabotAlert>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}",
    operationId: "dependabotGetAlert",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotGetAlert(variables, signal),
});

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useSuspenseDependabotGetAlert = <TData = Schemas.DependabotAlert>(
  variables: DependabotGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotAlert,
      DependabotGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DependabotAlert,
    DependabotGetAlertError,
    TData
  >({
    ...dependabotGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
 */
export const useDependabotGetAlert = <TData = Schemas.DependabotAlert>(
  variables: DependabotGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotAlert,
      DependabotGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DependabotAlert,
    DependabotGetAlertError,
    TData
  >({
    ...dependabotGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotUpdateAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies a Dependabot alert in its repository.
   * You can find this at the end of the URL for a Dependabot alert within GitHub,
   * or in `number` fields in the response from the
   * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type DependabotUpdateAlertError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type DependabotUpdateAlertRequestBody = {
  /**
   * An optional comment associated with dismissing the alert.
   *
   * @maxLength 280
   */
  dismissed_comment?: string;
  /**
   * **Required when `state` is `dismissed`.** A reason for dismissing the alert.
   */
  dismissed_reason?:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk";
  /**
   * The state of the Dependabot alert.
   * A `dismissed_reason` must be provided when setting the state to `dismissed`.
   */
  state: "dismissed" | "open";
};

export type DependabotUpdateAlertVariables = {
  body: DependabotUpdateAlertRequestBody;
  pathParams: DependabotUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
 */
export const fetchDependabotUpdateAlert = (
  variables: DependabotUpdateAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependabotAlert,
    DependabotUpdateAlertError,
    DependabotUpdateAlertRequestBody,
    {},
    {},
    DependabotUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * You must use an access token with the `security_events` scope to use this endpoint with private repositories.
 * You can also use tokens with the `public_repo` scope for public repositories only.
 * GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
 */
export const useDependabotUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DependabotAlert,
      DependabotUpdateAlertError,
      DependabotUpdateAlertVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DependabotAlert,
    DependabotUpdateAlertError,
    DependabotUpdateAlertVariables
  >({
    mutationFn: (variables: DependabotUpdateAlertVariables) =>
      fetchDependabotUpdateAlert({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DependabotListRepoSecretsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type DependabotListRepoSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type DependabotListRepoSecretsError = Fetcher.ErrorWrapper<undefined>;

export type DependabotListRepoSecretsResponse = {
  secrets: Schemas.DependabotSecret[];
  total_count: number;
};

export type DependabotListRepoSecretsVariables = {
  pathParams: DependabotListRepoSecretsPathParams;
  queryParams?: DependabotListRepoSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const fetchDependabotListRepoSecrets = (
  variables: DependabotListRepoSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependabotListRepoSecretsResponse,
    DependabotListRepoSecretsError,
    undefined,
    {},
    DependabotListRepoSecretsQueryParams,
    DependabotListRepoSecretsPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const dependabotListRepoSecretsQuery = (
  variables: DependabotListRepoSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<DependabotListRepoSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependabot/secrets",
    operationId: "dependabotListRepoSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotListRepoSecrets(variables, signal),
});

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useSuspenseDependabotListRepoSecrets = <
  TData = DependabotListRepoSecretsResponse,
>(
  variables: DependabotListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListRepoSecretsResponse,
      DependabotListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    DependabotListRepoSecretsResponse,
    DependabotListRepoSecretsError,
    TData
  >({
    ...dependabotListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useDependabotListRepoSecrets = <
  TData = DependabotListRepoSecretsResponse,
>(
  variables: DependabotListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      DependabotListRepoSecretsResponse,
      DependabotListRepoSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    DependabotListRepoSecretsResponse,
    DependabotListRepoSecretsError,
    TData
  >({
    ...dependabotListRepoSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotGetRepoPublicKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type DependabotGetRepoPublicKeyError = Fetcher.ErrorWrapper<undefined>;

export type DependabotGetRepoPublicKeyVariables = {
  pathParams: DependabotGetRepoPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const fetchDependabotGetRepoPublicKey = (
  variables: DependabotGetRepoPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependabotPublicKey,
    DependabotGetRepoPublicKeyError,
    undefined,
    {},
    {},
    DependabotGetRepoPublicKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const dependabotGetRepoPublicKeyQuery = (
  variables: DependabotGetRepoPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DependabotPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependabot/secrets/public-key",
    operationId: "dependabotGetRepoPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotGetRepoPublicKey(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useSuspenseDependabotGetRepoPublicKey = <
  TData = Schemas.DependabotPublicKey,
>(
  variables: DependabotGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotPublicKey,
      DependabotGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DependabotPublicKey,
    DependabotGetRepoPublicKeyError,
    TData
  >({
    ...dependabotGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useDependabotGetRepoPublicKey = <
  TData = Schemas.DependabotPublicKey,
>(
  variables: DependabotGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotPublicKey,
      DependabotGetRepoPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DependabotPublicKey,
    DependabotGetRepoPublicKeyError,
    TData
  >({
    ...dependabotGetRepoPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotDeleteRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotDeleteRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type DependabotDeleteRepoSecretVariables = {
  pathParams: DependabotDeleteRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const fetchDependabotDeleteRepoSecret = (
  variables: DependabotDeleteRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    DependabotDeleteRepoSecretError,
    undefined,
    {},
    {},
    DependabotDeleteRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useDependabotDeleteRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DependabotDeleteRepoSecretError,
      DependabotDeleteRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    DependabotDeleteRepoSecretError,
    DependabotDeleteRepoSecretVariables
  >({
    mutationFn: (variables: DependabotDeleteRepoSecretVariables) =>
      fetchDependabotDeleteRepoSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DependabotGetRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotGetRepoSecretError = Fetcher.ErrorWrapper<undefined>;

export type DependabotGetRepoSecretVariables = {
  pathParams: DependabotGetRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const fetchDependabotGetRepoSecret = (
  variables: DependabotGetRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependabotSecret,
    DependabotGetRepoSecretError,
    undefined,
    {},
    {},
    DependabotGetRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const dependabotGetRepoSecretQuery = (
  variables: DependabotGetRepoSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DependabotSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    operationId: "dependabotGetRepoSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependabotGetRepoSecret(variables, signal),
});

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useSuspenseDependabotGetRepoSecret = <
  TData = Schemas.DependabotSecret,
>(
  variables: DependabotGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotSecret,
      DependabotGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DependabotSecret,
    DependabotGetRepoSecretError,
    TData
  >({
    ...dependabotGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
 */
export const useDependabotGetRepoSecret = <TData = Schemas.DependabotSecret>(
  variables: DependabotGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependabotSecret,
      DependabotGetRepoSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DependabotSecret,
    DependabotGetRepoSecretError,
    TData
  >({
    ...dependabotGetRepoSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependabotCreateOrUpdateRepoSecretPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type DependabotCreateOrUpdateRepoSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type DependabotCreateOrUpdateRepoSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type DependabotCreateOrUpdateRepoSecretVariables = {
  body?: DependabotCreateOrUpdateRepoSecretRequestBody;
  pathParams: DependabotCreateOrUpdateRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchDependabotCreateOrUpdateRepoSecret = (
  variables: DependabotCreateOrUpdateRepoSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    DependabotCreateOrUpdateRepoSecretError,
    DependabotCreateOrUpdateRepoSecretRequestBody,
    {},
    {},
    DependabotCreateOrUpdateRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
 * permission to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useDependabotCreateOrUpdateRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      DependabotCreateOrUpdateRepoSecretError,
      DependabotCreateOrUpdateRepoSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    DependabotCreateOrUpdateRepoSecretError,
    DependabotCreateOrUpdateRepoSecretVariables
  >({
    mutationFn: (variables: DependabotCreateOrUpdateRepoSecretVariables) =>
      fetchDependabotCreateOrUpdateRepoSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type DependencyGraphDiffRangePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
   */
  basehead: string;
};

export type DependencyGraphDiffRangeQueryParams = {
  /**
   * The full path, relative to the repository root, of the dependency manifest file.
   */
  name?: string;
};

export type DependencyGraphDiffRangeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type DependencyGraphDiffRangeVariables = {
  pathParams: DependencyGraphDiffRangePathParams;
  queryParams?: DependencyGraphDiffRangeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const fetchDependencyGraphDiffRange = (
  variables: DependencyGraphDiffRangeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DependencyGraphDiff,
    DependencyGraphDiffRangeError,
    undefined,
    {},
    DependencyGraphDiffRangeQueryParams,
    DependencyGraphDiffRangePathParams
  >({
    url: "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const dependencyGraphDiffRangeQuery = (
  variables: DependencyGraphDiffRangeVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DependencyGraphDiff>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
    operationId: "dependencyGraphDiffRange",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchDependencyGraphDiffRange(variables, signal),
});

/**
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const useSuspenseDependencyGraphDiffRange = <
  TData = Schemas.DependencyGraphDiff,
>(
  variables: DependencyGraphDiffRangeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependencyGraphDiff,
      DependencyGraphDiffRangeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DependencyGraphDiff,
    DependencyGraphDiffRangeError,
    TData
  >({
    ...dependencyGraphDiffRangeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
 */
export const useDependencyGraphDiffRange = <
  TData = Schemas.DependencyGraphDiff,
>(
  variables: DependencyGraphDiffRangeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DependencyGraphDiff,
      DependencyGraphDiffRangeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DependencyGraphDiff,
    DependencyGraphDiffRangeError,
    TData
  >({
    ...dependencyGraphDiffRangeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type DependencyGraphCreateRepositorySnapshotPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type DependencyGraphCreateRepositorySnapshotError =
  Fetcher.ErrorWrapper<undefined>;

export type DependencyGraphCreateRepositorySnapshotResponse = {
  /**
   * The time at which the snapshot was created.
   */
  created_at: string;
  /**
   * ID of the created snapshot.
   */
  id: number;
  /**
   * A message providing further details about the result, such as why the dependencies were not updated.
   */
  message: string;
  /**
   * Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
   */
  result: string;
};

export type DependencyGraphCreateRepositorySnapshotVariables = {
  body: Schemas.Snapshot;
  pathParams: DependencyGraphCreateRepositorySnapshotPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
 */
export const fetchDependencyGraphCreateRepositorySnapshot = (
  variables: DependencyGraphCreateRepositorySnapshotVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    DependencyGraphCreateRepositorySnapshotResponse,
    DependencyGraphCreateRepositorySnapshotError,
    Schemas.Snapshot,
    {},
    {},
    DependencyGraphCreateRepositorySnapshotPathParams
  >({
    url: "/repos/{owner}/{repo}/dependency-graph/snapshots",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
 */
export const useDependencyGraphCreateRepositorySnapshot = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DependencyGraphCreateRepositorySnapshotResponse,
      DependencyGraphCreateRepositorySnapshotError,
      DependencyGraphCreateRepositorySnapshotVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    DependencyGraphCreateRepositorySnapshotResponse,
    DependencyGraphCreateRepositorySnapshotError,
    DependencyGraphCreateRepositorySnapshotVariables
  >({
    mutationFn: (variables: DependencyGraphCreateRepositorySnapshotVariables) =>
      fetchDependencyGraphCreateRepositorySnapshot({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListDeploymentsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListDeploymentsQueryParams = {
  /**
   * The SHA recorded at creation time.
   *
   * @default none
   */
  sha?: string;
  /**
   * The name of the ref. This can be a branch, tag, or SHA.
   *
   * @default none
   */
  ref?: string;
  /**
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   *
   * @default none
   */
  task?: string;
  /**
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   *
   * @default none
   */
  environment?: string | null;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListDeploymentsResponse = Schemas.Deployment[];

export type ReposListDeploymentsVariables = {
  pathParams: ReposListDeploymentsPathParams;
  queryParams?: ReposListDeploymentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const fetchReposListDeployments = (
  variables: ReposListDeploymentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListDeploymentsResponse,
    ReposListDeploymentsError,
    undefined,
    {},
    ReposListDeploymentsQueryParams,
    ReposListDeploymentsPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const reposListDeploymentsQuery = (
  variables: ReposListDeploymentsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListDeploymentsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/deployments",
    operationId: "reposListDeployments",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListDeployments(variables, signal),
});

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const useSuspenseReposListDeployments = <
  TData = ReposListDeploymentsResponse,
>(
  variables: ReposListDeploymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentsResponse,
      ReposListDeploymentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListDeploymentsResponse,
    ReposListDeploymentsError,
    TData
  >({
    ...reposListDeploymentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const useReposListDeployments = <TData = ReposListDeploymentsResponse>(
  variables: ReposListDeploymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentsResponse,
      ReposListDeploymentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentsResponse,
    ReposListDeploymentsError,
    TData
  >({
    ...reposListDeploymentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateDeploymentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateDeploymentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDeploymentRequestBody = {
  /**
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   *
   * @default true
   */
  auto_merge?: boolean;
  /**
   * Short description of the deployment.
   *
   * @default
   */
  description?: string | null;
  /**
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   *
   * @default production
   */
  environment?: string;
  payload?:
    | {
        [key: string]: any;
      }
    | string;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
   */
  production_environment?: boolean;
  /**
   * The ref to deploy. This can be a branch, tag, or SHA.
   */
  ref: string;
  /**
   * The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
   */
  required_contexts?: string[];
  /**
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   *
   * @default deploy
   */
  task?: string;
  /**
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
   *
   * @default false
   */
  transient_environment?: boolean;
};

export type ReposCreateDeploymentVariables = {
  body: ReposCreateDeploymentRequestBody;
  pathParams: ReposCreateDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const fetchReposCreateDeployment = (
  variables: ReposCreateDeploymentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    | Schemas.Deployment
    | {
        message?: string;
      },
    ReposCreateDeploymentError,
    ReposCreateDeploymentRequestBody,
    {},
    {},
    ReposCreateDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const useReposCreateDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | Schemas.Deployment
      | {
          message?: string;
        },
      ReposCreateDeploymentError,
      ReposCreateDeploymentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    | Schemas.Deployment
    | {
        message?: string;
      },
    ReposCreateDeploymentError,
    ReposCreateDeploymentVariables
  >({
    mutationFn: (variables: ReposCreateDeploymentVariables) =>
      fetchReposCreateDeployment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteDeploymentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposDeleteDeploymentError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposDeleteDeploymentVariables = {
  pathParams: ReposDeleteDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."
 */
export const fetchReposDeleteDeployment = (
  variables: ReposDeleteDeploymentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteDeploymentError,
    undefined,
    {},
    {},
    ReposDeleteDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."
 */
export const useReposDeleteDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteDeploymentError,
      ReposDeleteDeploymentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteDeploymentError,
    ReposDeleteDeploymentVariables
  >({
    mutationFn: (variables: ReposDeleteDeploymentVariables) =>
      fetchReposDeleteDeployment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetDeploymentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposGetDeploymentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetDeploymentVariables = {
  pathParams: ReposGetDeploymentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployment = (
  variables: ReposGetDeploymentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Deployment,
    ReposGetDeploymentError,
    undefined,
    {},
    {},
    ReposGetDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetDeploymentQuery = (
  variables: ReposGetDeploymentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Deployment>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    operationId: "reposGetDeployment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetDeployment(variables, signal),
});

export const useSuspenseReposGetDeployment = <TData = Schemas.Deployment>(
  variables: ReposGetDeploymentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Deployment,
      ReposGetDeploymentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Deployment,
    ReposGetDeploymentError,
    TData
  >({
    ...reposGetDeploymentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetDeployment = <TData = Schemas.Deployment>(
  variables: ReposGetDeploymentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Deployment,
      ReposGetDeploymentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Deployment,
    ReposGetDeploymentError,
    TData
  >({
    ...reposGetDeploymentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListDeploymentStatusesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposListDeploymentStatusesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentStatusesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListDeploymentStatusesResponse = Schemas.DeploymentStatus[];

export type ReposListDeploymentStatusesVariables = {
  pathParams: ReposListDeploymentStatusesPathParams;
  queryParams?: ReposListDeploymentStatusesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const fetchReposListDeploymentStatuses = (
  variables: ReposListDeploymentStatusesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListDeploymentStatusesResponse,
    ReposListDeploymentStatusesError,
    undefined,
    {},
    ReposListDeploymentStatusesQueryParams,
    ReposListDeploymentStatusesPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const reposListDeploymentStatusesQuery = (
  variables: ReposListDeploymentStatusesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListDeploymentStatusesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    operationId: "reposListDeploymentStatuses",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListDeploymentStatuses(variables, signal),
});

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const useSuspenseReposListDeploymentStatuses = <
  TData = ReposListDeploymentStatusesResponse,
>(
  variables: ReposListDeploymentStatusesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentStatusesResponse,
      ReposListDeploymentStatusesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListDeploymentStatusesResponse,
    ReposListDeploymentStatusesError,
    TData
  >({
    ...reposListDeploymentStatusesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const useReposListDeploymentStatuses = <
  TData = ReposListDeploymentStatusesResponse,
>(
  variables: ReposListDeploymentStatusesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentStatusesResponse,
      ReposListDeploymentStatusesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentStatusesResponse,
    ReposListDeploymentStatusesError,
    TData
  >({
    ...reposListDeploymentStatusesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateDeploymentStatusPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposCreateDeploymentStatusError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDeploymentStatusRequestBody = {
  /**
   * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
   */
  auto_inactive?: boolean;
  /**
   * A short description of the status. The maximum description length is 140 characters.
   *
   * @default
   */
  description?: string;
  /**
   * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
   */
  environment?: "production" | "staging" | "qa";
  /**
   * Sets the URL for accessing your environment. Default: `""`
   *
   * @default
   */
  environment_url?: string;
  /**
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
   *
   * @default
   */
  log_url?: string;
  /**
   * The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "in_progress"
    | "queued"
    | "pending"
    | "success";
  /**
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
   *
   * @default
   */
  target_url?: string;
};

export type ReposCreateDeploymentStatusVariables = {
  body: ReposCreateDeploymentStatusRequestBody;
  pathParams: ReposCreateDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const fetchReposCreateDeploymentStatus = (
  variables: ReposCreateDeploymentStatusVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    ReposCreateDeploymentStatusError,
    ReposCreateDeploymentStatusRequestBody,
    {},
    {},
    ReposCreateDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const useReposCreateDeploymentStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeploymentStatus,
      ReposCreateDeploymentStatusError,
      ReposCreateDeploymentStatusVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeploymentStatus,
    ReposCreateDeploymentStatusError,
    ReposCreateDeploymentStatusVariables
  >({
    mutationFn: (variables: ReposCreateDeploymentStatusVariables) =>
      fetchReposCreateDeploymentStatus({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetDeploymentStatusPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * deployment_id parameter
   */
  deploymentId: number;
  statusId: number;
};

export type ReposGetDeploymentStatusError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetDeploymentStatusVariables = {
  pathParams: ReposGetDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const fetchReposGetDeploymentStatus = (
  variables: ReposGetDeploymentStatusVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    ReposGetDeploymentStatusError,
    undefined,
    {},
    {},
    ReposGetDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const reposGetDeploymentStatusQuery = (
  variables: ReposGetDeploymentStatusVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DeploymentStatus>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}",
    operationId: "reposGetDeploymentStatus",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetDeploymentStatus(variables, signal),
});

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const useSuspenseReposGetDeploymentStatus = <
  TData = Schemas.DeploymentStatus,
>(
  variables: ReposGetDeploymentStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentStatus,
      ReposGetDeploymentStatusError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DeploymentStatus,
    ReposGetDeploymentStatusError,
    TData
  >({
    ...reposGetDeploymentStatusQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const useReposGetDeploymentStatus = <TData = Schemas.DeploymentStatus>(
  variables: ReposGetDeploymentStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentStatus,
      ReposGetDeploymentStatusError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DeploymentStatus,
    ReposGetDeploymentStatusError,
    TData
  >({
    ...reposGetDeploymentStatusQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateDispatchEventPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateDispatchEventError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDispatchEventRequestBody = {
  /**
   * JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.
   *
   * @maxProperties 10
   */
  client_payload?: {
    [key: string]: any;
  };
  /**
   * A custom webhook event name. Must be 100 characters or fewer.
   *
   * @maxLength 100
   * @minLength 1
   */
  event_type: string;
};

export type ReposCreateDispatchEventVariables = {
  body: ReposCreateDispatchEventRequestBody;
  pathParams: ReposCreateDispatchEventPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const fetchReposCreateDispatchEvent = (
  variables: ReposCreateDispatchEventVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposCreateDispatchEventError,
    ReposCreateDispatchEventRequestBody,
    {},
    {},
    ReposCreateDispatchEventPathParams
  >({
    url: "/repos/{owner}/{repo}/dispatches",
    method: "post",
    ...variables,
    signal,
  });

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const useReposCreateDispatchEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposCreateDispatchEventError,
      ReposCreateDispatchEventVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposCreateDispatchEventError,
    ReposCreateDispatchEventVariables
  >({
    mutationFn: (variables: ReposCreateDispatchEventVariables) =>
      fetchReposCreateDispatchEvent({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetAllEnvironmentsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetAllEnvironmentsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposGetAllEnvironmentsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetAllEnvironmentsResponse = {
  environments?: Schemas.Environment[];
  /**
   * The number of environments in this repository
   *
   * @example 5
   */
  total_count?: number;
};

export type ReposGetAllEnvironmentsVariables = {
  pathParams: ReposGetAllEnvironmentsPathParams;
  queryParams?: ReposGetAllEnvironmentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetAllEnvironments = (
  variables: ReposGetAllEnvironmentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetAllEnvironmentsResponse,
    ReposGetAllEnvironmentsError,
    undefined,
    {},
    ReposGetAllEnvironmentsQueryParams,
    ReposGetAllEnvironmentsPathParams
  >({
    url: "/repos/{owner}/{repo}/environments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const reposGetAllEnvironmentsQuery = (
  variables: ReposGetAllEnvironmentsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetAllEnvironmentsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/environments",
    operationId: "reposGetAllEnvironments",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAllEnvironments(variables, signal),
});

/**
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseReposGetAllEnvironments = <
  TData = ReposGetAllEnvironmentsResponse,
>(
  variables: ReposGetAllEnvironmentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllEnvironmentsResponse,
      ReposGetAllEnvironmentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetAllEnvironmentsResponse,
    ReposGetAllEnvironmentsError,
    TData
  >({
    ...reposGetAllEnvironmentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetAllEnvironments = <
  TData = ReposGetAllEnvironmentsResponse,
>(
  variables: ReposGetAllEnvironmentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllEnvironmentsResponse,
      ReposGetAllEnvironmentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllEnvironmentsResponse,
    ReposGetAllEnvironmentsError,
    TData
  >({
    ...reposGetAllEnvironmentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeleteAnEnvironmentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ReposDeleteAnEnvironmentError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteAnEnvironmentVariables = {
  pathParams: ReposDeleteAnEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const fetchReposDeleteAnEnvironment = (
  variables: ReposDeleteAnEnvironmentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteAnEnvironmentError,
    undefined,
    {},
    {},
    ReposDeleteAnEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const useReposDeleteAnEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteAnEnvironmentError,
      ReposDeleteAnEnvironmentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteAnEnvironmentError,
    ReposDeleteAnEnvironmentVariables
  >({
    mutationFn: (variables: ReposDeleteAnEnvironmentVariables) =>
      fetchReposDeleteAnEnvironment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetEnvironmentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ReposGetEnvironmentError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetEnvironmentVariables = {
  pathParams: ReposGetEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read access to the repository can use this endpoint. If the
 * repository is private, you must use an access token with the `repo` scope. GitHub
 * Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetEnvironment = (
  variables: ReposGetEnvironmentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Environment,
    ReposGetEnvironmentError,
    undefined,
    {},
    {},
    ReposGetEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read access to the repository can use this endpoint. If the
 * repository is private, you must use an access token with the `repo` scope. GitHub
 * Apps must have the `actions:read` permission to use this endpoint.
 */
export const reposGetEnvironmentQuery = (
  variables: ReposGetEnvironmentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Environment>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/environments/{environmentName}",
    operationId: "reposGetEnvironment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetEnvironment(variables, signal),
});

/**
 * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read access to the repository can use this endpoint. If the
 * repository is private, you must use an access token with the `repo` scope. GitHub
 * Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseReposGetEnvironment = <TData = Schemas.Environment>(
  variables: ReposGetEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Environment,
      ReposGetEnvironmentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Environment,
    ReposGetEnvironmentError,
    TData
  >({
    ...reposGetEnvironmentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read access to the repository can use this endpoint. If the
 * repository is private, you must use an access token with the `repo` scope. GitHub
 * Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetEnvironment = <TData = Schemas.Environment>(
  variables: ReposGetEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Environment,
      ReposGetEnvironmentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Environment,
    ReposGetEnvironmentError,
    TData
  >({
    ...reposGetEnvironmentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateOrUpdateEnvironmentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ReposCreateOrUpdateEnvironmentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.BasicError;
}>;

export type ReposCreateOrUpdateEnvironmentVariables = {
  body?: {
    deployment_branch_policy?: Schemas.DeploymentBranchPolicySettings;
    /**
     * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
     */
    reviewers?:
      | {
          /**
           * The id of the user or team who can review the deployment
           *
           * @example 4532992
           */
          id?: number;
          type?: Schemas.DeploymentReviewerType;
        }[]
      | null;
    wait_timer?: Schemas.WaitTimer;
  } | null;
  pathParams: ReposCreateOrUpdateEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const fetchReposCreateOrUpdateEnvironment = (
  variables: ReposCreateOrUpdateEnvironmentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Environment,
    ReposCreateOrUpdateEnvironmentError,
    {
      deployment_branch_policy?: Schemas.DeploymentBranchPolicySettings;
      /**
       * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
       */
      reviewers?:
        | {
            /**
             * The id of the user or team who can review the deployment
             *
             * @example 4532992
             */
            id?: number;
            type?: Schemas.DeploymentReviewerType;
          }[]
        | null;
      wait_timer?: Schemas.WaitTimer;
    } | null,
    {},
    {},
    ReposCreateOrUpdateEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const useReposCreateOrUpdateEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Environment,
      ReposCreateOrUpdateEnvironmentError,
      ReposCreateOrUpdateEnvironmentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Environment,
    ReposCreateOrUpdateEnvironmentError,
    ReposCreateOrUpdateEnvironmentVariables
  >({
    mutationFn: (variables: ReposCreateOrUpdateEnvironmentVariables) =>
      fetchReposCreateOrUpdateEnvironment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListDeploymentBranchPoliciesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ReposListDeploymentBranchPoliciesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentBranchPoliciesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposListDeploymentBranchPoliciesResponse = {
  branch_policies: Schemas.DeploymentBranchPolicy[];
  /**
   * The number of deployment branch policies for the environment.
   *
   * @example 2
   */
  total_count: number;
};

export type ReposListDeploymentBranchPoliciesVariables = {
  pathParams: ReposListDeploymentBranchPoliciesPathParams;
  queryParams?: ReposListDeploymentBranchPoliciesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposListDeploymentBranchPolicies = (
  variables: ReposListDeploymentBranchPoliciesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListDeploymentBranchPoliciesResponse,
    ReposListDeploymentBranchPoliciesError,
    undefined,
    {},
    ReposListDeploymentBranchPoliciesQueryParams,
    ReposListDeploymentBranchPoliciesPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const reposListDeploymentBranchPoliciesQuery = (
  variables: ReposListDeploymentBranchPoliciesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListDeploymentBranchPoliciesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies",
    operationId: "reposListDeploymentBranchPolicies",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListDeploymentBranchPolicies(variables, signal),
});

/**
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseReposListDeploymentBranchPolicies = <
  TData = ReposListDeploymentBranchPoliciesResponse,
>(
  variables: ReposListDeploymentBranchPoliciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentBranchPoliciesResponse,
      ReposListDeploymentBranchPoliciesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListDeploymentBranchPoliciesResponse,
    ReposListDeploymentBranchPoliciesError,
    TData
  >({
    ...reposListDeploymentBranchPoliciesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposListDeploymentBranchPolicies = <
  TData = ReposListDeploymentBranchPoliciesResponse,
>(
  variables: ReposListDeploymentBranchPoliciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentBranchPoliciesResponse,
      ReposListDeploymentBranchPoliciesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentBranchPoliciesResponse,
    ReposListDeploymentBranchPoliciesError,
    TData
  >({
    ...reposListDeploymentBranchPoliciesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateDeploymentBranchPolicyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ReposCreateDeploymentBranchPolicyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposCreateDeploymentBranchPolicyVariables = {
  body: Schemas.DeploymentBranchPolicyNamePattern;
  pathParams: ReposCreateDeploymentBranchPolicyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const fetchReposCreateDeploymentBranchPolicy = (
  variables: ReposCreateDeploymentBranchPolicyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeploymentBranchPolicy,
    ReposCreateDeploymentBranchPolicyError,
    Schemas.DeploymentBranchPolicyNamePattern,
    {},
    {},
    ReposCreateDeploymentBranchPolicyPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const useReposCreateDeploymentBranchPolicy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeploymentBranchPolicy,
      ReposCreateDeploymentBranchPolicyError,
      ReposCreateDeploymentBranchPolicyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeploymentBranchPolicy,
    ReposCreateDeploymentBranchPolicyError,
    ReposCreateDeploymentBranchPolicyVariables
  >({
    mutationFn: (variables: ReposCreateDeploymentBranchPolicyVariables) =>
      fetchReposCreateDeploymentBranchPolicy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposDeleteDeploymentBranchPolicyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The unique identifier of the branch policy.
   */
  branchPolicyId: number;
};

export type ReposDeleteDeploymentBranchPolicyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteDeploymentBranchPolicyVariables = {
  pathParams: ReposDeleteDeploymentBranchPolicyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const fetchReposDeleteDeploymentBranchPolicy = (
  variables: ReposDeleteDeploymentBranchPolicyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteDeploymentBranchPolicyError,
    undefined,
    {},
    {},
    ReposDeleteDeploymentBranchPolicyPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const useReposDeleteDeploymentBranchPolicy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteDeploymentBranchPolicyError,
      ReposDeleteDeploymentBranchPolicyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteDeploymentBranchPolicyError,
    ReposDeleteDeploymentBranchPolicyVariables
  >({
    mutationFn: (variables: ReposDeleteDeploymentBranchPolicyVariables) =>
      fetchReposDeleteDeploymentBranchPolicy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposGetDeploymentBranchPolicyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The unique identifier of the branch policy.
   */
  branchPolicyId: number;
};

export type ReposGetDeploymentBranchPolicyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposGetDeploymentBranchPolicyVariables = {
  pathParams: ReposGetDeploymentBranchPolicyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a deployment branch policy for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetDeploymentBranchPolicy = (
  variables: ReposGetDeploymentBranchPolicyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeploymentBranchPolicy,
    ReposGetDeploymentBranchPolicyError,
    undefined,
    {},
    {},
    ReposGetDeploymentBranchPolicyPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a deployment branch policy for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const reposGetDeploymentBranchPolicyQuery = (
  variables: ReposGetDeploymentBranchPolicyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.DeploymentBranchPolicy>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    operationId: "reposGetDeploymentBranchPolicy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetDeploymentBranchPolicy(variables, signal),
});

/**
 * Gets a deployment branch policy for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useSuspenseReposGetDeploymentBranchPolicy = <
  TData = Schemas.DeploymentBranchPolicy,
>(
  variables: ReposGetDeploymentBranchPolicyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentBranchPolicy,
      ReposGetDeploymentBranchPolicyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DeploymentBranchPolicy,
    ReposGetDeploymentBranchPolicyError,
    TData
  >({
    ...reposGetDeploymentBranchPolicyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a deployment branch policy for an environment.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetDeploymentBranchPolicy = <
  TData = Schemas.DeploymentBranchPolicy,
>(
  variables: ReposGetDeploymentBranchPolicyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentBranchPolicy,
      ReposGetDeploymentBranchPolicyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DeploymentBranchPolicy,
    ReposGetDeploymentBranchPolicyError,
    TData
  >({
    ...reposGetDeploymentBranchPolicyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateDeploymentBranchPolicyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The unique identifier of the branch policy.
   */
  branchPolicyId: number;
};

export type ReposUpdateDeploymentBranchPolicyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateDeploymentBranchPolicyVariables = {
  body: Schemas.DeploymentBranchPolicyNamePattern;
  pathParams: ReposUpdateDeploymentBranchPolicyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const fetchReposUpdateDeploymentBranchPolicy = (
  variables: ReposUpdateDeploymentBranchPolicyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeploymentBranchPolicy,
    ReposUpdateDeploymentBranchPolicyError,
    Schemas.DeploymentBranchPolicyNamePattern,
    {},
    {},
    ReposUpdateDeploymentBranchPolicyPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Updates a deployment branch policy for an environment.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
 */
export const useReposUpdateDeploymentBranchPolicy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeploymentBranchPolicy,
      ReposUpdateDeploymentBranchPolicyError,
      ReposUpdateDeploymentBranchPolicyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeploymentBranchPolicy,
    ReposUpdateDeploymentBranchPolicyError,
    ReposUpdateDeploymentBranchPolicyVariables
  >({
    mutationFn: (variables: ReposUpdateDeploymentBranchPolicyVariables) =>
      fetchReposUpdateDeploymentBranchPolicy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActivityListRepoEventsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityListRepoEventsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoEventsError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListRepoEventsResponse = Schemas.Event[];

export type ActivityListRepoEventsVariables = {
  pathParams: ActivityListRepoEventsPathParams;
  queryParams?: ActivityListRepoEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListRepoEvents = (
  variables: ActivityListRepoEventsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListRepoEventsResponse,
    ActivityListRepoEventsError,
    undefined,
    {},
    ActivityListRepoEventsQueryParams,
    ActivityListRepoEventsPathParams
  >({
    url: "/repos/{owner}/{repo}/events",
    method: "get",
    ...variables,
    signal,
  });

export const activityListRepoEventsQuery = (
  variables: ActivityListRepoEventsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListRepoEventsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/events",
    operationId: "activityListRepoEvents",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListRepoEvents(variables, signal),
});

export const useSuspenseActivityListRepoEvents = <
  TData = ActivityListRepoEventsResponse,
>(
  variables: ActivityListRepoEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoEventsResponse,
      ActivityListRepoEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListRepoEventsResponse,
    ActivityListRepoEventsError,
    TData
  >({
    ...activityListRepoEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityListRepoEvents = <
  TData = ActivityListRepoEventsResponse,
>(
  variables: ActivityListRepoEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoEventsResponse,
      ActivityListRepoEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoEventsResponse,
    ActivityListRepoEventsError,
    TData
  >({
    ...activityListRepoEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListForksPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListForksQueryParams = {
  /**
   * The sort order. `stargazers` will sort by star count.
   *
   * @default newest
   */
  sort?: "newest" | "oldest" | "stargazers" | "watchers";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForksError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Responses.BadRequest;
}>;

export type ReposListForksResponse = Schemas.MinimalRepository[];

export type ReposListForksVariables = {
  pathParams: ReposListForksPathParams;
  queryParams?: ReposListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListForks = (
  variables: ReposListForksVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListForksResponse,
    ReposListForksError,
    undefined,
    {},
    ReposListForksQueryParams,
    ReposListForksPathParams
  >({
    url: "/repos/{owner}/{repo}/forks",
    method: "get",
    ...variables,
    signal,
  });

export const reposListForksQuery = (
  variables: ReposListForksVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListForksResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/forks",
    operationId: "reposListForks",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListForks(variables, signal),
});

export const useSuspenseReposListForks = <TData = ReposListForksResponse>(
  variables: ReposListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForksResponse,
      ReposListForksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListForksResponse,
    ReposListForksError,
    TData
  >({
    ...reposListForksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListForks = <TData = ReposListForksResponse>(
  variables: ReposListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForksResponse,
      ReposListForksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForksResponse,
    ReposListForksError,
    TData
  >({
    ...reposListForksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateForkPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateForkError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateForkVariables = {
  body?: {
    /**
     * When forking from an existing repository, fork with only the default branch.
     */
    default_branch_only?: boolean;
    /**
     * When forking from an existing repository, a new name for the fork.
     */
    name?: string;
    /**
     * Optional parameter to specify the organization name if forking into an organization.
     */
    organization?: string;
  } | null;
  pathParams: ReposCreateForkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 */
export const fetchReposCreateFork = (
  variables: ReposCreateForkVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.FullRepository,
    ReposCreateForkError,
    {
      /**
       * When forking from an existing repository, fork with only the default branch.
       */
      default_branch_only?: boolean;
      /**
       * When forking from an existing repository, a new name for the fork.
       */
      name?: string;
      /**
       * Optional parameter to specify the organization name if forking into an organization.
       */
      organization?: string;
    } | null,
    {},
    {},
    ReposCreateForkPathParams
  >({
    url: "/repos/{owner}/{repo}/forks",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 */
export const useReposCreateFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FullRepository,
      ReposCreateForkError,
      ReposCreateForkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FullRepository,
    ReposCreateForkError,
    ReposCreateForkVariables
  >({
    mutationFn: (variables: ReposCreateForkVariables) =>
      fetchReposCreateFork({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitCreateBlobPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type GitCreateBlobError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateBlobRequestBody = {
  /**
   * The new blob's content.
   */
  content: string;
  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   *
   * @default utf-8
   */
  encoding?: string;
};

export type GitCreateBlobVariables = {
  body: GitCreateBlobRequestBody;
  pathParams: GitCreateBlobPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitCreateBlob = (
  variables: GitCreateBlobVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ShortBlob,
    GitCreateBlobError,
    GitCreateBlobRequestBody,
    {},
    {},
    GitCreateBlobPathParams
  >({
    url: "/repos/{owner}/{repo}/git/blobs",
    method: "post",
    ...variables,
    signal,
  });

export const useGitCreateBlob = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ShortBlob,
      GitCreateBlobError,
      GitCreateBlobVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ShortBlob,
    GitCreateBlobError,
    GitCreateBlobVariables
  >({
    mutationFn: (variables: GitCreateBlobVariables) =>
      fetchGitCreateBlob({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitGetBlobPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  fileSha: string;
};

export type GitGetBlobError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitGetBlobVariables = {
  pathParams: GitGetBlobPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const fetchGitGetBlob = (
  variables: GitGetBlobVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Blob,
    GitGetBlobError,
    undefined,
    {},
    {},
    GitGetBlobPathParams
  >({
    url: "/repos/{owner}/{repo}/git/blobs/{fileSha}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const gitGetBlobQuery = (
  variables: GitGetBlobVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Blob>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/blobs/{fileSha}",
    operationId: "gitGetBlob",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitGetBlob(variables, signal),
});

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const useSuspenseGitGetBlob = <TData = Schemas.Blob>(
  variables: GitGetBlobVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Blob, GitGetBlobError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Blob, GitGetBlobError, TData>({
    ...gitGetBlobQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const useGitGetBlob = <TData = Schemas.Blob>(
  variables: GitGetBlobVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Blob, GitGetBlobError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Blob, GitGetBlobError, TData>({
    ...gitGetBlobQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitCreateCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type GitCreateCommitError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateCommitRequestBody = {
  /**
   * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
   */
  author?: {
    /**
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    date?: string;
    /**
     * The email of the author (or committer) of the commit
     */
    email: string;
    /**
     * The name of the author (or committer) of the commit
     */
    name: string;
  };
  /**
   * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
   */
  committer?: {
    /**
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    date?: string;
    /**
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /**
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /**
   * The commit message
   */
  message: string;
  /**
   * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
   */
  parents?: string[];
  /**
   * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
   */
  signature?: string;
  /**
   * The SHA of the tree object this commit points to
   */
  tree: string;
};

export type GitCreateCommitVariables = {
  body: GitCreateCommitRequestBody;
  pathParams: GitCreateCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateCommit = (
  variables: GitCreateCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitCommit,
    GitCreateCommitError,
    GitCreateCommitRequestBody,
    {},
    {},
    GitCreateCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/git/commits",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateCommit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitCommit,
      GitCreateCommitError,
      GitCreateCommitVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitCommit,
    GitCreateCommitError,
    GitCreateCommitVariables
  >({
    mutationFn: (variables: GitCreateCommitVariables) =>
      fetchGitCreateCommit({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitGetCommitPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The SHA of the commit.
   */
  commitSha: string;
};

export type GitGetCommitError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetCommitVariables = {
  pathParams: GitGetCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetCommit = (
  variables: GitGetCommitVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitCommit,
    GitGetCommitError,
    undefined,
    {},
    {},
    GitGetCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/git/commits/{commitSha}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const gitGetCommitQuery = (
  variables: GitGetCommitVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.GitCommit>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/commits/{commitSha}",
    operationId: "gitGetCommit",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitGetCommit(variables, signal),
});

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useSuspenseGitGetCommit = <TData = Schemas.GitCommit>(
  variables: GitGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitCommit, GitGetCommitError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GitCommit,
    GitGetCommitError,
    TData
  >({
    ...gitGetCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetCommit = <TData = Schemas.GitCommit>(
  variables: GitGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitCommit, GitGetCommitError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitCommit, GitGetCommitError, TData>({
    ...gitGetCommitQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitListMatchingRefsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type GitListMatchingRefsError = Fetcher.ErrorWrapper<undefined>;

export type GitListMatchingRefsResponse = Schemas.GitRef[];

export type GitListMatchingRefsVariables = {
  pathParams: GitListMatchingRefsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const fetchGitListMatchingRefs = (
  variables: GitListMatchingRefsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GitListMatchingRefsResponse,
    GitListMatchingRefsError,
    undefined,
    {},
    {},
    GitListMatchingRefsPathParams
  >({
    url: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const gitListMatchingRefsQuery = (
  variables: GitListMatchingRefsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GitListMatchingRefsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
    operationId: "gitListMatchingRefs",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitListMatchingRefs(variables, signal),
});

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const useSuspenseGitListMatchingRefs = <
  TData = GitListMatchingRefsResponse,
>(
  variables: GitListMatchingRefsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitListMatchingRefsResponse,
      GitListMatchingRefsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GitListMatchingRefsResponse,
    GitListMatchingRefsError,
    TData
  >({
    ...gitListMatchingRefsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const useGitListMatchingRefs = <TData = GitListMatchingRefsResponse>(
  variables: GitListMatchingRefsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitListMatchingRefsResponse,
      GitListMatchingRefsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GitListMatchingRefsResponse,
    GitListMatchingRefsError,
    TData
  >({
    ...gitListMatchingRefsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitGetRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type GitGetRefError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetRefVariables = {
  pathParams: GitGetRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const fetchGitGetRef = (
  variables: GitGetRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitRef,
    GitGetRefError,
    undefined,
    {},
    {},
    GitGetRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/ref/{ref}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const gitGetRefQuery = (
  variables: GitGetRefVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.GitRef>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/ref/{ref}",
    operationId: "gitGetRef",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitGetRef(variables, signal),
});

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const useSuspenseGitGetRef = <TData = Schemas.GitRef>(
  variables: GitGetRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitRef, GitGetRefError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.GitRef, GitGetRefError, TData>({
    ...gitGetRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const useGitGetRef = <TData = Schemas.GitRef>(
  variables: GitGetRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitRef, GitGetRefError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitRef, GitGetRefError, TData>({
    ...gitGetRefQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitCreateRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type GitCreateRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitCreateRefRequestBody = {
  /**
   * @example "refs/heads/newbranch"
   */
  key?: string;
  /**
   * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
   */
  ref: string;
  /**
   * The SHA1 value for this reference.
   */
  sha: string;
};

export type GitCreateRefVariables = {
  body: GitCreateRefRequestBody;
  pathParams: GitCreateRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const fetchGitCreateRef = (
  variables: GitCreateRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitRef,
    GitCreateRefError,
    GitCreateRefRequestBody,
    {},
    {},
    GitCreateRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const useGitCreateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      GitCreateRefError,
      GitCreateRefVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    GitCreateRefError,
    GitCreateRefVariables
  >({
    mutationFn: (variables: GitCreateRefVariables) =>
      fetchGitCreateRef({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitDeleteRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

export type GitDeleteRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitDeleteRefVariables = {
  pathParams: GitDeleteRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitDeleteRef = (
  variables: GitDeleteRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    GitDeleteRefError,
    undefined,
    {},
    {},
    GitDeleteRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "delete",
    ...variables,
    signal,
  });

export const useGitDeleteRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GitDeleteRefError,
      GitDeleteRefVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    GitDeleteRefError,
    GitDeleteRefVariables
  >({
    mutationFn: (variables: GitDeleteRefVariables) =>
      fetchGitDeleteRef({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitUpdateRefPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected.
   */
  ref: string;
};

export type GitUpdateRefError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitUpdateRefRequestBody = {
  /**
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   *
   * @default false
   */
  force?: boolean;
  /**
   * The SHA1 value to set this reference to
   */
  sha: string;
};

export type GitUpdateRefVariables = {
  body: GitUpdateRefRequestBody;
  pathParams: GitUpdateRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitUpdateRef = (
  variables: GitUpdateRefVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitRef,
    GitUpdateRefError,
    GitUpdateRefRequestBody,
    {},
    {},
    GitUpdateRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "patch",
    ...variables,
    signal,
  });

export const useGitUpdateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      GitUpdateRefError,
      GitUpdateRefVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    GitUpdateRefError,
    GitUpdateRefVariables
  >({
    mutationFn: (variables: GitUpdateRefVariables) =>
      fetchGitUpdateRef({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitCreateTagPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type GitCreateTagError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GitCreateTagRequestBody = {
  /**
   * The tag message.
   */
  message: string;
  /**
   * The SHA of the git object this is tagging.
   */
  object: string;
  /**
   * The tag's name. This is typically a version (e.g., "v0.0.1").
   */
  tag: string;
  /**
   * An object with information about the individual creating the tag.
   */
  tagger?: {
    /**
     * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     *
     * @format date-time
     */
    date?: string;
    /**
     * The email of the author of the tag
     */
    email: string;
    /**
     * The name of the author of the tag
     */
    name: string;
  };
  /**
   * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
   */
  type: "commit" | "tree" | "blob";
};

export type GitCreateTagVariables = {
  body: GitCreateTagRequestBody;
  pathParams: GitCreateTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateTag = (
  variables: GitCreateTagVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitTag,
    GitCreateTagError,
    GitCreateTagRequestBody,
    {},
    {},
    GitCreateTagPathParams
  >({
    url: "/repos/{owner}/{repo}/git/tags",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTag,
      GitCreateTagError,
      GitCreateTagVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTag,
    GitCreateTagError,
    GitCreateTagVariables
  >({
    mutationFn: (variables: GitCreateTagVariables) =>
      fetchGitCreateTag({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitGetTagPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  tagSha: string;
};

export type GitGetTagError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type GitGetTagVariables = {
  pathParams: GitGetTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetTag = (
  variables: GitGetTagVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitTag,
    GitGetTagError,
    undefined,
    {},
    {},
    GitGetTagPathParams
  >({
    url: "/repos/{owner}/{repo}/git/tags/{tagSha}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const gitGetTagQuery = (
  variables: GitGetTagVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.GitTag>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/tags/{tagSha}",
    operationId: "gitGetTag",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitGetTag(variables, signal),
});

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useSuspenseGitGetTag = <TData = Schemas.GitTag>(
  variables: GitGetTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTag, GitGetTagError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.GitTag, GitGetTagError, TData>({
    ...gitGetTagQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetTag = <TData = Schemas.GitTag>(
  variables: GitGetTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTag, GitGetTagError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitTag, GitGetTagError, TData>({
    ...gitGetTagQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type GitCreateTreePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type GitCreateTreeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitCreateTreeRequestBody = {
  /**
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
   * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
   */
  base_tree?: string;
  /**
   * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
   */
  tree: {
    /**
     * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    content?: string;
    /**
     * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
     */
    mode?: "100644" | "100755" | "040000" | "160000" | "120000";
    /**
     * The file referenced in the tree.
     */
    path?: string;
    /**
     * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    sha?: string | null;
    /**
     * Either `blob`, `tree`, or `commit`.
     */
    type?: "blob" | "tree" | "commit";
  }[];
};

export type GitCreateTreeVariables = {
  body: GitCreateTreeRequestBody;
  pathParams: GitCreateTreePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 *
 * Returns an error if you try to delete a file that does not exist.
 */
export const fetchGitCreateTree = (
  variables: GitCreateTreeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitTree,
    GitCreateTreeError,
    GitCreateTreeRequestBody,
    {},
    {},
    GitCreateTreePathParams
  >({
    url: "/repos/{owner}/{repo}/git/trees",
    method: "post",
    ...variables,
    signal,
  });

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 *
 * Returns an error if you try to delete a file that does not exist.
 */
export const useGitCreateTree = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTree,
      GitCreateTreeError,
      GitCreateTreeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTree,
    GitCreateTreeError,
    GitCreateTreeVariables
  >({
    mutationFn: (variables: GitCreateTreeVariables) =>
      fetchGitCreateTree({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GitGetTreePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  treeSha: string;
};

export type GitGetTreeQueryParams = {
  /**
   * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
   */
  recursive?: string;
};

export type GitGetTreeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type GitGetTreeVariables = {
  pathParams: GitGetTreePathParams;
  queryParams?: GitGetTreeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 *
 *
 * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
 */
export const fetchGitGetTree = (
  variables: GitGetTreeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GitTree,
    GitGetTreeError,
    undefined,
    {},
    GitGetTreeQueryParams,
    GitGetTreePathParams
  >({
    url: "/repos/{owner}/{repo}/git/trees/{treeSha}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 *
 *
 * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
 */
export const gitGetTreeQuery = (
  variables: GitGetTreeVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.GitTree>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/git/trees/{treeSha}",
    operationId: "gitGetTree",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGitGetTree(variables, signal),
});

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 *
 *
 * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
 */
export const useSuspenseGitGetTree = <TData = Schemas.GitTree>(
  variables: GitGetTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTree, GitGetTreeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.GitTree, GitGetTreeError, TData>({
    ...gitGetTreeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 *
 *
 * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
 */
export const useGitGetTree = <TData = Schemas.GitTree>(
  variables: GitGetTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GitTree, GitGetTreeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.GitTree, GitGetTreeError, TData>({
    ...gitGetTreeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListWebhooksPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListWebhooksQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListWebhooksError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListWebhooksResponse = Schemas.Hook[];

export type ReposListWebhooksVariables = {
  pathParams: ReposListWebhooksPathParams;
  queryParams?: ReposListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 */
export const fetchReposListWebhooks = (
  variables: ReposListWebhooksVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListWebhooksResponse,
    ReposListWebhooksError,
    undefined,
    {},
    ReposListWebhooksQueryParams,
    ReposListWebhooksPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 */
export const reposListWebhooksQuery = (
  variables: ReposListWebhooksVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListWebhooksResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/hooks",
    operationId: "reposListWebhooks",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListWebhooks(variables, signal),
});

/**
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 */
export const useSuspenseReposListWebhooks = <TData = ReposListWebhooksResponse>(
  variables: ReposListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhooksResponse,
      ReposListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListWebhooksResponse,
    ReposListWebhooksError,
    TData
  >({
    ...reposListWebhooksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 */
export const useReposListWebhooks = <TData = ReposListWebhooksResponse>(
  variables: ReposListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhooksResponse,
      ReposListWebhooksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListWebhooksResponse,
    ReposListWebhooksError,
    TData
  >({
    ...reposListWebhooksQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateWebhookVariables = {
  body?: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     *
     * @default true
     */
    active?: boolean;
    /**
     * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
     */
    config?: {
      content_type?: Schemas.WebhookConfigContentType;
      /**
       * @example "sha256"
       */
      digest?: string;
      insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
      secret?: Schemas.WebhookConfigSecret;
      /**
       * @example "abc"
       */
      token?: string;
      url?: Schemas.WebhookConfigUrl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     *
     * @default push
     */
    events?: string[];
    /**
     * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
     */
    name?: string;
  } | null;
  pathParams: ReposCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const fetchReposCreateWebhook = (
  variables: ReposCreateWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Hook,
    ReposCreateWebhookError,
    {
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
       *
       * @default true
       */
      active?: boolean;
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       */
      config?: {
        content_type?: Schemas.WebhookConfigContentType;
        /**
         * @example "sha256"
         */
        digest?: string;
        insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
        secret?: Schemas.WebhookConfigSecret;
        /**
         * @example "abc"
         */
        token?: string;
        url?: Schemas.WebhookConfigUrl;
      };
      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       *
       * @default push
       */
      events?: string[];
      /**
       * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
       */
      name?: string;
    } | null,
    {},
    {},
    ReposCreateWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const useReposCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      ReposCreateWebhookError,
      ReposCreateWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    ReposCreateWebhookError,
    ReposCreateWebhookVariables
  >({
    mutationFn: (variables: ReposCreateWebhookVariables) =>
      fetchReposCreateWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposDeleteWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposDeleteWebhookVariables = {
  pathParams: ReposDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteWebhook = (
  variables: ReposDeleteWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteWebhookError,
    undefined,
    {},
    {},
    ReposDeleteWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteWebhookError,
      ReposDeleteWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteWebhookError,
    ReposDeleteWebhookVariables
  >({
    mutationFn: (variables: ReposDeleteWebhookVariables) =>
      fetchReposDeleteWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposGetWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetWebhookVariables = {
  pathParams: ReposGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposGetWebhook = (
  variables: ReposGetWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Hook,
    ReposGetWebhookError,
    undefined,
    {},
    {},
    ReposGetWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const reposGetWebhookQuery = (
  variables: ReposGetWebhookVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Hook>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/hooks/{hookId}",
    operationId: "reposGetWebhook",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetWebhook(variables, signal),
});

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const useSuspenseReposGetWebhook = <TData = Schemas.Hook>(
  variables: ReposGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Hook, ReposGetWebhookError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Hook, ReposGetWebhookError, TData>(
    {
      ...reposGetWebhookQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const useReposGetWebhook = <TData = Schemas.Hook>(
  variables: ReposGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Hook, ReposGetWebhookError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Hook, ReposGetWebhookError, TData>({
    ...reposGetWebhookQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposUpdateWebhookError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateWebhookRequestBody = {
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /**
   * Determines a list of events to be added to the list of events that the Hook triggers for.
   */
  add_events?: string[];
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
   */
  config?: {
    /**
     * @example "bar@example.com"
     */
    address?: string;
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /**
     * @example "The Serious Room"
     */
    room?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /**
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   *
   * @default push
   */
  events?: string[];
  /**
   * Determines a list of events to be removed from the list of events that the Hook triggers for.
   */
  remove_events?: string[];
};

export type ReposUpdateWebhookVariables = {
  body?: ReposUpdateWebhookRequestBody;
  pathParams: ReposUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposUpdateWebhook = (
  variables: ReposUpdateWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Hook,
    ReposUpdateWebhookError,
    ReposUpdateWebhookRequestBody,
    {},
    {},
    ReposUpdateWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const useReposUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      ReposUpdateWebhookError,
      ReposUpdateWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    ReposUpdateWebhookError,
    ReposUpdateWebhookVariables
  >({
    mutationFn: (variables: ReposUpdateWebhookVariables) =>
      fetchReposUpdateWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetWebhookConfigForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposGetWebhookConfigForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetWebhookConfigForRepoVariables = {
  pathParams: ReposGetWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const fetchReposGetWebhookConfigForRepo = (
  variables: ReposGetWebhookConfigForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    ReposGetWebhookConfigForRepoError,
    undefined,
    {},
    {},
    ReposGetWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const reposGetWebhookConfigForRepoQuery = (
  variables: ReposGetWebhookConfigForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.WebhookConfig>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    operationId: "reposGetWebhookConfigForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetWebhookConfigForRepo(variables, signal),
});

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const useSuspenseReposGetWebhookConfigForRepo = <
  TData = Schemas.WebhookConfig,
>(
  variables: ReposGetWebhookConfigForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      ReposGetWebhookConfigForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.WebhookConfig,
    ReposGetWebhookConfigForRepoError,
    TData
  >({
    ...reposGetWebhookConfigForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const useReposGetWebhookConfigForRepo = <TData = Schemas.WebhookConfig>(
  variables: ReposGetWebhookConfigForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      ReposGetWebhookConfigForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    ReposGetWebhookConfigForRepoError,
    TData
  >({
    ...reposGetWebhookConfigForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateWebhookConfigForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposUpdateWebhookConfigForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateWebhookConfigForRepoRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type ReposUpdateWebhookConfigForRepoVariables = {
  body?: ReposUpdateWebhookConfigForRepoRequestBody;
  pathParams: ReposUpdateWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const fetchReposUpdateWebhookConfigForRepo = (
  variables: ReposUpdateWebhookConfigForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.WebhookConfig,
    ReposUpdateWebhookConfigForRepoError,
    ReposUpdateWebhookConfigForRepoRequestBody,
    {},
    {},
    ReposUpdateWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const useReposUpdateWebhookConfigForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      ReposUpdateWebhookConfigForRepoError,
      ReposUpdateWebhookConfigForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    ReposUpdateWebhookConfigForRepoError,
    ReposUpdateWebhookConfigForRepoVariables
  >({
    mutationFn: (variables: ReposUpdateWebhookConfigForRepoVariables) =>
      fetchReposUpdateWebhookConfigForRepo({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListWebhookDeliveriesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposListWebhookDeliveriesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
   */
  cursor?: string;
  redelivery?: boolean;
};

export type ReposListWebhookDeliveriesError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListWebhookDeliveriesResponse = Schemas.HookDeliveryItem[];

export type ReposListWebhookDeliveriesVariables = {
  pathParams: ReposListWebhookDeliveriesPathParams;
  queryParams?: ReposListWebhookDeliveriesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const fetchReposListWebhookDeliveries = (
  variables: ReposListWebhookDeliveriesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListWebhookDeliveriesResponse,
    ReposListWebhookDeliveriesError,
    undefined,
    {},
    ReposListWebhookDeliveriesQueryParams,
    ReposListWebhookDeliveriesPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const reposListWebhookDeliveriesQuery = (
  variables: ReposListWebhookDeliveriesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListWebhookDeliveriesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries",
    operationId: "reposListWebhookDeliveries",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListWebhookDeliveries(variables, signal),
});

/**
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const useSuspenseReposListWebhookDeliveries = <
  TData = ReposListWebhookDeliveriesResponse,
>(
  variables: ReposListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhookDeliveriesResponse,
      ReposListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListWebhookDeliveriesResponse,
    ReposListWebhookDeliveriesError,
    TData
  >({
    ...reposListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 */
export const useReposListWebhookDeliveries = <
  TData = ReposListWebhookDeliveriesResponse,
>(
  variables: ReposListWebhookDeliveriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhookDeliveriesResponse,
      ReposListWebhookDeliveriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListWebhookDeliveriesResponse,
    ReposListWebhookDeliveriesError,
    TData
  >({
    ...reposListWebhookDeliveriesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetWebhookDeliveryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
  deliveryId: number;
};

export type ReposGetWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposGetWebhookDeliveryVariables = {
  pathParams: ReposGetWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a delivery for a webhook configured in a repository.
 */
export const fetchReposGetWebhookDelivery = (
  variables: ReposGetWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.HookDelivery,
    ReposGetWebhookDeliveryError,
    undefined,
    {},
    {},
    ReposGetWebhookDeliveryPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a delivery for a webhook configured in a repository.
 */
export const reposGetWebhookDeliveryQuery = (
  variables: ReposGetWebhookDeliveryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.HookDelivery>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}",
    operationId: "reposGetWebhookDelivery",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetWebhookDelivery(variables, signal),
});

/**
 * Returns a delivery for a webhook configured in a repository.
 */
export const useSuspenseReposGetWebhookDelivery = <
  TData = Schemas.HookDelivery,
>(
  variables: ReposGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      ReposGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.HookDelivery,
    ReposGetWebhookDeliveryError,
    TData
  >({
    ...reposGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a delivery for a webhook configured in a repository.
 */
export const useReposGetWebhookDelivery = <TData = Schemas.HookDelivery>(
  variables: ReposGetWebhookDeliveryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.HookDelivery,
      ReposGetWebhookDeliveryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.HookDelivery,
    ReposGetWebhookDeliveryError,
    TData
  >({
    ...reposGetWebhookDeliveryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposRedeliverWebhookDeliveryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
  deliveryId: number;
};

export type ReposRedeliverWebhookDeliveryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposRedeliverWebhookDeliveryVariables = {
  pathParams: ReposRedeliverWebhookDeliveryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Redeliver a webhook delivery for a webhook configured in a repository.
 */
export const fetchReposRedeliverWebhookDelivery = (
  variables: ReposRedeliverWebhookDeliveryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    ReposRedeliverWebhookDeliveryError,
    undefined,
    {},
    {},
    ReposRedeliverWebhookDeliveryPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}/attempts",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Redeliver a webhook delivery for a webhook configured in a repository.
 */
export const useReposRedeliverWebhookDelivery = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      ReposRedeliverWebhookDeliveryError,
      ReposRedeliverWebhookDeliveryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    ReposRedeliverWebhookDeliveryError,
    ReposRedeliverWebhookDeliveryVariables
  >({
    mutationFn: (variables: ReposRedeliverWebhookDeliveryVariables) =>
      fetchReposRedeliverWebhookDelivery({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposPingWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposPingWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposPingWebhookVariables = {
  pathParams: ReposPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchReposPingWebhook = (
  variables: ReposPingWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposPingWebhookError,
    undefined,
    {},
    {},
    ReposPingWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/pings",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useReposPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposPingWebhookError,
      ReposPingWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposPingWebhookError,
    ReposPingWebhookVariables
  >({
    mutationFn: (variables: ReposPingWebhookVariables) =>
      fetchReposPingWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposTestPushWebhookPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the hook.
   */
  hookId: number;
};

export type ReposTestPushWebhookError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposTestPushWebhookVariables = {
  pathParams: ReposTestPushWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const fetchReposTestPushWebhook = (
  variables: ReposTestPushWebhookVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposTestPushWebhookError,
    undefined,
    {},
    {},
    ReposTestPushWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/tests",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const useReposTestPushWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposTestPushWebhookError,
      ReposTestPushWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposTestPushWebhookError,
    ReposTestPushWebhookVariables
  >({
    mutationFn: (variables: ReposTestPushWebhookVariables) =>
      fetchReposTestPushWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsCancelImportPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsCancelImportError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.PorterMaintenance;
}>;

export type MigrationsCancelImportVariables = {
  pathParams: MigrationsCancelImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Stop an import for a repository.
 */
export const fetchMigrationsCancelImport = (
  variables: MigrationsCancelImportVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsCancelImportError,
    undefined,
    {},
    {},
    MigrationsCancelImportPathParams
  >({
    url: "/repos/{owner}/{repo}/import",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Stop an import for a repository.
 */
export const useMigrationsCancelImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsCancelImportError,
      MigrationsCancelImportVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsCancelImportError,
    MigrationsCancelImportVariables
  >({
    mutationFn: (variables: MigrationsCancelImportVariables) =>
      fetchMigrationsCancelImport({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsGetImportStatusPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsGetImportStatusError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.PorterMaintenance;
    }
>;

export type MigrationsGetImportStatusVariables = {
  pathParams: MigrationsGetImportStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const fetchMigrationsGetImportStatus = (
  variables: MigrationsGetImportStatusVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Import,
    MigrationsGetImportStatusError,
    undefined,
    {},
    {},
    MigrationsGetImportStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/import",
    method: "get",
    ...variables,
    signal,
  });

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const migrationsGetImportStatusQuery = (
  variables: MigrationsGetImportStatusVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Import>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/import",
    operationId: "migrationsGetImportStatus",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetImportStatus(variables, signal),
});

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const useSuspenseMigrationsGetImportStatus = <TData = Schemas.Import>(
  variables: MigrationsGetImportStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Import,
      MigrationsGetImportStatusError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Import,
    MigrationsGetImportStatusError,
    TData
  >({
    ...migrationsGetImportStatusQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const useMigrationsGetImportStatus = <TData = Schemas.Import>(
  variables: MigrationsGetImportStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Import,
      MigrationsGetImportStatusError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Import,
    MigrationsGetImportStatusError,
    TData
  >({
    ...migrationsGetImportStatusQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsUpdateImportPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsUpdateImportError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.PorterMaintenance;
}>;

export type MigrationsUpdateImportVariables = {
  body?: {
    /**
     * For a tfvc import, the name of the project that is being imported.
     *
     * @example "project1"
     */
    tfvc_project?: string;
    /**
     * The type of version control system you are migrating from.
     *
     * @example "git"
     */
    vcs?: "subversion" | "tfvc" | "git" | "mercurial";
    /**
     * The password to provide to the originating repository.
     */
    vcs_password?: string;
    /**
     * The username to provide to the originating repository.
     */
    vcs_username?: string;
  } | null;
  pathParams: MigrationsUpdateImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 *
 * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
 * have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
 * You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
 */
export const fetchMigrationsUpdateImport = (
  variables: MigrationsUpdateImportVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Import,
    MigrationsUpdateImportError,
    {
      /**
       * For a tfvc import, the name of the project that is being imported.
       *
       * @example "project1"
       */
      tfvc_project?: string;
      /**
       * The type of version control system you are migrating from.
       *
       * @example "git"
       */
      vcs?: "subversion" | "tfvc" | "git" | "mercurial";
      /**
       * The password to provide to the originating repository.
       */
      vcs_password?: string;
      /**
       * The username to provide to the originating repository.
       */
      vcs_username?: string;
    } | null,
    {},
    {},
    MigrationsUpdateImportPathParams
  >({
    url: "/repos/{owner}/{repo}/import",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 *
 * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
 * have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
 * You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
 */
export const useMigrationsUpdateImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsUpdateImportError,
      MigrationsUpdateImportVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsUpdateImportError,
    MigrationsUpdateImportVariables
  >({
    mutationFn: (variables: MigrationsUpdateImportVariables) =>
      fetchMigrationsUpdateImport({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsStartImportPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsStartImportError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.PorterMaintenance;
    }
>;

export type MigrationsStartImportRequestBody = {
  /**
   * For a tfvc import, the name of the project that is being imported.
   */
  tfvc_project?: string;
  /**
   * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   */
  vcs?: "subversion" | "git" | "mercurial" | "tfvc";
  /**
   * If authentication is required, the password to provide to `vcs_url`.
   */
  vcs_password?: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  /**
   * If authentication is required, the username to provide to `vcs_url`.
   */
  vcs_username?: string;
};

export type MigrationsStartImportVariables = {
  body: MigrationsStartImportRequestBody;
  pathParams: MigrationsStartImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.
 */
export const fetchMigrationsStartImport = (
  variables: MigrationsStartImportVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Import,
    MigrationsStartImportError,
    MigrationsStartImportRequestBody,
    {},
    {},
    MigrationsStartImportPathParams
  >({
    url: "/repos/{owner}/{repo}/import",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.
 */
export const useMigrationsStartImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsStartImportError,
      MigrationsStartImportVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsStartImportError,
    MigrationsStartImportVariables
  >({
    mutationFn: (variables: MigrationsStartImportVariables) =>
      fetchMigrationsStartImport({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsGetCommitAuthorsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsGetCommitAuthorsQueryParams = {
  /**
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
};

export type MigrationsGetCommitAuthorsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.PorterMaintenance;
    }
>;

export type MigrationsGetCommitAuthorsResponse = Schemas.PorterAuthor[];

export type MigrationsGetCommitAuthorsVariables = {
  pathParams: MigrationsGetCommitAuthorsPathParams;
  queryParams?: MigrationsGetCommitAuthorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const fetchMigrationsGetCommitAuthors = (
  variables: MigrationsGetCommitAuthorsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsGetCommitAuthorsResponse,
    MigrationsGetCommitAuthorsError,
    undefined,
    {},
    MigrationsGetCommitAuthorsQueryParams,
    MigrationsGetCommitAuthorsPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const migrationsGetCommitAuthorsQuery = (
  variables: MigrationsGetCommitAuthorsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsGetCommitAuthorsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/import/authors",
    operationId: "migrationsGetCommitAuthors",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetCommitAuthors(variables, signal),
});

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const useSuspenseMigrationsGetCommitAuthors = <
  TData = MigrationsGetCommitAuthorsResponse,
>(
  variables: MigrationsGetCommitAuthorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetCommitAuthorsResponse,
      MigrationsGetCommitAuthorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsGetCommitAuthorsResponse,
    MigrationsGetCommitAuthorsError,
    TData
  >({
    ...migrationsGetCommitAuthorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const useMigrationsGetCommitAuthors = <
  TData = MigrationsGetCommitAuthorsResponse,
>(
  variables: MigrationsGetCommitAuthorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetCommitAuthorsResponse,
      MigrationsGetCommitAuthorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetCommitAuthorsResponse,
    MigrationsGetCommitAuthorsError,
    TData
  >({
    ...migrationsGetCommitAuthorsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsMapCommitAuthorPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  authorId: number;
};

export type MigrationsMapCommitAuthorError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.PorterMaintenance;
    }
>;

export type MigrationsMapCommitAuthorRequestBody = {
  /**
   * The new Git author email.
   */
  email?: string;
  /**
   * The new Git author name.
   */
  name?: string;
};

export type MigrationsMapCommitAuthorVariables = {
  body?: MigrationsMapCommitAuthorRequestBody;
  pathParams: MigrationsMapCommitAuthorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const fetchMigrationsMapCommitAuthor = (
  variables: MigrationsMapCommitAuthorVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PorterAuthor,
    MigrationsMapCommitAuthorError,
    MigrationsMapCommitAuthorRequestBody,
    {},
    {},
    MigrationsMapCommitAuthorPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors/{authorId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const useMigrationsMapCommitAuthor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PorterAuthor,
      MigrationsMapCommitAuthorError,
      MigrationsMapCommitAuthorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PorterAuthor,
    MigrationsMapCommitAuthorError,
    MigrationsMapCommitAuthorVariables
  >({
    mutationFn: (variables: MigrationsMapCommitAuthorVariables) =>
      fetchMigrationsMapCommitAuthor({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type MigrationsGetLargeFilesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsGetLargeFilesError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.PorterMaintenance;
}>;

export type MigrationsGetLargeFilesResponse = Schemas.PorterLargeFile[];

export type MigrationsGetLargeFilesVariables = {
  pathParams: MigrationsGetLargeFilesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List files larger than 100MB found during the import
 */
export const fetchMigrationsGetLargeFiles = (
  variables: MigrationsGetLargeFilesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsGetLargeFilesResponse,
    MigrationsGetLargeFilesError,
    undefined,
    {},
    {},
    MigrationsGetLargeFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/import/large_files",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List files larger than 100MB found during the import
 */
export const migrationsGetLargeFilesQuery = (
  variables: MigrationsGetLargeFilesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsGetLargeFilesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/import/large_files",
    operationId: "migrationsGetLargeFiles",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetLargeFiles(variables, signal),
});

/**
 * List files larger than 100MB found during the import
 */
export const useSuspenseMigrationsGetLargeFiles = <
  TData = MigrationsGetLargeFilesResponse,
>(
  variables: MigrationsGetLargeFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetLargeFilesResponse,
      MigrationsGetLargeFilesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsGetLargeFilesResponse,
    MigrationsGetLargeFilesError,
    TData
  >({
    ...migrationsGetLargeFilesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List files larger than 100MB found during the import
 */
export const useMigrationsGetLargeFiles = <
  TData = MigrationsGetLargeFilesResponse,
>(
  variables: MigrationsGetLargeFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetLargeFilesResponse,
      MigrationsGetLargeFilesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetLargeFilesResponse,
    MigrationsGetLargeFilesError,
    TData
  >({
    ...migrationsGetLargeFilesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsSetLfsPreferencePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type MigrationsSetLfsPreferenceError = Fetcher.ErrorWrapper<
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.PorterMaintenance;
    }
>;

export type MigrationsSetLfsPreferenceRequestBody = {
  /**
   * Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
   */
  use_lfs: "opt_in" | "opt_out";
};

export type MigrationsSetLfsPreferenceVariables = {
  body: MigrationsSetLfsPreferenceRequestBody;
  pathParams: MigrationsSetLfsPreferencePathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).
 */
export const fetchMigrationsSetLfsPreference = (
  variables: MigrationsSetLfsPreferenceVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Import,
    MigrationsSetLfsPreferenceError,
    MigrationsSetLfsPreferenceRequestBody,
    {},
    {},
    MigrationsSetLfsPreferencePathParams
  >({
    url: "/repos/{owner}/{repo}/import/lfs",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).
 */
export const useMigrationsSetLfsPreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      MigrationsSetLfsPreferenceError,
      MigrationsSetLfsPreferenceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    MigrationsSetLfsPreferenceError,
    MigrationsSetLfsPreferenceVariables
  >({
    mutationFn: (variables: MigrationsSetLfsPreferenceVariables) =>
      fetchMigrationsSetLfsPreference({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AppsGetRepoInstallationPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type AppsGetRepoInstallationError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type AppsGetRepoInstallationVariables = {
  pathParams: AppsGetRepoInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetRepoInstallation = (
  variables: AppsGetRepoInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetRepoInstallationError,
    undefined,
    {},
    {},
    AppsGetRepoInstallationPathParams
  >({
    url: "/repos/{owner}/{repo}/installation",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetRepoInstallationQuery = (
  variables: AppsGetRepoInstallationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Installation>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/installation",
    operationId: "appsGetRepoInstallation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetRepoInstallation(variables, signal),
});

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetRepoInstallation = <
  TData = Schemas.Installation,
>(
  variables: AppsGetRepoInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetRepoInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Installation,
    AppsGetRepoInstallationError,
    TData
  >({
    ...appsGetRepoInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetRepoInstallation = <TData = Schemas.Installation>(
  variables: AppsGetRepoInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetRepoInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetRepoInstallationError,
    TData
  >({
    ...appsGetRepoInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type InteractionsRemoveRestrictionsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type InteractionsRemoveRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForRepoVariables = {
  pathParams: InteractionsRemoveRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsRemoveRestrictionsForRepo = (
  variables: InteractionsRemoveRestrictionsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForRepoError,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsRemoveRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForRepoError,
      InteractionsRemoveRestrictionsForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForRepoError,
    InteractionsRemoveRestrictionsForRepoVariables
  >({
    mutationFn: (variables: InteractionsRemoveRestrictionsForRepoVariables) =>
      fetchInteractionsRemoveRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InteractionsGetRestrictionsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type InteractionsGetRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForRepoVariables = {
  pathParams: InteractionsGetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForRepo = (
  variables: InteractionsGetRestrictionsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForRepoError,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const interactionsGetRestrictionsForRepoQuery = (
  variables: InteractionsGetRestrictionsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.InteractionLimitResponse | {}>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/interaction-limits",
    operationId: "interactionsGetRestrictionsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchInteractionsGetRestrictionsForRepo(variables, signal),
});

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useSuspenseInteractionsGetRestrictionsForRepo = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForRepoError,
    TData
  >({
    ...interactionsGetRestrictionsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForRepo = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForRepoError,
    TData
  >({
    ...interactionsGetRestrictionsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type InteractionsSetRestrictionsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type InteractionsSetRestrictionsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsSetRestrictionsForRepoVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsSetRestrictionsForRepo = (
  variables: InteractionsSetRestrictionsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForRepoError,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsSetRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForRepoError,
      InteractionsSetRestrictionsForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForRepoError,
    InteractionsSetRestrictionsForRepoVariables
  >({
    mutationFn: (variables: InteractionsSetRestrictionsForRepoVariables) =>
      fetchInteractionsSetRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListInvitationsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListInvitationsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListInvitationsResponse = Schemas.RepositoryInvitation[];

export type ReposListInvitationsVariables = {
  pathParams: ReposListInvitationsPathParams;
  queryParams?: ReposListInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const fetchReposListInvitations = (
  variables: ReposListInvitationsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListInvitationsResponse,
    ReposListInvitationsError,
    undefined,
    {},
    ReposListInvitationsQueryParams,
    ReposListInvitationsPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const reposListInvitationsQuery = (
  variables: ReposListInvitationsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListInvitationsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/invitations",
    operationId: "reposListInvitations",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListInvitations(variables, signal),
});

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const useSuspenseReposListInvitations = <
  TData = ReposListInvitationsResponse,
>(
  variables: ReposListInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsResponse,
      ReposListInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListInvitationsResponse,
    ReposListInvitationsError,
    TData
  >({
    ...reposListInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const useReposListInvitations = <TData = ReposListInvitationsResponse>(
  variables: ReposListInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsResponse,
      ReposListInvitationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsResponse,
    ReposListInvitationsError,
    TData
  >({
    ...reposListInvitationsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeleteInvitationPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type ReposDeleteInvitationError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteInvitationVariables = {
  pathParams: ReposDeleteInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteInvitation = (
  variables: ReposDeleteInvitationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteInvitationError,
    undefined,
    {},
    {},
    ReposDeleteInvitationPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposDeleteInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteInvitationError,
      ReposDeleteInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteInvitationError,
    ReposDeleteInvitationVariables
  >({
    mutationFn: (variables: ReposDeleteInvitationVariables) =>
      fetchReposDeleteInvitation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposUpdateInvitationPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type ReposUpdateInvitationError = Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateInvitationRequestBody = {
  /**
   * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
   */
  permissions?: "read" | "write" | "maintain" | "triage" | "admin";
};

export type ReposUpdateInvitationVariables = {
  body?: ReposUpdateInvitationRequestBody;
  pathParams: ReposUpdateInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateInvitation = (
  variables: ReposUpdateInvitationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposUpdateInvitationError,
    ReposUpdateInvitationRequestBody,
    {},
    {},
    ReposUpdateInvitationPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useReposUpdateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      ReposUpdateInvitationError,
      ReposUpdateInvitationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    ReposUpdateInvitationError,
    ReposUpdateInvitationVariables
  >({
    mutationFn: (variables: ReposUpdateInvitationVariables) =>
      fetchReposUpdateInvitation({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListForRepoQueryParams = {
  /**
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  milestone?: string;
  /**
   * Indicates the state of the issues to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string;
  /**
   * The user that created the issue.
   */
  creator?: string;
  /**
   * A user that's mentioned in the issue.
   */
  mentioned?: string;
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListForRepoResponse = Schemas.Issue[];

export type IssuesListForRepoVariables = {
  pathParams: IssuesListForRepoPathParams;
  queryParams?: IssuesListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in a repository. Only open issues will be listed.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForRepo = (
  variables: IssuesListForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListForRepoResponse,
    IssuesListForRepoError,
    undefined,
    {},
    IssuesListForRepoQueryParams,
    IssuesListForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List issues in a repository. Only open issues will be listed.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const issuesListForRepoQuery = (
  variables: IssuesListForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues",
    operationId: "issuesListForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListForRepo(variables, signal),
});

/**
 * List issues in a repository. Only open issues will be listed.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useSuspenseIssuesListForRepo = <TData = IssuesListForRepoResponse>(
  variables: IssuesListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForRepoResponse,
      IssuesListForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListForRepoResponse,
    IssuesListForRepoError,
    TData
  >({
    ...issuesListForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List issues in a repository. Only open issues will be listed.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForRepo = <TData = IssuesListForRepoResponse>(
  variables: IssuesListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForRepoResponse,
      IssuesListForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForRepoResponse,
    IssuesListForRepoError,
    TData
  >({
    ...issuesListForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesCreatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type IssuesCreateRequestBody = {
  /**
   * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
   */
  assignee?: string | null;
  /**
   * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
  /**
   * The contents of the issue.
   */
  body?: string;
  /**
   * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /**
   * The title of the issue.
   */
  title: string | number;
};

export type IssuesCreateVariables = {
  body: IssuesCreateRequestBody;
  pathParams: IssuesCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchIssuesCreate = (
  variables: IssuesCreateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Issue,
    IssuesCreateError,
    IssuesCreateRequestBody,
    {},
    {},
    IssuesCreatePathParams
  >({
    url: "/repos/{owner}/{repo}/issues",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useIssuesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesCreateError,
      IssuesCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesCreateError,
    IssuesCreateVariables
  >({
    mutationFn: (variables: IssuesCreateVariables) =>
      fetchIssuesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListCommentsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListCommentsForRepoQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * Either `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesListCommentsForRepoResponse = Schemas.IssueComment[];

export type IssuesListCommentsForRepoVariables = {
  pathParams: IssuesListCommentsForRepoPathParams;
  queryParams?: IssuesListCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListCommentsForRepo = (
  variables: IssuesListCommentsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListCommentsForRepoResponse,
    IssuesListCommentsForRepoError,
    undefined,
    {},
    IssuesListCommentsForRepoQueryParams,
    IssuesListCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const issuesListCommentsForRepoQuery = (
  variables: IssuesListCommentsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListCommentsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/comments",
    operationId: "issuesListCommentsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListCommentsForRepo(variables, signal),
});

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const useSuspenseIssuesListCommentsForRepo = <
  TData = IssuesListCommentsForRepoResponse,
>(
  variables: IssuesListCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsForRepoResponse,
      IssuesListCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListCommentsForRepoResponse,
    IssuesListCommentsForRepoError,
    TData
  >({
    ...issuesListCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const useIssuesListCommentsForRepo = <
  TData = IssuesListCommentsForRepoResponse,
>(
  variables: IssuesListCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsForRepoResponse,
      IssuesListCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsForRepoResponse,
    IssuesListCommentsForRepoError,
    TData
  >({
    ...issuesListCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesDeleteCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type IssuesDeleteCommentError = Fetcher.ErrorWrapper<undefined>;

export type IssuesDeleteCommentVariables = {
  pathParams: IssuesDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteComment = (
  variables: IssuesDeleteCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesDeleteCommentError,
    undefined,
    {},
    {},
    IssuesDeleteCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useIssuesDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteCommentError,
      IssuesDeleteCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteCommentError,
    IssuesDeleteCommentVariables
  >({
    mutationFn: (variables: IssuesDeleteCommentVariables) =>
      fetchIssuesDeleteComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesGetCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type IssuesGetCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetCommentVariables = {
  pathParams: IssuesGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetComment = (
  variables: IssuesGetCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesGetCommentError,
    undefined,
    {},
    {},
    IssuesGetCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "get",
    ...variables,
    signal,
  });

export const issuesGetCommentQuery = (
  variables: IssuesGetCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.IssueComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    operationId: "issuesGetComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesGetComment(variables, signal),
});

export const useSuspenseIssuesGetComment = <TData = Schemas.IssueComment>(
  variables: IssuesGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.IssueComment,
      IssuesGetCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.IssueComment,
    IssuesGetCommentError,
    TData
  >({
    ...issuesGetCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesGetComment = <TData = Schemas.IssueComment>(
  variables: IssuesGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.IssueComment,
      IssuesGetCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.IssueComment,
    IssuesGetCommentError,
    TData
  >({
    ...issuesGetCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesUpdateCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type IssuesUpdateCommentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type IssuesUpdateCommentRequestBody = {
  /**
   * The contents of the comment.
   */
  body: string;
};

export type IssuesUpdateCommentVariables = {
  body: IssuesUpdateCommentRequestBody;
  pathParams: IssuesUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateComment = (
  variables: IssuesUpdateCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesUpdateCommentError,
    IssuesUpdateCommentRequestBody,
    {},
    {},
    IssuesUpdateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useIssuesUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      IssuesUpdateCommentError,
      IssuesUpdateCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    IssuesUpdateCommentError,
    IssuesUpdateCommentVariables
  >({
    mutationFn: (variables: IssuesUpdateCommentVariables) =>
      fetchIssuesUpdateComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsListForIssueCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsListForIssueCommentQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReactionsListForIssueCommentResponse = Schemas.Reaction[];

export type ReactionsListForIssueCommentVariables = {
  pathParams: ReactionsListForIssueCommentPathParams;
  queryParams?: ReactionsListForIssueCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsListForIssueComment = (
  variables: ReactionsListForIssueCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForIssueCommentResponse,
    ReactionsListForIssueCommentError,
    undefined,
    {},
    ReactionsListForIssueCommentQueryParams,
    ReactionsListForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const reactionsListForIssueCommentQuery = (
  variables: ReactionsListForIssueCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForIssueCommentResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    operationId: "reactionsListForIssueComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForIssueComment(variables, signal),
});

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useSuspenseReactionsListForIssueComment = <
  TData = ReactionsListForIssueCommentResponse,
>(
  variables: ReactionsListForIssueCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueCommentResponse,
      ReactionsListForIssueCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForIssueCommentResponse,
    ReactionsListForIssueCommentError,
    TData
  >({
    ...reactionsListForIssueCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsListForIssueComment = <
  TData = ReactionsListForIssueCommentResponse,
>(
  variables: ReactionsListForIssueCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueCommentResponse,
      ReactionsListForIssueCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueCommentResponse,
    ReactionsListForIssueCommentError,
    TData
  >({
    ...reactionsListForIssueCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForIssueCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsCreateForIssueCommentError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReactionsCreateForIssueCommentRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueCommentVariables = {
  body: ReactionsCreateForIssueCommentRequestBody;
  pathParams: ReactionsCreateForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
 */
export const fetchReactionsCreateForIssueComment = (
  variables: ReactionsCreateForIssueCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueCommentError,
    ReactionsCreateForIssueCommentRequestBody,
    {},
    {},
    ReactionsCreateForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
 */
export const useReactionsCreateForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForIssueCommentError,
      ReactionsCreateForIssueCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForIssueCommentError,
    ReactionsCreateForIssueCommentVariables
  >({
    mutationFn: (variables: ReactionsCreateForIssueCommentVariables) =>
      fetchReactionsCreateForIssueComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsDeleteForIssueCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForIssueCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForIssueCommentVariables = {
  pathParams: ReactionsDeleteForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsDeleteForIssueComment = (
  variables: ReactionsDeleteForIssueCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForIssueCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsDeleteForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForIssueCommentError,
      ReactionsDeleteForIssueCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForIssueCommentError,
    ReactionsDeleteForIssueCommentVariables
  >({
    mutationFn: (variables: ReactionsDeleteForIssueCommentVariables) =>
      fetchReactionsDeleteForIssueComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListEventsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListEventsForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForRepoError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type IssuesListEventsForRepoResponse = Schemas.IssueEvent[];

export type IssuesListEventsForRepoVariables = {
  pathParams: IssuesListEventsForRepoPathParams;
  queryParams?: IssuesListEventsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForRepo = (
  variables: IssuesListEventsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListEventsForRepoResponse,
    IssuesListEventsForRepoError,
    undefined,
    {},
    IssuesListEventsForRepoQueryParams,
    IssuesListEventsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/events",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListEventsForRepoQuery = (
  variables: IssuesListEventsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListEventsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/events",
    operationId: "issuesListEventsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListEventsForRepo(variables, signal),
});

export const useSuspenseIssuesListEventsForRepo = <
  TData = IssuesListEventsForRepoResponse,
>(
  variables: IssuesListEventsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForRepoResponse,
      IssuesListEventsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListEventsForRepoResponse,
    IssuesListEventsForRepoError,
    TData
  >({
    ...issuesListEventsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListEventsForRepo = <
  TData = IssuesListEventsForRepoResponse,
>(
  variables: IssuesListEventsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForRepoResponse,
      IssuesListEventsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForRepoResponse,
    IssuesListEventsForRepoError,
    TData
  >({
    ...issuesListEventsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesGetEventPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  eventId: number;
};

export type IssuesGetEventError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesGetEventVariables = {
  pathParams: IssuesGetEventPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetEvent = (
  variables: IssuesGetEventVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.IssueEvent,
    IssuesGetEventError,
    undefined,
    {},
    {},
    IssuesGetEventPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/events/{eventId}",
    method: "get",
    ...variables,
    signal,
  });

export const issuesGetEventQuery = (
  variables: IssuesGetEventVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.IssueEvent>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/events/{eventId}",
    operationId: "issuesGetEvent",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesGetEvent(variables, signal),
});

export const useSuspenseIssuesGetEvent = <TData = Schemas.IssueEvent>(
  variables: IssuesGetEventVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.IssueEvent, IssuesGetEventError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.IssueEvent,
    IssuesGetEventError,
    TData
  >({
    ...issuesGetEventQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesGetEvent = <TData = Schemas.IssueEvent>(
  variables: IssuesGetEventVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.IssueEvent, IssuesGetEventError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.IssueEvent, IssuesGetEventError, TData>({
    ...issuesGetEventQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesGetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesGetError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesGetVariables = {
  pathParams: IssuesGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesGet = (
  variables: IssuesGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Issue,
    IssuesGetError,
    undefined,
    {},
    {},
    IssuesGetPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const issuesGetQuery = (
  variables: IssuesGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Issue>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}",
    operationId: "issuesGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesGet(variables, signal),
});

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useSuspenseIssuesGet = <TData = Schemas.Issue>(
  variables: IssuesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Issue, IssuesGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Issue, IssuesGetError, TData>({
    ...issuesGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesGet = <TData = Schemas.Issue>(
  variables: IssuesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Issue, IssuesGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Issue, IssuesGetError, TData>({
    ...issuesGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesUpdatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type IssuesUpdateRequestBody = {
  /**
   * Username to assign to this issue. **This field is deprecated.**
   */
  assignee?: string | null;
  /**
   * Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
   */
  assignees?: string[];
  /**
   * The contents of the issue.
   */
  body?: string | null;
  /**
   * Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /**
   * The open or closed state of the issue.
   */
  state?: "open" | "closed";
  /**
   * The reason for the state change. Ignored unless `state` is changed.
   *
   * @example not_planned
   */
  state_reason?: "completed" | "not_planned" | "reopened" | null;
  /**
   * The title of the issue.
   */
  title?: string | number | null;
};

export type IssuesUpdateVariables = {
  body?: IssuesUpdateRequestBody;
  pathParams: IssuesUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue owners and users with push access can edit an issue.
 */
export const fetchIssuesUpdate = (
  variables: IssuesUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Issue,
    IssuesUpdateError,
    IssuesUpdateRequestBody,
    {},
    {},
    IssuesUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Issue owners and users with push access can edit an issue.
 */
export const useIssuesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesUpdateError,
      IssuesUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesUpdateError,
    IssuesUpdateVariables
  >({
    mutationFn: (variables: IssuesUpdateVariables) =>
      fetchIssuesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesRemoveAssigneesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesRemoveAssigneesError = Fetcher.ErrorWrapper<undefined>;

export type IssuesRemoveAssigneesRequestBody = {
  /**
   * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesRemoveAssigneesVariables = {
  body?: IssuesRemoveAssigneesRequestBody;
  pathParams: IssuesRemoveAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes one or more assignees from an issue.
 */
export const fetchIssuesRemoveAssignees = (
  variables: IssuesRemoveAssigneesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Issue,
    IssuesRemoveAssigneesError,
    IssuesRemoveAssigneesRequestBody,
    {},
    {},
    IssuesRemoveAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes one or more assignees from an issue.
 */
export const useIssuesRemoveAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesRemoveAssigneesError,
      IssuesRemoveAssigneesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesRemoveAssigneesError,
    IssuesRemoveAssigneesVariables
  >({
    mutationFn: (variables: IssuesRemoveAssigneesVariables) =>
      fetchIssuesRemoveAssignees({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesAddAssigneesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesAddAssigneesError = Fetcher.ErrorWrapper<undefined>;

export type IssuesAddAssigneesRequestBody = {
  /**
   * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesAddAssigneesVariables = {
  body?: IssuesAddAssigneesRequestBody;
  pathParams: IssuesAddAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const fetchIssuesAddAssignees = (
  variables: IssuesAddAssigneesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Issue,
    IssuesAddAssigneesError,
    IssuesAddAssigneesRequestBody,
    {},
    {},
    IssuesAddAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const useIssuesAddAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      IssuesAddAssigneesError,
      IssuesAddAssigneesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    IssuesAddAssigneesError,
    IssuesAddAssigneesVariables
  >({
    mutationFn: (variables: IssuesAddAssigneesVariables) =>
      fetchIssuesAddAssignees({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesCheckUserCanBeAssignedToIssuePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
  assignee: string;
};

export type IssuesCheckUserCanBeAssignedToIssueError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type IssuesCheckUserCanBeAssignedToIssueVariables = {
  pathParams: IssuesCheckUserCanBeAssignedToIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks if a user has permission to be assigned to a specific issue.
 *
 * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const fetchIssuesCheckUserCanBeAssignedToIssue = (
  variables: IssuesCheckUserCanBeAssignedToIssueVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesCheckUserCanBeAssignedToIssueError,
    undefined,
    {},
    {},
    IssuesCheckUserCanBeAssignedToIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees/{assignee}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Checks if a user has permission to be assigned to a specific issue.
 *
 * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const issuesCheckUserCanBeAssignedToIssueQuery = (
  variables: IssuesCheckUserCanBeAssignedToIssueVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees/{assignee}",
    operationId: "issuesCheckUserCanBeAssignedToIssue",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesCheckUserCanBeAssignedToIssue(variables, signal),
});

/**
 * Checks if a user has permission to be assigned to a specific issue.
 *
 * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useSuspenseIssuesCheckUserCanBeAssignedToIssue = <
  TData = undefined,
>(
  variables: IssuesCheckUserCanBeAssignedToIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      IssuesCheckUserCanBeAssignedToIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    IssuesCheckUserCanBeAssignedToIssueError,
    TData
  >({
    ...issuesCheckUserCanBeAssignedToIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Checks if a user has permission to be assigned to a specific issue.
 *
 * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useIssuesCheckUserCanBeAssignedToIssue = <TData = undefined>(
  variables: IssuesCheckUserCanBeAssignedToIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      IssuesCheckUserCanBeAssignedToIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    IssuesCheckUserCanBeAssignedToIssueError,
    TData
  >({
    ...issuesCheckUserCanBeAssignedToIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesListCommentsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesListCommentsQueryParams = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesListCommentsResponse = Schemas.IssueComment[];

export type IssuesListCommentsVariables = {
  pathParams: IssuesListCommentsPathParams;
  queryParams?: IssuesListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListComments = (
  variables: IssuesListCommentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListCommentsResponse,
    IssuesListCommentsError,
    undefined,
    {},
    IssuesListCommentsQueryParams,
    IssuesListCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Issue Comments are ordered by ascending ID.
 */
export const issuesListCommentsQuery = (
  variables: IssuesListCommentsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListCommentsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    operationId: "issuesListComments",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListComments(variables, signal),
});

/**
 * Issue Comments are ordered by ascending ID.
 */
export const useSuspenseIssuesListComments = <
  TData = IssuesListCommentsResponse,
>(
  variables: IssuesListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsResponse,
      IssuesListCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListCommentsResponse,
    IssuesListCommentsError,
    TData
  >({
    ...issuesListCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Issue Comments are ordered by ascending ID.
 */
export const useIssuesListComments = <TData = IssuesListCommentsResponse>(
  variables: IssuesListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsResponse,
      IssuesListCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsResponse,
    IssuesListCommentsError,
    TData
  >({
    ...issuesListCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesCreateCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesCreateCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateCommentRequestBody = {
  /**
   * The contents of the comment.
   */
  body: string;
};

export type IssuesCreateCommentVariables = {
  body: IssuesCreateCommentRequestBody;
  pathParams: IssuesCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchIssuesCreateComment = (
  variables: IssuesCreateCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesCreateCommentError,
    IssuesCreateCommentRequestBody,
    {},
    {},
    IssuesCreateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useIssuesCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      IssuesCreateCommentError,
      IssuesCreateCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    IssuesCreateCommentError,
    IssuesCreateCommentVariables
  >({
    mutationFn: (variables: IssuesCreateCommentVariables) =>
      fetchIssuesCreateComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListEventsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesListEventsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsError = Fetcher.ErrorWrapper<{
  status: 410;
  payload: Responses.Gone;
}>;

export type IssuesListEventsResponse = Schemas.IssueEventForIssue[];

export type IssuesListEventsVariables = {
  pathParams: IssuesListEventsPathParams;
  queryParams?: IssuesListEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEvents = (
  variables: IssuesListEventsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListEventsResponse,
    IssuesListEventsError,
    undefined,
    {},
    IssuesListEventsQueryParams,
    IssuesListEventsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/events",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListEventsQuery = (
  variables: IssuesListEventsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListEventsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/events",
    operationId: "issuesListEvents",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListEvents(variables, signal),
});

export const useSuspenseIssuesListEvents = <TData = IssuesListEventsResponse>(
  variables: IssuesListEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsResponse,
      IssuesListEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListEventsResponse,
    IssuesListEventsError,
    TData
  >({
    ...issuesListEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListEvents = <TData = IssuesListEventsResponse>(
  variables: IssuesListEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsResponse,
      IssuesListEventsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsResponse,
    IssuesListEventsError,
    TData
  >({
    ...issuesListEventsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesRemoveAllLabelsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesRemoveAllLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesRemoveAllLabelsVariables = {
  pathParams: IssuesRemoveAllLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesRemoveAllLabels = (
  variables: IssuesRemoveAllLabelsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesRemoveAllLabelsError,
    undefined,
    {},
    {},
    IssuesRemoveAllLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "delete",
    ...variables,
    signal,
  });

export const useIssuesRemoveAllLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesRemoveAllLabelsError,
      IssuesRemoveAllLabelsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesRemoveAllLabelsError,
    IssuesRemoveAllLabelsVariables
  >({
    mutationFn: (variables: IssuesRemoveAllLabelsVariables) =>
      fetchIssuesRemoveAllLabels({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListLabelsOnIssuePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesListLabelsOnIssueQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsOnIssueError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesListLabelsOnIssueResponse = Schemas.Label[];

export type IssuesListLabelsOnIssueVariables = {
  pathParams: IssuesListLabelsOnIssuePathParams;
  queryParams?: IssuesListLabelsOnIssueQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsOnIssue = (
  variables: IssuesListLabelsOnIssueVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListLabelsOnIssueResponse,
    IssuesListLabelsOnIssueError,
    undefined,
    {},
    IssuesListLabelsOnIssueQueryParams,
    IssuesListLabelsOnIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListLabelsOnIssueQuery = (
  variables: IssuesListLabelsOnIssueVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListLabelsOnIssueResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    operationId: "issuesListLabelsOnIssue",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListLabelsOnIssue(variables, signal),
});

export const useSuspenseIssuesListLabelsOnIssue = <
  TData = IssuesListLabelsOnIssueResponse,
>(
  variables: IssuesListLabelsOnIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsOnIssueResponse,
      IssuesListLabelsOnIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListLabelsOnIssueResponse,
    IssuesListLabelsOnIssueError,
    TData
  >({
    ...issuesListLabelsOnIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListLabelsOnIssue = <
  TData = IssuesListLabelsOnIssueResponse,
>(
  variables: IssuesListLabelsOnIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsOnIssueResponse,
      IssuesListLabelsOnIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsOnIssueResponse,
    IssuesListLabelsOnIssueError,
    TData
  >({
    ...issuesListLabelsOnIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesAddLabelsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesAddLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesAddLabelsResponse = Schemas.Label[];

export type IssuesAddLabelsVariables = {
  body?:
    | {
        /**
         * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
         *
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /**
         * @minItems 1
         */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string;
  pathParams: IssuesAddLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesAddLabels = (
  variables: IssuesAddLabelsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesAddLabelsResponse,
    IssuesAddLabelsError,
    | {
        /**
         * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
         *
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /**
         * @minItems 1
         */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
    {},
    {},
    IssuesAddLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "post",
    ...variables,
    signal,
  });

export const useIssuesAddLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesAddLabelsResponse,
      IssuesAddLabelsError,
      IssuesAddLabelsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesAddLabelsResponse,
    IssuesAddLabelsError,
    IssuesAddLabelsVariables
  >({
    mutationFn: (variables: IssuesAddLabelsVariables) =>
      fetchIssuesAddLabels({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesSetLabelsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesSetLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesSetLabelsResponse = Schemas.Label[];

export type IssuesSetLabelsVariables = {
  body?:
    | {
        /**
         * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
         *
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /**
         * @minItems 1
         */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string;
  pathParams: IssuesSetLabelsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const fetchIssuesSetLabels = (
  variables: IssuesSetLabelsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesSetLabelsResponse,
    IssuesSetLabelsError,
    | {
        /**
         * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
         *
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /**
         * @minItems 1
         */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
    {},
    {},
    IssuesSetLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const useIssuesSetLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesSetLabelsResponse,
      IssuesSetLabelsError,
      IssuesSetLabelsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesSetLabelsResponse,
    IssuesSetLabelsError,
    IssuesSetLabelsVariables
  >({
    mutationFn: (variables: IssuesSetLabelsVariables) =>
      fetchIssuesSetLabels({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesRemoveLabelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
  name: string;
};

export type IssuesRemoveLabelError = Fetcher.ErrorWrapper<
  | {
      status: 301;
      payload: Responses.MovedPermanently;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesRemoveLabelResponse = Schemas.Label[];

export type IssuesRemoveLabelVariables = {
  pathParams: IssuesRemoveLabelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const fetchIssuesRemoveLabel = (
  variables: IssuesRemoveLabelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesRemoveLabelResponse,
    IssuesRemoveLabelError,
    undefined,
    {},
    {},
    IssuesRemoveLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const useIssuesRemoveLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesRemoveLabelResponse,
      IssuesRemoveLabelError,
      IssuesRemoveLabelVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesRemoveLabelResponse,
    IssuesRemoveLabelError,
    IssuesRemoveLabelVariables
  >({
    mutationFn: (variables: IssuesRemoveLabelVariables) =>
      fetchIssuesRemoveLabel({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesUnlockPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesUnlockError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type IssuesUnlockVariables = {
  pathParams: IssuesUnlockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can unlock an issue's conversation.
 */
export const fetchIssuesUnlock = (
  variables: IssuesUnlockVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesUnlockError,
    undefined,
    {},
    {},
    IssuesUnlockPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Users with push access can unlock an issue's conversation.
 */
export const useIssuesUnlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesUnlockError,
      IssuesUnlockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesUnlockError,
    IssuesUnlockVariables
  >({
    mutationFn: (variables: IssuesUnlockVariables) =>
      fetchIssuesUnlock({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesLockPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesLockError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesLockVariables = {
  body?: {
    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     *  * `off-topic`
     *  * `too heated`
     *  * `resolved`
     *  * `spam`
     */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  } | null;
  pathParams: IssuesLockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchIssuesLock = (
  variables: IssuesLockVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesLockError,
    {
      /**
       * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
       *  * `off-topic`
       *  * `too heated`
       *  * `resolved`
       *  * `spam`
       */
      lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
    } | null,
    {},
    {},
    IssuesLockPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useIssuesLock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesLockError,
      IssuesLockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesLockError,
    IssuesLockVariables
  >({
    mutationFn: (variables: IssuesLockVariables) =>
      fetchIssuesLock({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsListForIssuePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type ReactionsListForIssueQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type ReactionsListForIssueResponse = Schemas.Reaction[];

export type ReactionsListForIssueVariables = {
  pathParams: ReactionsListForIssuePathParams;
  queryParams?: ReactionsListForIssueQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const fetchReactionsListForIssue = (
  variables: ReactionsListForIssueVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForIssueResponse,
    ReactionsListForIssueError,
    undefined,
    {},
    ReactionsListForIssueQueryParams,
    ReactionsListForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const reactionsListForIssueQuery = (
  variables: ReactionsListForIssueVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForIssueResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    operationId: "reactionsListForIssue",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForIssue(variables, signal),
});

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const useSuspenseReactionsListForIssue = <
  TData = ReactionsListForIssueResponse,
>(
  variables: ReactionsListForIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueResponse,
      ReactionsListForIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForIssueResponse,
    ReactionsListForIssueError,
    TData
  >({
    ...reactionsListForIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const useReactionsListForIssue = <TData = ReactionsListForIssueResponse>(
  variables: ReactionsListForIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueResponse,
      ReactionsListForIssueError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueResponse,
    ReactionsListForIssueError,
    TData
  >({
    ...reactionsListForIssueQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForIssuePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type ReactionsCreateForIssueError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReactionsCreateForIssueRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueVariables = {
  body: ReactionsCreateForIssueRequestBody;
  pathParams: ReactionsCreateForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
 */
export const fetchReactionsCreateForIssue = (
  variables: ReactionsCreateForIssueVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueError,
    ReactionsCreateForIssueRequestBody,
    {},
    {},
    ReactionsCreateForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
 */
export const useReactionsCreateForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForIssueError,
      ReactionsCreateForIssueVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForIssueError,
    ReactionsCreateForIssueVariables
  >({
    mutationFn: (variables: ReactionsCreateForIssueVariables) =>
      fetchReactionsCreateForIssue({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsDeleteForIssuePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForIssueError = Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForIssueVariables = {
  pathParams: ReactionsDeleteForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const fetchReactionsDeleteForIssue = (
  variables: ReactionsDeleteForIssueVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForIssueError,
    undefined,
    {},
    {},
    ReactionsDeleteForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const useReactionsDeleteForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForIssueError,
      ReactionsDeleteForIssueVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForIssueError,
    ReactionsDeleteForIssueVariables
  >({
    mutationFn: (variables: ReactionsDeleteForIssueVariables) =>
      fetchReactionsDeleteForIssue({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListEventsForTimelinePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the issue.
   */
  issueNumber: number;
};

export type IssuesListEventsForTimelineQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForTimelineError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
>;

export type IssuesListEventsForTimelineResponse = Schemas.TimelineIssueEvents[];

export type IssuesListEventsForTimelineVariables = {
  pathParams: IssuesListEventsForTimelinePathParams;
  queryParams?: IssuesListEventsForTimelineQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForTimeline = (
  variables: IssuesListEventsForTimelineVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListEventsForTimelineResponse,
    IssuesListEventsForTimelineError,
    undefined,
    {},
    IssuesListEventsForTimelineQueryParams,
    IssuesListEventsForTimelinePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/timeline",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListEventsForTimelineQuery = (
  variables: IssuesListEventsForTimelineVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListEventsForTimelineResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/issues/{issueNumber}/timeline",
    operationId: "issuesListEventsForTimeline",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListEventsForTimeline(variables, signal),
});

export const useSuspenseIssuesListEventsForTimeline = <
  TData = IssuesListEventsForTimelineResponse,
>(
  variables: IssuesListEventsForTimelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForTimelineResponse,
      IssuesListEventsForTimelineError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListEventsForTimelineResponse,
    IssuesListEventsForTimelineError,
    TData
  >({
    ...issuesListEventsForTimelineQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListEventsForTimeline = <
  TData = IssuesListEventsForTimelineResponse,
>(
  variables: IssuesListEventsForTimelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForTimelineResponse,
      IssuesListEventsForTimelineError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForTimelineResponse,
    IssuesListEventsForTimelineError,
    TData
  >({
    ...issuesListEventsForTimelineQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListDeployKeysPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListDeployKeysQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeployKeysError = Fetcher.ErrorWrapper<undefined>;

export type ReposListDeployKeysResponse = Schemas.DeployKey[];

export type ReposListDeployKeysVariables = {
  pathParams: ReposListDeployKeysPathParams;
  queryParams?: ReposListDeployKeysQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListDeployKeys = (
  variables: ReposListDeployKeysVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListDeployKeysResponse,
    ReposListDeployKeysError,
    undefined,
    {},
    ReposListDeployKeysQueryParams,
    ReposListDeployKeysPathParams
  >({ url: "/repos/{owner}/{repo}/keys", method: "get", ...variables, signal });

export const reposListDeployKeysQuery = (
  variables: ReposListDeployKeysVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListDeployKeysResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/keys",
    operationId: "reposListDeployKeys",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListDeployKeys(variables, signal),
});

export const useSuspenseReposListDeployKeys = <
  TData = ReposListDeployKeysResponse,
>(
  variables: ReposListDeployKeysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeployKeysResponse,
      ReposListDeployKeysError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListDeployKeysResponse,
    ReposListDeployKeysError,
    TData
  >({
    ...reposListDeployKeysQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListDeployKeys = <TData = ReposListDeployKeysResponse>(
  variables: ReposListDeployKeysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeployKeysResponse,
      ReposListDeployKeysError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeployKeysResponse,
    ReposListDeployKeysError,
    TData
  >({
    ...reposListDeployKeysQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateDeployKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateDeployKeyError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReposCreateDeployKeyRequestBody = {
  /**
   * The contents of the key.
   */
  key: string;
  /**
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
   *
   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
   */
  read_only?: boolean;
  /**
   * A name for the key.
   */
  title?: string;
};

export type ReposCreateDeployKeyVariables = {
  body: ReposCreateDeployKeyRequestBody;
  pathParams: ReposCreateDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can create a read-only deploy key.
 */
export const fetchReposCreateDeployKey = (
  variables: ReposCreateDeployKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeployKey,
    ReposCreateDeployKeyError,
    ReposCreateDeployKeyRequestBody,
    {},
    {},
    ReposCreateDeployKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/keys",
    method: "post",
    ...variables,
    signal,
  });

/**
 * You can create a read-only deploy key.
 */
export const useReposCreateDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeployKey,
      ReposCreateDeployKeyError,
      ReposCreateDeployKeyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeployKey,
    ReposCreateDeployKeyError,
    ReposCreateDeployKeyVariables
  >({
    mutationFn: (variables: ReposCreateDeployKeyVariables) =>
      fetchReposCreateDeployKey({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteDeployKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the key.
   */
  keyId: number;
};

export type ReposDeleteDeployKeyError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteDeployKeyVariables = {
  pathParams: ReposDeleteDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const fetchReposDeleteDeployKey = (
  variables: ReposDeleteDeployKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteDeployKeyError,
    undefined,
    {},
    {},
    ReposDeleteDeployKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/keys/{keyId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const useReposDeleteDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteDeployKeyError,
      ReposDeleteDeployKeyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteDeployKeyError,
    ReposDeleteDeployKeyVariables
  >({
    mutationFn: (variables: ReposDeleteDeployKeyVariables) =>
      fetchReposDeleteDeployKey({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetDeployKeyPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the key.
   */
  keyId: number;
};

export type ReposGetDeployKeyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetDeployKeyVariables = {
  pathParams: ReposGetDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployKey = (
  variables: ReposGetDeployKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.DeployKey,
    ReposGetDeployKeyError,
    undefined,
    {},
    {},
    ReposGetDeployKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/keys/{keyId}",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetDeployKeyQuery = (
  variables: ReposGetDeployKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.DeployKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/keys/{keyId}",
    operationId: "reposGetDeployKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetDeployKey(variables, signal),
});

export const useSuspenseReposGetDeployKey = <TData = Schemas.DeployKey>(
  variables: ReposGetDeployKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployKey,
      ReposGetDeployKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.DeployKey,
    ReposGetDeployKeyError,
    TData
  >({
    ...reposGetDeployKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetDeployKey = <TData = Schemas.DeployKey>(
  variables: ReposGetDeployKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployKey,
      ReposGetDeployKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.DeployKey, ReposGetDeployKeyError, TData>({
    ...reposGetDeployKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesListLabelsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListLabelsForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForRepoError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListLabelsForRepoResponse = Schemas.Label[];

export type IssuesListLabelsForRepoVariables = {
  pathParams: IssuesListLabelsForRepoPathParams;
  queryParams?: IssuesListLabelsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForRepo = (
  variables: IssuesListLabelsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListLabelsForRepoResponse,
    IssuesListLabelsForRepoError,
    undefined,
    {},
    IssuesListLabelsForRepoQueryParams,
    IssuesListLabelsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/labels",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListLabelsForRepoQuery = (
  variables: IssuesListLabelsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListLabelsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/labels",
    operationId: "issuesListLabelsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListLabelsForRepo(variables, signal),
});

export const useSuspenseIssuesListLabelsForRepo = <
  TData = IssuesListLabelsForRepoResponse,
>(
  variables: IssuesListLabelsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForRepoResponse,
      IssuesListLabelsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListLabelsForRepoResponse,
    IssuesListLabelsForRepoError,
    TData
  >({
    ...issuesListLabelsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListLabelsForRepo = <
  TData = IssuesListLabelsForRepoResponse,
>(
  variables: IssuesListLabelsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForRepoResponse,
      IssuesListLabelsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForRepoResponse,
    IssuesListLabelsForRepoError,
    TData
  >({
    ...issuesListLabelsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesCreateLabelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesCreateLabelError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateLabelRequestBody = {
  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /**
   * A short description of the label. Must be 100 characters or fewer.
   */
  description?: string;
  /**
   * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
   */
  name: string;
};

export type IssuesCreateLabelVariables = {
  body: IssuesCreateLabelRequestBody;
  pathParams: IssuesCreateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateLabel = (
  variables: IssuesCreateLabelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Label,
    IssuesCreateLabelError,
    IssuesCreateLabelRequestBody,
    {},
    {},
    IssuesCreateLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels",
    method: "post",
    ...variables,
    signal,
  });

export const useIssuesCreateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      IssuesCreateLabelError,
      IssuesCreateLabelVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    IssuesCreateLabelError,
    IssuesCreateLabelVariables
  >({
    mutationFn: (variables: IssuesCreateLabelVariables) =>
      fetchIssuesCreateLabel({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesDeleteLabelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  name: string;
};

export type IssuesDeleteLabelError = Fetcher.ErrorWrapper<undefined>;

export type IssuesDeleteLabelVariables = {
  pathParams: IssuesDeleteLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteLabel = (
  variables: IssuesDeleteLabelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesDeleteLabelError,
    undefined,
    {},
    {},
    IssuesDeleteLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "delete",
    ...variables,
    signal,
  });

export const useIssuesDeleteLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteLabelError,
      IssuesDeleteLabelVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteLabelError,
    IssuesDeleteLabelVariables
  >({
    mutationFn: (variables: IssuesDeleteLabelVariables) =>
      fetchIssuesDeleteLabel({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesGetLabelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  name: string;
};

export type IssuesGetLabelError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetLabelVariables = {
  pathParams: IssuesGetLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetLabel = (
  variables: IssuesGetLabelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Label,
    IssuesGetLabelError,
    undefined,
    {},
    {},
    IssuesGetLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "get",
    ...variables,
    signal,
  });

export const issuesGetLabelQuery = (
  variables: IssuesGetLabelVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Label>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/labels/{name}",
    operationId: "issuesGetLabel",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesGetLabel(variables, signal),
});

export const useSuspenseIssuesGetLabel = <TData = Schemas.Label>(
  variables: IssuesGetLabelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Label, IssuesGetLabelError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Label, IssuesGetLabelError, TData>(
    {
      ...issuesGetLabelQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export const useIssuesGetLabel = <TData = Schemas.Label>(
  variables: IssuesGetLabelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Label, IssuesGetLabelError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Label, IssuesGetLabelError, TData>({
    ...issuesGetLabelQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesUpdateLabelPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  name: string;
};

export type IssuesUpdateLabelError = Fetcher.ErrorWrapper<undefined>;

export type IssuesUpdateLabelRequestBody = {
  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /**
   * A short description of the label. Must be 100 characters or fewer.
   */
  description?: string;
  /**
   * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
   */
  new_name?: string;
};

export type IssuesUpdateLabelVariables = {
  body?: IssuesUpdateLabelRequestBody;
  pathParams: IssuesUpdateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateLabel = (
  variables: IssuesUpdateLabelVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Label,
    IssuesUpdateLabelError,
    IssuesUpdateLabelRequestBody,
    {},
    {},
    IssuesUpdateLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "patch",
    ...variables,
    signal,
  });

export const useIssuesUpdateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      IssuesUpdateLabelError,
      IssuesUpdateLabelVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    IssuesUpdateLabelError,
    IssuesUpdateLabelVariables
  >({
    mutationFn: (variables: IssuesUpdateLabelVariables) =>
      fetchIssuesUpdateLabel({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListLanguagesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListLanguagesError = Fetcher.ErrorWrapper<undefined>;

export type ReposListLanguagesVariables = {
  pathParams: ReposListLanguagesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const fetchReposListLanguages = (
  variables: ReposListLanguagesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Language,
    ReposListLanguagesError,
    undefined,
    {},
    {},
    ReposListLanguagesPathParams
  >({
    url: "/repos/{owner}/{repo}/languages",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const reposListLanguagesQuery = (
  variables: ReposListLanguagesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Language>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/languages",
    operationId: "reposListLanguages",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListLanguages(variables, signal),
});

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const useSuspenseReposListLanguages = <TData = Schemas.Language>(
  variables: ReposListLanguagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Language,
      ReposListLanguagesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Language,
    ReposListLanguagesError,
    TData
  >({
    ...reposListLanguagesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const useReposListLanguages = <TData = Schemas.Language>(
  variables: ReposListLanguagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Language,
      ReposListLanguagesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Language, ReposListLanguagesError, TData>({
    ...reposListLanguagesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDisableLfsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposDisableLfsForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ReposDisableLfsForRepoVariables = {
  pathParams: ReposDisableLfsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
 */
export const fetchReposDisableLfsForRepo = (
  variables: ReposDisableLfsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDisableLfsForRepoError,
    undefined,
    {},
    {},
    ReposDisableLfsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/lfs",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Disables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
 */
export const useReposDisableLfsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDisableLfsForRepoError,
      ReposDisableLfsForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDisableLfsForRepoError,
    ReposDisableLfsForRepoVariables
  >({
    mutationFn: (variables: ReposDisableLfsForRepoVariables) =>
      fetchReposDisableLfsForRepo({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposEnableLfsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposEnableLfsForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ReposEnableLfsForRepoVariables = {
  pathParams: ReposEnableLfsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
 */
export const fetchReposEnableLfsForRepo = (
  variables: ReposEnableLfsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    ReposEnableLfsForRepoError,
    undefined,
    {},
    {},
    ReposEnableLfsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/lfs", method: "put", ...variables, signal });

/**
 * Enables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
 */
export const useReposEnableLfsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      ReposEnableLfsForRepoError,
      ReposEnableLfsForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    ReposEnableLfsForRepoError,
    ReposEnableLfsForRepoVariables
  >({
    mutationFn: (variables: ReposEnableLfsForRepoVariables) =>
      fetchReposEnableLfsForRepo({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LicensesGetForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type LicensesGetForRepoError = Fetcher.ErrorWrapper<undefined>;

export type LicensesGetForRepoVariables = {
  pathParams: LicensesGetForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const fetchLicensesGetForRepo = (
  variables: LicensesGetForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.LicenseContent,
    LicensesGetForRepoError,
    undefined,
    {},
    {},
    LicensesGetForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/license",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const licensesGetForRepoQuery = (
  variables: LicensesGetForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.LicenseContent>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/license",
    operationId: "licensesGetForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchLicensesGetForRepo(variables, signal),
});

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const useSuspenseLicensesGetForRepo = <TData = Schemas.LicenseContent>(
  variables: LicensesGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LicenseContent,
      LicensesGetForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.LicenseContent,
    LicensesGetForRepoError,
    TData
  >({
    ...licensesGetForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const useLicensesGetForRepo = <TData = Schemas.LicenseContent>(
  variables: LicensesGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LicenseContent,
      LicensesGetForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.LicenseContent,
    LicensesGetForRepoError,
    TData
  >({
    ...licensesGetForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposMergeUpstreamPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposMergeUpstreamError = Fetcher.ErrorWrapper<undefined>;

export type ReposMergeUpstreamRequestBody = {
  /**
   * The name of the branch which should be updated to match upstream.
   */
  branch: string;
};

export type ReposMergeUpstreamVariables = {
  body: ReposMergeUpstreamRequestBody;
  pathParams: ReposMergeUpstreamPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
 */
export const fetchReposMergeUpstream = (
  variables: ReposMergeUpstreamVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.MergedUpstream,
    ReposMergeUpstreamError,
    ReposMergeUpstreamRequestBody,
    {},
    {},
    ReposMergeUpstreamPathParams
  >({
    url: "/repos/{owner}/{repo}/merge-upstream",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
 */
export const useReposMergeUpstream = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MergedUpstream,
      ReposMergeUpstreamError,
      ReposMergeUpstreamVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.MergedUpstream,
    ReposMergeUpstreamError,
    ReposMergeUpstreamVariables
  >({
    mutationFn: (variables: ReposMergeUpstreamVariables) =>
      fetchReposMergeUpstream({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposMergePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposMergeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposMergeRequestBody = {
  /**
   * The name of the base branch that the head will be merged into.
   */
  base: string;
  /**
   * Commit message to use for the merge commit. If omitted, a default message will be used.
   */
  commit_message?: string;
  /**
   * The head to merge. This can be a branch name or a commit SHA1.
   */
  head: string;
};

export type ReposMergeVariables = {
  body: ReposMergeRequestBody;
  pathParams: ReposMergePathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposMerge = (
  variables: ReposMergeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Commit,
    ReposMergeError,
    ReposMergeRequestBody,
    {},
    {},
    ReposMergePathParams
  >({
    url: "/repos/{owner}/{repo}/merges",
    method: "post",
    ...variables,
    signal,
  });

export const useReposMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Commit,
      ReposMergeError,
      ReposMergeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Commit,
    ReposMergeError,
    ReposMergeVariables
  >({
    mutationFn: (variables: ReposMergeVariables) =>
      fetchReposMerge({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListMilestonesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesListMilestonesQueryParams = {
  /**
   * The state of the milestone. Either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * What to sort results by. Either `due_on` or `completeness`.
   *
   * @default due_on
   */
  sort?: "due_on" | "completeness";
  /**
   * The direction of the sort. Either `asc` or `desc`.
   *
   * @default asc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListMilestonesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesListMilestonesResponse = Schemas.Milestone[];

export type IssuesListMilestonesVariables = {
  pathParams: IssuesListMilestonesPathParams;
  queryParams?: IssuesListMilestonesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListMilestones = (
  variables: IssuesListMilestonesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListMilestonesResponse,
    IssuesListMilestonesError,
    undefined,
    {},
    IssuesListMilestonesQueryParams,
    IssuesListMilestonesPathParams
  >({
    url: "/repos/{owner}/{repo}/milestones",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListMilestonesQuery = (
  variables: IssuesListMilestonesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListMilestonesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/milestones",
    operationId: "issuesListMilestones",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListMilestones(variables, signal),
});

export const useSuspenseIssuesListMilestones = <
  TData = IssuesListMilestonesResponse,
>(
  variables: IssuesListMilestonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListMilestonesResponse,
      IssuesListMilestonesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListMilestonesResponse,
    IssuesListMilestonesError,
    TData
  >({
    ...issuesListMilestonesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListMilestones = <TData = IssuesListMilestonesResponse>(
  variables: IssuesListMilestonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListMilestonesResponse,
      IssuesListMilestonesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListMilestonesResponse,
    IssuesListMilestonesError,
    TData
  >({
    ...issuesListMilestonesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type IssuesCreateMilestonePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type IssuesCreateMilestoneError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type IssuesCreateMilestoneRequestBody = {
  /**
   * A description of the milestone.
   */
  description?: string;
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  due_on?: string;
  /**
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
};

export type IssuesCreateMilestoneVariables = {
  body: IssuesCreateMilestoneRequestBody;
  pathParams: IssuesCreateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateMilestone = (
  variables: IssuesCreateMilestoneVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesCreateMilestoneError,
    IssuesCreateMilestoneRequestBody,
    {},
    {},
    IssuesCreateMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones",
    method: "post",
    ...variables,
    signal,
  });

export const useIssuesCreateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      IssuesCreateMilestoneError,
      IssuesCreateMilestoneVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    IssuesCreateMilestoneError,
    IssuesCreateMilestoneVariables
  >({
    mutationFn: (variables: IssuesCreateMilestoneVariables) =>
      fetchIssuesCreateMilestone({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesDeleteMilestonePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the milestone.
   */
  milestoneNumber: number;
};

export type IssuesDeleteMilestoneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesDeleteMilestoneVariables = {
  pathParams: IssuesDeleteMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteMilestone = (
  variables: IssuesDeleteMilestoneVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    IssuesDeleteMilestoneError,
    undefined,
    {},
    {},
    IssuesDeleteMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "delete",
    ...variables,
    signal,
  });

export const useIssuesDeleteMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      IssuesDeleteMilestoneError,
      IssuesDeleteMilestoneVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    IssuesDeleteMilestoneError,
    IssuesDeleteMilestoneVariables
  >({
    mutationFn: (variables: IssuesDeleteMilestoneVariables) =>
      fetchIssuesDeleteMilestone({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesGetMilestonePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the milestone.
   */
  milestoneNumber: number;
};

export type IssuesGetMilestoneError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type IssuesGetMilestoneVariables = {
  pathParams: IssuesGetMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetMilestone = (
  variables: IssuesGetMilestoneVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesGetMilestoneError,
    undefined,
    {},
    {},
    IssuesGetMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "get",
    ...variables,
    signal,
  });

export const issuesGetMilestoneQuery = (
  variables: IssuesGetMilestoneVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Milestone>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    operationId: "issuesGetMilestone",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesGetMilestone(variables, signal),
});

export const useSuspenseIssuesGetMilestone = <TData = Schemas.Milestone>(
  variables: IssuesGetMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Milestone,
      IssuesGetMilestoneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Milestone,
    IssuesGetMilestoneError,
    TData
  >({
    ...issuesGetMilestoneQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesGetMilestone = <TData = Schemas.Milestone>(
  variables: IssuesGetMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Milestone,
      IssuesGetMilestoneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Milestone, IssuesGetMilestoneError, TData>(
    {
      ...issuesGetMilestoneQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export type IssuesUpdateMilestonePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the milestone.
   */
  milestoneNumber: number;
};

export type IssuesUpdateMilestoneError = Fetcher.ErrorWrapper<undefined>;

export type IssuesUpdateMilestoneRequestBody = {
  /**
   * A description of the milestone.
   */
  description?: string;
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  due_on?: string;
  /**
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title?: string;
};

export type IssuesUpdateMilestoneVariables = {
  body?: IssuesUpdateMilestoneRequestBody;
  pathParams: IssuesUpdateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateMilestone = (
  variables: IssuesUpdateMilestoneVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesUpdateMilestoneError,
    IssuesUpdateMilestoneRequestBody,
    {},
    {},
    IssuesUpdateMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "patch",
    ...variables,
    signal,
  });

export const useIssuesUpdateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      IssuesUpdateMilestoneError,
      IssuesUpdateMilestoneVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    IssuesUpdateMilestoneError,
    IssuesUpdateMilestoneVariables
  >({
    mutationFn: (variables: IssuesUpdateMilestoneVariables) =>
      fetchIssuesUpdateMilestone({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type IssuesListLabelsForMilestonePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the milestone.
   */
  milestoneNumber: number;
};

export type IssuesListLabelsForMilestoneQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForMilestoneError = Fetcher.ErrorWrapper<undefined>;

export type IssuesListLabelsForMilestoneResponse = Schemas.Label[];

export type IssuesListLabelsForMilestoneVariables = {
  pathParams: IssuesListLabelsForMilestonePathParams;
  queryParams?: IssuesListLabelsForMilestoneQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForMilestone = (
  variables: IssuesListLabelsForMilestoneVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListLabelsForMilestoneResponse,
    IssuesListLabelsForMilestoneError,
    undefined,
    {},
    IssuesListLabelsForMilestoneQueryParams,
    IssuesListLabelsForMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels",
    method: "get",
    ...variables,
    signal,
  });

export const issuesListLabelsForMilestoneQuery = (
  variables: IssuesListLabelsForMilestoneVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListLabelsForMilestoneResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels",
    operationId: "issuesListLabelsForMilestone",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListLabelsForMilestone(variables, signal),
});

export const useSuspenseIssuesListLabelsForMilestone = <
  TData = IssuesListLabelsForMilestoneResponse,
>(
  variables: IssuesListLabelsForMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForMilestoneResponse,
      IssuesListLabelsForMilestoneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListLabelsForMilestoneResponse,
    IssuesListLabelsForMilestoneError,
    TData
  >({
    ...issuesListLabelsForMilestoneQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useIssuesListLabelsForMilestone = <
  TData = IssuesListLabelsForMilestoneResponse,
>(
  variables: IssuesListLabelsForMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForMilestoneResponse,
      IssuesListLabelsForMilestoneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForMilestoneResponse,
    IssuesListLabelsForMilestoneError,
    TData
  >({
    ...issuesListLabelsForMilestoneQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListRepoNotificationsForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityListRepoNotificationsForAuthenticatedUserQueryParams = {
  /**
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  before?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoNotificationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListRepoNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListRepoNotificationsForAuthenticatedUserVariables = {
  pathParams: ActivityListRepoNotificationsForAuthenticatedUserPathParams;
  queryParams?: ActivityListRepoNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all notifications for the current user in the specified repository.
 */
export const fetchActivityListRepoNotificationsForAuthenticatedUser = (
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    ActivityListRepoNotificationsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListRepoNotificationsForAuthenticatedUserQueryParams,
    ActivityListRepoNotificationsForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all notifications for the current user in the specified repository.
 */
export const activityListRepoNotificationsForAuthenticatedUserQuery = (
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListRepoNotificationsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/notifications",
    operationId: "activityListRepoNotificationsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListRepoNotificationsForAuthenticatedUser(variables, signal),
});

/**
 * Lists all notifications for the current user in the specified repository.
 */
export const useSuspenseActivityListRepoNotificationsForAuthenticatedUser = <
  TData = ActivityListRepoNotificationsForAuthenticatedUserResponse,
>(
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoNotificationsForAuthenticatedUserResponse,
      ActivityListRepoNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    ActivityListRepoNotificationsForAuthenticatedUserError,
    TData
  >({
    ...activityListRepoNotificationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all notifications for the current user in the specified repository.
 */
export const useActivityListRepoNotificationsForAuthenticatedUser = <
  TData = ActivityListRepoNotificationsForAuthenticatedUserResponse,
>(
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoNotificationsForAuthenticatedUserResponse,
      ActivityListRepoNotificationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    ActivityListRepoNotificationsForAuthenticatedUserError,
    TData
  >({
    ...activityListRepoNotificationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityMarkRepoNotificationsAsReadPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityMarkRepoNotificationsAsReadError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityMarkRepoNotificationsAsReadResponse = {
  message?: string;
  url?: string;
};

export type ActivityMarkRepoNotificationsAsReadRequestBody = {
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   *
   * @format date-time
   */
  last_read_at?: string;
};

export type ActivityMarkRepoNotificationsAsReadVariables = {
  body?: ActivityMarkRepoNotificationsAsReadRequestBody;
  pathParams: ActivityMarkRepoNotificationsAsReadPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkRepoNotificationsAsRead = (
  variables: ActivityMarkRepoNotificationsAsReadVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityMarkRepoNotificationsAsReadResponse,
    ActivityMarkRepoNotificationsAsReadError,
    ActivityMarkRepoNotificationsAsReadRequestBody,
    {},
    {},
    ActivityMarkRepoNotificationsAsReadPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkRepoNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActivityMarkRepoNotificationsAsReadResponse,
      ActivityMarkRepoNotificationsAsReadError,
      ActivityMarkRepoNotificationsAsReadVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActivityMarkRepoNotificationsAsReadResponse,
    ActivityMarkRepoNotificationsAsReadError,
    ActivityMarkRepoNotificationsAsReadVariables
  >({
    mutationFn: (variables: ActivityMarkRepoNotificationsAsReadVariables) =>
      fetchActivityMarkRepoNotificationsAsRead({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposDeletePagesSitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposDeletePagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposDeletePagesSiteVariables = {
  pathParams: ReposDeletePagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const fetchReposDeletePagesSite = (
  variables: ReposDeletePagesSiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeletePagesSiteError,
    undefined,
    {},
    {},
    ReposDeletePagesSitePathParams
  >({
    url: "/repos/{owner}/{repo}/pages",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const useReposDeletePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeletePagesSiteError,
      ReposDeletePagesSiteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeletePagesSiteError,
    ReposDeletePagesSiteVariables
  >({
    mutationFn: (variables: ReposDeletePagesSiteVariables) =>
      fetchReposDeletePagesSite({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetPagesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetPagesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetPagesVariables = {
  pathParams: ReposGetPagesPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPages = (
  variables: ReposGetPagesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Page,
    ReposGetPagesError,
    undefined,
    {},
    {},
    ReposGetPagesPathParams
  >({
    url: "/repos/{owner}/{repo}/pages",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetPagesQuery = (
  variables: ReposGetPagesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Page>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pages",
    operationId: "reposGetPages",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetPages(variables, signal),
});

export const useSuspenseReposGetPages = <TData = Schemas.Page>(
  variables: ReposGetPagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Page, ReposGetPagesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.Page, ReposGetPagesError, TData>({
    ...reposGetPagesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetPages = <TData = Schemas.Page>(
  variables: ReposGetPagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Page, ReposGetPagesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Page, ReposGetPagesError, TData>({
    ...reposGetPagesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreatePagesSitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreatePagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreatePagesSiteVariables = {
  body?:
    | {
        /**
         * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
         */
        build_type?: "legacy" | "workflow";
        /**
         * The source branch and directory used to publish your Pages site.
         */
        source: {
          /**
           * The repository branch used to publish your site's source files.
           */
          branch: string;
          /**
           * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
           *
           * @default /
           */
          path?: "/" | "/docs";
        };
      }
    | {
        /**
         * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
         */
        build_type: "legacy" | "workflow";
        /**
         * The source branch and directory used to publish your Pages site.
         */
        source?: {
          /**
           * The repository branch used to publish your site's source files.
           */
          branch: string;
          /**
           * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
           *
           * @default /
           */
          path?: "/" | "/docs";
        };
      }
    | null;
  pathParams: ReposCreatePagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const fetchReposCreatePagesSite = (
  variables: ReposCreatePagesSiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Page,
    ReposCreatePagesSiteError,
    | {
        /**
         * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
         */
        build_type?: "legacy" | "workflow";
        /**
         * The source branch and directory used to publish your Pages site.
         */
        source: {
          /**
           * The repository branch used to publish your site's source files.
           */
          branch: string;
          /**
           * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
           *
           * @default /
           */
          path?: "/" | "/docs";
        };
      }
    | {
        /**
         * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
         */
        build_type: "legacy" | "workflow";
        /**
         * The source branch and directory used to publish your Pages site.
         */
        source?: {
          /**
           * The repository branch used to publish your site's source files.
           */
          branch: string;
          /**
           * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
           *
           * @default /
           */
          path?: "/" | "/docs";
        };
      }
    | null,
    {},
    {},
    ReposCreatePagesSitePathParams
  >({
    url: "/repos/{owner}/{repo}/pages",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const useReposCreatePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Page,
      ReposCreatePagesSiteError,
      ReposCreatePagesSiteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Page,
    ReposCreatePagesSiteError,
    ReposCreatePagesSiteVariables
  >({
    mutationFn: (variables: ReposCreatePagesSiteVariables) =>
      fetchReposCreatePagesSite({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposUpdateInformationAboutPagesSitePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposUpdateInformationAboutPagesSiteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposUpdateInformationAboutPagesSiteVariables = {
  body?:
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      };
  pathParams: ReposUpdateInformationAboutPagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const fetchReposUpdateInformationAboutPagesSite = (
  variables: ReposUpdateInformationAboutPagesSiteVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposUpdateInformationAboutPagesSiteError,
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      }
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: "legacy" | "workflow";
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced: boolean;
        source?:
          | ("gh-pages" | "master" | "master /docs")
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: "/" | "/docs";
            };
      },
    {},
    {},
    ReposUpdateInformationAboutPagesSitePathParams
  >({
    url: "/repos/{owner}/{repo}/pages",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
 */
export const useReposUpdateInformationAboutPagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposUpdateInformationAboutPagesSiteError,
      ReposUpdateInformationAboutPagesSiteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposUpdateInformationAboutPagesSiteError,
    ReposUpdateInformationAboutPagesSiteVariables
  >({
    mutationFn: (variables: ReposUpdateInformationAboutPagesSiteVariables) =>
      fetchReposUpdateInformationAboutPagesSite({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposListPagesBuildsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListPagesBuildsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPagesBuildsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListPagesBuildsResponse = Schemas.PageBuild[];

export type ReposListPagesBuildsVariables = {
  pathParams: ReposListPagesBuildsPathParams;
  queryParams?: ReposListPagesBuildsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListPagesBuilds = (
  variables: ReposListPagesBuildsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListPagesBuildsResponse,
    ReposListPagesBuildsError,
    undefined,
    {},
    ReposListPagesBuildsQueryParams,
    ReposListPagesBuildsPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds",
    method: "get",
    ...variables,
    signal,
  });

export const reposListPagesBuildsQuery = (
  variables: ReposListPagesBuildsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListPagesBuildsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pages/builds",
    operationId: "reposListPagesBuilds",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListPagesBuilds(variables, signal),
});

export const useSuspenseReposListPagesBuilds = <
  TData = ReposListPagesBuildsResponse,
>(
  variables: ReposListPagesBuildsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPagesBuildsResponse,
      ReposListPagesBuildsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListPagesBuildsResponse,
    ReposListPagesBuildsError,
    TData
  >({
    ...reposListPagesBuildsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListPagesBuilds = <TData = ReposListPagesBuildsResponse>(
  variables: ReposListPagesBuildsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPagesBuildsResponse,
      ReposListPagesBuildsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPagesBuildsResponse,
    ReposListPagesBuildsError,
    TData
  >({
    ...reposListPagesBuildsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposRequestPagesBuildPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposRequestPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposRequestPagesBuildVariables = {
  pathParams: ReposRequestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const fetchReposRequestPagesBuild = (
  variables: ReposRequestPagesBuildVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PageBuildStatus,
    ReposRequestPagesBuildError,
    undefined,
    {},
    {},
    ReposRequestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds",
    method: "post",
    ...variables,
    signal,
  });

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const useReposRequestPagesBuild = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PageBuildStatus,
      ReposRequestPagesBuildError,
      ReposRequestPagesBuildVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PageBuildStatus,
    ReposRequestPagesBuildError,
    ReposRequestPagesBuildVariables
  >({
    mutationFn: (variables: ReposRequestPagesBuildVariables) =>
      fetchReposRequestPagesBuild({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetLatestPagesBuildPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetLatestPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetLatestPagesBuildVariables = {
  pathParams: ReposGetLatestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetLatestPagesBuild = (
  variables: ReposGetLatestPagesBuildVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PageBuild,
    ReposGetLatestPagesBuildError,
    undefined,
    {},
    {},
    ReposGetLatestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/latest",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetLatestPagesBuildQuery = (
  variables: ReposGetLatestPagesBuildVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.PageBuild>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pages/builds/latest",
    operationId: "reposGetLatestPagesBuild",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetLatestPagesBuild(variables, signal),
});

export const useSuspenseReposGetLatestPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetLatestPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetLatestPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PageBuild,
    ReposGetLatestPagesBuildError,
    TData
  >({
    ...reposGetLatestPagesBuildQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetLatestPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetLatestPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetLatestPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PageBuild,
    ReposGetLatestPagesBuildError,
    TData
  >({
    ...reposGetLatestPagesBuildQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetPagesBuildPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  buildId: number;
};

export type ReposGetPagesBuildError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetPagesBuildVariables = {
  pathParams: ReposGetPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPagesBuild = (
  variables: ReposGetPagesBuildVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PageBuild,
    ReposGetPagesBuildError,
    undefined,
    {},
    {},
    ReposGetPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/{buildId}",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetPagesBuildQuery = (
  variables: ReposGetPagesBuildVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.PageBuild>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pages/builds/{buildId}",
    operationId: "reposGetPagesBuild",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetPagesBuild(variables, signal),
});

export const useSuspenseReposGetPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PageBuild,
    ReposGetPagesBuildError,
    TData
  >({
    ...reposGetPagesBuildQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetPagesBuild = <TData = Schemas.PageBuild>(
  variables: ReposGetPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PageBuild,
      ReposGetPagesBuildError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.PageBuild, ReposGetPagesBuildError, TData>(
    {
      ...reposGetPagesBuildQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export type ReposCreatePagesDeploymentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreatePagesDeploymentError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreatePagesDeploymentRequestBody = {
  /**
   * The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
   */
  artifact_url: string;
  /**
   * The target environment for this GitHub Pages deployment.
   *
   * @default github-pages
   */
  environment?: string;
  /**
   * The OIDC token issued by GitHub Actions certifying the origin of the deployment.
   */
  oidc_token: string;
  /**
   * A unique string that represents the version of the build for this deployment.
   *
   * @default GITHUB_SHA
   */
  pages_build_version: string;
};

export type ReposCreatePagesDeploymentVariables = {
  body: ReposCreatePagesDeploymentRequestBody;
  pathParams: ReposCreatePagesDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a GitHub Pages deployment for a repository.
 *
 * Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.
 */
export const fetchReposCreatePagesDeployment = (
  variables: ReposCreatePagesDeploymentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PageDeployment,
    ReposCreatePagesDeploymentError,
    ReposCreatePagesDeploymentRequestBody,
    {},
    {},
    ReposCreatePagesDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/deployment",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a GitHub Pages deployment for a repository.
 *
 * Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.
 */
export const useReposCreatePagesDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PageDeployment,
      ReposCreatePagesDeploymentError,
      ReposCreatePagesDeploymentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PageDeployment,
    ReposCreatePagesDeploymentError,
    ReposCreatePagesDeploymentVariables
  >({
    mutationFn: (variables: ReposCreatePagesDeploymentVariables) =>
      fetchReposCreatePagesDeployment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetPagesHealthCheckPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetPagesHealthCheckError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetPagesHealthCheckVariables = {
  pathParams: ReposGetPagesHealthCheckPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.
 */
export const fetchReposGetPagesHealthCheck = (
  variables: ReposGetPagesHealthCheckVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PagesHealthCheck | Schemas.EmptyObject,
    ReposGetPagesHealthCheckError,
    undefined,
    {},
    {},
    ReposGetPagesHealthCheckPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/health",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.
 */
export const reposGetPagesHealthCheckQuery = (
  variables: ReposGetPagesHealthCheckVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PagesHealthCheck | Schemas.EmptyObject>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pages/health",
    operationId: "reposGetPagesHealthCheck",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetPagesHealthCheck(variables, signal),
});

/**
 * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.
 */
export const useSuspenseReposGetPagesHealthCheck = <
  TData = Schemas.PagesHealthCheck | Schemas.EmptyObject,
>(
  variables: ReposGetPagesHealthCheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PagesHealthCheck | Schemas.EmptyObject,
      ReposGetPagesHealthCheckError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PagesHealthCheck | Schemas.EmptyObject,
    ReposGetPagesHealthCheckError,
    TData
  >({
    ...reposGetPagesHealthCheckQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
 *
 * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
 *
 * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.
 */
export const useReposGetPagesHealthCheck = <
  TData = Schemas.PagesHealthCheck | Schemas.EmptyObject,
>(
  variables: ReposGetPagesHealthCheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PagesHealthCheck | Schemas.EmptyObject,
      ReposGetPagesHealthCheckError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PagesHealthCheck | Schemas.EmptyObject,
    ReposGetPagesHealthCheckError,
    TData
  >({
    ...reposGetPagesHealthCheckQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsListForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ProjectsListForRepoQueryParams = {
  /**
   * Indicates the state of the projects to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsListForRepoResponse = Schemas.Project[];

export type ProjectsListForRepoVariables = {
  pathParams: ProjectsListForRepoPathParams;
  queryParams?: ProjectsListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForRepo = (
  variables: ProjectsListForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListForRepoResponse,
    ProjectsListForRepoError,
    undefined,
    {},
    ProjectsListForRepoQueryParams,
    ProjectsListForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/projects",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const projectsListForRepoQuery = (
  variables: ProjectsListForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/projects",
    operationId: "projectsListForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListForRepo(variables, signal),
});

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useSuspenseProjectsListForRepo = <
  TData = ProjectsListForRepoResponse,
>(
  variables: ProjectsListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForRepoResponse,
      ProjectsListForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListForRepoResponse,
    ProjectsListForRepoError,
    TData
  >({
    ...projectsListForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForRepo = <TData = ProjectsListForRepoResponse>(
  variables: ProjectsListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForRepoResponse,
      ProjectsListForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForRepoResponse,
    ProjectsListForRepoError,
    TData
  >({
    ...projectsListForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ProjectsCreateForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ProjectsCreateForRepoError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 410;
      payload: Responses.Gone;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForRepoRequestBody = {
  /**
   * The description of the project.
   */
  body?: string;
  /**
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForRepoVariables = {
  body: ProjectsCreateForRepoRequestBody;
  pathParams: ProjectsCreateForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForRepo = (
  variables: ProjectsCreateForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForRepoError,
    ProjectsCreateForRepoRequestBody,
    {},
    {},
    ProjectsCreateForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/projects",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForRepoError,
      ProjectsCreateForRepoVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForRepoError,
    ProjectsCreateForRepoVariables
  >({
    mutationFn: (variables: ProjectsCreateForRepoVariables) =>
      fetchProjectsCreateForRepo({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsListPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type PullsListQueryParams = {
  /**
   * Either `open`, `closed`, or `all` to filter by state.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
   */
  head?: string;
  /**
   * Filter pulls by base branch name. Example: `gh-pages`.
   */
  base?: string;
  /**
   * What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
   *
   * @default created
   */
  sort?: "created" | "updated" | "popularity" | "long-running";
  /**
   * The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsListResponse = Schemas.PullRequestSimple[];

export type PullsListVariables = {
  pathParams: PullsListPathParams;
  queryParams?: PullsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchPullsList = (
  variables: PullsListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListResponse,
    PullsListError,
    undefined,
    {},
    PullsListQueryParams,
    PullsListPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const pullsListQuery = (
  variables: PullsListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<PullsListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls",
    operationId: "pullsList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsList(variables, signal),
});

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useSuspensePullsList = <TData = PullsListResponse>(
  variables: PullsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<PullsListResponse, PullsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<PullsListResponse, PullsListError, TData>({
    ...pullsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const usePullsList = <TData = PullsListResponse>(
  variables: PullsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<PullsListResponse, PullsListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<PullsListResponse, PullsListError, TData>({
    ...pullsListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsCreatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type PullsCreateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsCreateRequestBody = {
  /**
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   */
  base: string;
  /**
   * The contents of the pull request.
   */
  body?: string;
  /**
   * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
   */
  draft?: boolean;
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
   */
  head: string;
  /**
   * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
   *
   * @example octo-org/octo-repo
   * @format repo.nwo
   */
  head_repo?: string;
  /**
   * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
   *
   * @example 1
   */
  issue?: number;
  /**
   * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /**
   * The title of the new pull request. Required unless `issue` is specified.
   */
  title?: string;
};

export type PullsCreateVariables = {
  body: PullsCreateRequestBody;
  pathParams: PullsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreate = (
  variables: PullsCreateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequest,
    PullsCreateError,
    PullsCreateRequestBody,
    {},
    {},
    PullsCreatePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      PullsCreateError,
      PullsCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    PullsCreateError,
    PullsCreateVariables
  >({
    mutationFn: (variables: PullsCreateVariables) =>
      fetchPullsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsListReviewCommentsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type PullsListReviewCommentsForRepoQueryParams = {
  sort?: "created" | "updated" | "created_at";
  /**
   * The direction to sort results. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsForRepoError =
  Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewCommentsForRepoResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsForRepoVariables = {
  pathParams: PullsListReviewCommentsForRepoPathParams;
  queryParams?: PullsListReviewCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewCommentsForRepo = (
  variables: PullsListReviewCommentsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListReviewCommentsForRepoResponse,
    PullsListReviewCommentsForRepoError,
    undefined,
    {},
    PullsListReviewCommentsForRepoQueryParams,
    PullsListReviewCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const pullsListReviewCommentsForRepoQuery = (
  variables: PullsListReviewCommentsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListReviewCommentsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/comments",
    operationId: "pullsListReviewCommentsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListReviewCommentsForRepo(variables, signal),
});

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const useSuspensePullsListReviewCommentsForRepo = <
  TData = PullsListReviewCommentsForRepoResponse,
>(
  variables: PullsListReviewCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsForRepoResponse,
      PullsListReviewCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListReviewCommentsForRepoResponse,
    PullsListReviewCommentsForRepoError,
    TData
  >({
    ...pullsListReviewCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewCommentsForRepo = <
  TData = PullsListReviewCommentsForRepoResponse,
>(
  variables: PullsListReviewCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsForRepoResponse,
      PullsListReviewCommentsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsForRepoResponse,
    PullsListReviewCommentsForRepoError,
    TData
  >({
    ...pullsListReviewCommentsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsDeleteReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type PullsDeleteReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsDeleteReviewCommentVariables = {
  pathParams: PullsDeleteReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a review comment.
 */
export const fetchPullsDeleteReviewComment = (
  variables: PullsDeleteReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PullsDeleteReviewCommentError,
    undefined,
    {},
    {},
    PullsDeleteReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a review comment.
 */
export const usePullsDeleteReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PullsDeleteReviewCommentError,
      PullsDeleteReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PullsDeleteReviewCommentError,
    PullsDeleteReviewCommentVariables
  >({
    mutationFn: (variables: PullsDeleteReviewCommentVariables) =>
      fetchPullsDeleteReviewComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsGetReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type PullsGetReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsGetReviewCommentVariables = {
  pathParams: PullsGetReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides details for a review comment.
 */
export const fetchPullsGetReviewComment = (
  variables: PullsGetReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsGetReviewCommentError,
    undefined,
    {},
    {},
    PullsGetReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Provides details for a review comment.
 */
export const pullsGetReviewCommentQuery = (
  variables: PullsGetReviewCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PullRequestReviewComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    operationId: "pullsGetReviewComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsGetReviewComment(variables, signal),
});

/**
 * Provides details for a review comment.
 */
export const useSuspensePullsGetReviewComment = <
  TData = Schemas.PullRequestReviewComment,
>(
  variables: PullsGetReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewComment,
      PullsGetReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PullRequestReviewComment,
    PullsGetReviewCommentError,
    TData
  >({
    ...pullsGetReviewCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Provides details for a review comment.
 */
export const usePullsGetReviewComment = <
  TData = Schemas.PullRequestReviewComment,
>(
  variables: PullsGetReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewComment,
      PullsGetReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewComment,
    PullsGetReviewCommentError,
    TData
  >({
    ...pullsGetReviewCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsUpdateReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type PullsUpdateReviewCommentError = Fetcher.ErrorWrapper<undefined>;

export type PullsUpdateReviewCommentRequestBody = {
  /**
   * The text of the reply to the review comment.
   */
  body: string;
};

export type PullsUpdateReviewCommentVariables = {
  body: PullsUpdateReviewCommentRequestBody;
  pathParams: PullsUpdateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables you to edit a review comment.
 */
export const fetchPullsUpdateReviewComment = (
  variables: PullsUpdateReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsUpdateReviewCommentError,
    PullsUpdateReviewCommentRequestBody,
    {},
    {},
    PullsUpdateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Enables you to edit a review comment.
 */
export const usePullsUpdateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsUpdateReviewCommentError,
      PullsUpdateReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsUpdateReviewCommentError,
    PullsUpdateReviewCommentVariables
  >({
    mutationFn: (variables: PullsUpdateReviewCommentVariables) =>
      fetchPullsUpdateReviewComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsListForPullRequestReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsListForPullRequestReviewCommentQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForPullRequestReviewCommentError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type ReactionsListForPullRequestReviewCommentResponse =
  Schemas.Reaction[];

export type ReactionsListForPullRequestReviewCommentVariables = {
  pathParams: ReactionsListForPullRequestReviewCommentPathParams;
  queryParams?: ReactionsListForPullRequestReviewCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsListForPullRequestReviewComment = (
  variables: ReactionsListForPullRequestReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForPullRequestReviewCommentResponse,
    ReactionsListForPullRequestReviewCommentError,
    undefined,
    {},
    ReactionsListForPullRequestReviewCommentQueryParams,
    ReactionsListForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const reactionsListForPullRequestReviewCommentQuery = (
  variables: ReactionsListForPullRequestReviewCommentVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForPullRequestReviewCommentResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    operationId: "reactionsListForPullRequestReviewComment",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForPullRequestReviewComment(variables, signal),
});

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useSuspenseReactionsListForPullRequestReviewComment = <
  TData = ReactionsListForPullRequestReviewCommentResponse,
>(
  variables: ReactionsListForPullRequestReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForPullRequestReviewCommentResponse,
      ReactionsListForPullRequestReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForPullRequestReviewCommentResponse,
    ReactionsListForPullRequestReviewCommentError,
    TData
  >({
    ...reactionsListForPullRequestReviewCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsListForPullRequestReviewComment = <
  TData = ReactionsListForPullRequestReviewCommentResponse,
>(
  variables: ReactionsListForPullRequestReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForPullRequestReviewCommentResponse,
      ReactionsListForPullRequestReviewCommentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForPullRequestReviewCommentResponse,
    ReactionsListForPullRequestReviewCommentError,
    TData
  >({
    ...reactionsListForPullRequestReviewCommentQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForPullRequestReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type ReactionsCreateForPullRequestReviewCommentError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Responses.ValidationFailed;
  }>;

export type ReactionsCreateForPullRequestReviewCommentRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForPullRequestReviewCommentVariables = {
  body: ReactionsCreateForPullRequestReviewCommentRequestBody;
  pathParams: ReactionsCreateForPullRequestReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
 */
export const fetchReactionsCreateForPullRequestReviewComment = (
  variables: ReactionsCreateForPullRequestReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForPullRequestReviewCommentError,
    ReactionsCreateForPullRequestReviewCommentRequestBody,
    {},
    {},
    ReactionsCreateForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
 */
export const useReactionsCreateForPullRequestReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForPullRequestReviewCommentError,
      ReactionsCreateForPullRequestReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForPullRequestReviewCommentError,
    ReactionsCreateForPullRequestReviewCommentVariables
  >({
    mutationFn: (
      variables: ReactionsCreateForPullRequestReviewCommentVariables,
    ) =>
      fetchReactionsCreateForPullRequestReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsDeleteForPullRequestCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForPullRequestCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForPullRequestCommentVariables = {
  pathParams: ReactionsDeleteForPullRequestCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsDeleteForPullRequestComment = (
  variables: ReactionsDeleteForPullRequestCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForPullRequestCommentError,
    undefined,
    {},
    {},
    ReactionsDeleteForPullRequestCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsDeleteForPullRequestComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForPullRequestCommentError,
      ReactionsDeleteForPullRequestCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForPullRequestCommentError,
    ReactionsDeleteForPullRequestCommentVariables
  >({
    mutationFn: (variables: ReactionsDeleteForPullRequestCommentVariables) =>
      fetchReactionsDeleteForPullRequestComment({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PullsGetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsGetError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type PullsGetVariables = {
  pathParams: PullsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const fetchPullsGet = (
  variables: PullsGetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequest,
    PullsGetError,
    undefined,
    {},
    {},
    PullsGetPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const pullsGetQuery = (
  variables: PullsGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PullRequest>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    operationId: "pullsGet",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsGet(variables, signal),
});

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const useSuspensePullsGet = <TData = Schemas.PullRequest>(
  variables: PullsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PullRequest, PullsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<Schemas.PullRequest, PullsGetError, TData>(
    {
      ...pullsGetQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const usePullsGet = <TData = Schemas.PullRequest>(
  variables: PullsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PullRequest, PullsGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.PullRequest, PullsGetError, TData>({
    ...pullsGetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsUpdatePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsUpdateRequestBody = {
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
   */
  base?: string;
  /**
   * The contents of the pull request.
   */
  body?: string;
  /**
   * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /**
   * The title of the pull request.
   */
  title?: string;
};

export type PullsUpdateVariables = {
  body?: PullsUpdateRequestBody;
  pathParams: PullsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const fetchPullsUpdate = (
  variables: PullsUpdateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequest,
    PullsUpdateError,
    PullsUpdateRequestBody,
    {},
    {},
    PullsUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const usePullsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      PullsUpdateError,
      PullsUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    PullsUpdateError,
    PullsUpdateVariables
  >({
    mutationFn: (variables: PullsUpdateVariables) =>
      fetchPullsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodespacesCreateWithPrForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type CodespacesCreateWithPrForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 503;
        payload: Responses.ServiceUnavailable;
      }
  >;

export type CodespacesCreateWithPrForAuthenticatedUserVariables = {
  body?: {
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    location?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
  } | null;
  pathParams: CodespacesCreateWithPrForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a codespace owned by the authenticated user for the specified pull request.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesCreateWithPrForAuthenticatedUser = (
  variables: CodespacesCreateWithPrForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesCreateWithPrForAuthenticatedUserError,
    {
      /**
       * IP for location auto-detection when proxying a request
       */
      client_ip?: string;
      /**
       * Path to devcontainer.json config to use for this codespace
       */
      devcontainer_path?: string;
      /**
       * Display name for this codespace
       */
      display_name?: string;
      /**
       * Time in minutes before codespace stops from inactivity
       */
      idle_timeout_minutes?: number;
      /**
       * Location for this codespace. Assigned by IP if not provided
       */
      location?: string;
      /**
       * Machine type to use for this codespace
       */
      machine?: string;
      /**
       * Whether to authorize requested permissions from devcontainer.json
       */
      multi_repo_permissions_opt_out?: boolean;
      /**
       * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
       */
      retention_period_minutes?: number;
      /**
       * Working directory for this codespace
       */
      working_directory?: string;
    } | null,
    {},
    {},
    CodespacesCreateWithPrForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/codespaces",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a codespace owned by the authenticated user for the specified pull request.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesCreateWithPrForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesCreateWithPrForAuthenticatedUserError,
      CodespacesCreateWithPrForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesCreateWithPrForAuthenticatedUserError,
    CodespacesCreateWithPrForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesCreateWithPrForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesCreateWithPrForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PullsListReviewCommentsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsListReviewCommentsQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort results. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewCommentsResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsVariables = {
  pathParams: PullsListReviewCommentsPathParams;
  queryParams?: PullsListReviewCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewComments = (
  variables: PullsListReviewCommentsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListReviewCommentsResponse,
    PullsListReviewCommentsError,
    undefined,
    {},
    PullsListReviewCommentsQueryParams,
    PullsListReviewCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const pullsListReviewCommentsQuery = (
  variables: PullsListReviewCommentsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListReviewCommentsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    operationId: "pullsListReviewComments",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListReviewComments(variables, signal),
});

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const useSuspensePullsListReviewComments = <
  TData = PullsListReviewCommentsResponse,
>(
  variables: PullsListReviewCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsResponse,
      PullsListReviewCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListReviewCommentsResponse,
    PullsListReviewCommentsError,
    TData
  >({
    ...pullsListReviewCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewComments = <
  TData = PullsListReviewCommentsResponse,
>(
  variables: PullsListReviewCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsResponse,
      PullsListReviewCommentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsResponse,
    PullsListReviewCommentsError,
    TData
  >({
    ...pullsListReviewCommentsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsCreateReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsCreateReviewCommentError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsCreateReviewCommentRequestBody = {
  /**
   * The text of the review comment.
   */
  body: string;
  /**
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
   */
  commit_id: string;
  /**
   * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
   *
   * @example 2
   */
  in_reply_to?: number;
  /**
   * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   */
  line: number;
  /**
   * The relative path to the file that necessitates a comment.
   */
  path: string;
  /**
   * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   *
   * @deprecated true
   */
  position?: number;
  /**
   * In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
   */
  side?: "LEFT" | "RIGHT";
  /**
   * **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
   */
  start_line?: number;
  /**
   * **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
   */
  start_side?: "LEFT" | "RIGHT" | "side";
};

export type PullsCreateReviewCommentVariables = {
  body: PullsCreateReviewCommentRequestBody;
  pathParams: PullsCreateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchPullsCreateReviewComment = (
  variables: PullsCreateReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReviewCommentError,
    PullsCreateReviewCommentRequestBody,
    {},
    {},
    PullsCreateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const usePullsCreateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsCreateReviewCommentError,
      PullsCreateReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsCreateReviewCommentError,
    PullsCreateReviewCommentVariables
  >({
    mutationFn: (variables: PullsCreateReviewCommentVariables) =>
      fetchPullsCreateReviewComment({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsCreateReplyForReviewCommentPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the comment.
   */
  commentId: number;
};

export type PullsCreateReplyForReviewCommentError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsCreateReplyForReviewCommentRequestBody = {
  /**
   * The text of the review comment.
   */
  body: string;
};

export type PullsCreateReplyForReviewCommentVariables = {
  body: PullsCreateReplyForReviewCommentRequestBody;
  pathParams: PullsCreateReplyForReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchPullsCreateReplyForReviewComment = (
  variables: PullsCreateReplyForReviewCommentVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReplyForReviewCommentError,
    PullsCreateReplyForReviewCommentRequestBody,
    {},
    {},
    PullsCreateReplyForReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments/{commentId}/replies",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const usePullsCreateReplyForReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      PullsCreateReplyForReviewCommentError,
      PullsCreateReplyForReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    PullsCreateReplyForReviewCommentError,
    PullsCreateReplyForReviewCommentVariables
  >({
    mutationFn: (variables: PullsCreateReplyForReviewCommentVariables) =>
      fetchPullsCreateReplyForReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PullsListCommitsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsListCommitsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommitsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListCommitsResponse = Schemas.Commit[];

export type PullsListCommitsVariables = {
  pathParams: PullsListCommitsPathParams;
  queryParams?: PullsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const fetchPullsListCommits = (
  variables: PullsListCommitsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListCommitsResponse,
    PullsListCommitsError,
    undefined,
    {},
    PullsListCommitsQueryParams,
    PullsListCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/commits",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const pullsListCommitsQuery = (
  variables: PullsListCommitsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListCommitsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/commits",
    operationId: "pullsListCommits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListCommits(variables, signal),
});

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const useSuspensePullsListCommits = <TData = PullsListCommitsResponse>(
  variables: PullsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommitsResponse,
      PullsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListCommitsResponse,
    PullsListCommitsError,
    TData
  >({
    ...pullsListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const usePullsListCommits = <TData = PullsListCommitsResponse>(
  variables: PullsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommitsResponse,
      PullsListCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommitsResponse,
    PullsListCommitsError,
    TData
  >({
    ...pullsListCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsListFilesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsListFilesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListFilesError = Fetcher.ErrorWrapper<
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type PullsListFilesResponse = Schemas.DiffEntry[];

export type PullsListFilesVariables = {
  pathParams: PullsListFilesPathParams;
  queryParams?: PullsListFilesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const fetchPullsListFiles = (
  variables: PullsListFilesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListFilesResponse,
    PullsListFilesError,
    undefined,
    {},
    PullsListFilesQueryParams,
    PullsListFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/files",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const pullsListFilesQuery = (
  variables: PullsListFilesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListFilesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/files",
    operationId: "pullsListFiles",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListFiles(variables, signal),
});

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const useSuspensePullsListFiles = <TData = PullsListFilesResponse>(
  variables: PullsListFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListFilesResponse,
      PullsListFilesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListFilesResponse,
    PullsListFilesError,
    TData
  >({
    ...pullsListFilesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const usePullsListFiles = <TData = PullsListFilesResponse>(
  variables: PullsListFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListFilesResponse,
      PullsListFilesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListFilesResponse,
    PullsListFilesError,
    TData
  >({
    ...pullsListFilesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsCheckIfMergedPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsCheckIfMergedError = Fetcher.ErrorWrapper<undefined>;

export type PullsCheckIfMergedVariables = {
  pathParams: PullsCheckIfMergedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsCheckIfMerged = (
  variables: PullsCheckIfMergedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PullsCheckIfMergedError,
    undefined,
    {},
    {},
    PullsCheckIfMergedPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "get",
    ...variables,
    signal,
  });

export const pullsCheckIfMergedQuery = (
  variables: PullsCheckIfMergedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    operationId: "pullsCheckIfMerged",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsCheckIfMerged(variables, signal),
});

export const useSuspensePullsCheckIfMerged = <TData = undefined>(
  variables: PullsCheckIfMergedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, PullsCheckIfMergedError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<undefined, PullsCheckIfMergedError, TData>(
    {
      ...pullsCheckIfMergedQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export const usePullsCheckIfMerged = <TData = undefined>(
  variables: PullsCheckIfMergedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, PullsCheckIfMergedError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, PullsCheckIfMergedError, TData>({
    ...pullsCheckIfMergedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsMergePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsMergeError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 405;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 409;
      payload: {
        documentation_url?: string;
        message?: string;
      };
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsMergeVariables = {
  body?: {
    /**
     * Extra detail to append to automatic commit message.
     */
    commit_message?: string;
    /**
     * Title for the automatic commit message.
     */
    commit_title?: string;
    /**
     * The merge method to use.
     */
    merge_method?: "merge" | "squash" | "rebase";
    /**
     * SHA that pull request head must match to allow merge.
     */
    sha?: string;
  } | null;
  pathParams: PullsMergePathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchPullsMerge = (
  variables: PullsMergeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestMergeResult,
    PullsMergeError,
    {
      /**
       * Extra detail to append to automatic commit message.
       */
      commit_message?: string;
      /**
       * Title for the automatic commit message.
       */
      commit_title?: string;
      /**
       * The merge method to use.
       */
      merge_method?: "merge" | "squash" | "rebase";
      /**
       * SHA that pull request head must match to allow merge.
       */
      sha?: string;
    } | null,
    {},
    {},
    PullsMergePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "put",
    ...variables,
    signal,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const usePullsMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestMergeResult,
      PullsMergeError,
      PullsMergeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestMergeResult,
    PullsMergeError,
    PullsMergeVariables
  >({
    mutationFn: (variables: PullsMergeVariables) =>
      fetchPullsMerge({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsRemoveRequestedReviewersPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsRemoveRequestedReviewersError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type PullsRemoveRequestedReviewersRequestBody = {
  /**
   * An array of user `login`s that will be removed.
   */
  reviewers: string[];
  /**
   * An array of team `slug`s that will be removed.
   */
  team_reviewers?: string[];
};

export type PullsRemoveRequestedReviewersVariables = {
  body: PullsRemoveRequestedReviewersRequestBody;
  pathParams: PullsRemoveRequestedReviewersPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsRemoveRequestedReviewers = (
  variables: PullsRemoveRequestedReviewersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestSimple,
    PullsRemoveRequestedReviewersError,
    PullsRemoveRequestedReviewersRequestBody,
    {},
    {},
    PullsRemoveRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "delete",
    ...variables,
    signal,
  });

export const usePullsRemoveRequestedReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestSimple,
      PullsRemoveRequestedReviewersError,
      PullsRemoveRequestedReviewersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestSimple,
    PullsRemoveRequestedReviewersError,
    PullsRemoveRequestedReviewersVariables
  >({
    mutationFn: (variables: PullsRemoveRequestedReviewersVariables) =>
      fetchPullsRemoveRequestedReviewers({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsListRequestedReviewersPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsListRequestedReviewersError = Fetcher.ErrorWrapper<undefined>;

export type PullsListRequestedReviewersVariables = {
  pathParams: PullsListRequestedReviewersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const fetchPullsListRequestedReviewers = (
  variables: PullsListRequestedReviewersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReviewRequest,
    PullsListRequestedReviewersError,
    undefined,
    {},
    {},
    PullsListRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const pullsListRequestedReviewersQuery = (
  variables: PullsListRequestedReviewersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PullRequestReviewRequest>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    operationId: "pullsListRequestedReviewers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListRequestedReviewers(variables, signal),
});

/**
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const useSuspensePullsListRequestedReviewers = <
  TData = Schemas.PullRequestReviewRequest,
>(
  variables: PullsListRequestedReviewersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewRequest,
      PullsListRequestedReviewersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PullRequestReviewRequest,
    PullsListRequestedReviewersError,
    TData
  >({
    ...pullsListRequestedReviewersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 */
export const usePullsListRequestedReviewers = <
  TData = Schemas.PullRequestReviewRequest,
>(
  variables: PullsListRequestedReviewersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewRequest,
      PullsListRequestedReviewersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewRequest,
    PullsListRequestedReviewersError,
    TData
  >({
    ...pullsListRequestedReviewersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsRequestReviewersPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsRequestReviewersError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type PullsRequestReviewersVariables = {
  body?:
    | {
        /**
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /**
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /**
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /**
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      };
  pathParams: PullsRequestReviewersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchPullsRequestReviewers = (
  variables: PullsRequestReviewersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestSimple,
    PullsRequestReviewersError,
    | {
        /**
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /**
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /**
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /**
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      },
    {},
    {},
    PullsRequestReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const usePullsRequestReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestSimple,
      PullsRequestReviewersError,
      PullsRequestReviewersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestSimple,
    PullsRequestReviewersError,
    PullsRequestReviewersVariables
  >({
    mutationFn: (variables: PullsRequestReviewersVariables) =>
      fetchPullsRequestReviewers({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsListReviewsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsListReviewsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewsError = Fetcher.ErrorWrapper<undefined>;

export type PullsListReviewsResponse = Schemas.PullRequestReview[];

export type PullsListReviewsVariables = {
  pathParams: PullsListReviewsPathParams;
  queryParams?: PullsListReviewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The list of reviews returns in chronological order.
 */
export const fetchPullsListReviews = (
  variables: PullsListReviewsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListReviewsResponse,
    PullsListReviewsError,
    undefined,
    {},
    PullsListReviewsQueryParams,
    PullsListReviewsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The list of reviews returns in chronological order.
 */
export const pullsListReviewsQuery = (
  variables: PullsListReviewsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListReviewsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    operationId: "pullsListReviews",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListReviews(variables, signal),
});

/**
 * The list of reviews returns in chronological order.
 */
export const useSuspensePullsListReviews = <TData = PullsListReviewsResponse>(
  variables: PullsListReviewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewsResponse,
      PullsListReviewsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListReviewsResponse,
    PullsListReviewsError,
    TData
  >({
    ...pullsListReviewsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The list of reviews returns in chronological order.
 */
export const usePullsListReviews = <TData = PullsListReviewsResponse>(
  variables: PullsListReviewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewsResponse,
      PullsListReviewsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewsResponse,
    PullsListReviewsError,
    TData
  >({
    ...pullsListReviewsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsCreateReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsCreateReviewError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsCreateReviewRequestBody = {
  /**
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  body?: string;
  /**
   * Use the following table to specify the location, destination, and contents of the draft review comment.
   */
  comments?: {
    /**
     * Text of the review comment.
     */
    body: string;
    /**
     * @example 28
     */
    line?: number;
    /**
     * The relative path to the file that necessitates a review comment.
     */
    path: string;
    /**
     * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
     */
    position?: number;
    /**
     * @example RIGHT
     */
    side?: string;
    /**
     * @example 26
     */
    start_line?: number;
    /**
     * @example LEFT
     */
    start_side?: string;
  }[];
  /**
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  commit_id?: string;
  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
   */
  event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsCreateReviewVariables = {
  body?: PullsCreateReviewRequestBody;
  pathParams: PullsCreateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const fetchPullsCreateReview = (
  variables: PullsCreateReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsCreateReviewError,
    PullsCreateReviewRequestBody,
    {},
    {},
    PullsCreateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const usePullsCreateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsCreateReviewError,
      PullsCreateReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsCreateReviewError,
    PullsCreateReviewVariables
  >({
    mutationFn: (variables: PullsCreateReviewVariables) =>
      fetchPullsCreateReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsDeletePendingReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsDeletePendingReviewError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsDeletePendingReviewVariables = {
  pathParams: PullsDeletePendingReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsDeletePendingReview = (
  variables: PullsDeletePendingReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsDeletePendingReviewError,
    undefined,
    {},
    {},
    PullsDeletePendingReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "delete",
    ...variables,
    signal,
  });

export const usePullsDeletePendingReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsDeletePendingReviewError,
      PullsDeletePendingReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsDeletePendingReviewError,
    PullsDeletePendingReviewVariables
  >({
    mutationFn: (variables: PullsDeletePendingReviewVariables) =>
      fetchPullsDeletePendingReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsGetReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsGetReviewError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsGetReviewVariables = {
  pathParams: PullsGetReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsGetReview = (
  variables: PullsGetReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsGetReviewError,
    undefined,
    {},
    {},
    PullsGetReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "get",
    ...variables,
    signal,
  });

export const pullsGetReviewQuery = (
  variables: PullsGetReviewVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PullRequestReview>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    operationId: "pullsGetReview",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsGetReview(variables, signal),
});

export const useSuspensePullsGetReview = <TData = Schemas.PullRequestReview>(
  variables: PullsGetReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReview,
      PullsGetReviewError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PullRequestReview,
    PullsGetReviewError,
    TData
  >({
    ...pullsGetReviewQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const usePullsGetReview = <TData = Schemas.PullRequestReview>(
  variables: PullsGetReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReview,
      PullsGetReviewError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReview,
    PullsGetReviewError,
    TData
  >({
    ...pullsGetReviewQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsUpdateReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsUpdateReviewError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailedSimple;
}>;

export type PullsUpdateReviewRequestBody = {
  /**
   * The body text of the pull request review.
   */
  body: string;
};

export type PullsUpdateReviewVariables = {
  body: PullsUpdateReviewRequestBody;
  pathParams: PullsUpdateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update the review summary comment with new text.
 */
export const fetchPullsUpdateReview = (
  variables: PullsUpdateReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsUpdateReviewError,
    PullsUpdateReviewRequestBody,
    {},
    {},
    PullsUpdateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Update the review summary comment with new text.
 */
export const usePullsUpdateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsUpdateReviewError,
      PullsUpdateReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsUpdateReviewError,
    PullsUpdateReviewVariables
  >({
    mutationFn: (variables: PullsUpdateReviewVariables) =>
      fetchPullsUpdateReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsListCommentsForReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsListCommentsForReviewQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommentsForReviewError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type PullsListCommentsForReviewResponse = Schemas.ReviewComment[];

export type PullsListCommentsForReviewVariables = {
  pathParams: PullsListCommentsForReviewPathParams;
  queryParams?: PullsListCommentsForReviewQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List comments for a specific pull request review.
 */
export const fetchPullsListCommentsForReview = (
  variables: PullsListCommentsForReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsListCommentsForReviewResponse,
    PullsListCommentsForReviewError,
    undefined,
    {},
    PullsListCommentsForReviewQueryParams,
    PullsListCommentsForReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List comments for a specific pull request review.
 */
export const pullsListCommentsForReviewQuery = (
  variables: PullsListCommentsForReviewVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PullsListCommentsForReviewResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments",
    operationId: "pullsListCommentsForReview",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPullsListCommentsForReview(variables, signal),
});

/**
 * List comments for a specific pull request review.
 */
export const useSuspensePullsListCommentsForReview = <
  TData = PullsListCommentsForReviewResponse,
>(
  variables: PullsListCommentsForReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommentsForReviewResponse,
      PullsListCommentsForReviewError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PullsListCommentsForReviewResponse,
    PullsListCommentsForReviewError,
    TData
  >({
    ...pullsListCommentsForReviewQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List comments for a specific pull request review.
 */
export const usePullsListCommentsForReview = <
  TData = PullsListCommentsForReviewResponse,
>(
  variables: PullsListCommentsForReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommentsForReviewResponse,
      PullsListCommentsForReviewError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommentsForReviewResponse,
    PullsListCommentsForReviewError,
    TData
  >({
    ...pullsListCommentsForReviewQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PullsDismissReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsDismissReviewError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsDismissReviewRequestBody = {
  /**
   * @example "DISMISS"
   */
  event?: "DISMISS";
  /**
   * The message for the pull request review dismissal
   */
  message: string;
};

export type PullsDismissReviewVariables = {
  body: PullsDismissReviewRequestBody;
  pathParams: PullsDismissReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const fetchPullsDismissReview = (
  variables: PullsDismissReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsDismissReviewError,
    PullsDismissReviewRequestBody,
    {},
    {},
    PullsDismissReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/dismissals",
    method: "put",
    ...variables,
    signal,
  });

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const usePullsDismissReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsDismissReviewError,
      PullsDismissReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsDismissReviewError,
    PullsDismissReviewVariables
  >({
    mutationFn: (variables: PullsDismissReviewVariables) =>
      fetchPullsDismissReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsSubmitReviewPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
  /**
   * The unique identifier of the review.
   */
  reviewId: number;
};

export type PullsSubmitReviewError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type PullsSubmitReviewRequestBody = {
  /**
   * The body text of the pull request review
   */
  body?: string;
  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
   */
  event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsSubmitReviewVariables = {
  body: PullsSubmitReviewRequestBody;
  pathParams: PullsSubmitReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."
 */
export const fetchPullsSubmitReview = (
  variables: PullsSubmitReviewVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsSubmitReviewError,
    PullsSubmitReviewRequestBody,
    {},
    {},
    PullsSubmitReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/events",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."
 */
export const usePullsSubmitReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      PullsSubmitReviewError,
      PullsSubmitReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    PullsSubmitReviewError,
    PullsSubmitReviewVariables
  >({
    mutationFn: (variables: PullsSubmitReviewVariables) =>
      fetchPullsSubmitReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PullsUpdateBranchPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies the pull request.
   */
  pullNumber: number;
};

export type PullsUpdateBranchError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type PullsUpdateBranchResponse = {
  message?: string;
  url?: string;
};

export type PullsUpdateBranchVariables = {
  body?: {
    /**
     * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
     */
    expected_head_sha?: string;
  } | null;
  pathParams: PullsUpdateBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const fetchPullsUpdateBranch = (
  variables: PullsUpdateBranchVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PullsUpdateBranchResponse,
    PullsUpdateBranchError,
    {
      /**
       * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
       */
      expected_head_sha?: string;
    } | null,
    {},
    {},
    PullsUpdateBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/update-branch",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const usePullsUpdateBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PullsUpdateBranchResponse,
      PullsUpdateBranchError,
      PullsUpdateBranchVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    PullsUpdateBranchResponse,
    PullsUpdateBranchError,
    PullsUpdateBranchVariables
  >({
    mutationFn: (variables: PullsUpdateBranchVariables) =>
      fetchPullsUpdateBranch({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetReadmePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetReadmeQueryParams = {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposGetReadmeVariables = {
  pathParams: ReposGetReadmePathParams;
  queryParams?: ReposGetReadmeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadme = (
  variables: ReposGetReadmeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ContentFile,
    ReposGetReadmeError,
    undefined,
    {},
    ReposGetReadmeQueryParams,
    ReposGetReadmePathParams
  >({
    url: "/repos/{owner}/{repo}/readme",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const reposGetReadmeQuery = (
  variables: ReposGetReadmeVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ContentFile>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/readme",
    operationId: "reposGetReadme",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetReadme(variables, signal),
});

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useSuspenseReposGetReadme = <TData = Schemas.ContentFile>(
  variables: ReposGetReadmeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ContentFile, ReposGetReadmeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ContentFile,
    ReposGetReadmeError,
    TData
  >({
    ...reposGetReadmeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadme = <TData = Schemas.ContentFile>(
  variables: ReposGetReadmeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ContentFile, ReposGetReadmeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.ContentFile, ReposGetReadmeError, TData>({
    ...reposGetReadmeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetReadmeInDirectoryPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The alternate path to look for a README file
   */
  dir: string;
};

export type ReposGetReadmeInDirectoryQueryParams = {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeInDirectoryError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposGetReadmeInDirectoryVariables = {
  pathParams: ReposGetReadmeInDirectoryPathParams;
  queryParams?: ReposGetReadmeInDirectoryQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadmeInDirectory = (
  variables: ReposGetReadmeInDirectoryVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ContentFile,
    ReposGetReadmeInDirectoryError,
    undefined,
    {},
    ReposGetReadmeInDirectoryQueryParams,
    ReposGetReadmeInDirectoryPathParams
  >({
    url: "/repos/{owner}/{repo}/readme/{dir}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const reposGetReadmeInDirectoryQuery = (
  variables: ReposGetReadmeInDirectoryVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ContentFile>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/readme/{dir}",
    operationId: "reposGetReadmeInDirectory",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetReadmeInDirectory(variables, signal),
});

/**
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useSuspenseReposGetReadmeInDirectory = <
  TData = Schemas.ContentFile,
>(
  variables: ReposGetReadmeInDirectoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContentFile,
      ReposGetReadmeInDirectoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ContentFile,
    ReposGetReadmeInDirectoryError,
    TData
  >({
    ...reposGetReadmeInDirectoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the README from a repository directory.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadmeInDirectory = <TData = Schemas.ContentFile>(
  variables: ReposGetReadmeInDirectoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContentFile,
      ReposGetReadmeInDirectoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ContentFile,
    ReposGetReadmeInDirectoryError,
    TData
  >({
    ...reposGetReadmeInDirectoryQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListReleasesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListReleasesQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleasesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposListReleasesResponse = Schemas.Release[];

export type ReposListReleasesVariables = {
  pathParams: ReposListReleasesPathParams;
  queryParams?: ReposListReleasesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const fetchReposListReleases = (
  variables: ReposListReleasesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListReleasesResponse,
    ReposListReleasesError,
    undefined,
    {},
    ReposListReleasesQueryParams,
    ReposListReleasesPathParams
  >({
    url: "/repos/{owner}/{repo}/releases",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const reposListReleasesQuery = (
  variables: ReposListReleasesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListReleasesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases",
    operationId: "reposListReleases",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListReleases(variables, signal),
});

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const useSuspenseReposListReleases = <TData = ReposListReleasesResponse>(
  variables: ReposListReleasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleasesResponse,
      ReposListReleasesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListReleasesResponse,
    ReposListReleasesError,
    TData
  >({
    ...reposListReleasesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const useReposListReleases = <TData = ReposListReleasesResponse>(
  variables: ReposListReleasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleasesResponse,
      ReposListReleasesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleasesResponse,
    ReposListReleasesError,
    TData
  >({
    ...reposListReleasesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateReleaseError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.BasicError;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateReleaseRequestBody = {
  /**
   * Text describing the contents of the tag.
   */
  body?: string;
  /**
   * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
   */
  discussion_category_name?: string;
  /**
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   *
   * @default false
   */
  draft?: boolean;
  /**
   * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
   *
   * @default false
   */
  generate_release_notes?: boolean;
  /**
   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
   *
   * @default true
   */
  make_latest?: "true" | "false" | "legacy";
  /**
   * The name of the release.
   */
  name?: string;
  /**
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   *
   * @default false
   */
  prerelease?: boolean;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposCreateReleaseVariables = {
  body: ReposCreateReleaseRequestBody;
  pathParams: ReposCreateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchReposCreateRelease = (
  variables: ReposCreateReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Release,
    ReposCreateReleaseError,
    ReposCreateReleaseRequestBody,
    {},
    {},
    ReposCreateReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useReposCreateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      ReposCreateReleaseError,
      ReposCreateReleaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    ReposCreateReleaseError,
    ReposCreateReleaseVariables
  >({
    mutationFn: (variables: ReposCreateReleaseVariables) =>
      fetchReposCreateRelease({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteReleaseAssetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the asset.
   */
  assetId: number;
};

export type ReposDeleteReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteReleaseAssetVariables = {
  pathParams: ReposDeleteReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteReleaseAsset = (
  variables: ReposDeleteReleaseAssetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteReleaseAssetError,
    undefined,
    {},
    {},
    ReposDeleteReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposDeleteReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteReleaseAssetError,
      ReposDeleteReleaseAssetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteReleaseAssetError,
    ReposDeleteReleaseAssetVariables
  >({
    mutationFn: (variables: ReposDeleteReleaseAssetVariables) =>
      fetchReposDeleteReleaseAsset({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetReleaseAssetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the asset.
   */
  assetId: number;
};

export type ReposGetReleaseAssetError = Fetcher.ErrorWrapper<
  | {
      status: 302;
      payload: Responses.Found;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposGetReleaseAssetVariables = {
  pathParams: ReposGetReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const fetchReposGetReleaseAsset = (
  variables: ReposGetReleaseAssetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposGetReleaseAssetError,
    undefined,
    {},
    {},
    ReposGetReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const reposGetReleaseAssetQuery = (
  variables: ReposGetReleaseAssetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ReleaseAsset>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    operationId: "reposGetReleaseAsset",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetReleaseAsset(variables, signal),
});

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const useSuspenseReposGetReleaseAsset = <TData = Schemas.ReleaseAsset>(
  variables: ReposGetReleaseAssetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReleaseAsset,
      ReposGetReleaseAssetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ReleaseAsset,
    ReposGetReleaseAssetError,
    TData
  >({
    ...reposGetReleaseAssetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const useReposGetReleaseAsset = <TData = Schemas.ReleaseAsset>(
  variables: ReposGetReleaseAssetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReleaseAsset,
      ReposGetReleaseAssetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ReleaseAsset,
    ReposGetReleaseAssetError,
    TData
  >({
    ...reposGetReleaseAssetQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateReleaseAssetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the asset.
   */
  assetId: number;
};

export type ReposUpdateReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposUpdateReleaseAssetRequestBody = {
  /**
   * An alternate short description of the asset. Used in place of the filename.
   */
  label?: string;
  /**
   * The file name of the asset.
   */
  name?: string;
  /**
   * @example "uploaded"
   */
  state?: string;
};

export type ReposUpdateReleaseAssetVariables = {
  body?: ReposUpdateReleaseAssetRequestBody;
  pathParams: ReposUpdateReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release asset.
 */
export const fetchReposUpdateReleaseAsset = (
  variables: ReposUpdateReleaseAssetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposUpdateReleaseAssetError,
    ReposUpdateReleaseAssetRequestBody,
    {},
    {},
    ReposUpdateReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Users with push access to the repository can edit a release asset.
 */
export const useReposUpdateReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      ReposUpdateReleaseAssetError,
      ReposUpdateReleaseAssetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    ReposUpdateReleaseAssetError,
    ReposUpdateReleaseAssetVariables
  >({
    mutationFn: (variables: ReposUpdateReleaseAssetVariables) =>
      fetchReposUpdateReleaseAsset({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGenerateReleaseNotesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGenerateReleaseNotesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGenerateReleaseNotesRequestBody = {
  /**
   * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
   */
  configuration_file_path?: string;
  /**
   * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
   */
  previous_tag_name?: string;
  /**
   * The tag name for the release. This can be an existing tag or a new one.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
   */
  target_commitish?: string;
};

export type ReposGenerateReleaseNotesVariables = {
  body: ReposGenerateReleaseNotesRequestBody;
  pathParams: ReposGenerateReleaseNotesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
 */
export const fetchReposGenerateReleaseNotes = (
  variables: ReposGenerateReleaseNotesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ReleaseNotesContent,
    ReposGenerateReleaseNotesError,
    ReposGenerateReleaseNotesRequestBody,
    {},
    {},
    ReposGenerateReleaseNotesPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/generate-notes",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
 */
export const useReposGenerateReleaseNotes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseNotesContent,
      ReposGenerateReleaseNotesError,
      ReposGenerateReleaseNotesVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseNotesContent,
    ReposGenerateReleaseNotesError,
    ReposGenerateReleaseNotesVariables
  >({
    mutationFn: (variables: ReposGenerateReleaseNotesVariables) =>
      fetchReposGenerateReleaseNotes({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetLatestReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetLatestReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetLatestReleaseVariables = {
  pathParams: ReposGetLatestReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const fetchReposGetLatestRelease = (
  variables: ReposGetLatestReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Release,
    ReposGetLatestReleaseError,
    undefined,
    {},
    {},
    ReposGetLatestReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/latest",
    method: "get",
    ...variables,
    signal,
  });

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const reposGetLatestReleaseQuery = (
  variables: ReposGetLatestReleaseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Release>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/latest",
    operationId: "reposGetLatestRelease",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetLatestRelease(variables, signal),
});

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const useSuspenseReposGetLatestRelease = <TData = Schemas.Release>(
  variables: ReposGetLatestReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetLatestReleaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Release,
    ReposGetLatestReleaseError,
    TData
  >({
    ...reposGetLatestReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const useReposGetLatestRelease = <TData = Schemas.Release>(
  variables: ReposGetLatestReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetLatestReleaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Release,
    ReposGetLatestReleaseError,
    TData
  >({
    ...reposGetLatestReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetReleaseByTagPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * tag parameter
   */
  tag: string;
};

export type ReposGetReleaseByTagError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetReleaseByTagVariables = {
  pathParams: ReposGetReleaseByTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a published release with the specified tag.
 */
export const fetchReposGetReleaseByTag = (
  variables: ReposGetReleaseByTagVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Release,
    ReposGetReleaseByTagError,
    undefined,
    {},
    {},
    ReposGetReleaseByTagPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/tags/{tag}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get a published release with the specified tag.
 */
export const reposGetReleaseByTagQuery = (
  variables: ReposGetReleaseByTagVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Release>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/tags/{tag}",
    operationId: "reposGetReleaseByTag",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetReleaseByTag(variables, signal),
});

/**
 * Get a published release with the specified tag.
 */
export const useSuspenseReposGetReleaseByTag = <TData = Schemas.Release>(
  variables: ReposGetReleaseByTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetReleaseByTagError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Release,
    ReposGetReleaseByTagError,
    TData
  >({
    ...reposGetReleaseByTagQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get a published release with the specified tag.
 */
export const useReposGetReleaseByTag = <TData = Schemas.Release>(
  variables: ReposGetReleaseByTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      ReposGetReleaseByTagError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Release, ReposGetReleaseByTagError, TData>(
    {
      ...reposGetReleaseByTagQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export type ReposDeleteReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReposDeleteReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReposDeleteReleaseVariables = {
  pathParams: ReposDeleteReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can delete a release.
 */
export const fetchReposDeleteRelease = (
  variables: ReposDeleteReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteReleaseError,
    undefined,
    {},
    {},
    ReposDeleteReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Users with push access to the repository can delete a release.
 */
export const useReposDeleteRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteReleaseError,
      ReposDeleteReleaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteReleaseError,
    ReposDeleteReleaseVariables
  >({
    mutationFn: (variables: ReposDeleteReleaseVariables) =>
      fetchReposDeleteRelease({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReposGetReleaseError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetReleaseVariables = {
  pathParams: ReposGetReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const fetchReposGetRelease = (
  variables: ReposGetReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Release,
    ReposGetReleaseError,
    undefined,
    {},
    {},
    ReposGetReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const reposGetReleaseQuery = (
  variables: ReposGetReleaseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Release>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/{releaseId}",
    operationId: "reposGetRelease",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetRelease(variables, signal),
});

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const useSuspenseReposGetRelease = <TData = Schemas.Release>(
  variables: ReposGetReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Release, ReposGetReleaseError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Release,
    ReposGetReleaseError,
    TData
  >({
    ...reposGetReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const useReposGetRelease = <TData = Schemas.Release>(
  variables: ReposGetReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Release, ReposGetReleaseError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Release, ReposGetReleaseError, TData>({
    ...reposGetReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUpdateReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReposUpdateReleaseError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.BasicError;
}>;

export type ReposUpdateReleaseRequestBody = {
  /**
   * Text describing the contents of the tag.
   */
  body?: string;
  /**
   * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
   */
  discussion_category_name?: string;
  /**
   * `true` makes the release a draft, and `false` publishes the release.
   */
  draft?: boolean;
  /**
   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
   *
   * @default true
   */
  make_latest?: "true" | "false" | "legacy";
  /**
   * The name of the release.
   */
  name?: string;
  /**
   * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
   */
  prerelease?: boolean;
  /**
   * The name of the tag.
   */
  tag_name?: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposUpdateReleaseVariables = {
  body?: ReposUpdateReleaseRequestBody;
  pathParams: ReposUpdateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release.
 */
export const fetchReposUpdateRelease = (
  variables: ReposUpdateReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Release,
    ReposUpdateReleaseError,
    ReposUpdateReleaseRequestBody,
    {},
    {},
    ReposUpdateReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Users with push access to the repository can edit a release.
 */
export const useReposUpdateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      ReposUpdateReleaseError,
      ReposUpdateReleaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    ReposUpdateReleaseError,
    ReposUpdateReleaseVariables
  >({
    mutationFn: (variables: ReposUpdateReleaseVariables) =>
      fetchReposUpdateRelease({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListReleaseAssetsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReposListReleaseAssetsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleaseAssetsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListReleaseAssetsResponse = Schemas.ReleaseAsset[];

export type ReposListReleaseAssetsVariables = {
  pathParams: ReposListReleaseAssetsPathParams;
  queryParams?: ReposListReleaseAssetsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListReleaseAssets = (
  variables: ReposListReleaseAssetsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListReleaseAssetsResponse,
    ReposListReleaseAssetsError,
    undefined,
    {},
    ReposListReleaseAssetsQueryParams,
    ReposListReleaseAssetsPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "get",
    ...variables,
    signal,
  });

export const reposListReleaseAssetsQuery = (
  variables: ReposListReleaseAssetsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListReleaseAssetsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    operationId: "reposListReleaseAssets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListReleaseAssets(variables, signal),
});

export const useSuspenseReposListReleaseAssets = <
  TData = ReposListReleaseAssetsResponse,
>(
  variables: ReposListReleaseAssetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleaseAssetsResponse,
      ReposListReleaseAssetsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListReleaseAssetsResponse,
    ReposListReleaseAssetsError,
    TData
  >({
    ...reposListReleaseAssetsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListReleaseAssets = <
  TData = ReposListReleaseAssetsResponse,
>(
  variables: ReposListReleaseAssetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleaseAssetsResponse,
      ReposListReleaseAssetsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleaseAssetsResponse,
    ReposListReleaseAssetsError,
    TData
  >({
    ...reposListReleaseAssetsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposUploadReleaseAssetPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReposUploadReleaseAssetQueryParams = {
  name: string;
  label?: string;
};

export type ReposUploadReleaseAssetError = Fetcher.ErrorWrapper<undefined>;

export type ReposUploadReleaseAssetVariables = {
  body?: Blob;
  pathParams: ReposUploadReleaseAssetPathParams;
  queryParams: ReposUploadReleaseAssetQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 * *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const fetchReposUploadReleaseAsset = (
  variables: ReposUploadReleaseAssetVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposUploadReleaseAssetError,
    Blob,
    {},
    ReposUploadReleaseAssetQueryParams,
    ReposUploadReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 * *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const useReposUploadReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      ReposUploadReleaseAssetError,
      ReposUploadReleaseAssetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    ReposUploadReleaseAssetError,
    ReposUploadReleaseAssetVariables
  >({
    mutationFn: (variables: ReposUploadReleaseAssetVariables) =>
      fetchReposUploadReleaseAsset({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsListForReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReactionsListForReleaseQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
   */
  content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForReleaseError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReactionsListForReleaseResponse = Schemas.Reaction[];

export type ReactionsListForReleaseVariables = {
  pathParams: ReactionsListForReleasePathParams;
  queryParams?: ReactionsListForReleaseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const fetchReactionsListForRelease = (
  variables: ReactionsListForReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForReleaseResponse,
    ReactionsListForReleaseError,
    undefined,
    {},
    ReactionsListForReleaseQueryParams,
    ReactionsListForReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const reactionsListForReleaseQuery = (
  variables: ReactionsListForReleaseVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForReleaseResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/releases/{releaseId}/reactions",
    operationId: "reactionsListForRelease",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForRelease(variables, signal),
});

/**
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const useSuspenseReactionsListForRelease = <
  TData = ReactionsListForReleaseResponse,
>(
  variables: ReactionsListForReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForReleaseResponse,
      ReactionsListForReleaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForReleaseResponse,
    ReactionsListForReleaseError,
    TData
  >({
    ...reactionsListForReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const useReactionsListForRelease = <
  TData = ReactionsListForReleaseResponse,
>(
  variables: ReactionsListForReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForReleaseResponse,
      ReactionsListForReleaseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForReleaseResponse,
    ReactionsListForReleaseError,
    TData
  >({
    ...reactionsListForReleaseQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
};

export type ReactionsCreateForReleaseError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ReactionsCreateForReleaseRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
   */
  content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
};

export type ReactionsCreateForReleaseVariables = {
  body: ReactionsCreateForReleaseRequestBody;
  pathParams: ReactionsCreateForReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
 */
export const fetchReactionsCreateForRelease = (
  variables: ReactionsCreateForReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForReleaseError,
    ReactionsCreateForReleaseRequestBody,
    {},
    {},
    ReactionsCreateForReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
 */
export const useReactionsCreateForRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForReleaseError,
      ReactionsCreateForReleaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForReleaseError,
    ReactionsCreateForReleaseVariables
  >({
    mutationFn: (variables: ReactionsCreateForReleaseVariables) =>
      fetchReactionsCreateForRelease({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReactionsDeleteForReleasePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the release.
   */
  releaseId: number;
  /**
   * The unique identifier of the reaction.
   */
  reactionId: number;
};

export type ReactionsDeleteForReleaseError = Fetcher.ErrorWrapper<undefined>;

export type ReactionsDeleteForReleaseVariables = {
  pathParams: ReactionsDeleteForReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const fetchReactionsDeleteForRelease = (
  variables: ReactionsDeleteForReleaseVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReactionsDeleteForReleaseError,
    undefined,
    {},
    {},
    ReactionsDeleteForReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
 */
export const useReactionsDeleteForRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReactionsDeleteForReleaseError,
      ReactionsDeleteForReleaseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReactionsDeleteForReleaseError,
    ReactionsDeleteForReleaseVariables
  >({
    mutationFn: (variables: ReactionsDeleteForReleaseVariables) =>
      fetchReactionsDeleteForRelease({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SecretScanningListAlertsForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type SecretScanningListAlertsForRepoQueryParams = {
  /**
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  state?: "open" | "resolved";
  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types.
   */
  secret_type?: string;
  /**
   * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
   */
  resolution?: string;
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
   */
  before?: string;
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
   */
  after?: string;
};

export type SecretScanningListAlertsForRepoError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningListAlertsForRepoResponse =
  Schemas.SecretScanningAlert[];

export type SecretScanningListAlertsForRepoVariables = {
  pathParams: SecretScanningListAlertsForRepoPathParams;
  queryParams?: SecretScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningListAlertsForRepo = (
  variables: SecretScanningListAlertsForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SecretScanningListAlertsForRepoResponse,
    SecretScanningListAlertsForRepoError,
    undefined,
    {},
    SecretScanningListAlertsForRepoQueryParams,
    SecretScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const secretScanningListAlertsForRepoQuery = (
  variables: SecretScanningListAlertsForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SecretScanningListAlertsForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/secret-scanning/alerts",
    operationId: "secretScanningListAlertsForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSecretScanningListAlertsForRepo(variables, signal),
});

/**
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSuspenseSecretScanningListAlertsForRepo = <
  TData = SecretScanningListAlertsForRepoResponse,
>(
  variables: SecretScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForRepoResponse,
      SecretScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SecretScanningListAlertsForRepoResponse,
    SecretScanningListAlertsForRepoError,
    TData
  >({
    ...secretScanningListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningListAlertsForRepo = <
  TData = SecretScanningListAlertsForRepoResponse,
>(
  variables: SecretScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForRepoResponse,
      SecretScanningListAlertsForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListAlertsForRepoResponse,
    SecretScanningListAlertsForRepoError,
    TData
  >({
    ...secretScanningListAlertsForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SecretScanningGetAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningGetAlertError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SecretScanningGetAlertVariables = {
  pathParams: SecretScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningGetAlert = (
  variables: SecretScanningGetAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    SecretScanningGetAlertError,
    undefined,
    {},
    {},
    SecretScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const secretScanningGetAlertQuery = (
  variables: SecretScanningGetAlertVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.SecretScanningAlert>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    operationId: "secretScanningGetAlert",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSecretScanningGetAlert(variables, signal),
});

/**
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSuspenseSecretScanningGetAlert = <
  TData = Schemas.SecretScanningAlert,
>(
  variables: SecretScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SecretScanningAlert,
      SecretScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.SecretScanningAlert,
    SecretScanningGetAlertError,
    TData
  >({
    ...secretScanningGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single secret scanning alert detected in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningGetAlert = <TData = Schemas.SecretScanningAlert>(
  variables: SecretScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SecretScanningAlert,
      SecretScanningGetAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SecretScanningAlert,
    SecretScanningGetAlertError,
    TData
  >({
    ...secretScanningGetAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SecretScanningUpdateAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningUpdateAlertError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningUpdateAlertRequestBody = {
  resolution?: Schemas.SecretScanningAlertResolution;
  resolution_comment?: Schemas.SecretScanningAlertResolutionComment;
  state: Schemas.SecretScanningAlertState;
};

export type SecretScanningUpdateAlertVariables = {
  body: SecretScanningUpdateAlertRequestBody;
  pathParams: SecretScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a secret scanning alert in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const fetchSecretScanningUpdateAlert = (
  variables: SecretScanningUpdateAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    SecretScanningUpdateAlertError,
    SecretScanningUpdateAlertRequestBody,
    {},
    {},
    SecretScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates the status of a secret scanning alert in an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const useSecretScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SecretScanningAlert,
      SecretScanningUpdateAlertError,
      SecretScanningUpdateAlertVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.SecretScanningAlert,
    SecretScanningUpdateAlertError,
    SecretScanningUpdateAlertVariables
  >({
    mutationFn: (variables: SecretScanningUpdateAlertVariables) =>
      fetchSecretScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SecretScanningListLocationsForAlertPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningListLocationsForAlertQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type SecretScanningListLocationsForAlertError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: Responses.ServiceUnavailable;
}>;

export type SecretScanningListLocationsForAlertResponse =
  Schemas.SecretScanningLocation[];

export type SecretScanningListLocationsForAlertVariables = {
  pathParams: SecretScanningListLocationsForAlertPathParams;
  queryParams?: SecretScanningListLocationsForAlertQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningListLocationsForAlert = (
  variables: SecretScanningListLocationsForAlertVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SecretScanningListLocationsForAlertResponse,
    SecretScanningListLocationsForAlertError,
    undefined,
    {},
    SecretScanningListLocationsForAlertQueryParams,
    SecretScanningListLocationsForAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}/locations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const secretScanningListLocationsForAlertQuery = (
  variables: SecretScanningListLocationsForAlertVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SecretScanningListLocationsForAlertResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}/locations",
    operationId: "secretScanningListLocationsForAlert",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSecretScanningListLocationsForAlert(variables, signal),
});

/**
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSuspenseSecretScanningListLocationsForAlert = <
  TData = SecretScanningListLocationsForAlertResponse,
>(
  variables: SecretScanningListLocationsForAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListLocationsForAlertResponse,
      SecretScanningListLocationsForAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SecretScanningListLocationsForAlertResponse,
    SecretScanningListLocationsForAlertError,
    TData
  >({
    ...secretScanningListLocationsForAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all locations for a given secret scanning alert for an eligible repository.
 * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
 * For public repositories, you may instead use the `public_repo` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningListLocationsForAlert = <
  TData = SecretScanningListLocationsForAlertResponse,
>(
  variables: SecretScanningListLocationsForAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListLocationsForAlertResponse,
      SecretScanningListLocationsForAlertError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListLocationsForAlertResponse,
    SecretScanningListLocationsForAlertError,
    TData
  >({
    ...secretScanningListLocationsForAlertQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListStargazersForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityListStargazersForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListStargazersForRepoError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ActivityListStargazersForRepoVariables = {
  pathParams: ActivityListStargazersForRepoPathParams;
  queryParams?: ActivityListStargazersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const fetchActivityListStargazersForRepo = (
  variables: ActivityListStargazersForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SimpleUser[] | Schemas.Stargazer[],
    ActivityListStargazersForRepoError,
    undefined,
    {},
    ActivityListStargazersForRepoQueryParams,
    ActivityListStargazersForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/stargazers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const activityListStargazersForRepoQuery = (
  variables: ActivityListStargazersForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.SimpleUser[] | Schemas.Stargazer[]>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stargazers",
    operationId: "activityListStargazersForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListStargazersForRepo(variables, signal),
});

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useSuspenseActivityListStargazersForRepo = <
  TData = Schemas.SimpleUser[] | Schemas.Stargazer[],
>(
  variables: ActivityListStargazersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SimpleUser[] | Schemas.Stargazer[],
      ActivityListStargazersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.SimpleUser[] | Schemas.Stargazer[],
    ActivityListStargazersForRepoError,
    TData
  >({
    ...activityListStargazersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useActivityListStargazersForRepo = <
  TData = Schemas.SimpleUser[] | Schemas.Stargazer[],
>(
  variables: ActivityListStargazersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SimpleUser[] | Schemas.Stargazer[],
      ActivityListStargazersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SimpleUser[] | Schemas.Stargazer[],
    ActivityListStargazersForRepoError,
    TData
  >({
    ...activityListStargazersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetCodeFrequencyStatsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetCodeFrequencyStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetCodeFrequencyStatsVariables = {
  pathParams: ReposGetCodeFrequencyStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const fetchReposGetCodeFrequencyStats = (
  variables: ReposGetCodeFrequencyStatsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent,
    ReposGetCodeFrequencyStatsError,
    undefined,
    {},
    {},
    ReposGetCodeFrequencyStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/code_frequency",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const reposGetCodeFrequencyStatsQuery = (
  variables: ReposGetCodeFrequencyStatsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<
    Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent
  >;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stats/code_frequency",
    operationId: "reposGetCodeFrequencyStats",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCodeFrequencyStats(variables, signal),
});

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const useSuspenseReposGetCodeFrequencyStats = <
  TData =
    | Schemas.CodeFrequencyStat[]
    | Responses.Accepted
    | Responses.NoContent,
>(
  variables: ReposGetCodeFrequencyStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent,
      ReposGetCodeFrequencyStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent,
    ReposGetCodeFrequencyStatsError,
    TData
  >({
    ...reposGetCodeFrequencyStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const useReposGetCodeFrequencyStats = <
  TData =
    | Schemas.CodeFrequencyStat[]
    | Responses.Accepted
    | Responses.NoContent,
>(
  variables: ReposGetCodeFrequencyStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent,
      ReposGetCodeFrequencyStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeFrequencyStat[] | Responses.Accepted | Responses.NoContent,
    ReposGetCodeFrequencyStatsError,
    TData
  >({
    ...reposGetCodeFrequencyStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetCommitActivityStatsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetCommitActivityStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetCommitActivityStatsVariables = {
  pathParams: ReposGetCommitActivityStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const fetchReposGetCommitActivityStats = (
  variables: ReposGetCommitActivityStatsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetCommitActivityStatsError,
    undefined,
    {},
    {},
    ReposGetCommitActivityStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/commit_activity",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const reposGetCommitActivityStatsQuery = (
  variables: ReposGetCommitActivityStatsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<
    Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent
  >;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stats/commit_activity",
    operationId: "reposGetCommitActivityStats",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetCommitActivityStats(variables, signal),
});

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const useSuspenseReposGetCommitActivityStats = <
  TData = Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
>(
  variables: ReposGetCommitActivityStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
      ReposGetCommitActivityStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetCommitActivityStatsError,
    TData
  >({
    ...reposGetCommitActivityStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const useReposGetCommitActivityStats = <
  TData = Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
>(
  variables: ReposGetCommitActivityStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
      ReposGetCommitActivityStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetCommitActivityStatsError,
    TData
  >({
    ...reposGetCommitActivityStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetContributorsStatsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetContributorsStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetContributorsStatsVariables = {
  pathParams: ReposGetContributorsStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const fetchReposGetContributorsStats = (
  variables: ReposGetContributorsStatsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetContributorsStatsError,
    undefined,
    {},
    {},
    ReposGetContributorsStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/contributors",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const reposGetContributorsStatsQuery = (
  variables: ReposGetContributorsStatsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<
    Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent
  >;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stats/contributors",
    operationId: "reposGetContributorsStats",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetContributorsStats(variables, signal),
});

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const useSuspenseReposGetContributorsStats = <
  TData =
    | Schemas.ContributorActivity[]
    | Responses.Accepted
    | Responses.NoContent,
>(
  variables: ReposGetContributorsStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent,
      ReposGetContributorsStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetContributorsStatsError,
    TData
  >({
    ...reposGetContributorsStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const useReposGetContributorsStats = <
  TData =
    | Schemas.ContributorActivity[]
    | Responses.Accepted
    | Responses.NoContent,
>(
  variables: ReposGetContributorsStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent,
      ReposGetContributorsStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ContributorActivity[] | Responses.Accepted | Responses.NoContent,
    ReposGetContributorsStatsError,
    TData
  >({
    ...reposGetContributorsStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetParticipationStatsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetParticipationStatsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetParticipationStatsVariables = {
  pathParams: ReposGetParticipationStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const fetchReposGetParticipationStats = (
  variables: ReposGetParticipationStatsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ParticipationStats,
    ReposGetParticipationStatsError,
    undefined,
    {},
    {},
    ReposGetParticipationStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/participation",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const reposGetParticipationStatsQuery = (
  variables: ReposGetParticipationStatsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ParticipationStats>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stats/participation",
    operationId: "reposGetParticipationStats",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetParticipationStats(variables, signal),
});

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const useSuspenseReposGetParticipationStats = <
  TData = Schemas.ParticipationStats,
>(
  variables: ReposGetParticipationStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ParticipationStats,
      ReposGetParticipationStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ParticipationStats,
    ReposGetParticipationStatsError,
    TData
  >({
    ...reposGetParticipationStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const useReposGetParticipationStats = <
  TData = Schemas.ParticipationStats,
>(
  variables: ReposGetParticipationStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ParticipationStats,
      ReposGetParticipationStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ParticipationStats,
    ReposGetParticipationStatsError,
    TData
  >({
    ...reposGetParticipationStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetPunchCardStatsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetPunchCardStatsError = Fetcher.ErrorWrapper<undefined>;

export type ReposGetPunchCardStatsVariables = {
  pathParams: ReposGetPunchCardStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const fetchReposGetPunchCardStats = (
  variables: ReposGetPunchCardStatsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodeFrequencyStat[] | Responses.NoContent,
    ReposGetPunchCardStatsError,
    undefined,
    {},
    {},
    ReposGetPunchCardStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/punch_card",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const reposGetPunchCardStatsQuery = (
  variables: ReposGetPunchCardStatsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodeFrequencyStat[] | Responses.NoContent>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/stats/punch_card",
    operationId: "reposGetPunchCardStats",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetPunchCardStats(variables, signal),
});

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const useSuspenseReposGetPunchCardStats = <
  TData = Schemas.CodeFrequencyStat[] | Responses.NoContent,
>(
  variables: ReposGetPunchCardStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeFrequencyStat[] | Responses.NoContent,
      ReposGetPunchCardStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodeFrequencyStat[] | Responses.NoContent,
    ReposGetPunchCardStatsError,
    TData
  >({
    ...reposGetPunchCardStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const useReposGetPunchCardStats = <
  TData = Schemas.CodeFrequencyStat[] | Responses.NoContent,
>(
  variables: ReposGetPunchCardStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeFrequencyStat[] | Responses.NoContent,
      ReposGetPunchCardStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeFrequencyStat[] | Responses.NoContent,
    ReposGetPunchCardStatsError,
    TData
  >({
    ...reposGetPunchCardStatsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateCommitStatusPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  sha: string;
};

export type ReposCreateCommitStatusError = Fetcher.ErrorWrapper<undefined>;

export type ReposCreateCommitStatusRequestBody = {
  /**
   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
   *
   * @default default
   */
  context?: string;
  /**
   * A short description of the status.
   */
  description?: string | null;
  /**
   * The state of the status.
   */
  state: "error" | "failure" | "pending" | "success";
  /**
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
   * `http://ci.example.com/user/repo/build/sha`
   */
  target_url?: string | null;
};

export type ReposCreateCommitStatusVariables = {
  body: ReposCreateCommitStatusRequestBody;
  pathParams: ReposCreateCommitStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const fetchReposCreateCommitStatus = (
  variables: ReposCreateCommitStatusVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Status,
    ReposCreateCommitStatusError,
    ReposCreateCommitStatusRequestBody,
    {},
    {},
    ReposCreateCommitStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/statuses/{sha}",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const useReposCreateCommitStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Status,
      ReposCreateCommitStatusError,
      ReposCreateCommitStatusVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Status,
    ReposCreateCommitStatusError,
    ReposCreateCommitStatusVariables
  >({
    mutationFn: (variables: ReposCreateCommitStatusVariables) =>
      fetchReposCreateCommitStatus({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivityListWatchersForRepoPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityListWatchersForRepoQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchersForRepoError = Fetcher.ErrorWrapper<undefined>;

export type ActivityListWatchersForRepoResponse = Schemas.SimpleUser[];

export type ActivityListWatchersForRepoVariables = {
  pathParams: ActivityListWatchersForRepoPathParams;
  queryParams?: ActivityListWatchersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people watching the specified repository.
 */
export const fetchActivityListWatchersForRepo = (
  variables: ActivityListWatchersForRepoVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListWatchersForRepoResponse,
    ActivityListWatchersForRepoError,
    undefined,
    {},
    ActivityListWatchersForRepoQueryParams,
    ActivityListWatchersForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/subscribers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the people watching the specified repository.
 */
export const activityListWatchersForRepoQuery = (
  variables: ActivityListWatchersForRepoVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListWatchersForRepoResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/subscribers",
    operationId: "activityListWatchersForRepo",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListWatchersForRepo(variables, signal),
});

/**
 * Lists the people watching the specified repository.
 */
export const useSuspenseActivityListWatchersForRepo = <
  TData = ActivityListWatchersForRepoResponse,
>(
  variables: ActivityListWatchersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchersForRepoResponse,
      ActivityListWatchersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListWatchersForRepoResponse,
    ActivityListWatchersForRepoError,
    TData
  >({
    ...activityListWatchersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people watching the specified repository.
 */
export const useActivityListWatchersForRepo = <
  TData = ActivityListWatchersForRepoResponse,
>(
  variables: ActivityListWatchersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchersForRepoResponse,
      ActivityListWatchersForRepoError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchersForRepoResponse,
    ActivityListWatchersForRepoError,
    TData
  >({
    ...activityListWatchersForRepoQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityDeleteRepoSubscriptionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityDeleteRepoSubscriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityDeleteRepoSubscriptionVariables = {
  pathParams: ActivityDeleteRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const fetchActivityDeleteRepoSubscription = (
  variables: ActivityDeleteRepoSubscriptionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityDeleteRepoSubscriptionError,
    undefined,
    {},
    {},
    ActivityDeleteRepoSubscriptionPathParams
  >({
    url: "/repos/{owner}/{repo}/subscription",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const useActivityDeleteRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityDeleteRepoSubscriptionError,
      ActivityDeleteRepoSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityDeleteRepoSubscriptionError,
    ActivityDeleteRepoSubscriptionVariables
  >({
    mutationFn: (variables: ActivityDeleteRepoSubscriptionVariables) =>
      fetchActivityDeleteRepoSubscription({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivityGetRepoSubscriptionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityGetRepoSubscriptionError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ActivityGetRepoSubscriptionVariables = {
  pathParams: ActivityGetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityGetRepoSubscription = (
  variables: ActivityGetRepoSubscriptionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    ActivityGetRepoSubscriptionError,
    undefined,
    {},
    {},
    ActivityGetRepoSubscriptionPathParams
  >({
    url: "/repos/{owner}/{repo}/subscription",
    method: "get",
    ...variables,
    signal,
  });

export const activityGetRepoSubscriptionQuery = (
  variables: ActivityGetRepoSubscriptionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.RepositorySubscription>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/subscription",
    operationId: "activityGetRepoSubscription",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityGetRepoSubscription(variables, signal),
});

export const useSuspenseActivityGetRepoSubscription = <
  TData = Schemas.RepositorySubscription,
>(
  variables: ActivityGetRepoSubscriptionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositorySubscription,
      ActivityGetRepoSubscriptionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.RepositorySubscription,
    ActivityGetRepoSubscriptionError,
    TData
  >({
    ...activityGetRepoSubscriptionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityGetRepoSubscription = <
  TData = Schemas.RepositorySubscription,
>(
  variables: ActivityGetRepoSubscriptionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositorySubscription,
      ActivityGetRepoSubscriptionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositorySubscription,
    ActivityGetRepoSubscriptionError,
    TData
  >({
    ...activityGetRepoSubscriptionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivitySetRepoSubscriptionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivitySetRepoSubscriptionError = Fetcher.ErrorWrapper<undefined>;

export type ActivitySetRepoSubscriptionRequestBody = {
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean;
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean;
};

export type ActivitySetRepoSubscriptionVariables = {
  body?: ActivitySetRepoSubscriptionRequestBody;
  pathParams: ActivitySetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const fetchActivitySetRepoSubscription = (
  variables: ActivitySetRepoSubscriptionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    ActivitySetRepoSubscriptionError,
    ActivitySetRepoSubscriptionRequestBody,
    {},
    {},
    ActivitySetRepoSubscriptionPathParams
  >({
    url: "/repos/{owner}/{repo}/subscription",
    method: "put",
    ...variables,
    signal,
  });

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const useActivitySetRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositorySubscription,
      ActivitySetRepoSubscriptionError,
      ActivitySetRepoSubscriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositorySubscription,
    ActivitySetRepoSubscriptionError,
    ActivitySetRepoSubscriptionVariables
  >({
    mutationFn: (variables: ActivitySetRepoSubscriptionVariables) =>
      fetchActivitySetRepoSubscription({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListTagsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListTagsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTagsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListTagsResponse = Schemas.Tag[];

export type ReposListTagsVariables = {
  pathParams: ReposListTagsPathParams;
  queryParams?: ReposListTagsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTags = (
  variables: ReposListTagsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListTagsResponse,
    ReposListTagsError,
    undefined,
    {},
    ReposListTagsQueryParams,
    ReposListTagsPathParams
  >({ url: "/repos/{owner}/{repo}/tags", method: "get", ...variables, signal });

export const reposListTagsQuery = (
  variables: ReposListTagsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListTagsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/tags",
    operationId: "reposListTags",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListTags(variables, signal),
});

export const useSuspenseReposListTags = <TData = ReposListTagsResponse>(
  variables: ReposListTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagsResponse,
      ReposListTagsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListTagsResponse,
    ReposListTagsError,
    TData
  >({
    ...reposListTagsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListTags = <TData = ReposListTagsResponse>(
  variables: ReposListTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagsResponse,
      ReposListTagsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<ReposListTagsResponse, ReposListTagsError, TData>({
    ...reposListTagsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListTagProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListTagProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposListTagProtectionResponse = Schemas.TagProtection[];

export type ReposListTagProtectionVariables = {
  pathParams: ReposListTagProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const fetchReposListTagProtection = (
  variables: ReposListTagProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListTagProtectionResponse,
    ReposListTagProtectionError,
    undefined,
    {},
    {},
    ReposListTagProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/tags/protection",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const reposListTagProtectionQuery = (
  variables: ReposListTagProtectionVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListTagProtectionResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/tags/protection",
    operationId: "reposListTagProtection",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListTagProtection(variables, signal),
});

/**
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const useSuspenseReposListTagProtection = <
  TData = ReposListTagProtectionResponse,
>(
  variables: ReposListTagProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagProtectionResponse,
      ReposListTagProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListTagProtectionResponse,
    ReposListTagProtectionError,
    TData
  >({
    ...reposListTagProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository administrators.
 */
export const useReposListTagProtection = <
  TData = ReposListTagProtectionResponse,
>(
  variables: ReposListTagProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagProtectionResponse,
      ReposListTagProtectionError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListTagProtectionResponse,
    ReposListTagProtectionError,
    TData
  >({
    ...reposListTagProtectionQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateTagProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCreateTagProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposCreateTagProtectionRequestBody = {
  /**
   * An optional glob pattern to match against when enforcing tag protection.
   */
  pattern: string;
};

export type ReposCreateTagProtectionVariables = {
  body: ReposCreateTagProtectionRequestBody;
  pathParams: ReposCreateTagProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This creates a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const fetchReposCreateTagProtection = (
  variables: ReposCreateTagProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TagProtection,
    ReposCreateTagProtectionError,
    ReposCreateTagProtectionRequestBody,
    {},
    {},
    ReposCreateTagProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/tags/protection",
    method: "post",
    ...variables,
    signal,
  });

/**
 * This creates a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const useReposCreateTagProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TagProtection,
      ReposCreateTagProtectionError,
      ReposCreateTagProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TagProtection,
    ReposCreateTagProtectionError,
    ReposCreateTagProtectionVariables
  >({
    mutationFn: (variables: ReposCreateTagProtectionVariables) =>
      fetchReposCreateTagProtection({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDeleteTagProtectionPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  /**
   * The unique identifier of the tag protection.
   */
  tagProtectionId: number;
};

export type ReposDeleteTagProtectionError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ReposDeleteTagProtectionVariables = {
  pathParams: ReposDeleteTagProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This deletes a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const fetchReposDeleteTagProtection = (
  variables: ReposDeleteTagProtectionVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeleteTagProtectionError,
    undefined,
    {},
    {},
    ReposDeleteTagProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/tags/protection/{tagProtectionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * This deletes a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 */
export const useReposDeleteTagProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeleteTagProtectionError,
      ReposDeleteTagProtectionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeleteTagProtectionError,
    ReposDeleteTagProtectionVariables
  >({
    mutationFn: (variables: ReposDeleteTagProtectionVariables) =>
      fetchReposDeleteTagProtection({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDownloadTarballArchivePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  ref: string;
};

export type ReposDownloadTarballArchiveError = Fetcher.ErrorWrapper<undefined>;

export type ReposDownloadTarballArchiveVariables = {
  pathParams: ReposDownloadTarballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const fetchReposDownloadTarballArchive = (
  variables: ReposDownloadTarballArchiveVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDownloadTarballArchiveError,
    undefined,
    {},
    {},
    ReposDownloadTarballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/tarball/{ref}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const reposDownloadTarballArchiveQuery = (
  variables: ReposDownloadTarballArchiveVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/tarball/{ref}",
    operationId: "reposDownloadTarballArchive",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposDownloadTarballArchive(variables, signal),
});

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useSuspenseReposDownloadTarballArchive = <TData = undefined>(
  variables: ReposDownloadTarballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadTarballArchiveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ReposDownloadTarballArchiveError,
    TData
  >({
    ...reposDownloadTarballArchiveQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useReposDownloadTarballArchive = <TData = undefined>(
  variables: ReposDownloadTarballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadTarballArchiveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposDownloadTarballArchiveError,
    TData
  >({
    ...reposDownloadTarballArchiveQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListTeamsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposListTeamsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTeamsError = Fetcher.ErrorWrapper<undefined>;

export type ReposListTeamsResponse = Schemas.Team[];

export type ReposListTeamsVariables = {
  pathParams: ReposListTeamsPathParams;
  queryParams?: ReposListTeamsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTeams = (
  variables: ReposListTeamsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListTeamsResponse,
    ReposListTeamsError,
    undefined,
    {},
    ReposListTeamsQueryParams,
    ReposListTeamsPathParams
  >({
    url: "/repos/{owner}/{repo}/teams",
    method: "get",
    ...variables,
    signal,
  });

export const reposListTeamsQuery = (
  variables: ReposListTeamsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListTeamsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/teams",
    operationId: "reposListTeams",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListTeams(variables, signal),
});

export const useSuspenseReposListTeams = <TData = ReposListTeamsResponse>(
  variables: ReposListTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTeamsResponse,
      ReposListTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListTeamsResponse,
    ReposListTeamsError,
    TData
  >({
    ...reposListTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposListTeams = <TData = ReposListTeamsResponse>(
  variables: ReposListTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTeamsResponse,
      ReposListTeamsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListTeamsResponse,
    ReposListTeamsError,
    TData
  >({
    ...reposListTeamsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetAllTopicsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetAllTopicsQueryParams = {
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetAllTopicsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type ReposGetAllTopicsVariables = {
  pathParams: ReposGetAllTopicsPathParams;
  queryParams?: ReposGetAllTopicsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetAllTopics = (
  variables: ReposGetAllTopicsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Topic,
    ReposGetAllTopicsError,
    undefined,
    {},
    ReposGetAllTopicsQueryParams,
    ReposGetAllTopicsPathParams
  >({
    url: "/repos/{owner}/{repo}/topics",
    method: "get",
    ...variables,
    signal,
  });

export const reposGetAllTopicsQuery = (
  variables: ReposGetAllTopicsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Topic>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/topics",
    operationId: "reposGetAllTopics",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetAllTopics(variables, signal),
});

export const useSuspenseReposGetAllTopics = <TData = Schemas.Topic>(
  variables: ReposGetAllTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Topic, ReposGetAllTopicsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Topic,
    ReposGetAllTopicsError,
    TData
  >({
    ...reposGetAllTopicsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useReposGetAllTopics = <TData = Schemas.Topic>(
  variables: ReposGetAllTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Topic, ReposGetAllTopicsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.Topic, ReposGetAllTopicsError, TData>({
    ...reposGetAllTopicsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposReplaceAllTopicsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposReplaceAllTopicsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ReposReplaceAllTopicsRequestBody = {
  /**
   * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
   */
  names: string[];
};

export type ReposReplaceAllTopicsVariables = {
  body: ReposReplaceAllTopicsRequestBody;
  pathParams: ReposReplaceAllTopicsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposReplaceAllTopics = (
  variables: ReposReplaceAllTopicsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Topic,
    ReposReplaceAllTopicsError,
    ReposReplaceAllTopicsRequestBody,
    {},
    {},
    ReposReplaceAllTopicsPathParams
  >({
    url: "/repos/{owner}/{repo}/topics",
    method: "put",
    ...variables,
    signal,
  });

export const useReposReplaceAllTopics = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Topic,
      ReposReplaceAllTopicsError,
      ReposReplaceAllTopicsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Topic,
    ReposReplaceAllTopicsError,
    ReposReplaceAllTopicsVariables
  >({
    mutationFn: (variables: ReposReplaceAllTopicsVariables) =>
      fetchReposReplaceAllTopics({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposGetClonesPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetClonesQueryParams = {
  /**
   * The time frame to display results for.
   *
   * @default day
   */
  per?: "day" | "week";
};

export type ReposGetClonesError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetClonesVariables = {
  pathParams: ReposGetClonesPathParams;
  queryParams?: ReposGetClonesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetClones = (
  variables: ReposGetClonesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CloneTraffic,
    ReposGetClonesError,
    undefined,
    {},
    ReposGetClonesQueryParams,
    ReposGetClonesPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/clones",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const reposGetClonesQuery = (
  variables: ReposGetClonesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CloneTraffic>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/traffic/clones",
    operationId: "reposGetClones",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetClones(variables, signal),
});

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useSuspenseReposGetClones = <TData = Schemas.CloneTraffic>(
  variables: ReposGetClonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CloneTraffic,
      ReposGetClonesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CloneTraffic,
    ReposGetClonesError,
    TData
  >({
    ...reposGetClonesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetClones = <TData = Schemas.CloneTraffic>(
  variables: ReposGetClonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CloneTraffic,
      ReposGetClonesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.CloneTraffic, ReposGetClonesError, TData>({
    ...reposGetClonesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetTopPathsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetTopPathsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetTopPathsResponse = Schemas.ContentTraffic[];

export type ReposGetTopPathsVariables = {
  pathParams: ReposGetTopPathsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const fetchReposGetTopPaths = (
  variables: ReposGetTopPathsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetTopPathsResponse,
    ReposGetTopPathsError,
    undefined,
    {},
    {},
    ReposGetTopPathsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/paths",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const reposGetTopPathsQuery = (
  variables: ReposGetTopPathsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetTopPathsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/traffic/popular/paths",
    operationId: "reposGetTopPaths",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetTopPaths(variables, signal),
});

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const useSuspenseReposGetTopPaths = <TData = ReposGetTopPathsResponse>(
  variables: ReposGetTopPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopPathsResponse,
      ReposGetTopPathsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetTopPathsResponse,
    ReposGetTopPathsError,
    TData
  >({
    ...reposGetTopPathsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const useReposGetTopPaths = <TData = ReposGetTopPathsResponse>(
  variables: ReposGetTopPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopPathsResponse,
      ReposGetTopPathsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopPathsResponse,
    ReposGetTopPathsError,
    TData
  >({
    ...reposGetTopPathsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetTopReferrersPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetTopReferrersError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetTopReferrersResponse = Schemas.ReferrerTraffic[];

export type ReposGetTopReferrersVariables = {
  pathParams: ReposGetTopReferrersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const fetchReposGetTopReferrers = (
  variables: ReposGetTopReferrersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposGetTopReferrersResponse,
    ReposGetTopReferrersError,
    undefined,
    {},
    {},
    ReposGetTopReferrersPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/referrers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const reposGetTopReferrersQuery = (
  variables: ReposGetTopReferrersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposGetTopReferrersResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/traffic/popular/referrers",
    operationId: "reposGetTopReferrers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetTopReferrers(variables, signal),
});

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const useSuspenseReposGetTopReferrers = <
  TData = ReposGetTopReferrersResponse,
>(
  variables: ReposGetTopReferrersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopReferrersResponse,
      ReposGetTopReferrersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposGetTopReferrersResponse,
    ReposGetTopReferrersError,
    TData
  >({
    ...reposGetTopReferrersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const useReposGetTopReferrers = <TData = ReposGetTopReferrersResponse>(
  variables: ReposGetTopReferrersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopReferrersResponse,
      ReposGetTopReferrersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopReferrersResponse,
    ReposGetTopReferrersError,
    TData
  >({
    ...reposGetTopReferrersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposGetViewsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposGetViewsQueryParams = {
  /**
   * The time frame to display results for.
   *
   * @default day
   */
  per?: "day" | "week";
};

export type ReposGetViewsError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type ReposGetViewsVariables = {
  pathParams: ReposGetViewsPathParams;
  queryParams?: ReposGetViewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetViews = (
  variables: ReposGetViewsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ViewTraffic,
    ReposGetViewsError,
    undefined,
    {},
    ReposGetViewsQueryParams,
    ReposGetViewsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/views",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const reposGetViewsQuery = (
  variables: ReposGetViewsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ViewTraffic>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/traffic/views",
    operationId: "reposGetViews",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposGetViews(variables, signal),
});

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useSuspenseReposGetViews = <TData = Schemas.ViewTraffic>(
  variables: ReposGetViewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ViewTraffic, ReposGetViewsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ViewTraffic,
    ReposGetViewsError,
    TData
  >({
    ...reposGetViewsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetViews = <TData = Schemas.ViewTraffic>(
  variables: ReposGetViewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ViewTraffic, ReposGetViewsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.ViewTraffic, ReposGetViewsError, TData>({
    ...reposGetViewsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposTransferPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposTransferError = Fetcher.ErrorWrapper<undefined>;

export type ReposTransferRequestBody = {
  /**
   * The new name to be given to the repository.
   */
  new_name?: string;
  /**
   * The username or organization name the repository will be transferred to.
   */
  new_owner: string;
  /**
   * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
   */
  team_ids?: number[];
};

export type ReposTransferVariables = {
  body: ReposTransferRequestBody;
  pathParams: ReposTransferPathParams;
} & GithubContext["fetcherOptions"];

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
 */
export const fetchReposTransfer = (
  variables: ReposTransferVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.MinimalRepository,
    ReposTransferError,
    ReposTransferRequestBody,
    {},
    {},
    ReposTransferPathParams
  >({
    url: "/repos/{owner}/{repo}/transfer",
    method: "post",
    ...variables,
    signal,
  });

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
 */
export const useReposTransfer = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MinimalRepository,
      ReposTransferError,
      ReposTransferVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.MinimalRepository,
    ReposTransferError,
    ReposTransferVariables
  >({
    mutationFn: (variables: ReposTransferVariables) =>
      fetchReposTransfer({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDisableVulnerabilityAlertsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposDisableVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposDisableVulnerabilityAlertsVariables = {
  pathParams: ReposDisableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables dependency alerts and the dependency graph for a repository.
 * The authenticated user must have admin access to the repository. For more information,
 * see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposDisableVulnerabilityAlerts = (
  variables: ReposDisableVulnerabilityAlertsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDisableVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposDisableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Disables dependency alerts and the dependency graph for a repository.
 * The authenticated user must have admin access to the repository. For more information,
 * see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposDisableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDisableVulnerabilityAlertsError,
      ReposDisableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDisableVulnerabilityAlertsError,
    ReposDisableVulnerabilityAlertsVariables
  >({
    mutationFn: (variables: ReposDisableVulnerabilityAlertsVariables) =>
      fetchReposDisableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposCheckVulnerabilityAlertsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposCheckVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposCheckVulnerabilityAlertsVariables = {
  pathParams: ReposCheckVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposCheckVulnerabilityAlerts = (
  variables: ReposCheckVulnerabilityAlertsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposCheckVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposCheckVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const reposCheckVulnerabilityAlertsQuery = (
  variables: ReposCheckVulnerabilityAlertsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/vulnerability-alerts",
    operationId: "reposCheckVulnerabilityAlerts",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposCheckVulnerabilityAlerts(variables, signal),
});

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useSuspenseReposCheckVulnerabilityAlerts = <TData = undefined>(
  variables: ReposCheckVulnerabilityAlertsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposCheckVulnerabilityAlertsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ReposCheckVulnerabilityAlertsError,
    TData
  >({
    ...reposCheckVulnerabilityAlertsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposCheckVulnerabilityAlerts = <TData = undefined>(
  variables: ReposCheckVulnerabilityAlertsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposCheckVulnerabilityAlertsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposCheckVulnerabilityAlertsError,
    TData
  >({
    ...reposCheckVulnerabilityAlertsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposEnableVulnerabilityAlertsPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ReposEnableVulnerabilityAlertsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReposEnableVulnerabilityAlertsVariables = {
  pathParams: ReposEnableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposEnableVulnerabilityAlerts = (
  variables: ReposEnableVulnerabilityAlertsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposEnableVulnerabilityAlertsError,
    undefined,
    {},
    {},
    ReposEnableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposEnableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposEnableVulnerabilityAlertsError,
      ReposEnableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposEnableVulnerabilityAlertsError,
    ReposEnableVulnerabilityAlertsVariables
  >({
    mutationFn: (variables: ReposEnableVulnerabilityAlertsVariables) =>
      fetchReposEnableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposDownloadZipballArchivePathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
  ref: string;
};

export type ReposDownloadZipballArchiveError = Fetcher.ErrorWrapper<undefined>;

export type ReposDownloadZipballArchiveVariables = {
  pathParams: ReposDownloadZipballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 *
 * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
 */
export const fetchReposDownloadZipballArchive = (
  variables: ReposDownloadZipballArchiveVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDownloadZipballArchiveError,
    undefined,
    {},
    {},
    ReposDownloadZipballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/zipball/{ref}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 *
 * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
 */
export const reposDownloadZipballArchiveQuery = (
  variables: ReposDownloadZipballArchiveVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/repos/{owner}/{repo}/zipball/{ref}",
    operationId: "reposDownloadZipballArchive",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposDownloadZipballArchive(variables, signal),
});

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 *
 * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
 */
export const useSuspenseReposDownloadZipballArchive = <TData = undefined>(
  variables: ReposDownloadZipballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadZipballArchiveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ReposDownloadZipballArchiveError,
    TData
  >({
    ...reposDownloadZipballArchiveQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 *
 * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
 */
export const useReposDownloadZipballArchive = <TData = undefined>(
  variables: ReposDownloadZipballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ReposDownloadZipballArchiveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ReposDownloadZipballArchiveError,
    TData
  >({
    ...reposDownloadZipballArchiveQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateUsingTemplatePathParams = {
  templateOwner: string;
  templateRepo: string;
};

export type ReposCreateUsingTemplateError = Fetcher.ErrorWrapper<undefined>;

export type ReposCreateUsingTemplateRequestBody = {
  /**
   * A short description of the new repository.
   */
  description?: string;
  /**
   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
   *
   * @default false
   */
  include_all_branches?: boolean;
  /**
   * The name of the new repository.
   */
  name: string;
  /**
   * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
   */
  owner?: string;
  /**
   * Either `true` to create a new private repository or `false` to create a new public one.
   *
   * @default false
   */
  private?: boolean;
};

export type ReposCreateUsingTemplateVariables = {
  body: ReposCreateUsingTemplateRequestBody;
  pathParams: ReposCreateUsingTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateUsingTemplate = (
  variables: ReposCreateUsingTemplateVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateUsingTemplateError,
    ReposCreateUsingTemplateRequestBody,
    {},
    {},
    ReposCreateUsingTemplatePathParams
  >({
    url: "/repos/{templateOwner}/{templateRepo}/generate",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateUsingTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateUsingTemplateError,
      ReposCreateUsingTemplateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateUsingTemplateError,
    ReposCreateUsingTemplateVariables
  >({
    mutationFn: (variables: ReposCreateUsingTemplateVariables) =>
      fetchReposCreateUsingTemplate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListPublicQueryParams = {
  /**
   * A repository ID. Only return repositories with an ID greater than this ID.
   */
  since?: number;
};

export type ReposListPublicError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListPublicResponse = Schemas.MinimalRepository[];

export type ReposListPublicVariables = {
  queryParams?: ReposListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const fetchReposListPublic = (
  variables: ReposListPublicVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListPublicResponse,
    ReposListPublicError,
    undefined,
    {},
    ReposListPublicQueryParams,
    {}
  >({ url: "/repositories", method: "get", ...variables, signal });

/**
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const reposListPublicQuery = (
  variables: ReposListPublicVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListPublicResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories",
    operationId: "reposListPublic",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListPublic(variables, signal),
});

/**
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const useSuspenseReposListPublic = <TData = ReposListPublicResponse>(
  variables: ReposListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPublicResponse,
      ReposListPublicError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListPublicResponse,
    ReposListPublicError,
    TData
  >({
    ...reposListPublicQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const useReposListPublic = <TData = ReposListPublicResponse>(
  variables: ReposListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPublicResponse,
      ReposListPublicError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPublicResponse,
    ReposListPublicError,
    TData
  >({
    ...reposListPublicQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsListEnvironmentSecretsPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsListEnvironmentSecretsQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListEnvironmentSecretsError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListEnvironmentSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListEnvironmentSecretsVariables = {
  pathParams: ActionsListEnvironmentSecretsPathParams;
  queryParams?: ActionsListEnvironmentSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListEnvironmentSecrets = (
  variables: ActionsListEnvironmentSecretsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListEnvironmentSecretsResponse,
    ActionsListEnvironmentSecretsError,
    undefined,
    {},
    ActionsListEnvironmentSecretsQueryParams,
    ActionsListEnvironmentSecretsPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsListEnvironmentSecretsQuery = (
  variables: ActionsListEnvironmentSecretsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListEnvironmentSecretsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories/{repositoryId}/environments/{environmentName}/secrets",
    operationId: "actionsListEnvironmentSecrets",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListEnvironmentSecrets(variables, signal),
});

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsListEnvironmentSecrets = <
  TData = ActionsListEnvironmentSecretsResponse,
>(
  variables: ActionsListEnvironmentSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentSecretsResponse,
      ActionsListEnvironmentSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListEnvironmentSecretsResponse,
    ActionsListEnvironmentSecretsError,
    TData
  >({
    ...actionsListEnvironmentSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListEnvironmentSecrets = <
  TData = ActionsListEnvironmentSecretsResponse,
>(
  variables: ActionsListEnvironmentSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentSecretsResponse,
      ActionsListEnvironmentSecretsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListEnvironmentSecretsResponse,
    ActionsListEnvironmentSecretsError,
    TData
  >({
    ...actionsListEnvironmentSecretsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsGetEnvironmentPublicKeyPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsGetEnvironmentPublicKeyError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetEnvironmentPublicKeyVariables = {
  pathParams: ActionsGetEnvironmentPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentPublicKey = (
  variables: ActionsGetEnvironmentPublicKeyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    ActionsGetEnvironmentPublicKeyError,
    undefined,
    {},
    {},
    ActionsGetEnvironmentPublicKeyPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsGetEnvironmentPublicKeyQuery = (
  variables: ActionsGetEnvironmentPublicKeyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories/{repositoryId}/environments/{environmentName}/secrets/public-key",
    operationId: "actionsGetEnvironmentPublicKey",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetEnvironmentPublicKey(variables, signal),
});

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetEnvironmentPublicKey = <
  TData = Schemas.ActionsPublicKey,
>(
  variables: ActionsGetEnvironmentPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetEnvironmentPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsPublicKey,
    ActionsGetEnvironmentPublicKeyError,
    TData
  >({
    ...actionsGetEnvironmentPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentPublicKey = <
  TData = Schemas.ActionsPublicKey,
>(
  variables: ActionsGetEnvironmentPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      ActionsGetEnvironmentPublicKeyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    ActionsGetEnvironmentPublicKeyError,
    TData
  >({
    ...actionsGetEnvironmentPublicKeyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsDeleteEnvironmentSecretPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsDeleteEnvironmentSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteEnvironmentSecretVariables = {
  pathParams: ActionsDeleteEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteEnvironmentSecret = (
  variables: ActionsDeleteEnvironmentSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteEnvironmentSecretError,
    undefined,
    {},
    {},
    ActionsDeleteEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteEnvironmentSecretError,
      ActionsDeleteEnvironmentSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteEnvironmentSecretError,
    ActionsDeleteEnvironmentSecretVariables
  >({
    mutationFn: (variables: ActionsDeleteEnvironmentSecretVariables) =>
      fetchActionsDeleteEnvironmentSecret({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActionsGetEnvironmentSecretPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsGetEnvironmentSecretError = Fetcher.ErrorWrapper<undefined>;

export type ActionsGetEnvironmentSecretVariables = {
  pathParams: ActionsGetEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentSecret = (
  variables: ActionsGetEnvironmentSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsSecret,
    ActionsGetEnvironmentSecretError,
    undefined,
    {},
    {},
    ActionsGetEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const actionsGetEnvironmentSecretQuery = (
  variables: ActionsGetEnvironmentSecretVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    operationId: "actionsGetEnvironmentSecret",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetEnvironmentSecret(variables, signal),
});

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetEnvironmentSecret = <
  TData = Schemas.ActionsSecret,
>(
  variables: ActionsGetEnvironmentSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetEnvironmentSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsSecret,
    ActionsGetEnvironmentSecretError,
    TData
  >({
    ...actionsGetEnvironmentSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentSecret = <TData = Schemas.ActionsSecret>(
  variables: ActionsGetEnvironmentSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      ActionsGetEnvironmentSecretError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    ActionsGetEnvironmentSecretError,
    TData
  >({
    ...actionsGetEnvironmentSecretQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateOrUpdateEnvironmentSecretPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateOrUpdateEnvironmentSecretRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretVariables = {
  body: ActionsCreateOrUpdateEnvironmentSecretRequestBody;
  pathParams: ActionsCreateOrUpdateEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateEnvironmentSecret = (
  variables: ActionsCreateOrUpdateEnvironmentSecretVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateEnvironmentSecretError,
    ActionsCreateOrUpdateEnvironmentSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateOrUpdateEnvironmentSecretError,
      ActionsCreateOrUpdateEnvironmentSecretVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateOrUpdateEnvironmentSecretError,
    ActionsCreateOrUpdateEnvironmentSecretVariables
  >({
    mutationFn: (variables: ActionsCreateOrUpdateEnvironmentSecretVariables) =>
      fetchActionsCreateOrUpdateEnvironmentSecret({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsListEnvironmentVariablesPathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsListEnvironmentVariablesQueryParams = {
  /**
   * The number of results per page (max 30).
   *
   * @default 10
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListEnvironmentVariablesError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsListEnvironmentVariablesResponse = {
  total_count: number;
  variables: Schemas.ActionsVariable[];
};

export type ActionsListEnvironmentVariablesVariables = {
  pathParams: ActionsListEnvironmentVariablesPathParams;
  queryParams?: ActionsListEnvironmentVariablesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const fetchActionsListEnvironmentVariables = (
  variables: ActionsListEnvironmentVariablesVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActionsListEnvironmentVariablesResponse,
    ActionsListEnvironmentVariablesError,
    undefined,
    {},
    ActionsListEnvironmentVariablesQueryParams,
    ActionsListEnvironmentVariablesPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/variables",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const actionsListEnvironmentVariablesQuery = (
  variables: ActionsListEnvironmentVariablesVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActionsListEnvironmentVariablesResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories/{repositoryId}/environments/{environmentName}/variables",
    operationId: "actionsListEnvironmentVariables",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsListEnvironmentVariables(variables, signal),
});

/**
 * Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const useSuspenseActionsListEnvironmentVariables = <
  TData = ActionsListEnvironmentVariablesResponse,
>(
  variables: ActionsListEnvironmentVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentVariablesResponse,
      ActionsListEnvironmentVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActionsListEnvironmentVariablesResponse,
    ActionsListEnvironmentVariablesError,
    TData
  >({
    ...actionsListEnvironmentVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const useActionsListEnvironmentVariables = <
  TData = ActionsListEnvironmentVariablesResponse,
>(
  variables: ActionsListEnvironmentVariablesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentVariablesResponse,
      ActionsListEnvironmentVariablesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListEnvironmentVariablesResponse,
    ActionsListEnvironmentVariablesError,
    TData
  >({
    ...actionsListEnvironmentVariablesQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsCreateEnvironmentVariablePathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsCreateEnvironmentVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsCreateEnvironmentVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * The value of the variable.
   */
  value: string;
};

export type ActionsCreateEnvironmentVariableVariables = {
  body: ActionsCreateEnvironmentVariableRequestBody;
  pathParams: ActionsCreateEnvironmentVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create an environment variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const fetchActionsCreateEnvironmentVariable = (
  variables: ActionsCreateEnvironmentVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    ActionsCreateEnvironmentVariableError,
    ActionsCreateEnvironmentVariableRequestBody,
    {},
    {},
    ActionsCreateEnvironmentVariablePathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/variables",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Create an environment variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const useActionsCreateEnvironmentVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      ActionsCreateEnvironmentVariableError,
      ActionsCreateEnvironmentVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    ActionsCreateEnvironmentVariableError,
    ActionsCreateEnvironmentVariableVariables
  >({
    mutationFn: (variables: ActionsCreateEnvironmentVariableVariables) =>
      fetchActionsCreateEnvironmentVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsDeleteEnvironmentVariablePathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsDeleteEnvironmentVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsDeleteEnvironmentVariableVariables = {
  pathParams: ActionsDeleteEnvironmentVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an environment variable using the variable name.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const fetchActionsDeleteEnvironmentVariable = (
  variables: ActionsDeleteEnvironmentVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsDeleteEnvironmentVariableError,
    undefined,
    {},
    {},
    ActionsDeleteEnvironmentVariablePathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/variables/{name}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an environment variable using the variable name.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const useActionsDeleteEnvironmentVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsDeleteEnvironmentVariableError,
      ActionsDeleteEnvironmentVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsDeleteEnvironmentVariableError,
    ActionsDeleteEnvironmentVariableVariables
  >({
    mutationFn: (variables: ActionsDeleteEnvironmentVariableVariables) =>
      fetchActionsDeleteEnvironmentVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActionsGetEnvironmentVariablePathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the environment.
   */
  environmentName: string;
  /**
   * The name of the variable.
   */
  name: string;
};

export type ActionsGetEnvironmentVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsGetEnvironmentVariableVariables = {
  pathParams: ActionsGetEnvironmentVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentVariable = (
  variables: ActionsGetEnvironmentVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsVariable,
    ActionsGetEnvironmentVariableError,
    undefined,
    {},
    {},
    ActionsGetEnvironmentVariablePathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/variables/{name}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const actionsGetEnvironmentVariableQuery = (
  variables: ActionsGetEnvironmentVariableVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsVariable>;
} => ({
  queryKey: queryKeyFn({
    path: "/repositories/{repositoryId}/environments/{environmentName}/variables/{name}",
    operationId: "actionsGetEnvironmentVariable",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActionsGetEnvironmentVariable(variables, signal),
});

/**
 * Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const useSuspenseActionsGetEnvironmentVariable = <
  TData = Schemas.ActionsVariable,
>(
  variables: ActionsGetEnvironmentVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsVariable,
      ActionsGetEnvironmentVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsVariable,
    ActionsGetEnvironmentVariableError,
    TData
  >({
    ...actionsGetEnvironmentVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentVariable = <
  TData = Schemas.ActionsVariable,
>(
  variables: ActionsGetEnvironmentVariableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsVariable,
      ActionsGetEnvironmentVariableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsVariable,
    ActionsGetEnvironmentVariableError,
    TData
  >({
    ...actionsGetEnvironmentVariableQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActionsUpdateEnvironmentVariablePathParams = {
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * The name of the environment.
   */
  environmentName: string;
};

export type ActionsUpdateEnvironmentVariableError =
  Fetcher.ErrorWrapper<undefined>;

export type ActionsUpdateEnvironmentVariableRequestBody = {
  /**
   * The name of the variable.
   */
  name?: string;
  /**
   * The value of the variable.
   */
  value?: string;
};

export type ActionsUpdateEnvironmentVariableVariables = {
  body?: ActionsUpdateEnvironmentVariableRequestBody;
  pathParams: ActionsUpdateEnvironmentVariablePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates an environment variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const fetchActionsUpdateEnvironmentVariable = (
  variables: ActionsUpdateEnvironmentVariableVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActionsUpdateEnvironmentVariableError,
    ActionsUpdateEnvironmentVariableRequestBody,
    {},
    {},
    ActionsUpdateEnvironmentVariablePathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/variables/{name}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates an environment variable that you can reference in a GitHub Actions workflow.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
 */
export const useActionsUpdateEnvironmentVariable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActionsUpdateEnvironmentVariableError,
      ActionsUpdateEnvironmentVariableVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActionsUpdateEnvironmentVariableError,
    ActionsUpdateEnvironmentVariableVariables
  >({
    mutationFn: (variables: ActionsUpdateEnvironmentVariableVariables) =>
      fetchActionsUpdateEnvironmentVariable({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SearchCodeQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "indexed";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCodeError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchCodeResponse = {
  incomplete_results: boolean;
  items: Schemas.CodeSearchResultItem[];
  total_count: number;
};

export type SearchCodeVariables = {
  queryParams: SearchCodeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const fetchSearchCode = (
  variables: SearchCodeVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchCodeResponse,
    SearchCodeError,
    undefined,
    {},
    SearchCodeQueryParams,
    {}
  >({ url: "/search/code", method: "get", ...variables, signal });

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const searchCodeQuery = (
  variables: SearchCodeVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchCodeResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/code",
    operationId: "searchCode",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchCode(variables, signal),
});

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const useSuspenseSearchCode = <TData = SearchCodeResponse>(
  variables: SearchCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchCodeResponse, SearchCodeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchCodeResponse,
    SearchCodeError,
    TData
  >({
    ...searchCodeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const useSearchCode = <TData = SearchCodeResponse>(
  variables: SearchCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchCodeResponse, SearchCodeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchCodeResponse, SearchCodeError, TData>({
    ...searchCodeQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchCommitsQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "author-date" | "committer-date";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCommitsError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type SearchCommitsResponse = {
  incomplete_results: boolean;
  items: Schemas.CommitSearchResultItem[];
  total_count: number;
};

export type SearchCommitsVariables = {
  queryParams: SearchCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const fetchSearchCommits = (
  variables: SearchCommitsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchCommitsResponse,
    SearchCommitsError,
    undefined,
    {},
    SearchCommitsQueryParams,
    {}
  >({ url: "/search/commits", method: "get", ...variables, signal });

/**
 * Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const searchCommitsQuery = (
  variables: SearchCommitsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchCommitsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/commits",
    operationId: "searchCommits",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchCommits(variables, signal),
});

/**
 * Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const useSuspenseSearchCommits = <TData = SearchCommitsResponse>(
  variables: SearchCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchCommitsResponse,
      SearchCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchCommitsResponse,
    SearchCommitsError,
    TData
  >({
    ...searchCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const useSearchCommits = <TData = SearchCommitsResponse>(
  variables: SearchCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchCommitsResponse,
      SearchCommitsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchCommitsResponse, SearchCommitsError, TData>({
    ...searchCommitsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchIssuesAndPullRequestsQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchIssuesAndPullRequestsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchIssuesAndPullRequestsResponse = {
  incomplete_results: boolean;
  items: Schemas.IssueSearchResultItem[];
  total_count: number;
};

export type SearchIssuesAndPullRequestsVariables = {
  queryParams: SearchIssuesAndPullRequestsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const fetchSearchIssuesAndPullRequests = (
  variables: SearchIssuesAndPullRequestsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchIssuesAndPullRequestsResponse,
    SearchIssuesAndPullRequestsError,
    undefined,
    {},
    SearchIssuesAndPullRequestsQueryParams,
    {}
  >({ url: "/search/issues", method: "get", ...variables, signal });

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const searchIssuesAndPullRequestsQuery = (
  variables: SearchIssuesAndPullRequestsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchIssuesAndPullRequestsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/issues",
    operationId: "searchIssuesAndPullRequests",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchIssuesAndPullRequests(variables, signal),
});

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const useSuspenseSearchIssuesAndPullRequests = <
  TData = SearchIssuesAndPullRequestsResponse,
>(
  variables: SearchIssuesAndPullRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchIssuesAndPullRequestsResponse,
      SearchIssuesAndPullRequestsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchIssuesAndPullRequestsResponse,
    SearchIssuesAndPullRequestsError,
    TData
  >({
    ...searchIssuesAndPullRequestsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const useSearchIssuesAndPullRequests = <
  TData = SearchIssuesAndPullRequestsResponse,
>(
  variables: SearchIssuesAndPullRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchIssuesAndPullRequestsResponse,
      SearchIssuesAndPullRequestsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    SearchIssuesAndPullRequestsResponse,
    SearchIssuesAndPullRequestsError,
    TData
  >({
    ...searchIssuesAndPullRequestsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchLabelsQueryParams = {
  /**
   * The id of the repository.
   */
  repository_id: number;
  /**
   * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
  /**
   * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "created" | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchLabelsError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type SearchLabelsResponse = {
  incomplete_results: boolean;
  items: Schemas.LabelSearchResultItem[];
  total_count: number;
};

export type SearchLabelsVariables = {
  queryParams: SearchLabelsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const fetchSearchLabels = (
  variables: SearchLabelsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchLabelsResponse,
    SearchLabelsError,
    undefined,
    {},
    SearchLabelsQueryParams,
    {}
  >({ url: "/search/labels", method: "get", ...variables, signal });

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const searchLabelsQuery = (
  variables: SearchLabelsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchLabelsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/labels",
    operationId: "searchLabels",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchLabels(variables, signal),
});

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const useSuspenseSearchLabels = <TData = SearchLabelsResponse>(
  variables: SearchLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchLabelsResponse, SearchLabelsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchLabelsResponse,
    SearchLabelsError,
    TData
  >({
    ...searchLabelsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const useSearchLabels = <TData = SearchLabelsResponse>(
  variables: SearchLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchLabelsResponse, SearchLabelsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchLabelsResponse, SearchLabelsError, TData>({
    ...searchLabelsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchReposQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchReposError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchReposResponse = {
  incomplete_results: boolean;
  items: Schemas.RepoSearchResultItem[];
  total_count: number;
};

export type SearchReposVariables = {
  queryParams: SearchReposQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const fetchSearchRepos = (
  variables: SearchReposVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchReposResponse,
    SearchReposError,
    undefined,
    {},
    SearchReposQueryParams,
    {}
  >({ url: "/search/repositories", method: "get", ...variables, signal });

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const searchReposQuery = (
  variables: SearchReposVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchReposResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/repositories",
    operationId: "searchRepos",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchRepos(variables, signal),
});

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const useSuspenseSearchRepos = <TData = SearchReposResponse>(
  variables: SearchReposVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchReposResponse, SearchReposError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchReposResponse,
    SearchReposError,
    TData
  >({
    ...searchReposQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 */
export const useSearchRepos = <TData = SearchReposResponse>(
  variables: SearchReposVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchReposResponse, SearchReposError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchReposResponse, SearchReposError, TData>({
    ...searchReposQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchTopicsQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchTopicsError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type SearchTopicsResponse = {
  incomplete_results: boolean;
  items: Schemas.TopicSearchResultItem[];
  total_count: number;
};

export type SearchTopicsVariables = {
  queryParams: SearchTopicsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const fetchSearchTopics = (
  variables: SearchTopicsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchTopicsResponse,
    SearchTopicsError,
    undefined,
    {},
    SearchTopicsQueryParams,
    {}
  >({ url: "/search/topics", method: "get", ...variables, signal });

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const searchTopicsQuery = (
  variables: SearchTopicsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchTopicsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/topics",
    operationId: "searchTopics",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchTopics(variables, signal),
});

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const useSuspenseSearchTopics = <TData = SearchTopicsResponse>(
  variables: SearchTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchTopicsResponse, SearchTopicsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchTopicsResponse,
    SearchTopicsError,
    TData
  >({
    ...searchTopicsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const useSearchTopics = <TData = SearchTopicsResponse>(
  variables: SearchTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchTopicsResponse, SearchTopicsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchTopicsResponse, SearchTopicsError, TData>({
    ...searchTopicsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type SearchUsersQueryParams = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "followers" | "repositories" | "joined";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchUsersError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type SearchUsersResponse = {
  incomplete_results: boolean;
  items: Schemas.UserSearchResultItem[];
  total_count: number;
};

export type SearchUsersVariables = {
  queryParams: SearchUsersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const fetchSearchUsers = (
  variables: SearchUsersVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    SearchUsersResponse,
    SearchUsersError,
    undefined,
    {},
    SearchUsersQueryParams,
    {}
  >({ url: "/search/users", method: "get", ...variables, signal });

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const searchUsersQuery = (
  variables: SearchUsersVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<SearchUsersResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/search/users",
    operationId: "searchUsers",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchSearchUsers(variables, signal),
});

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const useSuspenseSearchUsers = <TData = SearchUsersResponse>(
  variables: SearchUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchUsersResponse, SearchUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    SearchUsersResponse,
    SearchUsersError,
    TData
  >({
    ...searchUsersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const useSearchUsers = <TData = SearchUsersResponse>(
  variables: SearchUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<SearchUsersResponse, SearchUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<SearchUsersResponse, SearchUsersError, TData>({
    ...searchUsersQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsDeleteLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsDeleteLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsDeleteLegacyVariables = {
  pathParams: TeamsDeleteLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const fetchTeamsDeleteLegacy = (
  variables: TeamsDeleteLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteLegacyPathParams
  >({ url: "/teams/{teamId}", method: "delete", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const useTeamsDeleteLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteLegacyError,
      TeamsDeleteLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteLegacyError,
    TeamsDeleteLegacyVariables
  >({
    mutationFn: (variables: TeamsDeleteLegacyVariables) =>
      fetchTeamsDeleteLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsGetLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsGetLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetLegacyVariables = {
  pathParams: TeamsGetLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const fetchTeamsGetLegacy = (
  variables: TeamsGetLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsGetLegacyError,
    undefined,
    {},
    {},
    TeamsGetLegacyPathParams
  >({ url: "/teams/{teamId}", method: "get", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const teamsGetLegacyQuery = (
  variables: TeamsGetLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.TeamFull>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}",
    operationId: "teamsGetLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const useSuspenseTeamsGetLegacy = <TData = Schemas.TeamFull>(
  variables: TeamsGetLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetLegacyError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamFull,
    TeamsGetLegacyError,
    TData
  >({
    ...teamsGetLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const useTeamsGetLegacy = <TData = Schemas.TeamFull>(
  variables: TeamsGetLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamFull, TeamsGetLegacyError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<Schemas.TeamFull, TeamsGetLegacyError, TData>({
    ...teamsGetLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsUpdateLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsUpdateLegacyRequestBody = {
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * The name of the team.
   */
  name: string;
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
   * **For a non-nested team:**
   *  * `secret` - only visible to organization owners and members of this team.
   *  * `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   *  * `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateLegacyVariables = {
  body: TeamsUpdateLegacyRequestBody;
  pathParams: TeamsUpdateLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const fetchTeamsUpdateLegacy = (
  variables: TeamsUpdateLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateLegacyError,
    TeamsUpdateLegacyRequestBody,
    {},
    {},
    TeamsUpdateLegacyPathParams
  >({ url: "/teams/{teamId}", method: "patch", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const useTeamsUpdateLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      TeamsUpdateLegacyError,
      TeamsUpdateLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    TeamsUpdateLegacyError,
    TeamsUpdateLegacyVariables
  >({
    mutationFn: (variables: TeamsUpdateLegacyVariables) =>
      fetchTeamsUpdateLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsListDiscussionsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListDiscussionsLegacyQueryParams = {
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionsLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionsLegacyResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsLegacyVariables = {
  pathParams: TeamsListDiscussionsLegacyPathParams;
  queryParams?: TeamsListDiscussionsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionsLegacy = (
  variables: TeamsListDiscussionsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListDiscussionsLegacyResponse,
    TeamsListDiscussionsLegacyError,
    undefined,
    {},
    TeamsListDiscussionsLegacyQueryParams,
    TeamsListDiscussionsLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const teamsListDiscussionsLegacyQuery = (
  variables: TeamsListDiscussionsLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListDiscussionsLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions",
    operationId: "teamsListDiscussionsLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListDiscussionsLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseTeamsListDiscussionsLegacy = <
  TData = TeamsListDiscussionsLegacyResponse,
>(
  variables: TeamsListDiscussionsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsLegacyResponse,
      TeamsListDiscussionsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListDiscussionsLegacyResponse,
    TeamsListDiscussionsLegacyError,
    TData
  >({
    ...teamsListDiscussionsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionsLegacy = <
  TData = TeamsListDiscussionsLegacyResponse,
>(
  variables: TeamsListDiscussionsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsLegacyResponse,
      TeamsListDiscussionsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsLegacyResponse,
    TeamsListDiscussionsLegacyError,
    TData
  >({
    ...teamsListDiscussionsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsCreateDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsCreateDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionLegacyRequestBody = {
  /**
   * The discussion post's body text.
   */
  body: string;
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /**
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionLegacyVariables = {
  body: TeamsCreateDiscussionLegacyRequestBody;
  pathParams: TeamsCreateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionLegacy = (
  variables: TeamsCreateDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionLegacyError,
    TeamsCreateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsCreateDiscussionLegacyError,
      TeamsCreateDiscussionLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionLegacyError,
    TeamsCreateDiscussionLegacyVariables
  >({
    mutationFn: (variables: TeamsCreateDiscussionLegacyVariables) =>
      fetchTeamsCreateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsDeleteDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsDeleteDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionLegacyVariables = {
  pathParams: TeamsDeleteDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionLegacy = (
  variables: TeamsDeleteDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionLegacyError,
      TeamsDeleteDiscussionLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionLegacyError,
    TeamsDeleteDiscussionLegacyVariables
  >({
    mutationFn: (variables: TeamsDeleteDiscussionLegacyVariables) =>
      fetchTeamsDeleteDiscussionLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsGetDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsGetDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionLegacyVariables = {
  pathParams: TeamsGetDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionLegacy = (
  variables: TeamsGetDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionLegacyError,
    undefined,
    {},
    {},
    TeamsGetDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const teamsGetDiscussionLegacyQuery = (
  variables: TeamsGetDiscussionLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamDiscussion>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions/{discussionNumber}",
    operationId: "teamsGetDiscussionLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetDiscussionLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseTeamsGetDiscussionLegacy = <
  TData = Schemas.TeamDiscussion,
>(
  variables: TeamsGetDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionLegacyError,
    TData
  >({
    ...teamsGetDiscussionLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionLegacy = <TData = Schemas.TeamDiscussion>(
  variables: TeamsGetDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      TeamsGetDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    TeamsGetDiscussionLegacyError,
    TData
  >({
    ...teamsGetDiscussionLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsUpdateDiscussionLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionLegacyRequestBody = {
  /**
   * The discussion post's body text.
   */
  body?: string;
  /**
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionLegacyVariables = {
  body?: TeamsUpdateDiscussionLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionLegacy = (
  variables: TeamsUpdateDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionLegacyError,
    TeamsUpdateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      TeamsUpdateDiscussionLegacyError,
      TeamsUpdateDiscussionLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionLegacyError,
    TeamsUpdateDiscussionLegacyVariables
  >({
    mutationFn: (variables: TeamsUpdateDiscussionLegacyVariables) =>
      fetchTeamsUpdateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsListDiscussionCommentsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsLegacyQueryParams = {
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListDiscussionCommentsLegacyResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsLegacyVariables = {
  pathParams: TeamsListDiscussionCommentsLegacyPathParams;
  queryParams?: TeamsListDiscussionCommentsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionCommentsLegacy = (
  variables: TeamsListDiscussionCommentsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListDiscussionCommentsLegacyResponse,
    TeamsListDiscussionCommentsLegacyError,
    undefined,
    {},
    TeamsListDiscussionCommentsLegacyQueryParams,
    TeamsListDiscussionCommentsLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const teamsListDiscussionCommentsLegacyQuery = (
  variables: TeamsListDiscussionCommentsLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListDiscussionCommentsLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    operationId: "teamsListDiscussionCommentsLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListDiscussionCommentsLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseTeamsListDiscussionCommentsLegacy = <
  TData = TeamsListDiscussionCommentsLegacyResponse,
>(
  variables: TeamsListDiscussionCommentsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsLegacyResponse,
      TeamsListDiscussionCommentsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListDiscussionCommentsLegacyResponse,
    TeamsListDiscussionCommentsLegacyError,
    TData
  >({
    ...teamsListDiscussionCommentsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionCommentsLegacy = <
  TData = TeamsListDiscussionCommentsLegacyResponse,
>(
  variables: TeamsListDiscussionCommentsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsLegacyResponse,
      TeamsListDiscussionCommentsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsLegacyResponse,
    TeamsListDiscussionCommentsLegacyError,
    TData
  >({
    ...teamsListDiscussionCommentsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsCreateDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCreateDiscussionCommentLegacyRequestBody = {
  /**
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentLegacyVariables = {
  body: TeamsCreateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsCreateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionCommentLegacy = (
  variables: TeamsCreateDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentLegacyError,
    TeamsCreateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsCreateDiscussionCommentLegacyError,
      TeamsCreateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentLegacyError,
    TeamsCreateDiscussionCommentLegacyVariables
  >({
    mutationFn: (variables: TeamsCreateDiscussionCommentLegacyVariables) =>
      fetchTeamsCreateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsDeleteDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsDeleteDiscussionCommentLegacyVariables = {
  pathParams: TeamsDeleteDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionCommentLegacy = (
  variables: TeamsDeleteDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsDeleteDiscussionCommentLegacyError,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsDeleteDiscussionCommentLegacyError,
      TeamsDeleteDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsDeleteDiscussionCommentLegacyError,
    TeamsDeleteDiscussionCommentLegacyVariables
  >({
    mutationFn: (variables: TeamsDeleteDiscussionCommentLegacyVariables) =>
      fetchTeamsDeleteDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsGetDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsGetDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsGetDiscussionCommentLegacyVariables = {
  pathParams: TeamsGetDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionCommentLegacy = (
  variables: TeamsGetDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentLegacyError,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const teamsGetDiscussionCommentLegacyQuery = (
  variables: TeamsGetDiscussionCommentLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamDiscussionComment>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    operationId: "teamsGetDiscussionCommentLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetDiscussionCommentLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseTeamsGetDiscussionCommentLegacy = <
  TData = Schemas.TeamDiscussionComment,
>(
  variables: TeamsGetDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentLegacyError,
    TData
  >({
    ...teamsGetDiscussionCommentLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionCommentLegacy = <
  TData = Schemas.TeamDiscussionComment,
>(
  variables: TeamsGetDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      TeamsGetDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    TeamsGetDiscussionCommentLegacyError,
    TData
  >({
    ...teamsGetDiscussionCommentLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsUpdateDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsUpdateDiscussionCommentLegacyRequestBody = {
  /**
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentLegacyVariables = {
  body: TeamsUpdateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionCommentLegacy = (
  variables: TeamsUpdateDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentLegacyError,
    TeamsUpdateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      TeamsUpdateDiscussionCommentLegacyError,
      TeamsUpdateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentLegacyError,
    TeamsUpdateDiscussionCommentLegacyVariables
  >({
    mutationFn: (variables: TeamsUpdateDiscussionCommentLegacyVariables) =>
      fetchTeamsUpdateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsListForTeamDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionCommentLegacyResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionCommentLegacy = (
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    ReactionsListForTeamDiscussionCommentLegacyError,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentLegacyQueryParams,
    ReactionsListForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const reactionsListForTeamDiscussionCommentLegacyQuery = (
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForTeamDiscussionCommentLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    operationId: "reactionsListForTeamDiscussionCommentLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForTeamDiscussionCommentLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseReactionsListForTeamDiscussionCommentLegacy = <
  TData = ReactionsListForTeamDiscussionCommentLegacyResponse,
>(
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentLegacyResponse,
      ReactionsListForTeamDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    ReactionsListForTeamDiscussionCommentLegacyError,
    TData
  >({
    ...reactionsListForTeamDiscussionCommentLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionCommentLegacy = <
  TData = ReactionsListForTeamDiscussionCommentLegacyResponse,
>(
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentLegacyResponse,
      ReactionsListForTeamDiscussionCommentLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    ReactionsListForTeamDiscussionCommentLegacyError,
    TData
  >({
    ...reactionsListForTeamDiscussionCommentLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForTeamDiscussionCommentLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
  /**
   * The number that identifies the comment.
   */
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionCommentLegacyRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionCommentLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
 */
export const fetchReactionsCreateForTeamDiscussionCommentLegacy = (
  variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentLegacyError,
    ReactionsCreateForTeamDiscussionCommentLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
 */
export const useReactionsCreateForTeamDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionCommentLegacyError,
      ReactionsCreateForTeamDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentLegacyError,
    ReactionsCreateForTeamDiscussionCommentLegacyVariables
  >({
    mutationFn: (
      variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables,
    ) =>
      fetchReactionsCreateForTeamDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReactionsListForTeamDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionLegacyQueryParams = {
  /**
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsListForTeamDiscussionLegacyResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionLegacy = (
  variables: ReactionsListForTeamDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReactionsListForTeamDiscussionLegacyResponse,
    ReactionsListForTeamDiscussionLegacyError,
    undefined,
    {},
    ReactionsListForTeamDiscussionLegacyQueryParams,
    ReactionsListForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const reactionsListForTeamDiscussionLegacyQuery = (
  variables: ReactionsListForTeamDiscussionLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReactionsListForTeamDiscussionLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    operationId: "reactionsListForTeamDiscussionLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReactionsListForTeamDiscussionLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseReactionsListForTeamDiscussionLegacy = <
  TData = ReactionsListForTeamDiscussionLegacyResponse,
>(
  variables: ReactionsListForTeamDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionLegacyResponse,
      ReactionsListForTeamDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReactionsListForTeamDiscussionLegacyResponse,
    ReactionsListForTeamDiscussionLegacyError,
    TData
  >({
    ...reactionsListForTeamDiscussionLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionLegacy = <
  TData = ReactionsListForTeamDiscussionLegacyResponse,
>(
  variables: ReactionsListForTeamDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionLegacyResponse,
      ReactionsListForTeamDiscussionLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionLegacyResponse,
    ReactionsListForTeamDiscussionLegacyError,
    TData
  >({
    ...reactionsListForTeamDiscussionLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReactionsCreateForTeamDiscussionLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The number that identifies the discussion.
   */
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type ReactionsCreateForTeamDiscussionLegacyRequestBody = {
  /**
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
 */
export const fetchReactionsCreateForTeamDiscussionLegacy = (
  variables: ReactionsCreateForTeamDiscussionLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionLegacyError,
    ReactionsCreateForTeamDiscussionLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
 */
export const useReactionsCreateForTeamDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      ReactionsCreateForTeamDiscussionLegacyError,
      ReactionsCreateForTeamDiscussionLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionLegacyError,
    ReactionsCreateForTeamDiscussionLegacyVariables
  >({
    mutationFn: (variables: ReactionsCreateForTeamDiscussionLegacyVariables) =>
      fetchReactionsCreateForTeamDiscussionLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListPendingInvitationsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListPendingInvitationsLegacyQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsListPendingInvitationsLegacyResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsLegacyVariables = {
  pathParams: TeamsListPendingInvitationsLegacyPathParams;
  queryParams?: TeamsListPendingInvitationsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchTeamsListPendingInvitationsLegacy = (
  variables: TeamsListPendingInvitationsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListPendingInvitationsLegacyResponse,
    TeamsListPendingInvitationsLegacyError,
    undefined,
    {},
    TeamsListPendingInvitationsLegacyQueryParams,
    TeamsListPendingInvitationsLegacyPathParams
  >({
    url: "/teams/{teamId}/invitations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const teamsListPendingInvitationsLegacyQuery = (
  variables: TeamsListPendingInvitationsLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListPendingInvitationsLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/invitations",
    operationId: "teamsListPendingInvitationsLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListPendingInvitationsLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useSuspenseTeamsListPendingInvitationsLegacy = <
  TData = TeamsListPendingInvitationsLegacyResponse,
>(
  variables: TeamsListPendingInvitationsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsLegacyResponse,
      TeamsListPendingInvitationsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListPendingInvitationsLegacyResponse,
    TeamsListPendingInvitationsLegacyError,
    TData
  >({
    ...teamsListPendingInvitationsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useTeamsListPendingInvitationsLegacy = <
  TData = TeamsListPendingInvitationsLegacyResponse,
>(
  variables: TeamsListPendingInvitationsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsLegacyResponse,
      TeamsListPendingInvitationsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsLegacyResponse,
    TeamsListPendingInvitationsLegacyError,
    TData
  >({
    ...teamsListPendingInvitationsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsListMembersLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListMembersLegacyQueryParams = {
  /**
   * Filters members returned by their role in the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsListMembersLegacyResponse = Schemas.SimpleUser[];

export type TeamsListMembersLegacyVariables = {
  pathParams: TeamsListMembersLegacyPathParams;
  queryParams?: TeamsListMembersLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const fetchTeamsListMembersLegacy = (
  variables: TeamsListMembersLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListMembersLegacyResponse,
    TeamsListMembersLegacyError,
    undefined,
    {},
    TeamsListMembersLegacyQueryParams,
    TeamsListMembersLegacyPathParams
  >({ url: "/teams/{teamId}/members", method: "get", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const teamsListMembersLegacyQuery = (
  variables: TeamsListMembersLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListMembersLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/members",
    operationId: "teamsListMembersLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListMembersLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const useSuspenseTeamsListMembersLegacy = <
  TData = TeamsListMembersLegacyResponse,
>(
  variables: TeamsListMembersLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersLegacyResponse,
      TeamsListMembersLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListMembersLegacyResponse,
    TeamsListMembersLegacyError,
    TData
  >({
    ...teamsListMembersLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const useTeamsListMembersLegacy = <
  TData = TeamsListMembersLegacyResponse,
>(
  variables: TeamsListMembersLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersLegacyResponse,
      TeamsListMembersLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersLegacyResponse,
    TeamsListMembersLegacyError,
    TData
  >({
    ...teamsListMembersLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveMemberLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsRemoveMemberLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMemberLegacyVariables = {
  pathParams: TeamsRemoveMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMemberLegacy = (
  variables: TeamsRemoveMemberLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveMemberLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveMemberLegacyPathParams
  >({
    url: "/teams/{teamId}/members/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMemberLegacyError,
      TeamsRemoveMemberLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMemberLegacyError,
    TeamsRemoveMemberLegacyVariables
  >({
    mutationFn: (variables: TeamsRemoveMemberLegacyVariables) =>
      fetchTeamsRemoveMemberLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsGetMemberLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsGetMemberLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsGetMemberLegacyVariables = {
  pathParams: TeamsGetMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsGetMemberLegacy = (
  variables: TeamsGetMemberLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsGetMemberLegacyError,
    undefined,
    {},
    {},
    TeamsGetMemberLegacyPathParams
  >({
    url: "/teams/{teamId}/members/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const teamsGetMemberLegacyQuery = (
  variables: TeamsGetMemberLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/members/{username}",
    operationId: "teamsGetMemberLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetMemberLegacy(variables, signal),
});

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useSuspenseTeamsGetMemberLegacy = <TData = undefined>(
  variables: TeamsGetMemberLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, TeamsGetMemberLegacyError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    TeamsGetMemberLegacyError,
    TData
  >({
    ...teamsGetMemberLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsGetMemberLegacy = <TData = undefined>(
  variables: TeamsGetMemberLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, TeamsGetMemberLegacyError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, TeamsGetMemberLegacyError, TData>({
    ...teamsGetMemberLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddMemberLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsAddMemberLegacyError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Responses.Forbidden;
}>;

export type TeamsAddMemberLegacyVariables = {
  pathParams: TeamsAddMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddMemberLegacy = (
  variables: TeamsAddMemberLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsAddMemberLegacyError,
    undefined,
    {},
    {},
    TeamsAddMemberLegacyPathParams
  >({
    url: "/teams/{teamId}/members/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddMemberLegacyError,
      TeamsAddMemberLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddMemberLegacyError,
    TeamsAddMemberLegacyVariables
  >({
    mutationFn: (variables: TeamsAddMemberLegacyVariables) =>
      fetchTeamsAddMemberLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsRemoveMembershipForUserLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsRemoveMembershipForUserLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveMembershipForUserLegacyVariables = {
  pathParams: TeamsRemoveMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMembershipForUserLegacy = (
  variables: TeamsRemoveMembershipForUserLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveMembershipForUserLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveMembershipForUserLegacyError,
      TeamsRemoveMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveMembershipForUserLegacyError,
    TeamsRemoveMembershipForUserLegacyVariables
  >({
    mutationFn: (variables: TeamsRemoveMembershipForUserLegacyVariables) =>
      fetchTeamsRemoveMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsGetMembershipForUserLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsGetMembershipForUserLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsGetMembershipForUserLegacyVariables = {
  pathParams: TeamsGetMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserLegacy = (
  variables: TeamsGetMembershipForUserLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserLegacyError,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const teamsGetMembershipForUserLegacyQuery = (
  variables: TeamsGetMembershipForUserLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamMembership>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/memberships/{username}",
    operationId: "teamsGetMembershipForUserLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsGetMembershipForUserLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useSuspenseTeamsGetMembershipForUserLegacy = <
  TData = Schemas.TeamMembership,
>(
  variables: TeamsGetMembershipForUserLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserLegacyError,
    TData
  >({
    ...teamsGetMembershipForUserLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserLegacy = <
  TData = Schemas.TeamMembership,
>(
  variables: TeamsGetMembershipForUserLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      TeamsGetMembershipForUserLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    TeamsGetMembershipForUserLegacyError,
    TData
  >({
    ...teamsGetMembershipForUserLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateMembershipForUserLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserLegacyError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type TeamsAddOrUpdateMembershipForUserLegacyRequestBody = {
  /**
   * The role that this user should have in the team.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserLegacyVariables = {
  body?: TeamsAddOrUpdateMembershipForUserLegacyRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const fetchTeamsAddOrUpdateMembershipForUserLegacy = (
  variables: TeamsAddOrUpdateMembershipForUserLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserLegacyError,
    TeamsAddOrUpdateMembershipForUserLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const useTeamsAddOrUpdateMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      TeamsAddOrUpdateMembershipForUserLegacyError,
      TeamsAddOrUpdateMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserLegacyError,
    TeamsAddOrUpdateMembershipForUserLegacyVariables
  >({
    mutationFn: (variables: TeamsAddOrUpdateMembershipForUserLegacyVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListProjectsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListProjectsLegacyQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsListProjectsLegacyResponse = Schemas.TeamProject[];

export type TeamsListProjectsLegacyVariables = {
  pathParams: TeamsListProjectsLegacyPathParams;
  queryParams?: TeamsListProjectsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const fetchTeamsListProjectsLegacy = (
  variables: TeamsListProjectsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListProjectsLegacyResponse,
    TeamsListProjectsLegacyError,
    undefined,
    {},
    TeamsListProjectsLegacyQueryParams,
    TeamsListProjectsLegacyPathParams
  >({ url: "/teams/{teamId}/projects", method: "get", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const teamsListProjectsLegacyQuery = (
  variables: TeamsListProjectsLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListProjectsLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/projects",
    operationId: "teamsListProjectsLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListProjectsLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const useSuspenseTeamsListProjectsLegacy = <
  TData = TeamsListProjectsLegacyResponse,
>(
  variables: TeamsListProjectsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsLegacyResponse,
      TeamsListProjectsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListProjectsLegacyResponse,
    TeamsListProjectsLegacyError,
    TData
  >({
    ...teamsListProjectsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const useTeamsListProjectsLegacy = <
  TData = TeamsListProjectsLegacyResponse,
>(
  variables: TeamsListProjectsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsLegacyResponse,
      TeamsListProjectsLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsLegacyResponse,
    TeamsListProjectsLegacyError,
    TData
  >({
    ...teamsListProjectsLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveProjectLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsRemoveProjectLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsRemoveProjectLegacyVariables = {
  pathParams: TeamsRemoveProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const fetchTeamsRemoveProjectLegacy = (
  variables: TeamsRemoveProjectLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveProjectLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveProjectLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const useTeamsRemoveProjectLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveProjectLegacyError,
      TeamsRemoveProjectLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveProjectLegacyError,
    TeamsRemoveProjectLegacyVariables
  >({
    mutationFn: (variables: TeamsRemoveProjectLegacyVariables) =>
      fetchTeamsRemoveProjectLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsCheckPermissionsForProjectLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsCheckPermissionsForProjectLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForProjectLegacyVariables = {
  pathParams: TeamsCheckPermissionsForProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const fetchTeamsCheckPermissionsForProjectLegacy = (
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectLegacyError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const teamsCheckPermissionsForProjectLegacyQuery = (
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamProject>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/projects/{projectId}",
    operationId: "teamsCheckPermissionsForProjectLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsCheckPermissionsForProjectLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const useSuspenseTeamsCheckPermissionsForProjectLegacy = <
  TData = Schemas.TeamProject,
>(
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectLegacyError,
    TData
  >({
    ...teamsCheckPermissionsForProjectLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const useTeamsCheckPermissionsForProjectLegacy = <
  TData = Schemas.TeamProject,
>(
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      TeamsCheckPermissionsForProjectLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    TeamsCheckPermissionsForProjectLegacyError,
    TData
  >({
    ...teamsCheckPermissionsForProjectLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateProjectPermissionsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The unique identifier of the project.
   */
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsLegacyError =
  Fetcher.ErrorWrapper<
    | {
        status: 403;
        payload: {
          documentation_url?: string;
          message?: string;
        };
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type TeamsAddOrUpdateProjectPermissionsLegacyRequestBody = {
  /**
   * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  permission?: "read" | "write" | "admin";
};

export type TeamsAddOrUpdateProjectPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateProjectPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateProjectPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsLegacy = (
  variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateProjectPermissionsLegacyError,
    TeamsAddOrUpdateProjectPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const useTeamsAddOrUpdateProjectPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateProjectPermissionsLegacyError,
      TeamsAddOrUpdateProjectPermissionsLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateProjectPermissionsLegacyError,
    TeamsAddOrUpdateProjectPermissionsLegacyVariables
  >({
    mutationFn: (
      variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables,
    ) =>
      fetchTeamsAddOrUpdateProjectPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListReposLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListReposLegacyQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposLegacyError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type TeamsListReposLegacyResponse = Schemas.MinimalRepository[];

export type TeamsListReposLegacyVariables = {
  pathParams: TeamsListReposLegacyPathParams;
  queryParams?: TeamsListReposLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const fetchTeamsListReposLegacy = (
  variables: TeamsListReposLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListReposLegacyResponse,
    TeamsListReposLegacyError,
    undefined,
    {},
    TeamsListReposLegacyQueryParams,
    TeamsListReposLegacyPathParams
  >({ url: "/teams/{teamId}/repos", method: "get", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const teamsListReposLegacyQuery = (
  variables: TeamsListReposLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListReposLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/repos",
    operationId: "teamsListReposLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListReposLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const useSuspenseTeamsListReposLegacy = <
  TData = TeamsListReposLegacyResponse,
>(
  variables: TeamsListReposLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposLegacyResponse,
      TeamsListReposLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListReposLegacyResponse,
    TeamsListReposLegacyError,
    TData
  >({
    ...teamsListReposLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const useTeamsListReposLegacy = <TData = TeamsListReposLegacyResponse>(
  variables: TeamsListReposLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposLegacyResponse,
      TeamsListReposLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposLegacyResponse,
    TeamsListReposLegacyError,
    TData
  >({
    ...teamsListReposLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsRemoveRepoLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsRemoveRepoLegacyError = Fetcher.ErrorWrapper<undefined>;

export type TeamsRemoveRepoLegacyVariables = {
  pathParams: TeamsRemoveRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const fetchTeamsRemoveRepoLegacy = (
  variables: TeamsRemoveRepoLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsRemoveRepoLegacyError,
    undefined,
    {},
    {},
    TeamsRemoveRepoLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const useTeamsRemoveRepoLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsRemoveRepoLegacyError,
      TeamsRemoveRepoLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsRemoveRepoLegacyError,
    TeamsRemoveRepoLegacyVariables
  >({
    mutationFn: (variables: TeamsRemoveRepoLegacyVariables) =>
      fetchTeamsRemoveRepoLegacy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TeamsCheckPermissionsForRepoLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsCheckPermissionsForRepoLegacyError =
  Fetcher.ErrorWrapper<undefined>;

export type TeamsCheckPermissionsForRepoLegacyVariables = {
  pathParams: TeamsCheckPermissionsForRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchTeamsCheckPermissionsForRepoLegacy = (
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoLegacyError,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const teamsCheckPermissionsForRepoLegacyQuery = (
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.TeamRepository>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/repos/{owner}/{repo}",
    operationId: "teamsCheckPermissionsForRepoLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsCheckPermissionsForRepoLegacy(variables, signal),
});

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useSuspenseTeamsCheckPermissionsForRepoLegacy = <
  TData = Schemas.TeamRepository,
>(
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamRepository,
      TeamsCheckPermissionsForRepoLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoLegacyError,
    TData
  >({
    ...teamsCheckPermissionsForRepoLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useTeamsCheckPermissionsForRepoLegacy = <
  TData = Schemas.TeamRepository,
>(
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamRepository,
      TeamsCheckPermissionsForRepoLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamRepository,
    TeamsCheckPermissionsForRepoLegacyError,
    TData
  >({
    ...teamsCheckPermissionsForRepoLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsAddOrUpdateRepoPermissionsLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsAddOrUpdateRepoPermissionsLegacyRequestBody = {
  /**
   * The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin";
};

export type TeamsAddOrUpdateRepoPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddOrUpdateRepoPermissionsLegacy = (
  variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsLegacyError,
    TeamsAddOrUpdateRepoPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddOrUpdateRepoPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateRepoPermissionsLegacyError,
      TeamsAddOrUpdateRepoPermissionsLegacyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateRepoPermissionsLegacyError,
    TeamsAddOrUpdateRepoPermissionsLegacyVariables
  >({
    mutationFn: (variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TeamsListChildLegacyPathParams = {
  /**
   * The unique identifier of the team.
   */
  teamId: number;
};

export type TeamsListChildLegacyQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildLegacyError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type TeamsListChildLegacyResponse = Schemas.Team[];

export type TeamsListChildLegacyVariables = {
  pathParams: TeamsListChildLegacyPathParams;
  queryParams?: TeamsListChildLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const fetchTeamsListChildLegacy = (
  variables: TeamsListChildLegacyVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListChildLegacyResponse,
    TeamsListChildLegacyError,
    undefined,
    {},
    TeamsListChildLegacyQueryParams,
    TeamsListChildLegacyPathParams
  >({ url: "/teams/{teamId}/teams", method: "get", ...variables, signal });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const teamsListChildLegacyQuery = (
  variables: TeamsListChildLegacyVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListChildLegacyResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/teams/{teamId}/teams",
    operationId: "teamsListChildLegacy",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListChildLegacy(variables, signal),
});

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const useSuspenseTeamsListChildLegacy = <
  TData = TeamsListChildLegacyResponse,
>(
  variables: TeamsListChildLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildLegacyResponse,
      TeamsListChildLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListChildLegacyResponse,
    TeamsListChildLegacyError,
    TData
  >({
    ...teamsListChildLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const useTeamsListChildLegacy = <TData = TeamsListChildLegacyResponse>(
  variables: TeamsListChildLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildLegacyResponse,
      TeamsListChildLegacyError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildLegacyResponse,
    TeamsListChildLegacyError,
    TData
  >({
    ...teamsListChildLegacyQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersGetAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const fetchUsersGetAuthenticated = (
  variables: UsersGetAuthenticatedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetAuthenticatedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user", method: "get", ...variables, signal });

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const usersGetAuthenticatedQuery = (
  variables: UsersGetAuthenticatedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PrivateUser | Schemas.PublicUser>;
} => ({
  queryKey: queryKeyFn({
    path: "/user",
    operationId: "usersGetAuthenticated",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetAuthenticated(variables, signal),
});

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const useSuspenseUsersGetAuthenticated = <
  TData = Schemas.PrivateUser | Schemas.PublicUser,
>(
  variables: UsersGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetAuthenticatedError,
    TData
  >({
    ...usersGetAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const useUsersGetAuthenticated = <
  TData = Schemas.PrivateUser | Schemas.PublicUser,
>(
  variables: UsersGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetAuthenticatedError,
    TData
  >({
    ...usersGetAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersUpdateAuthenticatedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersUpdateAuthenticatedRequestBody = {
  /**
   * The new short biography of the user.
   */
  bio?: string;
  /**
   * The new blog URL of the user.
   *
   * @example blog.example.com
   */
  blog?: string;
  /**
   * The new company of the user.
   *
   * @example Acme corporation
   */
  company?: string;
  /**
   * The publicly visible email address of the user.
   *
   * @example omar@example.com
   */
  email?: string;
  /**
   * The new hiring availability of the user.
   */
  hireable?: boolean;
  /**
   * The new location of the user.
   *
   * @example Berlin, Germany
   */
  location?: string;
  /**
   * The new name of the user.
   *
   * @example Omar Jahandar
   */
  name?: string;
  /**
   * The new Twitter username of the user.
   *
   * @example therealomarj
   */
  twitter_username?: string | null;
};

export type UsersUpdateAuthenticatedVariables = {
  body?: UsersUpdateAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const fetchUsersUpdateAuthenticated = (
  variables: UsersUpdateAuthenticatedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PrivateUser,
    UsersUpdateAuthenticatedError,
    UsersUpdateAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user", method: "patch", ...variables, signal });

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const useUsersUpdateAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PrivateUser,
      UsersUpdateAuthenticatedError,
      UsersUpdateAuthenticatedVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PrivateUser,
    UsersUpdateAuthenticatedError,
    UsersUpdateAuthenticatedVariables
  >({
    mutationFn: (variables: UsersUpdateAuthenticatedVariables) =>
      fetchUsersUpdateAuthenticated({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersListBlockedByAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListBlockedByAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListBlockedByAuthenticatedUserResponse = Schemas.SimpleUser[];

export type UsersListBlockedByAuthenticatedUserVariables = {
  queryParams?: UsersListBlockedByAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the users you've blocked on your personal account.
 */
export const fetchUsersListBlockedByAuthenticatedUser = (
  variables: UsersListBlockedByAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListBlockedByAuthenticatedUserResponse,
    UsersListBlockedByAuthenticatedUserError,
    undefined,
    {},
    UsersListBlockedByAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/blocks", method: "get", ...variables, signal });

/**
 * List the users you've blocked on your personal account.
 */
export const usersListBlockedByAuthenticatedUserQuery = (
  variables: UsersListBlockedByAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListBlockedByAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/blocks",
    operationId: "usersListBlockedByAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListBlockedByAuthenticatedUser(variables, signal),
});

/**
 * List the users you've blocked on your personal account.
 */
export const useSuspenseUsersListBlockedByAuthenticatedUser = <
  TData = UsersListBlockedByAuthenticatedUserResponse,
>(
  variables: UsersListBlockedByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListBlockedByAuthenticatedUserResponse,
      UsersListBlockedByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListBlockedByAuthenticatedUserResponse,
    UsersListBlockedByAuthenticatedUserError,
    TData
  >({
    ...usersListBlockedByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the users you've blocked on your personal account.
 */
export const useUsersListBlockedByAuthenticatedUser = <
  TData = UsersListBlockedByAuthenticatedUserResponse,
>(
  variables: UsersListBlockedByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListBlockedByAuthenticatedUserResponse,
      UsersListBlockedByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListBlockedByAuthenticatedUserResponse,
    UsersListBlockedByAuthenticatedUserError,
    TData
  >({
    ...usersListBlockedByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersUnblockPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersUnblockError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersUnblockVariables = {
  pathParams: UsersUnblockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersUnblock = (
  variables: UsersUnblockVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersUnblockError,
    undefined,
    {},
    {},
    UsersUnblockPathParams
  >({ url: "/user/blocks/{username}", method: "delete", ...variables, signal });

export const useUsersUnblock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersUnblockError,
      UsersUnblockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersUnblockError,
    UsersUnblockVariables
  >({
    mutationFn: (variables: UsersUnblockVariables) =>
      fetchUsersUnblock({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersCheckBlockedPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersCheckBlockedError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Schemas.BasicError;
    }
>;

export type UsersCheckBlockedVariables = {
  pathParams: UsersCheckBlockedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckBlocked = (
  variables: UsersCheckBlockedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersCheckBlockedError,
    undefined,
    {},
    {},
    UsersCheckBlockedPathParams
  >({ url: "/user/blocks/{username}", method: "get", ...variables, signal });

export const usersCheckBlockedQuery = (
  variables: UsersCheckBlockedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/blocks/{username}",
    operationId: "usersCheckBlocked",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersCheckBlocked(variables, signal),
});

export const useSuspenseUsersCheckBlocked = <TData = undefined>(
  variables: UsersCheckBlockedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UsersCheckBlockedError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<undefined, UsersCheckBlockedError, TData>({
    ...usersCheckBlockedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useUsersCheckBlocked = <TData = undefined>(
  variables: UsersCheckBlockedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UsersCheckBlockedError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, UsersCheckBlockedError, TData>({
    ...usersCheckBlockedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersBlockPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersBlockError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersBlockVariables = {
  pathParams: UsersBlockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersBlock = (
  variables: UsersBlockVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersBlockError,
    undefined,
    {},
    {},
    UsersBlockPathParams
  >({ url: "/user/blocks/{username}", method: "put", ...variables, signal });

export const useUsersBlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersBlockError,
      UsersBlockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersBlockError,
    UsersBlockVariables
  >({
    mutationFn: (variables: UsersBlockVariables) =>
      fetchUsersBlock({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CodespacesListForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * ID of the Repository to filter on
   */
  repository_id?: number;
};

export type CodespacesListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesListForAuthenticatedUserResponse = {
  codespaces: Schemas.Codespace[];
  total_count: number;
};

export type CodespacesListForAuthenticatedUserVariables = {
  queryParams?: CodespacesListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesListForAuthenticatedUser = (
  variables: CodespacesListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListForAuthenticatedUserResponse,
    CodespacesListForAuthenticatedUserError,
    undefined,
    {},
    CodespacesListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/codespaces", method: "get", ...variables, signal });

/**
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const codespacesListForAuthenticatedUserQuery = (
  variables: CodespacesListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces",
    operationId: "codespacesListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListForAuthenticatedUser(variables, signal),
});

/**
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesListForAuthenticatedUser = <
  TData = CodespacesListForAuthenticatedUserResponse,
>(
  variables: CodespacesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListForAuthenticatedUserResponse,
      CodespacesListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListForAuthenticatedUserResponse,
    CodespacesListForAuthenticatedUserError,
    TData
  >({
    ...codespacesListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the authenticated user's codespaces.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesListForAuthenticatedUser = <
  TData = CodespacesListForAuthenticatedUserResponse,
>(
  variables: CodespacesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListForAuthenticatedUserResponse,
      CodespacesListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListForAuthenticatedUserResponse,
    CodespacesListForAuthenticatedUserError,
    TData
  >({
    ...codespacesListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCreateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 503;
      payload: Responses.ServiceUnavailable;
    }
>;

export type CodespacesCreateForAuthenticatedUserVariables = {
  body?:
    | {
        /**
         * IP for location auto-detection when proxying a request
         */
        client_ip?: string;
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Display name for this codespace
         */
        display_name?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;
        /**
         * Git ref (typically a branch name) for this codespace
         */
        ref?: string;
        /**
         * Repository id for this codespace
         */
        repository_id: number;
        /**
         * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      }
    | {
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Pull request number for this codespace
         */
        pull_request: {
          /**
           * Pull request number
           */
          pull_request_number: number;
          /**
           * Repository id for this codespace
           */
          repository_id: number;
        };
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      };
} & GithubContext["fetcherOptions"];

/**
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesCreateForAuthenticatedUser = (
  variables: CodespacesCreateForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesCreateForAuthenticatedUserError,
    | {
        /**
         * IP for location auto-detection when proxying a request
         */
        client_ip?: string;
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Display name for this codespace
         */
        display_name?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;
        /**
         * Git ref (typically a branch name) for this codespace
         */
        ref?: string;
        /**
         * Repository id for this codespace
         */
        repository_id: number;
        /**
         * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      }
    | {
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Pull request number for this codespace
         */
        pull_request: {
          /**
           * Pull request number
           */
          pull_request_number: number;
          /**
           * Repository id for this codespace
           */
          repository_id: number;
        };
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      },
    {},
    {},
    {}
  >({ url: "/user/codespaces", method: "post", ...variables, signal });

/**
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesCreateForAuthenticatedUserError,
      CodespacesCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesCreateForAuthenticatedUserError,
    CodespacesCreateForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesCreateForAuthenticatedUserVariables) =>
      fetchCodespacesCreateForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesListSecretsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type CodespacesListSecretsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CodespacesListSecretsForAuthenticatedUserResponse = {
  secrets: Schemas.CodespacesSecret[];
  total_count: number;
};

export type CodespacesListSecretsForAuthenticatedUserVariables = {
  queryParams?: CodespacesListSecretsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const fetchCodespacesListSecretsForAuthenticatedUser = (
  variables: CodespacesListSecretsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListSecretsForAuthenticatedUserResponse,
    CodespacesListSecretsForAuthenticatedUserError,
    undefined,
    {},
    CodespacesListSecretsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/codespaces/secrets", method: "get", ...variables, signal });

/**
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const codespacesListSecretsForAuthenticatedUserQuery = (
  variables: CodespacesListSecretsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListSecretsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/secrets",
    operationId: "codespacesListSecretsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListSecretsForAuthenticatedUser(variables, signal),
});

/**
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useSuspenseCodespacesListSecretsForAuthenticatedUser = <
  TData = CodespacesListSecretsForAuthenticatedUserResponse,
>(
  variables: CodespacesListSecretsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListSecretsForAuthenticatedUserResponse,
      CodespacesListSecretsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesListSecretsForAuthenticatedUserResponse,
    CodespacesListSecretsForAuthenticatedUserError,
    TData
  >({
    ...codespacesListSecretsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all secrets available for a user's Codespaces without revealing their
 * encrypted values.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useCodespacesListSecretsForAuthenticatedUser = <
  TData = CodespacesListSecretsForAuthenticatedUserResponse,
>(
  variables: CodespacesListSecretsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListSecretsForAuthenticatedUserResponse,
      CodespacesListSecretsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListSecretsForAuthenticatedUserResponse,
    CodespacesListSecretsForAuthenticatedUserError,
    TData
  >({
    ...codespacesListSecretsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesGetPublicKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetPublicKeyForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const fetchCodespacesGetPublicKeyForAuthenticatedUser = (
  variables: CodespacesGetPublicKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespacesUserPublicKey,
    CodespacesGetPublicKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/user/codespaces/secrets/public-key",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const codespacesGetPublicKeyForAuthenticatedUserQuery = (
  variables: CodespacesGetPublicKeyForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespacesUserPublicKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/secrets/public-key",
    operationId: "codespacesGetPublicKeyForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetPublicKeyForAuthenticatedUser(variables, signal),
});

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useSuspenseCodespacesGetPublicKeyForAuthenticatedUser = <
  TData = Schemas.CodespacesUserPublicKey,
>(
  variables: CodespacesGetPublicKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesUserPublicKey,
      CodespacesGetPublicKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespacesUserPublicKey,
    CodespacesGetPublicKeyForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetPublicKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useCodespacesGetPublicKeyForAuthenticatedUser = <
  TData = Schemas.CodespacesUserPublicKey,
>(
  variables: CodespacesGetPublicKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesUserPublicKey,
      CodespacesGetPublicKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespacesUserPublicKey,
    CodespacesGetPublicKeyForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetPublicKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesDeleteSecretForAuthenticatedUserPathParams = {
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesDeleteSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CodespacesDeleteSecretForAuthenticatedUserVariables = {
  pathParams: CodespacesDeleteSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const fetchCodespacesDeleteSecretForAuthenticatedUser = (
  variables: CodespacesDeleteSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesDeleteSecretForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesDeleteSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useCodespacesDeleteSecretForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesDeleteSecretForAuthenticatedUserError,
      CodespacesDeleteSecretForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesDeleteSecretForAuthenticatedUserError,
    CodespacesDeleteSecretForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesDeleteSecretForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesDeleteSecretForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesGetSecretForAuthenticatedUserPathParams = {
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesGetSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CodespacesGetSecretForAuthenticatedUserVariables = {
  pathParams: CodespacesGetSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const fetchCodespacesGetSecretForAuthenticatedUser = (
  variables: CodespacesGetSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespacesSecret,
    CodespacesGetSecretForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesGetSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const codespacesGetSecretForAuthenticatedUserQuery = (
  variables: CodespacesGetSecretForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespacesSecret>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/secrets/{secretName}",
    operationId: "codespacesGetSecretForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetSecretForAuthenticatedUser(variables, signal),
});

/**
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useSuspenseCodespacesGetSecretForAuthenticatedUser = <
  TData = Schemas.CodespacesSecret,
>(
  variables: CodespacesGetSecretForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesSecret,
      CodespacesGetSecretForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespacesSecret,
    CodespacesGetSecretForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetSecretForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a secret available to a user's codespaces without revealing its encrypted value.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useCodespacesGetSecretForAuthenticatedUser = <
  TData = Schemas.CodespacesSecret,
>(
  variables: CodespacesGetSecretForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespacesSecret,
      CodespacesGetSecretForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespacesSecret,
    CodespacesGetSecretForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetSecretForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserPathParams = {
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody = {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id: string;
  /**
   * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
   */
  selected_repository_ids?: (number | string)[];
};

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserVariables = {
  body: CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody;
  pathParams: CodespacesCreateOrUpdateSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchCodespacesCreateOrUpdateSecretForAuthenticatedUser = (
  variables: CodespacesCreateOrUpdateSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateSecretForAuthenticatedUserError,
    CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody,
    {},
    {},
    CodespacesCreateOrUpdateSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
 *
 * ```
 * const sodium = require('libsodium-wrappers')
 * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
 * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
 *
 * //Check if libsodium is ready and then proceed.
 * sodium.ready.then(() => {
 *   // Convert Secret & Base64 key to Uint8Array.
 *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
 *   let binsec = sodium.from_string(secret)
 *
 *   //Encrypt the secret using LibSodium
 *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
 *
 *   // Convert encrypted Uint8Array to Base64
 *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
 *
 *   console.log(output)
 * });
 * ```
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useCodespacesCreateOrUpdateSecretForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EmptyObject,
      CodespacesCreateOrUpdateSecretForAuthenticatedUserError,
      CodespacesCreateOrUpdateSecretForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.EmptyObject,
    CodespacesCreateOrUpdateSecretForAuthenticatedUserError,
    CodespacesCreateOrUpdateSecretForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesCreateOrUpdateSecretForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesCreateOrUpdateSecretForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesListRepositoriesForSecretForAuthenticatedUserPathParams =
  {
    /**
     * The name of the secret.
     */
    secretName: string;
  };

export type CodespacesListRepositoriesForSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesListRepositoriesForSecretForAuthenticatedUserResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type CodespacesListRepositoriesForSecretForAuthenticatedUserVariables = {
  pathParams: CodespacesListRepositoriesForSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const fetchCodespacesListRepositoriesForSecretForAuthenticatedUser = (
  variables: CodespacesListRepositoriesForSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
    CodespacesListRepositoriesForSecretForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesListRepositoriesForSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const codespacesListRepositoriesForSecretForAuthenticatedUserQuery = (
  variables: CodespacesListRepositoriesForSecretForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesListRepositoriesForSecretForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/secrets/{secretName}/repositories",
    operationId: "codespacesListRepositoriesForSecretForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesListRepositoriesForSecretForAuthenticatedUser(
      variables,
      signal,
    ),
});

/**
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const useSuspenseCodespacesListRepositoriesForSecretForAuthenticatedUser =
  <TData = CodespacesListRepositoriesForSecretForAuthenticatedUserResponse>(
    variables: CodespacesListRepositoriesForSecretForAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
        CodespacesListRepositoriesForSecretForAuthenticatedUserError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
      CodespacesListRepositoriesForSecretForAuthenticatedUserError,
      TData
    >({
      ...codespacesListRepositoriesForSecretForAuthenticatedUserQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * List the repositories that have been granted the ability to use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const useCodespacesListRepositoriesForSecretForAuthenticatedUser = <
  TData = CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
>(
  variables: CodespacesListRepositoriesForSecretForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
      CodespacesListRepositoriesForSecretForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesListRepositoriesForSecretForAuthenticatedUserResponse,
    CodespacesListRepositoriesForSecretForAuthenticatedUserError,
    TData
  >({
    ...codespacesListRepositoriesForSecretForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserPathParams = {
  /**
   * The name of the secret.
   */
  secretName: string;
};

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserRequestBody =
  {
    /**
     * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
     */
    selected_repository_ids: number[];
  };

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserVariables = {
  body: CodespacesSetRepositoriesForSecretForAuthenticatedUserRequestBody;
  pathParams: CodespacesSetRepositoriesForSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Select the repositories that will use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const fetchCodespacesSetRepositoriesForSecretForAuthenticatedUser = (
  variables: CodespacesSetRepositoriesForSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesSetRepositoriesForSecretForAuthenticatedUserError,
    CodespacesSetRepositoriesForSecretForAuthenticatedUserRequestBody,
    {},
    {},
    CodespacesSetRepositoriesForSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Select the repositories that will use a user's codespace secret.
 *
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
 */
export const useCodespacesSetRepositoriesForSecretForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesSetRepositoriesForSecretForAuthenticatedUserError,
      CodespacesSetRepositoriesForSecretForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesSetRepositoriesForSecretForAuthenticatedUserError,
    CodespacesSetRepositoriesForSecretForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesSetRepositoriesForSecretForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesSetRepositoriesForSecretForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserPathParams =
  {
    /**
     * The name of the secret.
     */
    secretName: string;
    repositoryId: number;
  };

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserVariables = {
  pathParams: CodespacesRemoveRepositoryForSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const fetchCodespacesRemoveRepositoryForSecretForAuthenticatedUser = (
  variables: CodespacesRemoveRepositoryForSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesRemoveRepositoryForSecretForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesRemoveRepositoryForSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a repository from the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
 */
export const useCodespacesRemoveRepositoryForSecretForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesRemoveRepositoryForSecretForAuthenticatedUserError,
      CodespacesRemoveRepositoryForSecretForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesRemoveRepositoryForSecretForAuthenticatedUserError,
    CodespacesRemoveRepositoryForSecretForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesRemoveRepositoryForSecretForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesRemoveRepositoryForSecretForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesAddRepositoryForSecretForAuthenticatedUserPathParams = {
  /**
   * The name of the secret.
   */
  secretName: string;
  repositoryId: number;
};

export type CodespacesAddRepositoryForSecretForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesAddRepositoryForSecretForAuthenticatedUserVariables = {
  pathParams: CodespacesAddRepositoryForSecretForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
 */
export const fetchCodespacesAddRepositoryForSecretForAuthenticatedUser = (
  variables: CodespacesAddRepositoryForSecretForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    CodespacesAddRepositoryForSecretForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesAddRepositoryForSecretForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Adds a repository to the selected repositories for a user's codespace secret.
 * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
 * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
 */
export const useCodespacesAddRepositoryForSecretForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CodespacesAddRepositoryForSecretForAuthenticatedUserError,
      CodespacesAddRepositoryForSecretForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    CodespacesAddRepositoryForSecretForAuthenticatedUserError,
    CodespacesAddRepositoryForSecretForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: CodespacesAddRepositoryForSecretForAuthenticatedUserVariables,
    ) =>
      fetchCodespacesAddRepositoryForSecretForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesDeleteForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesDeleteForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesDeleteForAuthenticatedUserVariables = {
  pathParams: CodespacesDeleteForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesDeleteForAuthenticatedUser = (
  variables: CodespacesDeleteForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Responses.Accepted,
    CodespacesDeleteForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesDeleteForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesDeleteForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Responses.Accepted,
      CodespacesDeleteForAuthenticatedUserError,
      CodespacesDeleteForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Responses.Accepted,
    CodespacesDeleteForAuthenticatedUserError,
    CodespacesDeleteForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesDeleteForAuthenticatedUserVariables) =>
      fetchCodespacesDeleteForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesGetForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesGetForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesGetForAuthenticatedUserVariables = {
  pathParams: CodespacesGetForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesGetForAuthenticatedUser = (
  variables: CodespacesGetForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesGetForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesGetForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const codespacesGetForAuthenticatedUserQuery = (
  variables: CodespacesGetForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Codespace>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/{codespaceName}",
    operationId: "codespacesGetForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetForAuthenticatedUser(variables, signal),
});

/**
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesGetForAuthenticatedUser = <
  TData = Schemas.Codespace,
>(
  variables: CodespacesGetForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Codespace,
      CodespacesGetForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Codespace,
    CodespacesGetForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets information about a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesGetForAuthenticatedUser = <TData = Schemas.Codespace>(
  variables: CodespacesGetForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Codespace,
      CodespacesGetForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Codespace,
    CodespacesGetForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesUpdateForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesUpdateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type CodespacesUpdateForAuthenticatedUserRequestBody = {
  /**
   * Display name for this codespace
   */
  display_name?: string;
  /**
   * A valid machine to transition this codespace to.
   */
  machine?: string;
  /**
   * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
   */
  recent_folders?: string[];
};

export type CodespacesUpdateForAuthenticatedUserVariables = {
  body?: CodespacesUpdateForAuthenticatedUserRequestBody;
  pathParams: CodespacesUpdateForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is started.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesUpdateForAuthenticatedUser = (
  variables: CodespacesUpdateForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesUpdateForAuthenticatedUserError,
    CodespacesUpdateForAuthenticatedUserRequestBody,
    {},
    {},
    CodespacesUpdateForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}",
    method: "patch",
    ...variables,
    signal,
  });

/**
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is started.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesUpdateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesUpdateForAuthenticatedUserError,
      CodespacesUpdateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesUpdateForAuthenticatedUserError,
    CodespacesUpdateForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesUpdateForAuthenticatedUserVariables) =>
      fetchCodespacesUpdateForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesExportForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesExportForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesExportForAuthenticatedUserVariables = {
  pathParams: CodespacesExportForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
 *
 * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const fetchCodespacesExportForAuthenticatedUser = (
  variables: CodespacesExportForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespaceExportDetails,
    CodespacesExportForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesExportForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/exports",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
 *
 * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const useCodespacesExportForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodespaceExportDetails,
      CodespacesExportForAuthenticatedUserError,
      CodespacesExportForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodespaceExportDetails,
    CodespacesExportForAuthenticatedUserError,
    CodespacesExportForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesExportForAuthenticatedUserVariables) =>
      fetchCodespacesExportForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesGetExportDetailsForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
  /**
   * The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
   */
  exportId: string;
};

export type CodespacesGetExportDetailsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type CodespacesGetExportDetailsForAuthenticatedUserVariables = {
  pathParams: CodespacesGetExportDetailsForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const fetchCodespacesGetExportDetailsForAuthenticatedUser = (
  variables: CodespacesGetExportDetailsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespaceExportDetails,
    CodespacesGetExportDetailsForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesGetExportDetailsForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/exports/{exportId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const codespacesGetExportDetailsForAuthenticatedUserQuery = (
  variables: CodespacesGetExportDetailsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CodespaceExportDetails>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/{codespaceName}/exports/{exportId}",
    operationId: "codespacesGetExportDetailsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesGetExportDetailsForAuthenticatedUser(variables, signal),
});

/**
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesGetExportDetailsForAuthenticatedUser = <
  TData = Schemas.CodespaceExportDetails,
>(
  variables: CodespacesGetExportDetailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespaceExportDetails,
      CodespacesGetExportDetailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CodespaceExportDetails,
    CodespacesGetExportDetailsForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetExportDetailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets information about an export of a codespace.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const useCodespacesGetExportDetailsForAuthenticatedUser = <
  TData = Schemas.CodespaceExportDetails,
>(
  variables: CodespacesGetExportDetailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodespaceExportDetails,
      CodespacesGetExportDetailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodespaceExportDetails,
    CodespacesGetExportDetailsForAuthenticatedUserError,
    TData
  >({
    ...codespacesGetExportDetailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesCodespaceMachinesForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesCodespaceMachinesForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 500;
        payload: Responses.InternalError;
      }
  >;

export type CodespacesCodespaceMachinesForAuthenticatedUserResponse = {
  machines: Schemas.CodespaceMachine[];
  total_count: number;
};

export type CodespacesCodespaceMachinesForAuthenticatedUserVariables = {
  pathParams: CodespacesCodespaceMachinesForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const fetchCodespacesCodespaceMachinesForAuthenticatedUser = (
  variables: CodespacesCodespaceMachinesForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    CodespacesCodespaceMachinesForAuthenticatedUserResponse,
    CodespacesCodespaceMachinesForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesCodespaceMachinesForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/machines",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const codespacesCodespaceMachinesForAuthenticatedUserQuery = (
  variables: CodespacesCodespaceMachinesForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<CodespacesCodespaceMachinesForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/codespaces/{codespaceName}/machines",
    operationId: "codespacesCodespaceMachinesForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchCodespacesCodespaceMachinesForAuthenticatedUser(variables, signal),
});

/**
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useSuspenseCodespacesCodespaceMachinesForAuthenticatedUser = <
  TData = CodespacesCodespaceMachinesForAuthenticatedUserResponse,
>(
  variables: CodespacesCodespaceMachinesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesCodespaceMachinesForAuthenticatedUserResponse,
      CodespacesCodespaceMachinesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    CodespacesCodespaceMachinesForAuthenticatedUserResponse,
    CodespacesCodespaceMachinesForAuthenticatedUserError,
    TData
  >({
    ...codespacesCodespaceMachinesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List the machine types a codespace can transition to use.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
 */
export const useCodespacesCodespaceMachinesForAuthenticatedUser = <
  TData = CodespacesCodespaceMachinesForAuthenticatedUserResponse,
>(
  variables: CodespacesCodespaceMachinesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodespacesCodespaceMachinesForAuthenticatedUserResponse,
      CodespacesCodespaceMachinesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    CodespacesCodespaceMachinesForAuthenticatedUserResponse,
    CodespacesCodespaceMachinesForAuthenticatedUserError,
    TData
  >({
    ...codespacesCodespaceMachinesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type CodespacesPublishForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesPublishForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type CodespacesPublishForAuthenticatedUserRequestBody = {
  /**
   * A name for the new repository.
   */
  name?: string;
  /**
   * Whether the new repository should be private.
   *
   * @default false
   */
  private?: boolean;
};

export type CodespacesPublishForAuthenticatedUserVariables = {
  body?: CodespacesPublishForAuthenticatedUserRequestBody;
  pathParams: CodespacesPublishForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
 *
 * The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
 *
 * This will fail for a codespace that is already published, meaning it has an associated repository.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const fetchCodespacesPublishForAuthenticatedUser = (
  variables: CodespacesPublishForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CodespaceWithFullRepository,
    CodespacesPublishForAuthenticatedUserError,
    CodespacesPublishForAuthenticatedUserRequestBody,
    {},
    {},
    CodespacesPublishForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/publish",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
 *
 * The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
 *
 * This will fail for a codespace that is already published, meaning it has an associated repository.
 *
 * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
 */
export const useCodespacesPublishForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodespaceWithFullRepository,
      CodespacesPublishForAuthenticatedUserError,
      CodespacesPublishForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodespaceWithFullRepository,
    CodespacesPublishForAuthenticatedUserError,
    CodespacesPublishForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesPublishForAuthenticatedUserVariables) =>
      fetchCodespacesPublishForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesStartForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesStartForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 402;
      payload: Schemas.BasicError;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 409;
      payload: Responses.Conflict;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesStartForAuthenticatedUserVariables = {
  pathParams: CodespacesStartForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Starts a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const fetchCodespacesStartForAuthenticatedUser = (
  variables: CodespacesStartForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesStartForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesStartForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/start",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Starts a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const useCodespacesStartForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesStartForAuthenticatedUserError,
      CodespacesStartForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesStartForAuthenticatedUserError,
    CodespacesStartForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesStartForAuthenticatedUserVariables) =>
      fetchCodespacesStartForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CodespacesStopForAuthenticatedUserPathParams = {
  /**
   * The name of the codespace.
   */
  codespaceName: string;
};

export type CodespacesStopForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 500;
      payload: Responses.InternalError;
    }
>;

export type CodespacesStopForAuthenticatedUserVariables = {
  pathParams: CodespacesStopForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const fetchCodespacesStopForAuthenticatedUser = (
  variables: CodespacesStopForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Codespace,
    CodespacesStopForAuthenticatedUserError,
    undefined,
    {},
    {},
    CodespacesStopForAuthenticatedUserPathParams
  >({
    url: "/user/codespaces/{codespaceName}/stop",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Stops a user's codespace.
 *
 * You must authenticate using an access token with the `codespace` scope to use this endpoint.
 *
 * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
 */
export const useCodespacesStopForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Codespace,
      CodespacesStopForAuthenticatedUserError,
      CodespacesStopForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Codespace,
    CodespacesStopForAuthenticatedUserError,
    CodespacesStopForAuthenticatedUserVariables
  >({
    mutationFn: (variables: CodespacesStopForAuthenticatedUserVariables) =>
      fetchCodespacesStopForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponse =
  Schemas.Email[];

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestBody = {
  /**
   * Denotes whether an email is publicly visible.
   */
  visibility: "public" | "private";
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserVariables = {
  body: UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Sets the visibility for your primary email addresses.
 */
export const fetchUsersSetPrimaryEmailVisibilityForAuthenticatedUser = (
  variables: UsersSetPrimaryEmailVisibilityForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponse,
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserError,
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/email/visibility", method: "patch", ...variables, signal });

/**
 * Sets the visibility for your primary email addresses.
 */
export const useUsersSetPrimaryEmailVisibilityForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponse,
      UsersSetPrimaryEmailVisibilityForAuthenticatedUserError,
      UsersSetPrimaryEmailVisibilityForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponse,
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserError,
    UsersSetPrimaryEmailVisibilityForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: UsersSetPrimaryEmailVisibilityForAuthenticatedUserVariables,
    ) =>
      fetchUsersSetPrimaryEmailVisibilityForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersDeleteEmailForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersDeleteEmailForAuthenticatedUserVariables = {
  body?:
    | {
        /**
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersDeleteEmailForAuthenticatedUser = (
  variables: UsersDeleteEmailForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersDeleteEmailForAuthenticatedUserError,
    | {
        /**
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "delete", ...variables, signal });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersDeleteEmailForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeleteEmailForAuthenticatedUserError,
      UsersDeleteEmailForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeleteEmailForAuthenticatedUserError,
    UsersDeleteEmailForAuthenticatedUserVariables
  >({
    mutationFn: (variables: UsersDeleteEmailForAuthenticatedUserVariables) =>
      fetchUsersDeleteEmailForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersListEmailsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListEmailsForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListEmailsForAuthenticatedUserResponse = Schemas.Email[];

export type UsersListEmailsForAuthenticatedUserVariables = {
  queryParams?: UsersListEmailsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListEmailsForAuthenticatedUser = (
  variables: UsersListEmailsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListEmailsForAuthenticatedUserResponse,
    UsersListEmailsForAuthenticatedUserError,
    undefined,
    {},
    UsersListEmailsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/emails", method: "get", ...variables, signal });

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const usersListEmailsForAuthenticatedUserQuery = (
  variables: UsersListEmailsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListEmailsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/emails",
    operationId: "usersListEmailsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListEmailsForAuthenticatedUser(variables, signal),
});

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const useSuspenseUsersListEmailsForAuthenticatedUser = <
  TData = UsersListEmailsForAuthenticatedUserResponse,
>(
  variables: UsersListEmailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListEmailsForAuthenticatedUserResponse,
      UsersListEmailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListEmailsForAuthenticatedUserResponse,
    UsersListEmailsForAuthenticatedUserError,
    TData
  >({
    ...usersListEmailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListEmailsForAuthenticatedUser = <
  TData = UsersListEmailsForAuthenticatedUserResponse,
>(
  variables: UsersListEmailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListEmailsForAuthenticatedUserResponse,
      UsersListEmailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListEmailsForAuthenticatedUserResponse,
    UsersListEmailsForAuthenticatedUserError,
    TData
  >({
    ...usersListEmailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersAddEmailForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersAddEmailForAuthenticatedUserResponse = Schemas.Email[];

export type UsersAddEmailForAuthenticatedUserVariables = {
  body?:
    | {
        /**
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersAddEmailForAuthenticatedUser = (
  variables: UsersAddEmailForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersAddEmailForAuthenticatedUserResponse,
    UsersAddEmailForAuthenticatedUserError,
    | {
        /**
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "post", ...variables, signal });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersAddEmailForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersAddEmailForAuthenticatedUserResponse,
      UsersAddEmailForAuthenticatedUserError,
      UsersAddEmailForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersAddEmailForAuthenticatedUserResponse,
    UsersAddEmailForAuthenticatedUserError,
    UsersAddEmailForAuthenticatedUserVariables
  >({
    mutationFn: (variables: UsersAddEmailForAuthenticatedUserVariables) =>
      fetchUsersAddEmailForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersListFollowersForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersListFollowersForAuthenticatedUserResponse =
  Schemas.SimpleUser[];

export type UsersListFollowersForAuthenticatedUserVariables = {
  queryParams?: UsersListFollowersForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the authenticated user.
 */
export const fetchUsersListFollowersForAuthenticatedUser = (
  variables: UsersListFollowersForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListFollowersForAuthenticatedUserResponse,
    UsersListFollowersForAuthenticatedUserError,
    undefined,
    {},
    UsersListFollowersForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/followers", method: "get", ...variables, signal });

/**
 * Lists the people following the authenticated user.
 */
export const usersListFollowersForAuthenticatedUserQuery = (
  variables: UsersListFollowersForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListFollowersForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/followers",
    operationId: "usersListFollowersForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListFollowersForAuthenticatedUser(variables, signal),
});

/**
 * Lists the people following the authenticated user.
 */
export const useSuspenseUsersListFollowersForAuthenticatedUser = <
  TData = UsersListFollowersForAuthenticatedUserResponse,
>(
  variables: UsersListFollowersForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForAuthenticatedUserResponse,
      UsersListFollowersForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListFollowersForAuthenticatedUserResponse,
    UsersListFollowersForAuthenticatedUserError,
    TData
  >({
    ...usersListFollowersForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people following the authenticated user.
 */
export const useUsersListFollowersForAuthenticatedUser = <
  TData = UsersListFollowersForAuthenticatedUserResponse,
>(
  variables: UsersListFollowersForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForAuthenticatedUserResponse,
      UsersListFollowersForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForAuthenticatedUserResponse,
    UsersListFollowersForAuthenticatedUserError,
    TData
  >({
    ...usersListFollowersForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListFollowedByAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowedByAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type UsersListFollowedByAuthenticatedUserResponse = Schemas.SimpleUser[];

export type UsersListFollowedByAuthenticatedUserVariables = {
  queryParams?: UsersListFollowedByAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the authenticated user follows.
 */
export const fetchUsersListFollowedByAuthenticatedUser = (
  variables: UsersListFollowedByAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListFollowedByAuthenticatedUserResponse,
    UsersListFollowedByAuthenticatedUserError,
    undefined,
    {},
    UsersListFollowedByAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/following", method: "get", ...variables, signal });

/**
 * Lists the people who the authenticated user follows.
 */
export const usersListFollowedByAuthenticatedUserQuery = (
  variables: UsersListFollowedByAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListFollowedByAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/following",
    operationId: "usersListFollowedByAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListFollowedByAuthenticatedUser(variables, signal),
});

/**
 * Lists the people who the authenticated user follows.
 */
export const useSuspenseUsersListFollowedByAuthenticatedUser = <
  TData = UsersListFollowedByAuthenticatedUserResponse,
>(
  variables: UsersListFollowedByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowedByAuthenticatedUserResponse,
      UsersListFollowedByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListFollowedByAuthenticatedUserResponse,
    UsersListFollowedByAuthenticatedUserError,
    TData
  >({
    ...usersListFollowedByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people who the authenticated user follows.
 */
export const useUsersListFollowedByAuthenticatedUser = <
  TData = UsersListFollowedByAuthenticatedUserResponse,
>(
  variables: UsersListFollowedByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowedByAuthenticatedUserResponse,
      UsersListFollowedByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowedByAuthenticatedUserResponse,
    UsersListFollowedByAuthenticatedUserError,
    TData
  >({
    ...usersListFollowedByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersUnfollowPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersUnfollowError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersUnfollowVariables = {
  pathParams: UsersUnfollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersUnfollow = (
  variables: UsersUnfollowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersUnfollowError,
    undefined,
    {},
    {},
    UsersUnfollowPathParams
  >({
    url: "/user/following/{username}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersUnfollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersUnfollowError,
      UsersUnfollowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersUnfollowError,
    UsersUnfollowVariables
  >({
    mutationFn: (variables: UsersUnfollowVariables) =>
      fetchUsersUnfollow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersCheckPersonIsFollowedByAuthenticatedPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersCheckPersonIsFollowedByAuthenticatedError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Schemas.BasicError;
      }
  >;

export type UsersCheckPersonIsFollowedByAuthenticatedVariables = {
  pathParams: UsersCheckPersonIsFollowedByAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckPersonIsFollowedByAuthenticated = (
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersCheckPersonIsFollowedByAuthenticatedError,
    undefined,
    {},
    {},
    UsersCheckPersonIsFollowedByAuthenticatedPathParams
  >({ url: "/user/following/{username}", method: "get", ...variables, signal });

export const usersCheckPersonIsFollowedByAuthenticatedQuery = (
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/following/{username}",
    operationId: "usersCheckPersonIsFollowedByAuthenticated",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersCheckPersonIsFollowedByAuthenticated(variables, signal),
});

export const useSuspenseUsersCheckPersonIsFollowedByAuthenticated = <
  TData = undefined,
>(
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckPersonIsFollowedByAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    UsersCheckPersonIsFollowedByAuthenticatedError,
    TData
  >({
    ...usersCheckPersonIsFollowedByAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useUsersCheckPersonIsFollowedByAuthenticated = <TData = undefined>(
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckPersonIsFollowedByAuthenticatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    UsersCheckPersonIsFollowedByAuthenticatedError,
    TData
  >({
    ...usersCheckPersonIsFollowedByAuthenticatedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersFollowPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersFollowError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersFollowVariables = {
  pathParams: UsersFollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersFollow = (
  variables: UsersFollowVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersFollowError,
    undefined,
    {},
    {},
    UsersFollowPathParams
  >({ url: "/user/following/{username}", method: "put", ...variables, signal });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersFollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersFollowError,
      UsersFollowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersFollowError,
    UsersFollowVariables
  >({
    mutationFn: (variables: UsersFollowVariables) =>
      fetchUsersFollow({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersListGpgKeysForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersListGpgKeysForAuthenticatedUserResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForAuthenticatedUserVariables = {
  queryParams?: UsersListGpgKeysForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListGpgKeysForAuthenticatedUser = (
  variables: UsersListGpgKeysForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListGpgKeysForAuthenticatedUserResponse,
    UsersListGpgKeysForAuthenticatedUserError,
    undefined,
    {},
    UsersListGpgKeysForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/gpg_keys", method: "get", ...variables, signal });

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const usersListGpgKeysForAuthenticatedUserQuery = (
  variables: UsersListGpgKeysForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListGpgKeysForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/gpg_keys",
    operationId: "usersListGpgKeysForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListGpgKeysForAuthenticatedUser(variables, signal),
});

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseUsersListGpgKeysForAuthenticatedUser = <
  TData = UsersListGpgKeysForAuthenticatedUserResponse,
>(
  variables: UsersListGpgKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForAuthenticatedUserResponse,
      UsersListGpgKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListGpgKeysForAuthenticatedUserResponse,
    UsersListGpgKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListGpgKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListGpgKeysForAuthenticatedUser = <
  TData = UsersListGpgKeysForAuthenticatedUserResponse,
>(
  variables: UsersListGpgKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForAuthenticatedUserResponse,
      UsersListGpgKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForAuthenticatedUserResponse,
    UsersListGpgKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListGpgKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersCreateGpgKeyForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersCreateGpgKeyForAuthenticatedUserRequestBody = {
  /**
   * A GPG key in ASCII-armored format.
   */
  armored_public_key: string;
  /**
   * A descriptive name for the new key.
   */
  name?: string;
};

export type UsersCreateGpgKeyForAuthenticatedUserVariables = {
  body: UsersCreateGpgKeyForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreateGpgKeyForAuthenticatedUser = (
  variables: UsersCreateGpgKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GpgKey,
    UsersCreateGpgKeyForAuthenticatedUserError,
    UsersCreateGpgKeyForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/gpg_keys", method: "post", ...variables, signal });

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreateGpgKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GpgKey,
      UsersCreateGpgKeyForAuthenticatedUserError,
      UsersCreateGpgKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GpgKey,
    UsersCreateGpgKeyForAuthenticatedUserError,
    UsersCreateGpgKeyForAuthenticatedUserVariables
  >({
    mutationFn: (variables: UsersCreateGpgKeyForAuthenticatedUserVariables) =>
      fetchUsersCreateGpgKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersDeleteGpgKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the GPG key.
   */
  gpgKeyId: number;
};

export type UsersDeleteGpgKeyForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersDeleteGpgKeyForAuthenticatedUserVariables = {
  pathParams: UsersDeleteGpgKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeleteGpgKeyForAuthenticatedUser = (
  variables: UsersDeleteGpgKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersDeleteGpgKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersDeleteGpgKeyForAuthenticatedUserPathParams
  >({
    url: "/user/gpg_keys/{gpgKeyId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeleteGpgKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeleteGpgKeyForAuthenticatedUserError,
      UsersDeleteGpgKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeleteGpgKeyForAuthenticatedUserError,
    UsersDeleteGpgKeyForAuthenticatedUserVariables
  >({
    mutationFn: (variables: UsersDeleteGpgKeyForAuthenticatedUserVariables) =>
      fetchUsersDeleteGpgKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersGetGpgKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the GPG key.
   */
  gpgKeyId: number;
};

export type UsersGetGpgKeyForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type UsersGetGpgKeyForAuthenticatedUserVariables = {
  pathParams: UsersGetGpgKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetGpgKeyForAuthenticatedUser = (
  variables: UsersGetGpgKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.GpgKey,
    UsersGetGpgKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersGetGpgKeyForAuthenticatedUserPathParams
  >({ url: "/user/gpg_keys/{gpgKeyId}", method: "get", ...variables, signal });

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const usersGetGpgKeyForAuthenticatedUserQuery = (
  variables: UsersGetGpgKeyForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.GpgKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/gpg_keys/{gpgKeyId}",
    operationId: "usersGetGpgKeyForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetGpgKeyForAuthenticatedUser(variables, signal),
});

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseUsersGetGpgKeyForAuthenticatedUser = <
  TData = Schemas.GpgKey,
>(
  variables: UsersGetGpgKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GpgKey,
      UsersGetGpgKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.GpgKey,
    UsersGetGpgKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetGpgKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetGpgKeyForAuthenticatedUser = <TData = Schemas.GpgKey>(
  variables: UsersGetGpgKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GpgKey,
      UsersGetGpgKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GpgKey,
    UsersGetGpgKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetGpgKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListInstallationsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type AppsListInstallationsForAuthenticatedUserResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type AppsListInstallationsForAuthenticatedUserVariables = {
  queryParams?: AppsListInstallationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const fetchAppsListInstallationsForAuthenticatedUser = (
  variables: AppsListInstallationsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListInstallationsForAuthenticatedUserResponse,
    AppsListInstallationsForAuthenticatedUserError,
    undefined,
    {},
    AppsListInstallationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/installations", method: "get", ...variables, signal });

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const appsListInstallationsForAuthenticatedUserQuery = (
  variables: AppsListInstallationsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListInstallationsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/installations",
    operationId: "appsListInstallationsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListInstallationsForAuthenticatedUser(variables, signal),
});

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const useSuspenseAppsListInstallationsForAuthenticatedUser = <
  TData = AppsListInstallationsForAuthenticatedUserResponse,
>(
  variables: AppsListInstallationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsForAuthenticatedUserResponse,
      AppsListInstallationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListInstallationsForAuthenticatedUserResponse,
    AppsListInstallationsForAuthenticatedUserError,
    TData
  >({
    ...appsListInstallationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const useAppsListInstallationsForAuthenticatedUser = <
  TData = AppsListInstallationsForAuthenticatedUserResponse,
>(
  variables: AppsListInstallationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsForAuthenticatedUserResponse,
      AppsListInstallationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsForAuthenticatedUserResponse,
    AppsListInstallationsForAuthenticatedUserError,
    TData
  >({
    ...appsListInstallationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListInstallationReposForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
};

export type AppsListInstallationReposForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationReposForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsListInstallationReposForAuthenticatedUserResponse = {
  repositories: Schemas.Repository[];
  repository_selection?: string;
  total_count: number;
};

export type AppsListInstallationReposForAuthenticatedUserVariables = {
  pathParams: AppsListInstallationReposForAuthenticatedUserPathParams;
  queryParams?: AppsListInstallationReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const fetchAppsListInstallationReposForAuthenticatedUser = (
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListInstallationReposForAuthenticatedUserResponse,
    AppsListInstallationReposForAuthenticatedUserError,
    undefined,
    {},
    AppsListInstallationReposForAuthenticatedUserQueryParams,
    AppsListInstallationReposForAuthenticatedUserPathParams
  >({
    url: "/user/installations/{installationId}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const appsListInstallationReposForAuthenticatedUserQuery = (
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListInstallationReposForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/installations/{installationId}/repositories",
    operationId: "appsListInstallationReposForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListInstallationReposForAuthenticatedUser(variables, signal),
});

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const useSuspenseAppsListInstallationReposForAuthenticatedUser = <
  TData = AppsListInstallationReposForAuthenticatedUserResponse,
>(
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationReposForAuthenticatedUserResponse,
      AppsListInstallationReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListInstallationReposForAuthenticatedUserResponse,
    AppsListInstallationReposForAuthenticatedUserError,
    TData
  >({
    ...appsListInstallationReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const useAppsListInstallationReposForAuthenticatedUser = <
  TData = AppsListInstallationReposForAuthenticatedUserResponse,
>(
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationReposForAuthenticatedUserResponse,
      AppsListInstallationReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationReposForAuthenticatedUserResponse,
    AppsListInstallationReposForAuthenticatedUserError,
    TData
  >({
    ...appsListInstallationReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsRemoveRepoFromInstallationForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
};

export type AppsRemoveRepoFromInstallationForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsRemoveRepoFromInstallationForAuthenticatedUserVariables = {
  pathParams: AppsRemoveRepoFromInstallationForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsRemoveRepoFromInstallationForAuthenticatedUser = (
  variables: AppsRemoveRepoFromInstallationForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsRemoveRepoFromInstallationForAuthenticatedUserError,
    undefined,
    {},
    {},
    AppsRemoveRepoFromInstallationForAuthenticatedUserPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsRemoveRepoFromInstallationForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsRemoveRepoFromInstallationForAuthenticatedUserError,
      AppsRemoveRepoFromInstallationForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsRemoveRepoFromInstallationForAuthenticatedUserError,
    AppsRemoveRepoFromInstallationForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: AppsRemoveRepoFromInstallationForAuthenticatedUserVariables,
    ) =>
      fetchAppsRemoveRepoFromInstallationForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AppsAddRepoToInstallationForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the installation.
   */
  installationId: number;
  /**
   * The unique identifier of the repository.
   */
  repositoryId: number;
};

export type AppsAddRepoToInstallationForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsAddRepoToInstallationForAuthenticatedUserVariables = {
  pathParams: AppsAddRepoToInstallationForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsAddRepoToInstallationForAuthenticatedUser = (
  variables: AppsAddRepoToInstallationForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    AppsAddRepoToInstallationForAuthenticatedUserError,
    undefined,
    {},
    {},
    AppsAddRepoToInstallationForAuthenticatedUserPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsAddRepoToInstallationForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppsAddRepoToInstallationForAuthenticatedUserError,
      AppsAddRepoToInstallationForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    AppsAddRepoToInstallationForAuthenticatedUserError,
    AppsAddRepoToInstallationForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: AppsAddRepoToInstallationForAuthenticatedUserVariables,
    ) =>
      fetchAppsAddRepoToInstallationForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InteractionsRemoveRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsRemoveRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const fetchInteractionsRemoveRestrictionsForAuthenticatedUser = (
  variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    InteractionsRemoveRestrictionsForAuthenticatedUserError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/user/interaction-limits",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const useInteractionsRemoveRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InteractionsRemoveRestrictionsForAuthenticatedUserError,
      InteractionsRemoveRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    InteractionsRemoveRestrictionsForAuthenticatedUserError,
    InteractionsRemoveRestrictionsForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables,
    ) =>
      fetchInteractionsRemoveRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InteractionsGetRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type InteractionsGetRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const fetchInteractionsGetRestrictionsForAuthenticatedUser = (
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForAuthenticatedUserError,
    undefined,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "get", ...variables, signal });

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const interactionsGetRestrictionsForAuthenticatedUserQuery = (
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.InteractionLimitResponse | {}>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/interaction-limits",
    operationId: "interactionsGetRestrictionsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchInteractionsGetRestrictionsForAuthenticatedUser(variables, signal),
});

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const useSuspenseInteractionsGetRestrictionsForAuthenticatedUser = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForAuthenticatedUserError,
    TData
  >({
    ...interactionsGetRestrictionsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 */
export const useInteractionsGetRestrictionsForAuthenticatedUser = <
  TData = Schemas.InteractionLimitResponse | {},
>(
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse | {},
      InteractionsGetRestrictionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse | {},
    InteractionsGetRestrictionsForAuthenticatedUserError,
    TData
  >({
    ...interactionsGetRestrictionsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type InteractionsSetRestrictionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Responses.ValidationFailed;
  }>;

export type InteractionsSetRestrictionsForAuthenticatedUserVariables = {
  body: Schemas.InteractionLimit;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const fetchInteractionsSetRestrictionsForAuthenticatedUser = (
  variables: InteractionsSetRestrictionsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForAuthenticatedUserError,
    Schemas.InteractionLimit,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "put", ...variables, signal });

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const useInteractionsSetRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      InteractionsSetRestrictionsForAuthenticatedUserError,
      InteractionsSetRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    InteractionsSetRestrictionsForAuthenticatedUserError,
    InteractionsSetRestrictionsForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: InteractionsSetRestrictionsForAuthenticatedUserVariables,
    ) =>
      fetchInteractionsSetRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type IssuesListForAuthenticatedUserQueryParams = {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /**
   * Indicates the state of the issues to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type IssuesListForAuthenticatedUserResponse = Schemas.Issue[];

export type IssuesListForAuthenticatedUserVariables = {
  queryParams?: IssuesListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForAuthenticatedUser = (
  variables: IssuesListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    IssuesListForAuthenticatedUserResponse,
    IssuesListForAuthenticatedUserError,
    undefined,
    {},
    IssuesListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/issues", method: "get", ...variables, signal });

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const issuesListForAuthenticatedUserQuery = (
  variables: IssuesListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<IssuesListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/issues",
    operationId: "issuesListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchIssuesListForAuthenticatedUser(variables, signal),
});

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useSuspenseIssuesListForAuthenticatedUser = <
  TData = IssuesListForAuthenticatedUserResponse,
>(
  variables: IssuesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForAuthenticatedUserResponse,
      IssuesListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    IssuesListForAuthenticatedUserResponse,
    IssuesListForAuthenticatedUserError,
    TData
  >({
    ...issuesListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForAuthenticatedUser = <
  TData = IssuesListForAuthenticatedUserResponse,
>(
  variables: IssuesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForAuthenticatedUserResponse,
      IssuesListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForAuthenticatedUserResponse,
    IssuesListForAuthenticatedUserError,
    TData
  >({
    ...issuesListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListPublicSshKeysForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicSshKeysForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersListPublicSshKeysForAuthenticatedUserResponse = Schemas.Key[];

export type UsersListPublicSshKeysForAuthenticatedUserVariables = {
  queryParams?: UsersListPublicSshKeysForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListPublicSshKeysForAuthenticatedUser = (
  variables: UsersListPublicSshKeysForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListPublicSshKeysForAuthenticatedUserResponse,
    UsersListPublicSshKeysForAuthenticatedUserError,
    undefined,
    {},
    UsersListPublicSshKeysForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/keys", method: "get", ...variables, signal });

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const usersListPublicSshKeysForAuthenticatedUserQuery = (
  variables: UsersListPublicSshKeysForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListPublicSshKeysForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/keys",
    operationId: "usersListPublicSshKeysForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListPublicSshKeysForAuthenticatedUser(variables, signal),
});

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseUsersListPublicSshKeysForAuthenticatedUser = <
  TData = UsersListPublicSshKeysForAuthenticatedUserResponse,
>(
  variables: UsersListPublicSshKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicSshKeysForAuthenticatedUserResponse,
      UsersListPublicSshKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListPublicSshKeysForAuthenticatedUserResponse,
    UsersListPublicSshKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListPublicSshKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListPublicSshKeysForAuthenticatedUser = <
  TData = UsersListPublicSshKeysForAuthenticatedUserResponse,
>(
  variables: UsersListPublicSshKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicSshKeysForAuthenticatedUserResponse,
      UsersListPublicSshKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicSshKeysForAuthenticatedUserResponse,
    UsersListPublicSshKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListPublicSshKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersCreatePublicSshKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type UsersCreatePublicSshKeyForAuthenticatedUserRequestBody = {
  /**
   * The public SSH key to add to your GitHub account.
   *
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
   */
  key: string;
  /**
   * A descriptive name for the new key.
   *
   * @example Personal MacBook Air
   */
  title?: string;
};

export type UsersCreatePublicSshKeyForAuthenticatedUserVariables = {
  body: UsersCreatePublicSshKeyForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreatePublicSshKeyForAuthenticatedUser = (
  variables: UsersCreatePublicSshKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Key,
    UsersCreatePublicSshKeyForAuthenticatedUserError,
    UsersCreatePublicSshKeyForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/keys", method: "post", ...variables, signal });

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreatePublicSshKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Key,
      UsersCreatePublicSshKeyForAuthenticatedUserError,
      UsersCreatePublicSshKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Key,
    UsersCreatePublicSshKeyForAuthenticatedUserError,
    UsersCreatePublicSshKeyForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: UsersCreatePublicSshKeyForAuthenticatedUserVariables,
    ) =>
      fetchUsersCreatePublicSshKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersDeletePublicSshKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the key.
   */
  keyId: number;
};

export type UsersDeletePublicSshKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersDeletePublicSshKeyForAuthenticatedUserVariables = {
  pathParams: UsersDeletePublicSshKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeletePublicSshKeyForAuthenticatedUser = (
  variables: UsersDeletePublicSshKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersDeletePublicSshKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersDeletePublicSshKeyForAuthenticatedUserPathParams
  >({ url: "/user/keys/{keyId}", method: "delete", ...variables, signal });

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeletePublicSshKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeletePublicSshKeyForAuthenticatedUserError,
      UsersDeletePublicSshKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeletePublicSshKeyForAuthenticatedUserError,
    UsersDeletePublicSshKeyForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: UsersDeletePublicSshKeyForAuthenticatedUserVariables,
    ) =>
      fetchUsersDeletePublicSshKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersGetPublicSshKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the key.
   */
  keyId: number;
};

export type UsersGetPublicSshKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersGetPublicSshKeyForAuthenticatedUserVariables = {
  pathParams: UsersGetPublicSshKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetPublicSshKeyForAuthenticatedUser = (
  variables: UsersGetPublicSshKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Key,
    UsersGetPublicSshKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersGetPublicSshKeyForAuthenticatedUserPathParams
  >({ url: "/user/keys/{keyId}", method: "get", ...variables, signal });

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const usersGetPublicSshKeyForAuthenticatedUserQuery = (
  variables: UsersGetPublicSshKeyForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Key>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/keys/{keyId}",
    operationId: "usersGetPublicSshKeyForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetPublicSshKeyForAuthenticatedUser(variables, signal),
});

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useSuspenseUsersGetPublicSshKeyForAuthenticatedUser = <
  TData = Schemas.Key,
>(
  variables: UsersGetPublicSshKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Key,
      UsersGetPublicSshKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Key,
    UsersGetPublicSshKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetPublicSshKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetPublicSshKeyForAuthenticatedUser = <
  TData = Schemas.Key,
>(
  variables: UsersGetPublicSshKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Key,
      UsersGetPublicSshKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Key,
    UsersGetPublicSshKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetPublicSshKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListSubscriptionsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type AppsListSubscriptionsForAuthenticatedUserResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUser = (
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    AppsListSubscriptionsForAuthenticatedUserError,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserQueryParams,
    {}
  >({
    url: "/user/marketplace_purchases",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const appsListSubscriptionsForAuthenticatedUserQuery = (
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListSubscriptionsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/marketplace_purchases",
    operationId: "appsListSubscriptionsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListSubscriptionsForAuthenticatedUser(variables, signal),
});

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useSuspenseAppsListSubscriptionsForAuthenticatedUser = <
  TData = AppsListSubscriptionsForAuthenticatedUserResponse,
>(
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserResponse,
      AppsListSubscriptionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    AppsListSubscriptionsForAuthenticatedUserError,
    TData
  >({
    ...appsListSubscriptionsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUser = <
  TData = AppsListSubscriptionsForAuthenticatedUserResponse,
>(
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserResponse,
      AppsListSubscriptionsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    AppsListSubscriptionsForAuthenticatedUserError,
    TData
  >({
    ...appsListSubscriptionsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
  >;

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserStubbedVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUserStubbed = (
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    AppsListSubscriptionsForAuthenticatedUserStubbedError,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams,
    {}
  >({
    url: "/user/marketplace_purchases/stubbed",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const appsListSubscriptionsForAuthenticatedUserStubbedQuery = (
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<AppsListSubscriptionsForAuthenticatedUserStubbedResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/marketplace_purchases/stubbed",
    operationId: "appsListSubscriptionsForAuthenticatedUserStubbed",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsListSubscriptionsForAuthenticatedUserStubbed(variables, signal),
});

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useSuspenseAppsListSubscriptionsForAuthenticatedUserStubbed = <
  TData = AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
>(
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
      AppsListSubscriptionsForAuthenticatedUserStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    AppsListSubscriptionsForAuthenticatedUserStubbedError,
    TData
  >({
    ...appsListSubscriptionsForAuthenticatedUserStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUserStubbed = <
  TData = AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
>(
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
      AppsListSubscriptionsForAuthenticatedUserStubbedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    AppsListSubscriptionsForAuthenticatedUserStubbedError,
    TData
  >({
    ...appsListSubscriptionsForAuthenticatedUserStubbedQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListMembershipsForAuthenticatedUserQueryParams = {
  /**
   * Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
   */
  state?: "active" | "pending";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembershipsForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type OrgsListMembershipsForAuthenticatedUserResponse =
  Schemas.OrgMembership[];

export type OrgsListMembershipsForAuthenticatedUserVariables = {
  queryParams?: OrgsListMembershipsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListMembershipsForAuthenticatedUser = (
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListMembershipsForAuthenticatedUserResponse,
    OrgsListMembershipsForAuthenticatedUserError,
    undefined,
    {},
    OrgsListMembershipsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/memberships/orgs", method: "get", ...variables, signal });

export const orgsListMembershipsForAuthenticatedUserQuery = (
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListMembershipsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/memberships/orgs",
    operationId: "orgsListMembershipsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListMembershipsForAuthenticatedUser(variables, signal),
});

export const useSuspenseOrgsListMembershipsForAuthenticatedUser = <
  TData = OrgsListMembershipsForAuthenticatedUserResponse,
>(
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembershipsForAuthenticatedUserResponse,
      OrgsListMembershipsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListMembershipsForAuthenticatedUserResponse,
    OrgsListMembershipsForAuthenticatedUserError,
    TData
  >({
    ...orgsListMembershipsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useOrgsListMembershipsForAuthenticatedUser = <
  TData = OrgsListMembershipsForAuthenticatedUserResponse,
>(
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembershipsForAuthenticatedUserResponse,
      OrgsListMembershipsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembershipsForAuthenticatedUserResponse,
    OrgsListMembershipsForAuthenticatedUserError,
    TData
  >({
    ...orgsListMembershipsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsGetMembershipForAuthenticatedUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsGetMembershipForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type OrgsGetMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsGetMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsGetMembershipForAuthenticatedUser = (
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsGetMembershipForAuthenticatedUserError,
    undefined,
    {},
    {},
    OrgsGetMembershipForAuthenticatedUserPathParams
  >({
    url: "/user/memberships/orgs/{org}",
    method: "get",
    ...variables,
    signal,
  });

export const orgsGetMembershipForAuthenticatedUserQuery = (
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.OrgMembership>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/memberships/orgs/{org}",
    operationId: "orgsGetMembershipForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsGetMembershipForAuthenticatedUser(variables, signal),
});

export const useSuspenseOrgsGetMembershipForAuthenticatedUser = <
  TData = Schemas.OrgMembership,
>(
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForAuthenticatedUserError,
    TData
  >({
    ...orgsGetMembershipForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useOrgsGetMembershipForAuthenticatedUser = <
  TData = Schemas.OrgMembership,
>(
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      OrgsGetMembershipForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    OrgsGetMembershipForAuthenticatedUserError,
    TData
  >({
    ...orgsGetMembershipForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsUpdateMembershipForAuthenticatedUserPathParams = {
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type OrgsUpdateMembershipForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type OrgsUpdateMembershipForAuthenticatedUserRequestBody = {
  /**
   * The state that the membership should be in. Only `"active"` will be accepted.
   */
  state: "active";
};

export type OrgsUpdateMembershipForAuthenticatedUserVariables = {
  body: OrgsUpdateMembershipForAuthenticatedUserRequestBody;
  pathParams: OrgsUpdateMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUpdateMembershipForAuthenticatedUser = (
  variables: OrgsUpdateMembershipForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsUpdateMembershipForAuthenticatedUserError,
    OrgsUpdateMembershipForAuthenticatedUserRequestBody,
    {},
    {},
    OrgsUpdateMembershipForAuthenticatedUserPathParams
  >({
    url: "/user/memberships/orgs/{org}",
    method: "patch",
    ...variables,
    signal,
  });

export const useOrgsUpdateMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      OrgsUpdateMembershipForAuthenticatedUserError,
      OrgsUpdateMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    OrgsUpdateMembershipForAuthenticatedUserError,
    OrgsUpdateMembershipForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: OrgsUpdateMembershipForAuthenticatedUserVariables,
    ) =>
      fetchOrgsUpdateMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type MigrationsListForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type MigrationsListForAuthenticatedUserResponse = Schemas.Migration[];

export type MigrationsListForAuthenticatedUserVariables = {
  queryParams?: MigrationsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all migrations a user has started.
 */
export const fetchMigrationsListForAuthenticatedUser = (
  variables: MigrationsListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsListForAuthenticatedUserResponse,
    MigrationsListForAuthenticatedUserError,
    undefined,
    {},
    MigrationsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/migrations", method: "get", ...variables, signal });

/**
 * Lists all migrations a user has started.
 */
export const migrationsListForAuthenticatedUserQuery = (
  variables: MigrationsListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/migrations",
    operationId: "migrationsListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsListForAuthenticatedUser(variables, signal),
});

/**
 * Lists all migrations a user has started.
 */
export const useSuspenseMigrationsListForAuthenticatedUser = <
  TData = MigrationsListForAuthenticatedUserResponse,
>(
  variables: MigrationsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForAuthenticatedUserResponse,
      MigrationsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsListForAuthenticatedUserResponse,
    MigrationsListForAuthenticatedUserError,
    TData
  >({
    ...migrationsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all migrations a user has started.
 */
export const useMigrationsListForAuthenticatedUser = <
  TData = MigrationsListForAuthenticatedUserResponse,
>(
  variables: MigrationsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForAuthenticatedUserResponse,
      MigrationsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForAuthenticatedUserResponse,
    MigrationsListForAuthenticatedUserError,
    TData
  >({
    ...migrationsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsStartForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type MigrationsStartForAuthenticatedUserRequestBody = {
  /**
   * Exclude attributes from the API response to improve performance
   *
   * @example repositories
   */
  exclude?: "repositories"[];
  /**
   * Do not include attachments in the migration
   *
   * @example true
   */
  exclude_attachments?: boolean;
  /**
   * Indicates whether the repository git data should be excluded from the migration.
   *
   * @example true
   */
  exclude_git_data?: boolean;
  /**
   * Indicates whether metadata should be excluded and only git source should be included for the migration.
   *
   * @example true
   */
  exclude_metadata?: boolean;
  /**
   * Indicates whether projects owned by the organization or users should be excluded.
   *
   * @example true
   */
  exclude_owner_projects?: boolean;
  /**
   * Do not include releases in the migration
   *
   * @example true
   */
  exclude_releases?: boolean;
  /**
   * Lock the repositories being migrated at the start of the migration
   *
   * @example true
   */
  lock_repositories?: boolean;
  /**
   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
   *
   * @default false
   * @example true
   */
  org_metadata_only?: boolean;
  repositories: string[];
};

export type MigrationsStartForAuthenticatedUserVariables = {
  body: MigrationsStartForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a user migration archive.
 */
export const fetchMigrationsStartForAuthenticatedUser = (
  variables: MigrationsStartForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForAuthenticatedUserError,
    MigrationsStartForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/migrations", method: "post", ...variables, signal });

/**
 * Initiates the generation of a user migration archive.
 */
export const useMigrationsStartForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      MigrationsStartForAuthenticatedUserError,
      MigrationsStartForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    MigrationsStartForAuthenticatedUserError,
    MigrationsStartForAuthenticatedUserVariables
  >({
    mutationFn: (variables: MigrationsStartForAuthenticatedUserVariables) =>
      fetchMigrationsStartForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type MigrationsGetStatusForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsGetStatusForAuthenticatedUserQueryParams = {
  exclude?: string[];
};

export type MigrationsGetStatusForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type MigrationsGetStatusForAuthenticatedUserVariables = {
  pathParams: MigrationsGetStatusForAuthenticatedUserPathParams;
  queryParams?: MigrationsGetStatusForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 */
export const fetchMigrationsGetStatusForAuthenticatedUser = (
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsGetStatusForAuthenticatedUserError,
    undefined,
    {},
    MigrationsGetStatusForAuthenticatedUserQueryParams,
    MigrationsGetStatusForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 */
export const migrationsGetStatusForAuthenticatedUserQuery = (
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Migration>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/migrations/{migrationId}",
    operationId: "migrationsGetStatusForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetStatusForAuthenticatedUser(variables, signal),
});

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 */
export const useSuspenseMigrationsGetStatusForAuthenticatedUser = <
  TData = Schemas.Migration,
>(
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Migration,
    MigrationsGetStatusForAuthenticatedUserError,
    TData
  >({
    ...migrationsGetStatusForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 */
export const useMigrationsGetStatusForAuthenticatedUser = <
  TData = Schemas.Migration,
>(
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      MigrationsGetStatusForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    MigrationsGetStatusForAuthenticatedUserError,
    TData
  >({
    ...migrationsGetStatusForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsDeleteArchiveForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type MigrationsDeleteArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsDeleteArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const fetchMigrationsDeleteArchiveForAuthenticatedUser = (
  variables: MigrationsDeleteArchiveForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsDeleteArchiveForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const useMigrationsDeleteArchiveForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsDeleteArchiveForAuthenticatedUserError,
      MigrationsDeleteArchiveForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsDeleteArchiveForAuthenticatedUserError,
    MigrationsDeleteArchiveForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: MigrationsDeleteArchiveForAuthenticatedUserVariables,
    ) =>
      fetchMigrationsDeleteArchiveForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type MigrationsGetArchiveForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsGetArchiveForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type MigrationsGetArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsGetArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const fetchMigrationsGetArchiveForAuthenticatedUser = (
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsGetArchiveForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsGetArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const migrationsGetArchiveForAuthenticatedUserQuery = (
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/migrations/{migrationId}/archive",
    operationId: "migrationsGetArchiveForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsGetArchiveForAuthenticatedUser(variables, signal),
});

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const useSuspenseMigrationsGetArchiveForAuthenticatedUser = <
  TData = undefined,
>(
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsGetArchiveForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    MigrationsGetArchiveForAuthenticatedUserError,
    TData
  >({
    ...migrationsGetArchiveForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const useMigrationsGetArchiveForAuthenticatedUser = <TData = undefined>(
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      MigrationsGetArchiveForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    MigrationsGetArchiveForAuthenticatedUserError,
    TData
  >({
    ...migrationsGetArchiveForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MigrationsUnlockRepoForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
  /**
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type MigrationsUnlockRepoForAuthenticatedUserVariables = {
  pathParams: MigrationsUnlockRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const fetchMigrationsUnlockRepoForAuthenticatedUser = (
  variables: MigrationsUnlockRepoForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    MigrationsUnlockRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const useMigrationsUnlockRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MigrationsUnlockRepoForAuthenticatedUserError,
      MigrationsUnlockRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    MigrationsUnlockRepoForAuthenticatedUserError,
    MigrationsUnlockRepoForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: MigrationsUnlockRepoForAuthenticatedUserVariables,
    ) =>
      fetchMigrationsUnlockRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type MigrationsListReposForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the migration.
   */
  migrationId: number;
};

export type MigrationsListReposForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForAuthenticatedUserError =
  Fetcher.ErrorWrapper<{
    status: 404;
    payload: Responses.NotFound;
  }>;

export type MigrationsListReposForAuthenticatedUserResponse =
  Schemas.MinimalRepository[];

export type MigrationsListReposForAuthenticatedUserVariables = {
  pathParams: MigrationsListReposForAuthenticatedUserPathParams;
  queryParams?: MigrationsListReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all the repositories for this user migration.
 */
export const fetchMigrationsListReposForAuthenticatedUser = (
  variables: MigrationsListReposForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MigrationsListReposForAuthenticatedUserResponse,
    MigrationsListReposForAuthenticatedUserError,
    undefined,
    {},
    MigrationsListReposForAuthenticatedUserQueryParams,
    MigrationsListReposForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists all the repositories for this user migration.
 */
export const migrationsListReposForAuthenticatedUserQuery = (
  variables: MigrationsListReposForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MigrationsListReposForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/migrations/{migrationId}/repositories",
    operationId: "migrationsListReposForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMigrationsListReposForAuthenticatedUser(variables, signal),
});

/**
 * Lists all the repositories for this user migration.
 */
export const useSuspenseMigrationsListReposForAuthenticatedUser = <
  TData = MigrationsListReposForAuthenticatedUserResponse,
>(
  variables: MigrationsListReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForAuthenticatedUserResponse,
      MigrationsListReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MigrationsListReposForAuthenticatedUserResponse,
    MigrationsListReposForAuthenticatedUserError,
    TData
  >({
    ...migrationsListReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all the repositories for this user migration.
 */
export const useMigrationsListReposForAuthenticatedUser = <
  TData = MigrationsListReposForAuthenticatedUserResponse,
>(
  variables: MigrationsListReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForAuthenticatedUserResponse,
      MigrationsListReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForAuthenticatedUserResponse,
    MigrationsListReposForAuthenticatedUserError,
    TData
  >({
    ...migrationsListReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type OrgsListForAuthenticatedUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForAuthenticatedUserVariables = {
  queryParams?: OrgsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const fetchOrgsListForAuthenticatedUser = (
  variables: OrgsListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListForAuthenticatedUserResponse,
    OrgsListForAuthenticatedUserError,
    undefined,
    {},
    OrgsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/orgs", method: "get", ...variables, signal });

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const orgsListForAuthenticatedUserQuery = (
  variables: OrgsListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/orgs",
    operationId: "orgsListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListForAuthenticatedUser(variables, signal),
});

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const useSuspenseOrgsListForAuthenticatedUser = <
  TData = OrgsListForAuthenticatedUserResponse,
>(
  variables: OrgsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForAuthenticatedUserResponse,
      OrgsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListForAuthenticatedUserResponse,
    OrgsListForAuthenticatedUserError,
    TData
  >({
    ...orgsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const useOrgsListForAuthenticatedUser = <
  TData = OrgsListForAuthenticatedUserResponse,
>(
  variables: OrgsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForAuthenticatedUserResponse,
      OrgsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForAuthenticatedUserResponse,
    OrgsListForAuthenticatedUserError,
    TData
  >({
    ...orgsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesListPackagesForAuthenticatedUserQueryParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   *
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
  visibility?: "public" | "private" | "internal";
};

export type PackagesListPackagesForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesListPackagesForAuthenticatedUserResponse =
  Schemas.Package[];

export type PackagesListPackagesForAuthenticatedUserVariables = {
  queryParams: PackagesListPackagesForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesListPackagesForAuthenticatedUser = (
  variables: PackagesListPackagesForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PackagesListPackagesForAuthenticatedUserResponse,
    PackagesListPackagesForAuthenticatedUserError,
    undefined,
    {},
    PackagesListPackagesForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/packages", method: "get", ...variables, signal });

/**
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesListPackagesForAuthenticatedUserQuery = (
  variables: PackagesListPackagesForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PackagesListPackagesForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/packages",
    operationId: "packagesListPackagesForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesListPackagesForAuthenticatedUser(variables, signal),
});

/**
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesListPackagesForAuthenticatedUser = <
  TData = PackagesListPackagesForAuthenticatedUserResponse,
>(
  variables: PackagesListPackagesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForAuthenticatedUserResponse,
      PackagesListPackagesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PackagesListPackagesForAuthenticatedUserResponse,
    PackagesListPackagesForAuthenticatedUserError,
    TData
  >({
    ...packagesListPackagesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesListPackagesForAuthenticatedUser = <
  TData = PackagesListPackagesForAuthenticatedUserResponse,
>(
  variables: PackagesListPackagesForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForAuthenticatedUserResponse,
      PackagesListPackagesForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PackagesListPackagesForAuthenticatedUserResponse,
    PackagesListPackagesForAuthenticatedUserError,
    TData
  >({
    ...packagesListPackagesForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesDeletePackageForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
};

export type PackagesDeletePackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesDeletePackageForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesDeletePackageForAuthenticatedUser = (
  variables: PackagesDeletePackageForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesDeletePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageForAuthenticatedUserError,
      PackagesDeletePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageForAuthenticatedUserError,
    PackagesDeletePackageForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: PackagesDeletePackageForAuthenticatedUserVariables,
    ) =>
      fetchPackagesDeletePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesGetPackageForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
};

export type PackagesGetPackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageForAuthenticatedUser = (
  variables: PackagesGetPackageForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesGetPackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageForAuthenticatedUserQuery = (
  variables: PackagesGetPackageForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Package>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/packages/{packageType}/{packageName}",
    operationId: "packagesGetPackageForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageForAuthenticatedUser(variables, signal),
});

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageForAuthenticatedUser = <
  TData = Schemas.Package,
>(
  variables: PackagesGetPackageForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Package,
    PackagesGetPackageForAuthenticatedUserError,
    TData
  >({
    ...packagesGetPackageForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageForAuthenticatedUser = <
  TData = Schemas.Package,
>(
  variables: PackagesGetPackageForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForAuthenticatedUserError,
    TData
  >({
    ...packagesGetPackageForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
};

export type PackagesRestorePackageForAuthenticatedUserQueryParams = {
  /**
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesRestorePackageForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageForAuthenticatedUserPathParams;
  queryParams?: PackagesRestorePackageForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesRestorePackageForAuthenticatedUser = (
  variables: PackagesRestorePackageForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageForAuthenticatedUserError,
    undefined,
    {},
    PackagesRestorePackageForAuthenticatedUserQueryParams,
    PackagesRestorePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesRestorePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageForAuthenticatedUserError,
      PackagesRestorePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageForAuthenticatedUserError,
    PackagesRestorePackageForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: PackagesRestorePackageForAuthenticatedUserVariables,
    ) =>
      fetchPackagesRestorePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams =
  {
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    packageType:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /**
     * The name of the package.
     */
    packageName: string;
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams =
  {
    /**
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /**
     * The state of the package, either active or deleted.
     *
     * @default active
     */
    state?: "active" | "deleted";
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables =
  {
    pathParams: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams;
    queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  (
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
    signal?: AbortSignal,
  ) =>
    githubFetch<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
      undefined,
      {},
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams
    >({
      url: "/user/packages/{packageType}/{packageName}/versions",
      method: "get",
      ...variables,
      signal,
    });

/**
 * Lists package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuery =
  (
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
  ): {
    queryKey: reactQuery.QueryKey;
    queryFn: ({
      signal,
    }: {
      signal?: AbortSignal;
    }) => Promise<PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse>;
  } => ({
    queryKey: queryKeyFn({
      path: "/user/packages/{packageType}/{packageName}/versions",
      operationId:
        "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
      variables,
    }),
    queryFn: ({ signal }: { signal?: AbortSignal }) =>
      fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
        variables,
        signal,
      ),
  });

/**
 * Lists package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  <
    TData = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
  >(
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useSuspenseQuery<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
      TData
    >({
      ...packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

/**
 * Lists package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  <
    TData = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
  >(
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
        TData
      >,
      "queryKey" | "queryFn" | "initialData"
    >,
  ) => {
    const { queryOptions } = useGithubContext(options);
    return reactQuery.useQuery<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError,
      TData
    >({
      ...packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuery(
        variables,
      ),
      ...options,
      ...queryOptions,
    });
  };

export type PackagesDeletePackageVersionForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesDeletePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesDeletePackageVersionForAuthenticatedUser = (
  variables: PackagesDeletePackageVersionForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.
 * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesDeletePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageVersionForAuthenticatedUserError,
      PackagesDeletePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageVersionForAuthenticatedUserError,
    PackagesDeletePackageVersionForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: PackagesDeletePackageVersionForAuthenticatedUserVariables,
    ) =>
      fetchPackagesDeletePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesGetPackageVersionForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageVersionForAuthenticatedUser = (
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageVersionForAuthenticatedUserQuery = (
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PackageVersion>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    operationId: "packagesGetPackageVersionForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageVersionForAuthenticatedUser(variables, signal),
});

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageVersionForAuthenticatedUser = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForAuthenticatedUserError,
    TData
  >({
    ...packagesGetPackageVersionForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageVersionForAuthenticatedUser = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForAuthenticatedUserError,
    TData
  >({
    ...packagesGetPackageVersionForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageVersionForAuthenticatedUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesRestorePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesRestorePackageVersionForAuthenticatedUser = (
  variables: PackagesRestorePackageVersionForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageVersionForAuthenticatedUserError,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesRestorePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageVersionForAuthenticatedUserError,
      PackagesRestorePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageVersionForAuthenticatedUserError,
    PackagesRestorePackageVersionForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: PackagesRestorePackageVersionForAuthenticatedUserVariables,
    ) =>
      fetchPackagesRestorePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProjectsCreateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailedSimple;
    }
>;

export type ProjectsCreateForAuthenticatedUserRequestBody = {
  /**
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /**
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
};

export type ProjectsCreateForAuthenticatedUserVariables = {
  body: ProjectsCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForAuthenticatedUser = (
  variables: ProjectsCreateForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForAuthenticatedUserError,
    ProjectsCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/projects", method: "post", ...variables, signal });

/**
 * Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      ProjectsCreateForAuthenticatedUserError,
      ProjectsCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    ProjectsCreateForAuthenticatedUserError,
    ProjectsCreateForAuthenticatedUserVariables
  >({
    mutationFn: (variables: ProjectsCreateForAuthenticatedUserVariables) =>
      fetchProjectsCreateForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersListPublicEmailsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicEmailsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersListPublicEmailsForAuthenticatedUserResponse = Schemas.Email[];

export type UsersListPublicEmailsForAuthenticatedUserVariables = {
  queryParams?: UsersListPublicEmailsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListPublicEmailsForAuthenticatedUser = (
  variables: UsersListPublicEmailsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListPublicEmailsForAuthenticatedUserResponse,
    UsersListPublicEmailsForAuthenticatedUserError,
    undefined,
    {},
    UsersListPublicEmailsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/public_emails", method: "get", ...variables, signal });

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const usersListPublicEmailsForAuthenticatedUserQuery = (
  variables: UsersListPublicEmailsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListPublicEmailsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/public_emails",
    operationId: "usersListPublicEmailsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListPublicEmailsForAuthenticatedUser(variables, signal),
});

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const useSuspenseUsersListPublicEmailsForAuthenticatedUser = <
  TData = UsersListPublicEmailsForAuthenticatedUserResponse,
>(
  variables: UsersListPublicEmailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicEmailsForAuthenticatedUserResponse,
      UsersListPublicEmailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListPublicEmailsForAuthenticatedUserResponse,
    UsersListPublicEmailsForAuthenticatedUserError,
    TData
  >({
    ...usersListPublicEmailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListPublicEmailsForAuthenticatedUser = <
  TData = UsersListPublicEmailsForAuthenticatedUserResponse,
>(
  variables: UsersListPublicEmailsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicEmailsForAuthenticatedUserResponse,
      UsersListPublicEmailsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicEmailsForAuthenticatedUserResponse,
    UsersListPublicEmailsForAuthenticatedUserError,
    TData
  >({
    ...usersListPublicEmailsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListForAuthenticatedUserQueryParams = {
  /**
   * Limit results to repositories with the specified visibility.
   *
   * @default all
   */
  visibility?: "all" | "public" | "private";
  /**
   * Comma-separated list of values. Can include:
   *  * `owner`: Repositories that are owned by the authenticated user.
   *  * `collaborator`: Repositories that the user has been added to as a collaborator.
   *  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   *
   * @default owner,collaborator,organization_member
   */
  affiliation?: string;
  /**
   * Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   *
   * @default all
   */
  type?: "all" | "owner" | "public" | "private" | "member";
  /**
   * The property to sort the results by.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  before?: string;
};

export type ReposListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposListForAuthenticatedUserResponse = Schemas.Repository[];

export type ReposListForAuthenticatedUserVariables = {
  queryParams?: ReposListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const fetchReposListForAuthenticatedUser = (
  variables: ReposListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListForAuthenticatedUserResponse,
    ReposListForAuthenticatedUserError,
    undefined,
    {},
    ReposListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/repos", method: "get", ...variables, signal });

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const reposListForAuthenticatedUserQuery = (
  variables: ReposListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/repos",
    operationId: "reposListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListForAuthenticatedUser(variables, signal),
});

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const useSuspenseReposListForAuthenticatedUser = <
  TData = ReposListForAuthenticatedUserResponse,
>(
  variables: ReposListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForAuthenticatedUserResponse,
      ReposListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListForAuthenticatedUserResponse,
    ReposListForAuthenticatedUserError,
    TData
  >({
    ...reposListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const useReposListForAuthenticatedUser = <
  TData = ReposListForAuthenticatedUserResponse,
>(
  variables: ReposListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForAuthenticatedUserResponse,
      ReposListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForAuthenticatedUserResponse,
    ReposListForAuthenticatedUserError,
    TData
  >({
    ...reposListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposCreateForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type ReposCreateForAuthenticatedUserRequestBody = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether the repository is initialized with a minimal README.
   *
   * @default false
   */
  auto_init?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * The desired language or platform to apply to the .gitignore.
   *
   * @example Haskell
   */
  gitignore_template?: string;
  /**
   * Whether discussions are enabled.
   *
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads?: boolean;
  /**
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues?: boolean;
  /**
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects?: boolean;
  /**
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki?: boolean;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /**
   * The license keyword of the open source license for this repository.
   *
   * @example mit
   */
  license_template?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  /**
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
};

export type ReposCreateForAuthenticatedUserVariables = {
  body: ReposCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const fetchReposCreateForAuthenticatedUser = (
  variables: ReposCreateForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateForAuthenticatedUserError,
    ReposCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/repos", method: "post", ...variables, signal });

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const useReposCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      ReposCreateForAuthenticatedUserError,
      ReposCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    ReposCreateForAuthenticatedUserError,
    ReposCreateForAuthenticatedUserVariables
  >({
    mutationFn: (variables: ReposCreateForAuthenticatedUserVariables) =>
      fetchReposCreateForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReposListInvitationsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type ReposListInvitationsForAuthenticatedUserResponse =
  Schemas.RepositoryInvitation[];

export type ReposListInvitationsForAuthenticatedUserVariables = {
  queryParams?: ReposListInvitationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const fetchReposListInvitationsForAuthenticatedUser = (
  variables: ReposListInvitationsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListInvitationsForAuthenticatedUserResponse,
    ReposListInvitationsForAuthenticatedUserError,
    undefined,
    {},
    ReposListInvitationsForAuthenticatedUserQueryParams,
    {}
  >({
    url: "/user/repository_invitations",
    method: "get",
    ...variables,
    signal,
  });

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const reposListInvitationsForAuthenticatedUserQuery = (
  variables: ReposListInvitationsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListInvitationsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/repository_invitations",
    operationId: "reposListInvitationsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListInvitationsForAuthenticatedUser(variables, signal),
});

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const useSuspenseReposListInvitationsForAuthenticatedUser = <
  TData = ReposListInvitationsForAuthenticatedUserResponse,
>(
  variables: ReposListInvitationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsForAuthenticatedUserResponse,
      ReposListInvitationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListInvitationsForAuthenticatedUserResponse,
    ReposListInvitationsForAuthenticatedUserError,
    TData
  >({
    ...reposListInvitationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const useReposListInvitationsForAuthenticatedUser = <
  TData = ReposListInvitationsForAuthenticatedUserResponse,
>(
  variables: ReposListInvitationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsForAuthenticatedUserResponse,
      ReposListInvitationsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsForAuthenticatedUserResponse,
    ReposListInvitationsForAuthenticatedUserError,
    TData
  >({
    ...reposListInvitationsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposDeclineInvitationForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type ReposDeclineInvitationForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 409;
        payload: Responses.Conflict;
      }
  >;

export type ReposDeclineInvitationForAuthenticatedUserVariables = {
  pathParams: ReposDeclineInvitationForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeclineInvitationForAuthenticatedUser = (
  variables: ReposDeclineInvitationForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposDeclineInvitationForAuthenticatedUserError,
    undefined,
    {},
    {},
    ReposDeclineInvitationForAuthenticatedUserPathParams
  >({
    url: "/user/repository_invitations/{invitationId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReposDeclineInvitationForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposDeclineInvitationForAuthenticatedUserError,
      ReposDeclineInvitationForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposDeclineInvitationForAuthenticatedUserError,
    ReposDeclineInvitationForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: ReposDeclineInvitationForAuthenticatedUserVariables,
    ) =>
      fetchReposDeclineInvitationForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReposAcceptInvitationForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the invitation.
   */
  invitationId: number;
};

export type ReposAcceptInvitationForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 409;
        payload: Responses.Conflict;
      }
  >;

export type ReposAcceptInvitationForAuthenticatedUserVariables = {
  pathParams: ReposAcceptInvitationForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposAcceptInvitationForAuthenticatedUser = (
  variables: ReposAcceptInvitationForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ReposAcceptInvitationForAuthenticatedUserError,
    undefined,
    {},
    {},
    ReposAcceptInvitationForAuthenticatedUserPathParams
  >({
    url: "/user/repository_invitations/{invitationId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useReposAcceptInvitationForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReposAcceptInvitationForAuthenticatedUserError,
      ReposAcceptInvitationForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ReposAcceptInvitationForAuthenticatedUserError,
    ReposAcceptInvitationForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: ReposAcceptInvitationForAuthenticatedUserVariables,
    ) =>
      fetchReposAcceptInvitationForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersListSshSigningKeysForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListSshSigningKeysForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersListSshSigningKeysForAuthenticatedUserResponse =
  Schemas.SshSigningKey[];

export type UsersListSshSigningKeysForAuthenticatedUserVariables = {
  queryParams?: UsersListSshSigningKeysForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const fetchUsersListSshSigningKeysForAuthenticatedUser = (
  variables: UsersListSshSigningKeysForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListSshSigningKeysForAuthenticatedUserResponse,
    UsersListSshSigningKeysForAuthenticatedUserError,
    undefined,
    {},
    UsersListSshSigningKeysForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/ssh_signing_keys", method: "get", ...variables, signal });

/**
 * Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const usersListSshSigningKeysForAuthenticatedUserQuery = (
  variables: UsersListSshSigningKeysForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListSshSigningKeysForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/ssh_signing_keys",
    operationId: "usersListSshSigningKeysForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListSshSigningKeysForAuthenticatedUser(variables, signal),
});

/**
 * Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useSuspenseUsersListSshSigningKeysForAuthenticatedUser = <
  TData = UsersListSshSigningKeysForAuthenticatedUserResponse,
>(
  variables: UsersListSshSigningKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListSshSigningKeysForAuthenticatedUserResponse,
      UsersListSshSigningKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListSshSigningKeysForAuthenticatedUserResponse,
    UsersListSshSigningKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListSshSigningKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useUsersListSshSigningKeysForAuthenticatedUser = <
  TData = UsersListSshSigningKeysForAuthenticatedUserResponse,
>(
  variables: UsersListSshSigningKeysForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListSshSigningKeysForAuthenticatedUserResponse,
      UsersListSshSigningKeysForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListSshSigningKeysForAuthenticatedUserResponse,
    UsersListSshSigningKeysForAuthenticatedUserError,
    TData
  >({
    ...usersListSshSigningKeysForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersCreateSshSigningKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
    | {
        status: 422;
        payload: Responses.ValidationFailed;
      }
  >;

export type UsersCreateSshSigningKeyForAuthenticatedUserRequestBody = {
  /**
   * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
   *
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com
   */
  key: string;
  /**
   * A descriptive name for the new key.
   *
   * @example Personal MacBook Air
   */
  title?: string;
};

export type UsersCreateSshSigningKeyForAuthenticatedUserVariables = {
  body: UsersCreateSshSigningKeyForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const fetchUsersCreateSshSigningKeyForAuthenticatedUser = (
  variables: UsersCreateSshSigningKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SshSigningKey,
    UsersCreateSshSigningKeyForAuthenticatedUserError,
    UsersCreateSshSigningKeyForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/ssh_signing_keys", method: "post", ...variables, signal });

/**
 * Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useUsersCreateSshSigningKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SshSigningKey,
      UsersCreateSshSigningKeyForAuthenticatedUserError,
      UsersCreateSshSigningKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.SshSigningKey,
    UsersCreateSshSigningKeyForAuthenticatedUserError,
    UsersCreateSshSigningKeyForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: UsersCreateSshSigningKeyForAuthenticatedUserVariables,
    ) =>
      fetchUsersCreateSshSigningKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersDeleteSshSigningKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the SSH signing key.
   */
  sshSigningKeyId: number;
};

export type UsersDeleteSshSigningKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersDeleteSshSigningKeyForAuthenticatedUserVariables = {
  pathParams: UsersDeleteSshSigningKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an SSH signing key from the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const fetchUsersDeleteSshSigningKeyForAuthenticatedUser = (
  variables: UsersDeleteSshSigningKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersDeleteSshSigningKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersDeleteSshSigningKeyForAuthenticatedUserPathParams
  >({
    url: "/user/ssh_signing_keys/{sshSigningKeyId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an SSH signing key from the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useUsersDeleteSshSigningKeyForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersDeleteSshSigningKeyForAuthenticatedUserError,
      UsersDeleteSshSigningKeyForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    UsersDeleteSshSigningKeyForAuthenticatedUserError,
    UsersDeleteSshSigningKeyForAuthenticatedUserVariables
  >({
    mutationFn: (
      variables: UsersDeleteSshSigningKeyForAuthenticatedUserVariables,
    ) =>
      fetchUsersDeleteSshSigningKeyForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UsersGetSshSigningKeyForAuthenticatedUserPathParams = {
  /**
   * The unique identifier of the SSH signing key.
   */
  sshSigningKeyId: number;
};

export type UsersGetSshSigningKeyForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type UsersGetSshSigningKeyForAuthenticatedUserVariables = {
  pathParams: UsersGetSshSigningKeyForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const fetchUsersGetSshSigningKeyForAuthenticatedUser = (
  variables: UsersGetSshSigningKeyForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.SshSigningKey,
    UsersGetSshSigningKeyForAuthenticatedUserError,
    undefined,
    {},
    {},
    UsersGetSshSigningKeyForAuthenticatedUserPathParams
  >({
    url: "/user/ssh_signing_keys/{sshSigningKeyId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const usersGetSshSigningKeyForAuthenticatedUserQuery = (
  variables: UsersGetSshSigningKeyForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.SshSigningKey>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/ssh_signing_keys/{sshSigningKeyId}",
    operationId: "usersGetSshSigningKeyForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetSshSigningKeyForAuthenticatedUser(variables, signal),
});

/**
 * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useSuspenseUsersGetSshSigningKeyForAuthenticatedUser = <
  TData = Schemas.SshSigningKey,
>(
  variables: UsersGetSshSigningKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SshSigningKey,
      UsersGetSshSigningKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.SshSigningKey,
    UsersGetSshSigningKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetSshSigningKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
 */
export const useUsersGetSshSigningKeyForAuthenticatedUser = <
  TData = Schemas.SshSigningKey,
>(
  variables: UsersGetSshSigningKeyForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SshSigningKey,
      UsersGetSshSigningKeyForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SshSigningKey,
    UsersGetSshSigningKeyForAuthenticatedUserError,
    TData
  >({
    ...usersGetSshSigningKeyForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListReposStarredByAuthenticatedUserQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityListReposStarredByAuthenticatedUserResponse =
  Schemas.Repository[];

export type ActivityListReposStarredByAuthenticatedUserVariables = {
  queryParams?: ActivityListReposStarredByAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const fetchActivityListReposStarredByAuthenticatedUser = (
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListReposStarredByAuthenticatedUserResponse,
    ActivityListReposStarredByAuthenticatedUserError,
    undefined,
    {},
    ActivityListReposStarredByAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/starred", method: "get", ...variables, signal });

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const activityListReposStarredByAuthenticatedUserQuery = (
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListReposStarredByAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/starred",
    operationId: "activityListReposStarredByAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListReposStarredByAuthenticatedUser(variables, signal),
});

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useSuspenseActivityListReposStarredByAuthenticatedUser = <
  TData = ActivityListReposStarredByAuthenticatedUserResponse,
>(
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByAuthenticatedUserResponse,
      ActivityListReposStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListReposStarredByAuthenticatedUserResponse,
    ActivityListReposStarredByAuthenticatedUserError,
    TData
  >({
    ...activityListReposStarredByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useActivityListReposStarredByAuthenticatedUser = <
  TData = ActivityListReposStarredByAuthenticatedUserResponse,
>(
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByAuthenticatedUserResponse,
      ActivityListReposStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposStarredByAuthenticatedUserResponse,
    ActivityListReposStarredByAuthenticatedUserError,
    TData
  >({
    ...activityListReposStarredByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityUnstarRepoForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityUnstarRepoForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityUnstarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityUnstarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityUnstarRepoForAuthenticatedUser = (
  variables: ActivityUnstarRepoForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityUnstarRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityUnstarRepoForAuthenticatedUserPathParams
  >({
    url: "/user/starred/{owner}/{repo}",
    method: "delete",
    ...variables,
    signal,
  });

export const useActivityUnstarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityUnstarRepoForAuthenticatedUserError,
      ActivityUnstarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityUnstarRepoForAuthenticatedUserError,
    ActivityUnstarRepoForAuthenticatedUserVariables
  >({
    mutationFn: (variables: ActivityUnstarRepoForAuthenticatedUserVariables) =>
      fetchActivityUnstarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Schemas.BasicError;
      }
  >;

export type ActivityCheckRepoIsStarredByAuthenticatedUserVariables = {
  pathParams: ActivityCheckRepoIsStarredByAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityCheckRepoIsStarredByAuthenticatedUser = (
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityCheckRepoIsStarredByAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityCheckRepoIsStarredByAuthenticatedUserPathParams
  >({
    url: "/user/starred/{owner}/{repo}",
    method: "get",
    ...variables,
    signal,
  });

export const activityCheckRepoIsStarredByAuthenticatedUserQuery = (
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/starred/{owner}/{repo}",
    operationId: "activityCheckRepoIsStarredByAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityCheckRepoIsStarredByAuthenticatedUser(variables, signal),
});

export const useSuspenseActivityCheckRepoIsStarredByAuthenticatedUser = <
  TData = undefined,
>(
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActivityCheckRepoIsStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    ActivityCheckRepoIsStarredByAuthenticatedUserError,
    TData
  >({
    ...activityCheckRepoIsStarredByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityCheckRepoIsStarredByAuthenticatedUser = <
  TData = undefined,
>(
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ActivityCheckRepoIsStarredByAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    ActivityCheckRepoIsStarredByAuthenticatedUserError,
    TData
  >({
    ...activityCheckRepoIsStarredByAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityStarRepoForAuthenticatedUserPathParams = {
  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  owner: string;
  /**
   * The name of the repository. The name is not case sensitive.
   */
  repo: string;
};

export type ActivityStarRepoForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type ActivityStarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityStarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchActivityStarRepoForAuthenticatedUser = (
  variables: ActivityStarRepoForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    ActivityStarRepoForAuthenticatedUserError,
    undefined,
    {},
    {},
    ActivityStarRepoForAuthenticatedUserPathParams
  >({
    url: "/user/starred/{owner}/{repo}",
    method: "put",
    ...variables,
    signal,
  });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useActivityStarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivityStarRepoForAuthenticatedUserError,
      ActivityStarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    ActivityStarRepoForAuthenticatedUserError,
    ActivityStarRepoForAuthenticatedUserVariables
  >({
    mutationFn: (variables: ActivityStarRepoForAuthenticatedUserVariables) =>
      fetchActivityStarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ActivityListWatchedReposForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchedReposForAuthenticatedUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 304;
        payload: Responses.NotModified;
      }
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
  >;

export type ActivityListWatchedReposForAuthenticatedUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListWatchedReposForAuthenticatedUserVariables = {
  queryParams?: ActivityListWatchedReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user is watching.
 */
export const fetchActivityListWatchedReposForAuthenticatedUser = (
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    ActivityListWatchedReposForAuthenticatedUserError,
    undefined,
    {},
    ActivityListWatchedReposForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/subscriptions", method: "get", ...variables, signal });

/**
 * Lists repositories the authenticated user is watching.
 */
export const activityListWatchedReposForAuthenticatedUserQuery = (
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListWatchedReposForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/subscriptions",
    operationId: "activityListWatchedReposForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListWatchedReposForAuthenticatedUser(variables, signal),
});

/**
 * Lists repositories the authenticated user is watching.
 */
export const useSuspenseActivityListWatchedReposForAuthenticatedUser = <
  TData = ActivityListWatchedReposForAuthenticatedUserResponse,
>(
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchedReposForAuthenticatedUserResponse,
      ActivityListWatchedReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    ActivityListWatchedReposForAuthenticatedUserError,
    TData
  >({
    ...activityListWatchedReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories the authenticated user is watching.
 */
export const useActivityListWatchedReposForAuthenticatedUser = <
  TData = ActivityListWatchedReposForAuthenticatedUserResponse,
>(
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchedReposForAuthenticatedUserResponse,
      ActivityListWatchedReposForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    ActivityListWatchedReposForAuthenticatedUserError,
    TData
  >({
    ...activityListWatchedReposForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type TeamsListForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListForAuthenticatedUserError = Fetcher.ErrorWrapper<
  | {
      status: 304;
      payload: Responses.NotModified;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type TeamsListForAuthenticatedUserResponse = Schemas.TeamFull[];

export type TeamsListForAuthenticatedUserVariables = {
  queryParams?: TeamsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const fetchTeamsListForAuthenticatedUser = (
  variables: TeamsListForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    TeamsListForAuthenticatedUserResponse,
    TeamsListForAuthenticatedUserError,
    undefined,
    {},
    TeamsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/teams", method: "get", ...variables, signal });

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const teamsListForAuthenticatedUserQuery = (
  variables: TeamsListForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<TeamsListForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/user/teams",
    operationId: "teamsListForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchTeamsListForAuthenticatedUser(variables, signal),
});

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const useSuspenseTeamsListForAuthenticatedUser = <
  TData = TeamsListForAuthenticatedUserResponse,
>(
  variables: TeamsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListForAuthenticatedUserResponse,
      TeamsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    TeamsListForAuthenticatedUserResponse,
    TeamsListForAuthenticatedUserError,
    TData
  >({
    ...teamsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const useTeamsListForAuthenticatedUser = <
  TData = TeamsListForAuthenticatedUserResponse,
>(
  variables: TeamsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListForAuthenticatedUserResponse,
      TeamsListForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListForAuthenticatedUserResponse,
    TeamsListForAuthenticatedUserError,
    TData
  >({
    ...teamsListForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListQueryParams = {
  /**
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type UsersListError = Fetcher.ErrorWrapper<{
  status: 304;
  payload: Responses.NotModified;
}>;

export type UsersListResponse = Schemas.SimpleUser[];

export type UsersListVariables = {
  queryParams?: UsersListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const fetchUsersList = (
  variables: UsersListVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListResponse,
    UsersListError,
    undefined,
    {},
    UsersListQueryParams,
    {}
  >({ url: "/users", method: "get", ...variables, signal });

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const usersListQuery = (
  variables: UsersListVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<UsersListResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users",
    operationId: "usersList",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersList(variables, signal),
});

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const useSuspenseUsersList = <TData = UsersListResponse>(
  variables: UsersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<UsersListResponse, UsersListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<UsersListResponse, UsersListError, TData>({
    ...usersListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const useUsersList = <TData = UsersListResponse>(
  variables: UsersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<UsersListResponse, UsersListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<UsersListResponse, UsersListError, TData>({
    ...usersListQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersGetByUsernamePathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersGetByUsernameError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type UsersGetByUsernameVariables = {
  pathParams: UsersGetByUsernamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const fetchUsersGetByUsername = (
  variables: UsersGetByUsernameVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetByUsernameError,
    undefined,
    {},
    {},
    UsersGetByUsernamePathParams
  >({ url: "/users/{username}", method: "get", ...variables, signal });

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const usersGetByUsernameQuery = (
  variables: UsersGetByUsernameVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PrivateUser | Schemas.PublicUser>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}",
    operationId: "usersGetByUsername",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetByUsername(variables, signal),
});

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const useSuspenseUsersGetByUsername = <
  TData = Schemas.PrivateUser | Schemas.PublicUser,
>(
  variables: UsersGetByUsernameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetByUsernameError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetByUsernameError,
    TData
  >({
    ...usersGetByUsernameQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const useUsersGetByUsername = <
  TData = Schemas.PrivateUser | Schemas.PublicUser,
>(
  variables: UsersGetByUsernameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      UsersGetByUsernameError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    UsersGetByUsernameError,
    TData
  >({
    ...usersGetByUsernameQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListEventsForAuthenticatedUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListEventsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListEventsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListEventsForAuthenticatedUser = (
  variables: ActivityListEventsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListEventsForAuthenticatedUserResponse,
    ActivityListEventsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListEventsForAuthenticatedUserQueryParams,
    ActivityListEventsForAuthenticatedUserPathParams
  >({ url: "/users/{username}/events", method: "get", ...variables, signal });

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const activityListEventsForAuthenticatedUserQuery = (
  variables: ActivityListEventsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListEventsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/events",
    operationId: "activityListEventsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListEventsForAuthenticatedUser(variables, signal),
});

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const useSuspenseActivityListEventsForAuthenticatedUser = <
  TData = ActivityListEventsForAuthenticatedUserResponse,
>(
  variables: ActivityListEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListEventsForAuthenticatedUserResponse,
      ActivityListEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListEventsForAuthenticatedUserResponse,
    ActivityListEventsForAuthenticatedUserError,
    TData
  >({
    ...activityListEventsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const useActivityListEventsForAuthenticatedUser = <
  TData = ActivityListEventsForAuthenticatedUserResponse,
>(
  variables: ActivityListEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListEventsForAuthenticatedUserResponse,
      ActivityListEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListEventsForAuthenticatedUserResponse,
    ActivityListEventsForAuthenticatedUserError,
    TData
  >({
    ...activityListEventsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListOrgEventsForAuthenticatedUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  /**
   * The organization name. The name is not case sensitive.
   */
  org: string;
};

export type ActivityListOrgEventsForAuthenticatedUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListOrgEventsForAuthenticatedUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListOrgEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListOrgEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListOrgEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListOrgEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const fetchActivityListOrgEventsForAuthenticatedUser = (
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    ActivityListOrgEventsForAuthenticatedUserError,
    undefined,
    {},
    ActivityListOrgEventsForAuthenticatedUserQueryParams,
    ActivityListOrgEventsForAuthenticatedUserPathParams
  >({
    url: "/users/{username}/events/orgs/{org}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const activityListOrgEventsForAuthenticatedUserQuery = (
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListOrgEventsForAuthenticatedUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/events/orgs/{org}",
    operationId: "activityListOrgEventsForAuthenticatedUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListOrgEventsForAuthenticatedUser(variables, signal),
});

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const useSuspenseActivityListOrgEventsForAuthenticatedUser = <
  TData = ActivityListOrgEventsForAuthenticatedUserResponse,
>(
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListOrgEventsForAuthenticatedUserResponse,
      ActivityListOrgEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    ActivityListOrgEventsForAuthenticatedUserError,
    TData
  >({
    ...activityListOrgEventsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const useActivityListOrgEventsForAuthenticatedUser = <
  TData = ActivityListOrgEventsForAuthenticatedUserResponse,
>(
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListOrgEventsForAuthenticatedUserResponse,
      ActivityListOrgEventsForAuthenticatedUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    ActivityListOrgEventsForAuthenticatedUserError,
    TData
  >({
    ...activityListOrgEventsForAuthenticatedUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListPublicEventsForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListPublicEventsForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListPublicEventsForUserVariables = {
  pathParams: ActivityListPublicEventsForUserPathParams;
  queryParams?: ActivityListPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForUser = (
  variables: ActivityListPublicEventsForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListPublicEventsForUserResponse,
    ActivityListPublicEventsForUserError,
    undefined,
    {},
    ActivityListPublicEventsForUserQueryParams,
    ActivityListPublicEventsForUserPathParams
  >({
    url: "/users/{username}/events/public",
    method: "get",
    ...variables,
    signal,
  });

export const activityListPublicEventsForUserQuery = (
  variables: ActivityListPublicEventsForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListPublicEventsForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/events/public",
    operationId: "activityListPublicEventsForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListPublicEventsForUser(variables, signal),
});

export const useSuspenseActivityListPublicEventsForUser = <
  TData = ActivityListPublicEventsForUserResponse,
>(
  variables: ActivityListPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForUserResponse,
      ActivityListPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListPublicEventsForUserResponse,
    ActivityListPublicEventsForUserError,
    TData
  >({
    ...activityListPublicEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityListPublicEventsForUser = <
  TData = ActivityListPublicEventsForUserResponse,
>(
  variables: ActivityListPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForUserResponse,
      ActivityListPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForUserResponse,
    ActivityListPublicEventsForUserError,
    TData
  >({
    ...activityListPublicEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListFollowersForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersListFollowersForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListFollowersForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowersForUserVariables = {
  pathParams: UsersListFollowersForUserPathParams;
  queryParams?: UsersListFollowersForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the specified user.
 */
export const fetchUsersListFollowersForUser = (
  variables: UsersListFollowersForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListFollowersForUserResponse,
    UsersListFollowersForUserError,
    undefined,
    {},
    UsersListFollowersForUserQueryParams,
    UsersListFollowersForUserPathParams
  >({
    url: "/users/{username}/followers",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the people following the specified user.
 */
export const usersListFollowersForUserQuery = (
  variables: UsersListFollowersForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListFollowersForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/followers",
    operationId: "usersListFollowersForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListFollowersForUser(variables, signal),
});

/**
 * Lists the people following the specified user.
 */
export const useSuspenseUsersListFollowersForUser = <
  TData = UsersListFollowersForUserResponse,
>(
  variables: UsersListFollowersForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForUserResponse,
      UsersListFollowersForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListFollowersForUserResponse,
    UsersListFollowersForUserError,
    TData
  >({
    ...usersListFollowersForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people following the specified user.
 */
export const useUsersListFollowersForUser = <
  TData = UsersListFollowersForUserResponse,
>(
  variables: UsersListFollowersForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForUserResponse,
      UsersListFollowersForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForUserResponse,
    UsersListFollowersForUserError,
    TData
  >({
    ...usersListFollowersForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListFollowingForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersListFollowingForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowingForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListFollowingForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowingForUserVariables = {
  pathParams: UsersListFollowingForUserPathParams;
  queryParams?: UsersListFollowingForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the specified user follows.
 */
export const fetchUsersListFollowingForUser = (
  variables: UsersListFollowingForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListFollowingForUserResponse,
    UsersListFollowingForUserError,
    undefined,
    {},
    UsersListFollowingForUserQueryParams,
    UsersListFollowingForUserPathParams
  >({
    url: "/users/{username}/following",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the people who the specified user follows.
 */
export const usersListFollowingForUserQuery = (
  variables: UsersListFollowingForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListFollowingForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/following",
    operationId: "usersListFollowingForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListFollowingForUser(variables, signal),
});

/**
 * Lists the people who the specified user follows.
 */
export const useSuspenseUsersListFollowingForUser = <
  TData = UsersListFollowingForUserResponse,
>(
  variables: UsersListFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowingForUserResponse,
      UsersListFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListFollowingForUserResponse,
    UsersListFollowingForUserError,
    TData
  >({
    ...usersListFollowingForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the people who the specified user follows.
 */
export const useUsersListFollowingForUser = <
  TData = UsersListFollowingForUserResponse,
>(
  variables: UsersListFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowingForUserResponse,
      UsersListFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowingForUserResponse,
    UsersListFollowingForUserError,
    TData
  >({
    ...usersListFollowingForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersCheckFollowingForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  targetUser: string;
};

export type UsersCheckFollowingForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersCheckFollowingForUserVariables = {
  pathParams: UsersCheckFollowingForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckFollowingForUser = (
  variables: UsersCheckFollowingForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    UsersCheckFollowingForUserError,
    undefined,
    {},
    {},
    UsersCheckFollowingForUserPathParams
  >({
    url: "/users/{username}/following/{targetUser}",
    method: "get",
    ...variables,
    signal,
  });

export const usersCheckFollowingForUserQuery = (
  variables: UsersCheckFollowingForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/following/{targetUser}",
    operationId: "usersCheckFollowingForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersCheckFollowingForUser(variables, signal),
});

export const useSuspenseUsersCheckFollowingForUser = <TData = undefined>(
  variables: UsersCheckFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    undefined,
    UsersCheckFollowingForUserError,
    TData
  >({
    ...usersCheckFollowingForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useUsersCheckFollowingForUser = <TData = undefined>(
  variables: UsersCheckFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UsersCheckFollowingForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, UsersCheckFollowingForUserError, TData>(
    {
      ...usersCheckFollowingForUserQuery(variables),
      ...options,
      ...queryOptions,
    },
  );
};

export type GistsListForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type GistsListForUserQueryParams = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date-time
   */
  since?: string;
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type GistsListForUserResponse = Schemas.BaseGist[];

export type GistsListForUserVariables = {
  pathParams: GistsListForUserPathParams;
  queryParams?: GistsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public gists for the specified user:
 */
export const fetchGistsListForUser = (
  variables: GistsListForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    GistsListForUserResponse,
    GistsListForUserError,
    undefined,
    {},
    GistsListForUserQueryParams,
    GistsListForUserPathParams
  >({ url: "/users/{username}/gists", method: "get", ...variables, signal });

/**
 * Lists public gists for the specified user:
 */
export const gistsListForUserQuery = (
  variables: GistsListForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<GistsListForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/gists",
    operationId: "gistsListForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchGistsListForUser(variables, signal),
});

/**
 * Lists public gists for the specified user:
 */
export const useSuspenseGistsListForUser = <TData = GistsListForUserResponse>(
  variables: GistsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForUserResponse,
      GistsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    GistsListForUserResponse,
    GistsListForUserError,
    TData
  >({
    ...gistsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists public gists for the specified user:
 */
export const useGistsListForUser = <TData = GistsListForUserResponse>(
  variables: GistsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForUserResponse,
      GistsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForUserResponse,
    GistsListForUserError,
    TData
  >({
    ...gistsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListGpgKeysForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersListGpgKeysForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListGpgKeysForUserResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForUserVariables = {
  pathParams: UsersListGpgKeysForUserPathParams;
  queryParams?: UsersListGpgKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const fetchUsersListGpgKeysForUser = (
  variables: UsersListGpgKeysForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListGpgKeysForUserResponse,
    UsersListGpgKeysForUserError,
    undefined,
    {},
    UsersListGpgKeysForUserQueryParams,
    UsersListGpgKeysForUserPathParams
  >({ url: "/users/{username}/gpg_keys", method: "get", ...variables, signal });

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const usersListGpgKeysForUserQuery = (
  variables: UsersListGpgKeysForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListGpgKeysForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/gpg_keys",
    operationId: "usersListGpgKeysForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListGpgKeysForUser(variables, signal),
});

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const useSuspenseUsersListGpgKeysForUser = <
  TData = UsersListGpgKeysForUserResponse,
>(
  variables: UsersListGpgKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForUserResponse,
      UsersListGpgKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListGpgKeysForUserResponse,
    UsersListGpgKeysForUserError,
    TData
  >({
    ...usersListGpgKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const useUsersListGpgKeysForUser = <
  TData = UsersListGpgKeysForUserResponse,
>(
  variables: UsersListGpgKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForUserResponse,
      UsersListGpgKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForUserResponse,
    UsersListGpgKeysForUserError,
    TData
  >({
    ...usersListGpgKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersGetContextForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersGetContextForUserQueryParams = {
  /**
   * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
   */
  subject_type?: "organization" | "repository" | "issue" | "pull_request";
  /**
   * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
   */
  subject_id?: string;
};

export type UsersGetContextForUserError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 422;
      payload: Responses.ValidationFailed;
    }
>;

export type UsersGetContextForUserVariables = {
  pathParams: UsersGetContextForUserPathParams;
  queryParams?: UsersGetContextForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const fetchUsersGetContextForUser = (
  variables: UsersGetContextForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Hovercard,
    UsersGetContextForUserError,
    undefined,
    {},
    UsersGetContextForUserQueryParams,
    UsersGetContextForUserPathParams
  >({
    url: "/users/{username}/hovercard",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const usersGetContextForUserQuery = (
  variables: UsersGetContextForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Hovercard>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/hovercard",
    operationId: "usersGetContextForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersGetContextForUser(variables, signal),
});

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const useSuspenseUsersGetContextForUser = <TData = Schemas.Hovercard>(
  variables: UsersGetContextForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Hovercard,
      UsersGetContextForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Hovercard,
    UsersGetContextForUserError,
    TData
  >({
    ...usersGetContextForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const useUsersGetContextForUser = <TData = Schemas.Hovercard>(
  variables: UsersGetContextForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Hovercard,
      UsersGetContextForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Hovercard,
    UsersGetContextForUserError,
    TData
  >({
    ...usersGetContextForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type AppsGetUserInstallationPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type AppsGetUserInstallationError = Fetcher.ErrorWrapper<undefined>;

export type AppsGetUserInstallationVariables = {
  pathParams: AppsGetUserInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetUserInstallation = (
  variables: AppsGetUserInstallationVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Installation,
    AppsGetUserInstallationError,
    undefined,
    {},
    {},
    AppsGetUserInstallationPathParams
  >({
    url: "/users/{username}/installation",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const appsGetUserInstallationQuery = (
  variables: AppsGetUserInstallationVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.Installation>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/installation",
    operationId: "appsGetUserInstallation",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchAppsGetUserInstallation(variables, signal),
});

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useSuspenseAppsGetUserInstallation = <
  TData = Schemas.Installation,
>(
  variables: AppsGetUserInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetUserInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Installation,
    AppsGetUserInstallationError,
    TData
  >({
    ...appsGetUserInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetUserInstallation = <TData = Schemas.Installation>(
  variables: AppsGetUserInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      AppsGetUserInstallationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    AppsGetUserInstallationError,
    TData
  >({
    ...appsGetUserInstallationQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListPublicKeysForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersListPublicKeysForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicKeysForUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersListPublicKeysForUserResponse = Schemas.KeySimple[];

export type UsersListPublicKeysForUserVariables = {
  pathParams: UsersListPublicKeysForUserPathParams;
  queryParams?: UsersListPublicKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const fetchUsersListPublicKeysForUser = (
  variables: UsersListPublicKeysForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListPublicKeysForUserResponse,
    UsersListPublicKeysForUserError,
    undefined,
    {},
    UsersListPublicKeysForUserQueryParams,
    UsersListPublicKeysForUserPathParams
  >({ url: "/users/{username}/keys", method: "get", ...variables, signal });

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const usersListPublicKeysForUserQuery = (
  variables: UsersListPublicKeysForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListPublicKeysForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/keys",
    operationId: "usersListPublicKeysForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListPublicKeysForUser(variables, signal),
});

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const useSuspenseUsersListPublicKeysForUser = <
  TData = UsersListPublicKeysForUserResponse,
>(
  variables: UsersListPublicKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicKeysForUserResponse,
      UsersListPublicKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListPublicKeysForUserResponse,
    UsersListPublicKeysForUserError,
    TData
  >({
    ...usersListPublicKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const useUsersListPublicKeysForUser = <
  TData = UsersListPublicKeysForUserResponse,
>(
  variables: UsersListPublicKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicKeysForUserResponse,
      UsersListPublicKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicKeysForUserResponse,
    UsersListPublicKeysForUserError,
    TData
  >({
    ...usersListPublicKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type OrgsListForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type OrgsListForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForUserError = Fetcher.ErrorWrapper<undefined>;

export type OrgsListForUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForUserVariables = {
  pathParams: OrgsListForUserPathParams;
  queryParams?: OrgsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const fetchOrgsListForUser = (
  variables: OrgsListForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    OrgsListForUserResponse,
    OrgsListForUserError,
    undefined,
    {},
    OrgsListForUserQueryParams,
    OrgsListForUserPathParams
  >({ url: "/users/{username}/orgs", method: "get", ...variables, signal });

/**
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const orgsListForUserQuery = (
  variables: OrgsListForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<OrgsListForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/orgs",
    operationId: "orgsListForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchOrgsListForUser(variables, signal),
});

/**
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const useSuspenseOrgsListForUser = <TData = OrgsListForUserResponse>(
  variables: OrgsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForUserResponse,
      OrgsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    OrgsListForUserResponse,
    OrgsListForUserError,
    TData
  >({
    ...orgsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const useOrgsListForUser = <TData = OrgsListForUserResponse>(
  variables: OrgsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForUserResponse,
      OrgsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForUserResponse,
    OrgsListForUserError,
    TData
  >({
    ...orgsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesListPackagesForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesListPackagesForUserQueryParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   *
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
  visibility?: "public" | "private" | "internal";
};

export type PackagesListPackagesForUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
>;

export type PackagesListPackagesForUserResponse = Schemas.Package[];

export type PackagesListPackagesForUserVariables = {
  pathParams: PackagesListPackagesForUserPathParams;
  queryParams: PackagesListPackagesForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesListPackagesForUser = (
  variables: PackagesListPackagesForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PackagesListPackagesForUserResponse,
    PackagesListPackagesForUserError,
    undefined,
    {},
    PackagesListPackagesForUserQueryParams,
    PackagesListPackagesForUserPathParams
  >({ url: "/users/{username}/packages", method: "get", ...variables, signal });

/**
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesListPackagesForUserQuery = (
  variables: PackagesListPackagesForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PackagesListPackagesForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/packages",
    operationId: "packagesListPackagesForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesListPackagesForUser(variables, signal),
});

/**
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesListPackagesForUser = <
  TData = PackagesListPackagesForUserResponse,
>(
  variables: PackagesListPackagesForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForUserResponse,
      PackagesListPackagesForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PackagesListPackagesForUserResponse,
    PackagesListPackagesForUserError,
    TData
  >({
    ...packagesListPackagesForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesListPackagesForUser = <
  TData = PackagesListPackagesForUserResponse,
>(
  variables: PackagesListPackagesForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesListPackagesForUserResponse,
      PackagesListPackagesForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PackagesListPackagesForUserResponse,
    PackagesListPackagesForUserError,
    TData
  >({
    ...packagesListPackagesForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesDeletePackageForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesDeletePackageForUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageForUserVariables = {
  pathParams: PackagesDeletePackageForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesDeletePackageForUser = (
  variables: PackagesDeletePackageForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageForUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesDeletePackageForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageForUserError,
      PackagesDeletePackageForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageForUserError,
    PackagesDeletePackageForUserVariables
  >({
    mutationFn: (variables: PackagesDeletePackageForUserVariables) =>
      fetchPackagesDeletePackageForUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PackagesGetPackageForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesGetPackageForUserError = Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageForUserVariables = {
  pathParams: PackagesGetPackageForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageForUser = (
  variables: PackagesGetPackageForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.Package,
    PackagesGetPackageForUserError,
    undefined,
    {},
    {},
    PackagesGetPackageForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageForUserQuery = (
  variables: PackagesGetPackageForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<Schemas.Package>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/packages/{packageType}/{packageName}",
    operationId: "packagesGetPackageForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageForUser(variables, signal),
});

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageForUser = <TData = Schemas.Package>(
  variables: PackagesGetPackageForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.Package,
    PackagesGetPackageForUserError,
    TData
  >({
    ...packagesGetPackageForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageForUser = <TData = Schemas.Package>(
  variables: PackagesGetPackageForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Package,
      PackagesGetPackageForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Package,
    PackagesGetPackageForUserError,
    TData
  >({
    ...packagesGetPackageForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesRestorePackageForUserQueryParams = {
  /**
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageForUserVariables = {
  pathParams: PackagesRestorePackageForUserPathParams;
  queryParams?: PackagesRestorePackageForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores an entire package for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesRestorePackageForUser = (
  variables: PackagesRestorePackageForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageForUserError,
    undefined,
    {},
    PackagesRestorePackageForUserQueryParams,
    PackagesRestorePackageForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores an entire package for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesRestorePackageForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageForUserError,
      PackagesRestorePackageForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageForUserError,
    PackagesRestorePackageForUserVariables
  >({
    mutationFn: (variables: PackagesRestorePackageForUserVariables) =>
      fetchPackagesRestorePackageForUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserError =
  Fetcher.ErrorWrapper<
    | {
        status: 401;
        payload: Responses.RequiresAuthentication;
      }
    | {
        status: 403;
        payload: Responses.Forbidden;
      }
    | {
        status: 404;
        payload: Responses.NotFound;
      }
  >;

export type PackagesGetAllPackageVersionsForPackageOwnedByUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByUserVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByUser = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByUserError,
    undefined,
    {},
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetAllPackageVersionsForPackageOwnedByUserQuery = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<PackagesGetAllPackageVersionsForPackageOwnedByUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/packages/{packageType}/{packageName}/versions",
    operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetAllPackageVersionsForPackageOwnedByUser(variables, signal),
});

/**
 * Lists package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetAllPackageVersionsForPackageOwnedByUser = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByUserError,
    TData
  >({
    ...packagesGetAllPackageVersionsForPackageOwnedByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByUser = <
  TData = PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
>(
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
      PackagesGetAllPackageVersionsForPackageOwnedByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    PackagesGetAllPackageVersionsForPackageOwnedByUserError,
    TData
  >({
    ...packagesGetAllPackageVersionsForPackageOwnedByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesDeletePackageVersionForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesDeletePackageVersionForUserVariables = {
  pathParams: PackagesDeletePackageVersionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesDeletePackageVersionForUser = (
  variables: PackagesDeletePackageVersionForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesDeletePackageVersionForUserError,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
    signal,
  });

/**
 * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesDeletePackageVersionForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesDeletePackageVersionForUserError,
      PackagesDeletePackageVersionForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesDeletePackageVersionForUserError,
    PackagesDeletePackageVersionForUserVariables
  >({
    mutationFn: (variables: PackagesDeletePackageVersionForUserVariables) =>
      fetchPackagesDeletePackageVersionForUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PackagesGetPackageVersionForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type PackagesGetPackageVersionForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type PackagesGetPackageVersionForUserVariables = {
  pathParams: PackagesGetPackageVersionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const fetchPackagesGetPackageVersionForUser = (
  variables: PackagesGetPackageVersionForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForUserError,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const packagesGetPackageVersionForUserQuery = (
  variables: PackagesGetPackageVersionForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PackageVersion>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    operationId: "packagesGetPackageVersionForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchPackagesGetPackageVersionForUser(variables, signal),
});

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const useSuspensePackagesGetPackageVersionForUser = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForUserError,
    TData
  >({
    ...packagesGetPackageVersionForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 */
export const usePackagesGetPackageVersionForUser = <
  TData = Schemas.PackageVersion,
>(
  variables: PackagesGetPackageVersionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      PackagesGetPackageVersionForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    PackagesGetPackageVersionForUserError,
    TData
  >({
    ...packagesGetPackageVersionForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type PackagesRestorePackageVersionForUserPathParams = {
  /**
   * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /**
   * The name of the package.
   */
  packageName: string;
  /**
   * The handle for the GitHub user account.
   */
  username: string;
  /**
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForUserError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.RequiresAuthentication;
    }
  | {
      status: 403;
      payload: Responses.Forbidden;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
>;

export type PackagesRestorePackageVersionForUserVariables = {
  pathParams: PackagesRestorePackageVersionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a specific package version for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const fetchPackagesRestorePackageVersionForUser = (
  variables: PackagesRestorePackageVersionForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    undefined,
    PackagesRestorePackageVersionForUserError,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Restores a specific package version for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
 * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export const usePackagesRestorePackageVersionForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PackagesRestorePackageVersionForUserError,
      PackagesRestorePackageVersionForUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    PackagesRestorePackageVersionForUserError,
    PackagesRestorePackageVersionForUserVariables
  >({
    mutationFn: (variables: PackagesRestorePackageVersionForUserVariables) =>
      fetchPackagesRestorePackageVersionForUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProjectsListForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ProjectsListForUserQueryParams = {
  /**
   * Indicates the state of the projects to return.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForUserError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Responses.ValidationFailed;
}>;

export type ProjectsListForUserResponse = Schemas.Project[];

export type ProjectsListForUserVariables = {
  pathParams: ProjectsListForUserPathParams;
  queryParams?: ProjectsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListForUser = (
  variables: ProjectsListForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ProjectsListForUserResponse,
    ProjectsListForUserError,
    undefined,
    {},
    ProjectsListForUserQueryParams,
    ProjectsListForUserPathParams
  >({ url: "/users/{username}/projects", method: "get", ...variables, signal });

export const projectsListForUserQuery = (
  variables: ProjectsListForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ProjectsListForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/projects",
    operationId: "projectsListForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchProjectsListForUser(variables, signal),
});

export const useSuspenseProjectsListForUser = <
  TData = ProjectsListForUserResponse,
>(
  variables: ProjectsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForUserResponse,
      ProjectsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ProjectsListForUserResponse,
    ProjectsListForUserError,
    TData
  >({
    ...projectsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useProjectsListForUser = <TData = ProjectsListForUserResponse>(
  variables: ProjectsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForUserResponse,
      ProjectsListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForUserResponse,
    ProjectsListForUserError,
    TData
  >({
    ...projectsListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListReceivedEventsForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListReceivedEventsForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReceivedEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedEventsForUserVariables = {
  pathParams: ActivityListReceivedEventsForUserPathParams;
  queryParams?: ActivityListReceivedEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListReceivedEventsForUser = (
  variables: ActivityListReceivedEventsForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListReceivedEventsForUserResponse,
    ActivityListReceivedEventsForUserError,
    undefined,
    {},
    ActivityListReceivedEventsForUserQueryParams,
    ActivityListReceivedEventsForUserPathParams
  >({
    url: "/users/{username}/received_events",
    method: "get",
    ...variables,
    signal,
  });

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const activityListReceivedEventsForUserQuery = (
  variables: ActivityListReceivedEventsForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListReceivedEventsForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/received_events",
    operationId: "activityListReceivedEventsForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListReceivedEventsForUser(variables, signal),
});

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const useSuspenseActivityListReceivedEventsForUser = <
  TData = ActivityListReceivedEventsForUserResponse,
>(
  variables: ActivityListReceivedEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedEventsForUserResponse,
      ActivityListReceivedEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListReceivedEventsForUserResponse,
    ActivityListReceivedEventsForUserError,
    TData
  >({
    ...activityListReceivedEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const useActivityListReceivedEventsForUser = <
  TData = ActivityListReceivedEventsForUserResponse,
>(
  variables: ActivityListReceivedEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedEventsForUserResponse,
      ActivityListReceivedEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedEventsForUserResponse,
    ActivityListReceivedEventsForUserError,
    TData
  >({
    ...activityListReceivedEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListReceivedPublicEventsForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListReceivedPublicEventsForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedPublicEventsForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReceivedPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedPublicEventsForUserVariables = {
  pathParams: ActivityListReceivedPublicEventsForUserPathParams;
  queryParams?: ActivityListReceivedPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListReceivedPublicEventsForUser = (
  variables: ActivityListReceivedPublicEventsForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListReceivedPublicEventsForUserResponse,
    ActivityListReceivedPublicEventsForUserError,
    undefined,
    {},
    ActivityListReceivedPublicEventsForUserQueryParams,
    ActivityListReceivedPublicEventsForUserPathParams
  >({
    url: "/users/{username}/received_events/public",
    method: "get",
    ...variables,
    signal,
  });

export const activityListReceivedPublicEventsForUserQuery = (
  variables: ActivityListReceivedPublicEventsForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListReceivedPublicEventsForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/received_events/public",
    operationId: "activityListReceivedPublicEventsForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListReceivedPublicEventsForUser(variables, signal),
});

export const useSuspenseActivityListReceivedPublicEventsForUser = <
  TData = ActivityListReceivedPublicEventsForUserResponse,
>(
  variables: ActivityListReceivedPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedPublicEventsForUserResponse,
      ActivityListReceivedPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListReceivedPublicEventsForUserResponse,
    ActivityListReceivedPublicEventsForUserError,
    TData
  >({
    ...activityListReceivedPublicEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export const useActivityListReceivedPublicEventsForUser = <
  TData = ActivityListReceivedPublicEventsForUserResponse,
>(
  variables: ActivityListReceivedPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedPublicEventsForUserResponse,
      ActivityListReceivedPublicEventsForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedPublicEventsForUserResponse,
    ActivityListReceivedPublicEventsForUserError,
    TData
  >({
    ...activityListReceivedPublicEventsForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ReposListForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ReposListForUserQueryParams = {
  /**
   * Limit results to repositories of the specified type.
   *
   * @default owner
   */
  type?: "all" | "owner" | "member";
  /**
   * The property to sort the results by.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForUserError = Fetcher.ErrorWrapper<undefined>;

export type ReposListForUserResponse = Schemas.MinimalRepository[];

export type ReposListForUserVariables = {
  pathParams: ReposListForUserPathParams;
  queryParams?: ReposListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const fetchReposListForUser = (
  variables: ReposListForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ReposListForUserResponse,
    ReposListForUserError,
    undefined,
    {},
    ReposListForUserQueryParams,
    ReposListForUserPathParams
  >({ url: "/users/{username}/repos", method: "get", ...variables, signal });

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const reposListForUserQuery = (
  variables: ReposListForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ReposListForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/repos",
    operationId: "reposListForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchReposListForUser(variables, signal),
});

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const useSuspenseReposListForUser = <TData = ReposListForUserResponse>(
  variables: ReposListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForUserResponse,
      ReposListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ReposListForUserResponse,
    ReposListForUserError,
    TData
  >({
    ...reposListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const useReposListForUser = <TData = ReposListForUserResponse>(
  variables: ReposListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForUserResponse,
      ReposListForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForUserResponse,
    ReposListForUserError,
    TData
  >({
    ...reposListForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type BillingGetGithubActionsBillingUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type BillingGetGithubActionsBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubActionsBillingUserVariables = {
  pathParams: BillingGetGithubActionsBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubActionsBillingUser = (
  variables: BillingGetGithubActionsBillingUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingUserError,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/actions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const billingGetGithubActionsBillingUserQuery = (
  variables: BillingGetGithubActionsBillingUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.ActionsBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/settings/billing/actions",
    operationId: "billingGetGithubActionsBillingUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetGithubActionsBillingUser(variables, signal),
});

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const useSuspenseBillingGetGithubActionsBillingUser = <
  TData = Schemas.ActionsBillingUsage,
>(
  variables: BillingGetGithubActionsBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingUserError,
    TData
  >({
    ...billingGetGithubActionsBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubActionsBillingUser = <
  TData = Schemas.ActionsBillingUsage,
>(
  variables: BillingGetGithubActionsBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      BillingGetGithubActionsBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    BillingGetGithubActionsBillingUserError,
    TData
  >({
    ...billingGetGithubActionsBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type BillingGetGithubPackagesBillingUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type BillingGetGithubPackagesBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetGithubPackagesBillingUserVariables = {
  pathParams: BillingGetGithubPackagesBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubPackagesBillingUser = (
  variables: BillingGetGithubPackagesBillingUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingUserError,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/packages",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const billingGetGithubPackagesBillingUserQuery = (
  variables: BillingGetGithubPackagesBillingUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.PackagesBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/settings/billing/packages",
    operationId: "billingGetGithubPackagesBillingUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetGithubPackagesBillingUser(variables, signal),
});

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useSuspenseBillingGetGithubPackagesBillingUser = <
  TData = Schemas.PackagesBillingUsage,
>(
  variables: BillingGetGithubPackagesBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingUserError,
    TData
  >({
    ...billingGetGithubPackagesBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubPackagesBillingUser = <
  TData = Schemas.PackagesBillingUsage,
>(
  variables: BillingGetGithubPackagesBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      BillingGetGithubPackagesBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    BillingGetGithubPackagesBillingUserError,
    TData
  >({
    ...billingGetGithubPackagesBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type BillingGetSharedStorageBillingUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type BillingGetSharedStorageBillingUserError =
  Fetcher.ErrorWrapper<undefined>;

export type BillingGetSharedStorageBillingUserVariables = {
  pathParams: BillingGetSharedStorageBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetSharedStorageBillingUser = (
  variables: BillingGetSharedStorageBillingUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingUserError,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/shared-storage",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const billingGetSharedStorageBillingUserQuery = (
  variables: BillingGetSharedStorageBillingUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.CombinedBillingUsage>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/settings/billing/shared-storage",
    operationId: "billingGetSharedStorageBillingUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchBillingGetSharedStorageBillingUser(variables, signal),
});

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useSuspenseBillingGetSharedStorageBillingUser = <
  TData = Schemas.CombinedBillingUsage,
>(
  variables: BillingGetSharedStorageBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingUserError,
    TData
  >({
    ...billingGetSharedStorageBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetSharedStorageBillingUser = <
  TData = Schemas.CombinedBillingUsage,
>(
  variables: BillingGetSharedStorageBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      BillingGetSharedStorageBillingUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    BillingGetSharedStorageBillingUserError,
    TData
  >({
    ...billingGetSharedStorageBillingUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type UsersListSshSigningKeysForUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type UsersListSshSigningKeysForUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListSshSigningKeysForUserError =
  Fetcher.ErrorWrapper<undefined>;

export type UsersListSshSigningKeysForUserResponse = Schemas.SshSigningKey[];

export type UsersListSshSigningKeysForUserVariables = {
  pathParams: UsersListSshSigningKeysForUserPathParams;
  queryParams?: UsersListSshSigningKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the SSH signing keys for a user. This operation is accessible by anyone.
 */
export const fetchUsersListSshSigningKeysForUser = (
  variables: UsersListSshSigningKeysForUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    UsersListSshSigningKeysForUserResponse,
    UsersListSshSigningKeysForUserError,
    undefined,
    {},
    UsersListSshSigningKeysForUserQueryParams,
    UsersListSshSigningKeysForUserPathParams
  >({
    url: "/users/{username}/ssh_signing_keys",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists the SSH signing keys for a user. This operation is accessible by anyone.
 */
export const usersListSshSigningKeysForUserQuery = (
  variables: UsersListSshSigningKeysForUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<UsersListSshSigningKeysForUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/ssh_signing_keys",
    operationId: "usersListSshSigningKeysForUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchUsersListSshSigningKeysForUser(variables, signal),
});

/**
 * Lists the SSH signing keys for a user. This operation is accessible by anyone.
 */
export const useSuspenseUsersListSshSigningKeysForUser = <
  TData = UsersListSshSigningKeysForUserResponse,
>(
  variables: UsersListSshSigningKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListSshSigningKeysForUserResponse,
      UsersListSshSigningKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    UsersListSshSigningKeysForUserResponse,
    UsersListSshSigningKeysForUserError,
    TData
  >({
    ...usersListSshSigningKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists the SSH signing keys for a user. This operation is accessible by anyone.
 */
export const useUsersListSshSigningKeysForUser = <
  TData = UsersListSshSigningKeysForUserResponse,
>(
  variables: UsersListSshSigningKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListSshSigningKeysForUserResponse,
      UsersListSshSigningKeysForUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    UsersListSshSigningKeysForUserResponse,
    UsersListSshSigningKeysForUserError,
    TData
  >({
    ...usersListSshSigningKeysForUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListReposStarredByUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListReposStarredByUserQueryParams = {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   *
   * @default created
   */
  sort?: "created" | "updated";
  /**
   * The direction to sort the results by.
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReposStarredByUserVariables = {
  pathParams: ActivityListReposStarredByUserPathParams;
  queryParams?: ActivityListReposStarredByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const fetchActivityListReposStarredByUser = (
  variables: ActivityListReposStarredByUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    Schemas.StarredRepository[] | Schemas.Repository[],
    ActivityListReposStarredByUserError,
    undefined,
    {},
    ActivityListReposStarredByUserQueryParams,
    ActivityListReposStarredByUserPathParams
  >({ url: "/users/{username}/starred", method: "get", ...variables, signal });

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const activityListReposStarredByUserQuery = (
  variables: ActivityListReposStarredByUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<Schemas.StarredRepository[] | Schemas.Repository[]>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/starred",
    operationId: "activityListReposStarredByUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListReposStarredByUser(variables, signal),
});

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useSuspenseActivityListReposStarredByUser = <
  TData = Schemas.StarredRepository[] | Schemas.Repository[],
>(
  variables: ActivityListReposStarredByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StarredRepository[] | Schemas.Repository[],
      ActivityListReposStarredByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.StarredRepository[] | Schemas.Repository[],
    ActivityListReposStarredByUserError,
    TData
  >({
    ...activityListReposStarredByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
 */
export const useActivityListReposStarredByUser = <
  TData = Schemas.StarredRepository[] | Schemas.Repository[],
>(
  variables: ActivityListReposStarredByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StarredRepository[] | Schemas.Repository[],
      ActivityListReposStarredByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.StarredRepository[] | Schemas.Repository[],
    ActivityListReposStarredByUserError,
    TData
  >({
    ...activityListReposStarredByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type ActivityListReposWatchedByUserPathParams = {
  /**
   * The handle for the GitHub user account.
   */
  username: string;
};

export type ActivityListReposWatchedByUserQueryParams = {
  /**
   * The number of results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposWatchedByUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivityListReposWatchedByUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListReposWatchedByUserVariables = {
  pathParams: ActivityListReposWatchedByUserPathParams;
  queryParams?: ActivityListReposWatchedByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user is watching.
 */
export const fetchActivityListReposWatchedByUser = (
  variables: ActivityListReposWatchedByUserVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    ActivityListReposWatchedByUserResponse,
    ActivityListReposWatchedByUserError,
    undefined,
    {},
    ActivityListReposWatchedByUserQueryParams,
    ActivityListReposWatchedByUserPathParams
  >({
    url: "/users/{username}/subscriptions",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Lists repositories a user is watching.
 */
export const activityListReposWatchedByUserQuery = (
  variables: ActivityListReposWatchedByUserVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<ActivityListReposWatchedByUserResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/users/{username}/subscriptions",
    operationId: "activityListReposWatchedByUser",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchActivityListReposWatchedByUser(variables, signal),
});

/**
 * Lists repositories a user is watching.
 */
export const useSuspenseActivityListReposWatchedByUser = <
  TData = ActivityListReposWatchedByUserResponse,
>(
  variables: ActivityListReposWatchedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposWatchedByUserResponse,
      ActivityListReposWatchedByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    ActivityListReposWatchedByUserResponse,
    ActivityListReposWatchedByUserError,
    TData
  >({
    ...activityListReposWatchedByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Lists repositories a user is watching.
 */
export const useActivityListReposWatchedByUser = <
  TData = ActivityListReposWatchedByUserResponse,
>(
  variables: ActivityListReposWatchedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposWatchedByUserResponse,
      ActivityListReposWatchedByUserError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposWatchedByUserResponse,
    ActivityListReposWatchedByUserError,
    TData
  >({
    ...activityListReposWatchedByUserQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MetaGetAllVersionsError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Responses.NotFound;
}>;

export type MetaGetAllVersionsResponse = string[];

export type MetaGetAllVersionsVariables = GithubContext["fetcherOptions"];

/**
 * Get all supported GitHub API versions.
 */
export const fetchMetaGetAllVersions = (
  variables: MetaGetAllVersionsVariables,
  signal?: AbortSignal,
) =>
  githubFetch<
    MetaGetAllVersionsResponse,
    MetaGetAllVersionsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/versions", method: "get", ...variables, signal });

/**
 * Get all supported GitHub API versions.
 */
export const metaGetAllVersionsQuery = (
  variables: MetaGetAllVersionsVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({
    signal,
  }: {
    signal?: AbortSignal;
  }) => Promise<MetaGetAllVersionsResponse>;
} => ({
  queryKey: queryKeyFn({
    path: "/versions",
    operationId: "metaGetAllVersions",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMetaGetAllVersions(variables, signal),
});

/**
 * Get all supported GitHub API versions.
 */
export const useSuspenseMetaGetAllVersions = <
  TData = MetaGetAllVersionsResponse,
>(
  variables: MetaGetAllVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MetaGetAllVersionsResponse,
      MetaGetAllVersionsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<
    MetaGetAllVersionsResponse,
    MetaGetAllVersionsError,
    TData
  >({
    ...metaGetAllVersionsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get all supported GitHub API versions.
 */
export const useMetaGetAllVersions = <TData = MetaGetAllVersionsResponse>(
  variables: MetaGetAllVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MetaGetAllVersionsResponse,
      MetaGetAllVersionsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<
    MetaGetAllVersionsResponse,
    MetaGetAllVersionsError,
    TData
  >({
    ...metaGetAllVersionsQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type MetaGetZenError = Fetcher.ErrorWrapper<undefined>;

export type MetaGetZenVariables = GithubContext["fetcherOptions"];

/**
 * Get a random sentence from the Zen of GitHub
 */
export const fetchMetaGetZen = (
  variables: MetaGetZenVariables,
  signal?: AbortSignal,
) =>
  githubFetch<undefined, MetaGetZenError, undefined, {}, {}, {}>({
    url: "/zen",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Get a random sentence from the Zen of GitHub
 */
export const metaGetZenQuery = (
  variables: MetaGetZenVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ({ signal }: { signal?: AbortSignal }) => Promise<undefined>;
} => ({
  queryKey: queryKeyFn({
    path: "/zen",
    operationId: "metaGetZen",
    variables,
  }),
  queryFn: ({ signal }: { signal?: AbortSignal }) =>
    fetchMetaGetZen(variables, signal),
});

/**
 * Get a random sentence from the Zen of GitHub
 */
export const useSuspenseMetaGetZen = <TData = undefined>(
  variables: MetaGetZenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetZenError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useSuspenseQuery<undefined, MetaGetZenError, TData>({
    ...metaGetZenQuery(variables),
    ...options,
    ...queryOptions,
  });
};

/**
 * Get a random sentence from the Zen of GitHub
 */
export const useMetaGetZen = <TData = undefined>(
  variables: MetaGetZenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, MetaGetZenError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions } = useGithubContext(options);
  return reactQuery.useQuery<undefined, MetaGetZenError, TData>({
    ...metaGetZenQuery(variables),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "metaRoot";
      variables: MetaRootVariables;
    }
  | {
      path: "/app";
      operationId: "appsGetAuthenticated";
      variables: AppsGetAuthenticatedVariables;
    }
  | {
      path: "/app/hook/config";
      operationId: "appsGetWebhookConfigForApp";
      variables: AppsGetWebhookConfigForAppVariables;
    }
  | {
      path: "/app/hook/deliveries";
      operationId: "appsListWebhookDeliveries";
      variables: AppsListWebhookDeliveriesVariables;
    }
  | {
      path: "/app/hook/deliveries/{deliveryId}";
      operationId: "appsGetWebhookDelivery";
      variables: AppsGetWebhookDeliveryVariables;
    }
  | {
      path: "/app/installations";
      operationId: "appsListInstallations";
      variables: AppsListInstallationsVariables;
    }
  | {
      path: "/app/installations/{installationId}";
      operationId: "appsGetInstallation";
      variables: AppsGetInstallationVariables;
    }
  | {
      path: "/apps/{appSlug}";
      operationId: "appsGetBySlug";
      variables: AppsGetBySlugVariables;
    }
  | {
      path: "/codes_of_conduct";
      operationId: "codesOfConductGetAllCodesOfConduct";
      variables: CodesOfConductGetAllCodesOfConductVariables;
    }
  | {
      path: "/codes_of_conduct/{key}";
      operationId: "codesOfConductGetConductCode";
      variables: CodesOfConductGetConductCodeVariables;
    }
  | {
      path: "/emojis";
      operationId: "emojisGet";
      variables: EmojisGetVariables;
    }
  | {
      path: "/enterprises/{enterprise}/dependabot/alerts";
      operationId: "dependabotListAlertsForEnterprise";
      variables: DependabotListAlertsForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/secret-scanning/alerts";
      operationId: "secretScanningListAlertsForEnterprise";
      variables: SecretScanningListAlertsForEnterpriseVariables;
    }
  | {
      path: "/events";
      operationId: "activityListPublicEvents";
      variables: ActivityListPublicEventsVariables;
    }
  | {
      path: "/feeds";
      operationId: "activityGetFeeds";
      variables: ActivityGetFeedsVariables;
    }
  | {
      path: "/gists";
      operationId: "gistsList";
      variables: GistsListVariables;
    }
  | {
      path: "/gists/public";
      operationId: "gistsListPublic";
      variables: GistsListPublicVariables;
    }
  | {
      path: "/gists/starred";
      operationId: "gistsListStarred";
      variables: GistsListStarredVariables;
    }
  | {
      path: "/gists/{gistId}";
      operationId: "gistsGet";
      variables: GistsGetVariables;
    }
  | {
      path: "/gists/{gistId}/comments";
      operationId: "gistsListComments";
      variables: GistsListCommentsVariables;
    }
  | {
      path: "/gists/{gistId}/comments/{commentId}";
      operationId: "gistsGetComment";
      variables: GistsGetCommentVariables;
    }
  | {
      path: "/gists/{gistId}/commits";
      operationId: "gistsListCommits";
      variables: GistsListCommitsVariables;
    }
  | {
      path: "/gists/{gistId}/forks";
      operationId: "gistsListForks";
      variables: GistsListForksVariables;
    }
  | {
      path: "/gists/{gistId}/star";
      operationId: "gistsCheckIsStarred";
      variables: GistsCheckIsStarredVariables;
    }
  | {
      path: "/gists/{gistId}/{sha}";
      operationId: "gistsGetRevision";
      variables: GistsGetRevisionVariables;
    }
  | {
      path: "/gitignore/templates";
      operationId: "gitignoreGetAllTemplates";
      variables: GitignoreGetAllTemplatesVariables;
    }
  | {
      path: "/gitignore/templates/{name}";
      operationId: "gitignoreGetTemplate";
      variables: GitignoreGetTemplateVariables;
    }
  | {
      path: "/installation/repositories";
      operationId: "appsListReposAccessibleToInstallation";
      variables: AppsListReposAccessibleToInstallationVariables;
    }
  | {
      path: "/issues";
      operationId: "issuesList";
      variables: IssuesListVariables;
    }
  | {
      path: "/licenses";
      operationId: "licensesGetAllCommonlyUsed";
      variables: LicensesGetAllCommonlyUsedVariables;
    }
  | {
      path: "/licenses/{license}";
      operationId: "licensesGet";
      variables: LicensesGetVariables;
    }
  | {
      path: "/marketplace_listing/accounts/{accountId}";
      operationId: "appsGetSubscriptionPlanForAccount";
      variables: AppsGetSubscriptionPlanForAccountVariables;
    }
  | {
      path: "/marketplace_listing/plans";
      operationId: "appsListPlans";
      variables: AppsListPlansVariables;
    }
  | {
      path: "/marketplace_listing/plans/{planId}/accounts";
      operationId: "appsListAccountsForPlan";
      variables: AppsListAccountsForPlanVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/accounts/{accountId}";
      operationId: "appsGetSubscriptionPlanForAccountStubbed";
      variables: AppsGetSubscriptionPlanForAccountStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans";
      operationId: "appsListPlansStubbed";
      variables: AppsListPlansStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans/{planId}/accounts";
      operationId: "appsListAccountsForPlanStubbed";
      variables: AppsListAccountsForPlanStubbedVariables;
    }
  | {
      path: "/meta";
      operationId: "metaGet";
      variables: MetaGetVariables;
    }
  | {
      path: "/networks/{owner}/{repo}/events";
      operationId: "activityListPublicEventsForRepoNetwork";
      variables: ActivityListPublicEventsForRepoNetworkVariables;
    }
  | {
      path: "/notifications";
      operationId: "activityListNotificationsForAuthenticatedUser";
      variables: ActivityListNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/notifications/threads/{threadId}";
      operationId: "activityGetThread";
      variables: ActivityGetThreadVariables;
    }
  | {
      path: "/notifications/threads/{threadId}/subscription";
      operationId: "activityGetThreadSubscriptionForAuthenticatedUser";
      variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables;
    }
  | {
      path: "/octocat";
      operationId: "metaGetOctocat";
      variables: MetaGetOctocatVariables;
    }
  | {
      path: "/organizations";
      operationId: "orgsList";
      variables: OrgsListVariables;
    }
  | {
      path: "/orgs/{org}";
      operationId: "orgsGet";
      variables: OrgsGetVariables;
    }
  | {
      path: "/orgs/{org}/actions/cache/usage";
      operationId: "actionsGetActionsCacheUsageForOrg";
      variables: ActionsGetActionsCacheUsageForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/cache/usage-by-repository";
      operationId: "actionsGetActionsCacheUsageByRepoForOrg";
      variables: ActionsGetActionsCacheUsageByRepoForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/oidc/customization/sub";
      operationId: "oidcGetOidcCustomSubTemplateForOrg";
      variables: OidcGetOidcCustomSubTemplateForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsOrganization";
      variables: ActionsGetGithubActionsPermissionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/repositories";
      operationId: "actionsListSelectedRepositoriesEnabledGithubActionsOrganization";
      variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsOrganization";
      variables: ActionsGetAllowedActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/workflow";
      operationId: "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization";
      variables: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/required_workflows";
      operationId: "actionsListRequiredWorkflows";
      variables: ActionsListRequiredWorkflowsVariables;
    }
  | {
      path: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}";
      operationId: "actionsGetRequiredWorkflow";
      variables: ActionsGetRequiredWorkflowVariables;
    }
  | {
      path: "/orgs/{org}/actions/required_workflows/{requiredWorkflowId}/repositories";
      operationId: "actionsListSelectedRepositoriesRequiredWorkflow";
      variables: ActionsListSelectedRepositoriesRequiredWorkflowVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForOrg";
      variables: ActionsListSelfHostedRunnersForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForOrg";
      variables: ActionsListRunnerApplicationsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/{runnerId}";
      operationId: "actionsGetSelfHostedRunnerForOrg";
      variables: ActionsGetSelfHostedRunnerForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/{runnerId}/labels";
      operationId: "actionsListLabelsForSelfHostedRunnerForOrg";
      variables: ActionsListLabelsForSelfHostedRunnerForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets";
      operationId: "actionsListOrgSecrets";
      variables: ActionsListOrgSecretsVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/public-key";
      operationId: "actionsGetOrgPublicKey";
      variables: ActionsGetOrgPublicKeyVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secretName}";
      operationId: "actionsGetOrgSecret";
      variables: ActionsGetOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secretName}/repositories";
      operationId: "actionsListSelectedReposForOrgSecret";
      variables: ActionsListSelectedReposForOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/actions/variables";
      operationId: "actionsListOrgVariables";
      variables: ActionsListOrgVariablesVariables;
    }
  | {
      path: "/orgs/{org}/actions/variables/{name}";
      operationId: "actionsGetOrgVariable";
      variables: ActionsGetOrgVariableVariables;
    }
  | {
      path: "/orgs/{org}/actions/variables/{name}/repositories";
      operationId: "actionsListSelectedReposForOrgVariable";
      variables: ActionsListSelectedReposForOrgVariableVariables;
    }
  | {
      path: "/orgs/{org}/blocks";
      operationId: "orgsListBlockedUsers";
      variables: OrgsListBlockedUsersVariables;
    }
  | {
      path: "/orgs/{org}/blocks/{username}";
      operationId: "orgsCheckBlockedUser";
      variables: OrgsCheckBlockedUserVariables;
    }
  | {
      path: "/orgs/{org}/code-scanning/alerts";
      operationId: "codeScanningListAlertsForOrg";
      variables: CodeScanningListAlertsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/codespaces";
      operationId: "codespacesListInOrganization";
      variables: CodespacesListInOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/codespaces/secrets";
      operationId: "codespacesListOrgSecrets";
      variables: CodespacesListOrgSecretsVariables;
    }
  | {
      path: "/orgs/{org}/codespaces/secrets/public-key";
      operationId: "codespacesGetOrgPublicKey";
      variables: CodespacesGetOrgPublicKeyVariables;
    }
  | {
      path: "/orgs/{org}/codespaces/secrets/{secretName}";
      operationId: "codespacesGetOrgSecret";
      variables: CodespacesGetOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/codespaces/secrets/{secretName}/repositories";
      operationId: "codespacesListSelectedReposForOrgSecret";
      variables: CodespacesListSelectedReposForOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/dependabot/alerts";
      operationId: "dependabotListAlertsForOrg";
      variables: DependabotListAlertsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/dependabot/secrets";
      operationId: "dependabotListOrgSecrets";
      variables: DependabotListOrgSecretsVariables;
    }
  | {
      path: "/orgs/{org}/dependabot/secrets/public-key";
      operationId: "dependabotGetOrgPublicKey";
      variables: DependabotGetOrgPublicKeyVariables;
    }
  | {
      path: "/orgs/{org}/dependabot/secrets/{secretName}";
      operationId: "dependabotGetOrgSecret";
      variables: DependabotGetOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/dependabot/secrets/{secretName}/repositories";
      operationId: "dependabotListSelectedReposForOrgSecret";
      variables: DependabotListSelectedReposForOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/events";
      operationId: "activityListPublicOrgEvents";
      variables: ActivityListPublicOrgEventsVariables;
    }
  | {
      path: "/orgs/{org}/failed_invitations";
      operationId: "orgsListFailedInvitations";
      variables: OrgsListFailedInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/hooks";
      operationId: "orgsListWebhooks";
      variables: OrgsListWebhooksVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hookId}";
      operationId: "orgsGetWebhook";
      variables: OrgsGetWebhookVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hookId}/config";
      operationId: "orgsGetWebhookConfigForOrg";
      variables: OrgsGetWebhookConfigForOrgVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hookId}/deliveries";
      operationId: "orgsListWebhookDeliveries";
      variables: OrgsListWebhookDeliveriesVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}";
      operationId: "orgsGetWebhookDelivery";
      variables: OrgsGetWebhookDeliveryVariables;
    }
  | {
      path: "/orgs/{org}/installation";
      operationId: "appsGetOrgInstallation";
      variables: AppsGetOrgInstallationVariables;
    }
  | {
      path: "/orgs/{org}/installations";
      operationId: "orgsListAppInstallations";
      variables: OrgsListAppInstallationsVariables;
    }
  | {
      path: "/orgs/{org}/interaction-limits";
      operationId: "interactionsGetRestrictionsForOrg";
      variables: InteractionsGetRestrictionsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/invitations";
      operationId: "orgsListPendingInvitations";
      variables: OrgsListPendingInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/invitations/{invitationId}/teams";
      operationId: "orgsListInvitationTeams";
      variables: OrgsListInvitationTeamsVariables;
    }
  | {
      path: "/orgs/{org}/issues";
      operationId: "issuesListForOrg";
      variables: IssuesListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/members";
      operationId: "orgsListMembers";
      variables: OrgsListMembersVariables;
    }
  | {
      path: "/orgs/{org}/members/{username}";
      operationId: "orgsCheckMembershipForUser";
      variables: OrgsCheckMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/members/{username}/codespaces";
      operationId: "codespacesGetCodespacesForUserInOrg";
      variables: CodespacesGetCodespacesForUserInOrgVariables;
    }
  | {
      path: "/orgs/{org}/memberships/{username}";
      operationId: "orgsGetMembershipForUser";
      variables: OrgsGetMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/migrations";
      operationId: "migrationsListForOrg";
      variables: MigrationsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migrationId}";
      operationId: "migrationsGetStatusForOrg";
      variables: MigrationsGetStatusForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migrationId}/archive";
      operationId: "migrationsDownloadArchiveForOrg";
      variables: MigrationsDownloadArchiveForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migrationId}/repositories";
      operationId: "migrationsListReposForOrg";
      variables: MigrationsListReposForOrgVariables;
    }
  | {
      path: "/orgs/{org}/outside_collaborators";
      operationId: "orgsListOutsideCollaborators";
      variables: OrgsListOutsideCollaboratorsVariables;
    }
  | {
      path: "/orgs/{org}/packages";
      operationId: "packagesListPackagesForOrganization";
      variables: PackagesListPackagesForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/packages/{packageType}/{packageName}";
      operationId: "packagesGetPackageForOrganization";
      variables: PackagesGetPackageForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/packages/{packageType}/{packageName}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables;
    }
  | {
      path: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}";
      operationId: "packagesGetPackageVersionForOrganization";
      variables: PackagesGetPackageVersionForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/projects";
      operationId: "projectsListForOrg";
      variables: ProjectsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/public_members";
      operationId: "orgsListPublicMembers";
      variables: OrgsListPublicMembersVariables;
    }
  | {
      path: "/orgs/{org}/public_members/{username}";
      operationId: "orgsCheckPublicMembershipForUser";
      variables: OrgsCheckPublicMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/repos";
      operationId: "reposListForOrg";
      variables: ReposListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/secret-scanning/alerts";
      operationId: "secretScanningListAlertsForOrg";
      variables: SecretScanningListAlertsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/security-managers";
      operationId: "orgsListSecurityManagerTeams";
      variables: OrgsListSecurityManagerTeamsVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingOrg";
      variables: BillingGetGithubActionsBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingOrg";
      variables: BillingGetGithubPackagesBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingOrg";
      variables: BillingGetSharedStorageBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams";
      operationId: "teamsList";
      variables: TeamsListVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}";
      operationId: "teamsGetByName";
      variables: TeamsGetByNameVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions";
      operationId: "teamsListDiscussionsInOrg";
      variables: TeamsListDiscussionsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}";
      operationId: "teamsGetDiscussionInOrg";
      variables: TeamsGetDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments";
      operationId: "teamsListDiscussionCommentsInOrg";
      variables: TeamsListDiscussionCommentsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}";
      operationId: "teamsGetDiscussionCommentInOrg";
      variables: TeamsGetDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentInOrg";
      variables: ReactionsListForTeamDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions";
      operationId: "reactionsListForTeamDiscussionInOrg";
      variables: ReactionsListForTeamDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/invitations";
      operationId: "teamsListPendingInvitationsInOrg";
      variables: TeamsListPendingInvitationsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/members";
      operationId: "teamsListMembersInOrg";
      variables: TeamsListMembersInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/memberships/{username}";
      operationId: "teamsGetMembershipForUserInOrg";
      variables: TeamsGetMembershipForUserInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/projects";
      operationId: "teamsListProjectsInOrg";
      variables: TeamsListProjectsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}";
      operationId: "teamsCheckPermissionsForProjectInOrg";
      variables: TeamsCheckPermissionsForProjectInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/repos";
      operationId: "teamsListReposInOrg";
      variables: TeamsListReposInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoInOrg";
      variables: TeamsCheckPermissionsForRepoInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{teamSlug}/teams";
      operationId: "teamsListChildInOrg";
      variables: TeamsListChildInOrgVariables;
    }
  | {
      path: "/projects/columns/cards/{cardId}";
      operationId: "projectsGetCard";
      variables: ProjectsGetCardVariables;
    }
  | {
      path: "/projects/columns/{columnId}";
      operationId: "projectsGetColumn";
      variables: ProjectsGetColumnVariables;
    }
  | {
      path: "/projects/columns/{columnId}/cards";
      operationId: "projectsListCards";
      variables: ProjectsListCardsVariables;
    }
  | {
      path: "/projects/{projectId}";
      operationId: "projectsGet";
      variables: ProjectsGetVariables;
    }
  | {
      path: "/projects/{projectId}/collaborators";
      operationId: "projectsListCollaborators";
      variables: ProjectsListCollaboratorsVariables;
    }
  | {
      path: "/projects/{projectId}/collaborators/{username}/permission";
      operationId: "projectsGetPermissionForUser";
      variables: ProjectsGetPermissionForUserVariables;
    }
  | {
      path: "/projects/{projectId}/columns";
      operationId: "projectsListColumns";
      variables: ProjectsListColumnsVariables;
    }
  | {
      path: "/rate_limit";
      operationId: "rateLimitGet";
      variables: RateLimitGetVariables;
    }
  | {
      path: "/repos/{org}/{repo}/actions/required_workflows";
      operationId: "actionsListRepoRequiredWorkflows";
      variables: ActionsListRepoRequiredWorkflowsVariables;
    }
  | {
      path: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}";
      operationId: "actionsGetRepoRequiredWorkflow";
      variables: ActionsGetRepoRequiredWorkflowVariables;
    }
  | {
      path: "/repos/{org}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/timing";
      operationId: "actionsGetRepoRequiredWorkflowUsage";
      variables: ActionsGetRepoRequiredWorkflowUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}";
      operationId: "reposGet";
      variables: ReposGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts";
      operationId: "actionsListArtifactsForRepo";
      variables: ActionsListArtifactsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}";
      operationId: "actionsGetArtifact";
      variables: ActionsGetArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}";
      operationId: "actionsDownloadArtifact";
      variables: ActionsDownloadArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/cache/usage";
      operationId: "actionsGetActionsCacheUsage";
      variables: ActionsGetActionsCacheUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/caches";
      operationId: "actionsGetActionsCacheList";
      variables: ActionsGetActionsCacheListVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{jobId}";
      operationId: "actionsGetJobForWorkflowRun";
      variables: ActionsGetJobForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{jobId}/logs";
      operationId: "actionsDownloadJobLogsForWorkflowRun";
      variables: ActionsDownloadJobLogsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/oidc/customization/sub";
      operationId: "actionsGetCustomOidcSubClaimForRepo";
      variables: ActionsGetCustomOidcSubClaimForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsRepository";
      variables: ActionsGetGithubActionsPermissionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions/access";
      operationId: "actionsGetWorkflowAccessToRepository";
      variables: ActionsGetWorkflowAccessToRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsRepository";
      variables: ActionsGetAllowedActionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions/workflow";
      operationId: "actionsGetGithubActionsDefaultWorkflowPermissionsRepository";
      variables: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/required_workflows/{requiredWorkflowIdForRepo}/runs";
      operationId: "actionsListRequiredWorkflowRuns";
      variables: ActionsListRequiredWorkflowRunsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForRepo";
      variables: ActionsListSelfHostedRunnersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForRepo";
      variables: ActionsListRunnerApplicationsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/{runnerId}";
      operationId: "actionsGetSelfHostedRunnerForRepo";
      variables: ActionsGetSelfHostedRunnerForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/{runnerId}/labels";
      operationId: "actionsListLabelsForSelfHostedRunnerForRepo";
      variables: ActionsListLabelsForSelfHostedRunnerForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs";
      operationId: "actionsListWorkflowRunsForRepo";
      variables: ActionsListWorkflowRunsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}";
      operationId: "actionsGetWorkflowRun";
      variables: ActionsGetWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/approvals";
      operationId: "actionsGetReviewsForRun";
      variables: ActionsGetReviewsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/artifacts";
      operationId: "actionsListWorkflowRunArtifacts";
      variables: ActionsListWorkflowRunArtifactsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}";
      operationId: "actionsGetWorkflowRunAttempt";
      variables: ActionsGetWorkflowRunAttemptVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/jobs";
      operationId: "actionsListJobsForWorkflowRunAttempt";
      variables: ActionsListJobsForWorkflowRunAttemptVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/logs";
      operationId: "actionsDownloadWorkflowRunAttemptLogs";
      variables: ActionsDownloadWorkflowRunAttemptLogsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/jobs";
      operationId: "actionsListJobsForWorkflowRun";
      variables: ActionsListJobsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/logs";
      operationId: "actionsDownloadWorkflowRunLogs";
      variables: ActionsDownloadWorkflowRunLogsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments";
      operationId: "actionsGetPendingDeploymentsForRun";
      variables: ActionsGetPendingDeploymentsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{runId}/timing";
      operationId: "actionsGetWorkflowRunUsage";
      variables: ActionsGetWorkflowRunUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets";
      operationId: "actionsListRepoSecrets";
      variables: ActionsListRepoSecretsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/public-key";
      operationId: "actionsGetRepoPublicKey";
      variables: ActionsGetRepoPublicKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/{secretName}";
      operationId: "actionsGetRepoSecret";
      variables: ActionsGetRepoSecretVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/variables";
      operationId: "actionsListRepoVariables";
      variables: ActionsListRepoVariablesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/variables/{name}";
      operationId: "actionsGetRepoVariable";
      variables: ActionsGetRepoVariableVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows";
      operationId: "actionsListRepoWorkflows";
      variables: ActionsListRepoWorkflowsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}";
      operationId: "actionsGetWorkflow";
      variables: ActionsGetWorkflowVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs";
      operationId: "actionsListWorkflowRuns";
      variables: ActionsListWorkflowRunsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing";
      operationId: "actionsGetWorkflowUsage";
      variables: ActionsGetWorkflowUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees";
      operationId: "issuesListAssignees";
      variables: IssuesListAssigneesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees/{assignee}";
      operationId: "issuesCheckUserCanBeAssigned";
      variables: IssuesCheckUserCanBeAssignedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/autolinks";
      operationId: "reposListAutolinks";
      variables: ReposListAutolinksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/autolinks/{autolinkId}";
      operationId: "reposGetAutolink";
      variables: ReposGetAutolinkVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches";
      operationId: "reposListBranches";
      variables: ReposListBranchesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}";
      operationId: "reposGetBranch";
      variables: ReposGetBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection";
      operationId: "reposGetBranchProtection";
      variables: ReposGetBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      operationId: "reposGetAdminBranchProtection";
      variables: ReposGetAdminBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      operationId: "reposGetPullRequestReviewProtection";
      variables: ReposGetPullRequestReviewProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      operationId: "reposGetCommitSignatureProtection";
      variables: ReposGetCommitSignatureProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      operationId: "reposGetStatusChecksProtection";
      variables: ReposGetStatusChecksProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      operationId: "reposGetAllStatusCheckContexts";
      variables: ReposGetAllStatusCheckContextsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
      operationId: "reposGetAccessRestrictions";
      variables: ReposGetAccessRestrictionsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      operationId: "reposGetAppsWithAccessToProtectedBranch";
      variables: ReposGetAppsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      operationId: "reposGetTeamsWithAccessToProtectedBranch";
      variables: ReposGetTeamsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      operationId: "reposGetUsersWithAccessToProtectedBranch";
      variables: ReposGetUsersWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{checkRunId}";
      operationId: "checksGet";
      variables: ChecksGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations";
      operationId: "checksListAnnotations";
      variables: ChecksListAnnotationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}";
      operationId: "checksGetSuite";
      variables: ChecksGetSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs";
      operationId: "checksListForSuite";
      variables: ChecksListForSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts";
      operationId: "codeScanningListAlertsForRepo";
      variables: CodeScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}";
      operationId: "codeScanningGetAlert";
      variables: CodeScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances";
      operationId: "codeScanningListAlertInstances";
      variables: CodeScanningListAlertInstancesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses";
      operationId: "codeScanningListRecentAnalyses";
      variables: CodeScanningListRecentAnalysesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}";
      operationId: "codeScanningGetAnalysis";
      variables: CodeScanningGetAnalysisVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/codeql/databases";
      operationId: "codeScanningListCodeqlDatabases";
      variables: CodeScanningListCodeqlDatabasesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}";
      operationId: "codeScanningGetCodeqlDatabase";
      variables: CodeScanningGetCodeqlDatabaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}";
      operationId: "codeScanningGetSarif";
      variables: CodeScanningGetSarifVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codeowners/errors";
      operationId: "reposCodeownersErrors";
      variables: ReposCodeownersErrorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces";
      operationId: "codespacesListInRepositoryForAuthenticatedUser";
      variables: CodespacesListInRepositoryForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/devcontainers";
      operationId: "codespacesListDevcontainersInRepositoryForAuthenticatedUser";
      variables: CodespacesListDevcontainersInRepositoryForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/machines";
      operationId: "codespacesRepoMachinesForAuthenticatedUser";
      variables: CodespacesRepoMachinesForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/new";
      operationId: "codespacesPreFlightWithRepoForAuthenticatedUser";
      variables: CodespacesPreFlightWithRepoForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/secrets";
      operationId: "codespacesListRepoSecrets";
      variables: CodespacesListRepoSecretsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/secrets/public-key";
      operationId: "codespacesGetRepoPublicKey";
      variables: CodespacesGetRepoPublicKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/codespaces/secrets/{secretName}";
      operationId: "codespacesGetRepoSecret";
      variables: CodespacesGetRepoSecretVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators";
      operationId: "reposListCollaborators";
      variables: ReposListCollaboratorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}";
      operationId: "reposCheckCollaborator";
      variables: ReposCheckCollaboratorVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}/permission";
      operationId: "reposGetCollaboratorPermissionLevel";
      variables: ReposGetCollaboratorPermissionLevelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments";
      operationId: "reposListCommitCommentsForRepo";
      variables: ReposListCommitCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{commentId}";
      operationId: "reposGetCommitComment";
      variables: ReposGetCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{commentId}/reactions";
      operationId: "reactionsListForCommitComment";
      variables: ReactionsListForCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits";
      operationId: "reposListCommits";
      variables: ReposListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head";
      operationId: "reposListBranchesForHeadCommit";
      variables: ReposListBranchesForHeadCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commitSha}/comments";
      operationId: "reposListCommentsForCommit";
      variables: ReposListCommentsForCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commitSha}/pulls";
      operationId: "reposListPullRequestsAssociatedWithCommit";
      variables: ReposListPullRequestsAssociatedWithCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}";
      operationId: "reposGetCommit";
      variables: ReposGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-runs";
      operationId: "checksListForRef";
      variables: ChecksListForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-suites";
      operationId: "checksListSuitesForRef";
      variables: ChecksListSuitesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/status";
      operationId: "reposGetCombinedStatusForRef";
      variables: ReposGetCombinedStatusForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/statuses";
      operationId: "reposListCommitStatusesForRef";
      variables: ReposListCommitStatusesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/community/profile";
      operationId: "reposGetCommunityProfileMetrics";
      variables: ReposGetCommunityProfileMetricsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/compare/{basehead}";
      operationId: "reposCompareCommits";
      variables: ReposCompareCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contents/{path}";
      operationId: "reposGetContent";
      variables: ReposGetContentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contributors";
      operationId: "reposListContributors";
      variables: ReposListContributorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependabot/alerts";
      operationId: "dependabotListAlertsForRepo";
      variables: DependabotListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}";
      operationId: "dependabotGetAlert";
      variables: DependabotGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependabot/secrets";
      operationId: "dependabotListRepoSecrets";
      variables: DependabotListRepoSecretsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependabot/secrets/public-key";
      operationId: "dependabotGetRepoPublicKey";
      variables: DependabotGetRepoPublicKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependabot/secrets/{secretName}";
      operationId: "dependabotGetRepoSecret";
      variables: DependabotGetRepoSecretVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}";
      operationId: "dependencyGraphDiffRange";
      variables: DependencyGraphDiffRangeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments";
      operationId: "reposListDeployments";
      variables: ReposListDeploymentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deploymentId}";
      operationId: "reposGetDeployment";
      variables: ReposGetDeploymentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses";
      operationId: "reposListDeploymentStatuses";
      variables: ReposListDeploymentStatusesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}";
      operationId: "reposGetDeploymentStatus";
      variables: ReposGetDeploymentStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments";
      operationId: "reposGetAllEnvironments";
      variables: ReposGetAllEnvironmentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments/{environmentName}";
      operationId: "reposGetEnvironment";
      variables: ReposGetEnvironmentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies";
      operationId: "reposListDeploymentBranchPolicies";
      variables: ReposListDeploymentBranchPoliciesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}";
      operationId: "reposGetDeploymentBranchPolicy";
      variables: ReposGetDeploymentBranchPolicyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/events";
      operationId: "activityListRepoEvents";
      variables: ActivityListRepoEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/forks";
      operationId: "reposListForks";
      variables: ReposListForksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/blobs/{fileSha}";
      operationId: "gitGetBlob";
      variables: GitGetBlobVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/commits/{commitSha}";
      operationId: "gitGetCommit";
      variables: GitGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/matching-refs/{ref}";
      operationId: "gitListMatchingRefs";
      variables: GitListMatchingRefsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/ref/{ref}";
      operationId: "gitGetRef";
      variables: GitGetRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/tags/{tagSha}";
      operationId: "gitGetTag";
      variables: GitGetTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/trees/{treeSha}";
      operationId: "gitGetTree";
      variables: GitGetTreeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks";
      operationId: "reposListWebhooks";
      variables: ReposListWebhooksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hookId}";
      operationId: "reposGetWebhook";
      variables: ReposGetWebhookVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hookId}/config";
      operationId: "reposGetWebhookConfigForRepo";
      variables: ReposGetWebhookConfigForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries";
      operationId: "reposListWebhookDeliveries";
      variables: ReposListWebhookDeliveriesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}";
      operationId: "reposGetWebhookDelivery";
      variables: ReposGetWebhookDeliveryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import";
      operationId: "migrationsGetImportStatus";
      variables: MigrationsGetImportStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/authors";
      operationId: "migrationsGetCommitAuthors";
      variables: MigrationsGetCommitAuthorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/large_files";
      operationId: "migrationsGetLargeFiles";
      variables: MigrationsGetLargeFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/installation";
      operationId: "appsGetRepoInstallation";
      variables: AppsGetRepoInstallationVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/interaction-limits";
      operationId: "interactionsGetRestrictionsForRepo";
      variables: InteractionsGetRestrictionsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/invitations";
      operationId: "reposListInvitations";
      variables: ReposListInvitationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues";
      operationId: "issuesListForRepo";
      variables: IssuesListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments";
      operationId: "issuesListCommentsForRepo";
      variables: IssuesListCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{commentId}";
      operationId: "issuesGetComment";
      variables: IssuesGetCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions";
      operationId: "reactionsListForIssueComment";
      variables: ReactionsListForIssueCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events";
      operationId: "issuesListEventsForRepo";
      variables: IssuesListEventsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events/{eventId}";
      operationId: "issuesGetEvent";
      variables: IssuesGetEventVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}";
      operationId: "issuesGet";
      variables: IssuesGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees/{assignee}";
      operationId: "issuesCheckUserCanBeAssignedToIssue";
      variables: IssuesCheckUserCanBeAssignedToIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/comments";
      operationId: "issuesListComments";
      variables: IssuesListCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/events";
      operationId: "issuesListEvents";
      variables: IssuesListEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/labels";
      operationId: "issuesListLabelsOnIssue";
      variables: IssuesListLabelsOnIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions";
      operationId: "reactionsListForIssue";
      variables: ReactionsListForIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issueNumber}/timeline";
      operationId: "issuesListEventsForTimeline";
      variables: IssuesListEventsForTimelineVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys";
      operationId: "reposListDeployKeys";
      variables: ReposListDeployKeysVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys/{keyId}";
      operationId: "reposGetDeployKey";
      variables: ReposGetDeployKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels";
      operationId: "issuesListLabelsForRepo";
      variables: IssuesListLabelsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels/{name}";
      operationId: "issuesGetLabel";
      variables: IssuesGetLabelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/languages";
      operationId: "reposListLanguages";
      variables: ReposListLanguagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/license";
      operationId: "licensesGetForRepo";
      variables: LicensesGetForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones";
      operationId: "issuesListMilestones";
      variables: IssuesListMilestonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestoneNumber}";
      operationId: "issuesGetMilestone";
      variables: IssuesGetMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels";
      operationId: "issuesListLabelsForMilestone";
      variables: IssuesListLabelsForMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/notifications";
      operationId: "activityListRepoNotificationsForAuthenticatedUser";
      variables: ActivityListRepoNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages";
      operationId: "reposGetPages";
      variables: ReposGetPagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds";
      operationId: "reposListPagesBuilds";
      variables: ReposListPagesBuildsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/latest";
      operationId: "reposGetLatestPagesBuild";
      variables: ReposGetLatestPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/{buildId}";
      operationId: "reposGetPagesBuild";
      variables: ReposGetPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/health";
      operationId: "reposGetPagesHealthCheck";
      variables: ReposGetPagesHealthCheckVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/projects";
      operationId: "projectsListForRepo";
      variables: ProjectsListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls";
      operationId: "pullsList";
      variables: PullsListVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments";
      operationId: "pullsListReviewCommentsForRepo";
      variables: PullsListReviewCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{commentId}";
      operationId: "pullsGetReviewComment";
      variables: PullsGetReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions";
      operationId: "reactionsListForPullRequestReviewComment";
      variables: ReactionsListForPullRequestReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}";
      operationId: "pullsGet";
      variables: PullsGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments";
      operationId: "pullsListReviewComments";
      variables: PullsListReviewCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/commits";
      operationId: "pullsListCommits";
      variables: PullsListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/files";
      operationId: "pullsListFiles";
      variables: PullsListFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge";
      operationId: "pullsCheckIfMerged";
      variables: PullsCheckIfMergedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers";
      operationId: "pullsListRequestedReviewers";
      variables: PullsListRequestedReviewersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews";
      operationId: "pullsListReviews";
      variables: PullsListReviewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}";
      operationId: "pullsGetReview";
      variables: PullsGetReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments";
      operationId: "pullsListCommentsForReview";
      variables: PullsListCommentsForReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme";
      operationId: "reposGetReadme";
      variables: ReposGetReadmeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme/{dir}";
      operationId: "reposGetReadmeInDirectory";
      variables: ReposGetReadmeInDirectoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases";
      operationId: "reposListReleases";
      variables: ReposListReleasesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/assets/{assetId}";
      operationId: "reposGetReleaseAsset";
      variables: ReposGetReleaseAssetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/latest";
      operationId: "reposGetLatestRelease";
      variables: ReposGetLatestReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/tags/{tag}";
      operationId: "reposGetReleaseByTag";
      variables: ReposGetReleaseByTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{releaseId}";
      operationId: "reposGetRelease";
      variables: ReposGetReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{releaseId}/assets";
      operationId: "reposListReleaseAssets";
      variables: ReposListReleaseAssetsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{releaseId}/reactions";
      operationId: "reactionsListForRelease";
      variables: ReactionsListForReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts";
      operationId: "secretScanningListAlertsForRepo";
      variables: SecretScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}";
      operationId: "secretScanningGetAlert";
      variables: SecretScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}/locations";
      operationId: "secretScanningListLocationsForAlert";
      variables: SecretScanningListLocationsForAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stargazers";
      operationId: "activityListStargazersForRepo";
      variables: ActivityListStargazersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/code_frequency";
      operationId: "reposGetCodeFrequencyStats";
      variables: ReposGetCodeFrequencyStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/commit_activity";
      operationId: "reposGetCommitActivityStats";
      variables: ReposGetCommitActivityStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/contributors";
      operationId: "reposGetContributorsStats";
      variables: ReposGetContributorsStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/participation";
      operationId: "reposGetParticipationStats";
      variables: ReposGetParticipationStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/punch_card";
      operationId: "reposGetPunchCardStats";
      variables: ReposGetPunchCardStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscribers";
      operationId: "activityListWatchersForRepo";
      variables: ActivityListWatchersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscription";
      operationId: "activityGetRepoSubscription";
      variables: ActivityGetRepoSubscriptionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tags";
      operationId: "reposListTags";
      variables: ReposListTagsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tags/protection";
      operationId: "reposListTagProtection";
      variables: ReposListTagProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tarball/{ref}";
      operationId: "reposDownloadTarballArchive";
      variables: ReposDownloadTarballArchiveVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/teams";
      operationId: "reposListTeams";
      variables: ReposListTeamsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/topics";
      operationId: "reposGetAllTopics";
      variables: ReposGetAllTopicsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/clones";
      operationId: "reposGetClones";
      variables: ReposGetClonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/paths";
      operationId: "reposGetTopPaths";
      variables: ReposGetTopPathsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/referrers";
      operationId: "reposGetTopReferrers";
      variables: ReposGetTopReferrersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/views";
      operationId: "reposGetViews";
      variables: ReposGetViewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/vulnerability-alerts";
      operationId: "reposCheckVulnerabilityAlerts";
      variables: ReposCheckVulnerabilityAlertsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/zipball/{ref}";
      operationId: "reposDownloadZipballArchive";
      variables: ReposDownloadZipballArchiveVariables;
    }
  | {
      path: "/repositories";
      operationId: "reposListPublic";
      variables: ReposListPublicVariables;
    }
  | {
      path: "/repositories/{repositoryId}/environments/{environmentName}/secrets";
      operationId: "actionsListEnvironmentSecrets";
      variables: ActionsListEnvironmentSecretsVariables;
    }
  | {
      path: "/repositories/{repositoryId}/environments/{environmentName}/secrets/public-key";
      operationId: "actionsGetEnvironmentPublicKey";
      variables: ActionsGetEnvironmentPublicKeyVariables;
    }
  | {
      path: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}";
      operationId: "actionsGetEnvironmentSecret";
      variables: ActionsGetEnvironmentSecretVariables;
    }
  | {
      path: "/repositories/{repositoryId}/environments/{environmentName}/variables";
      operationId: "actionsListEnvironmentVariables";
      variables: ActionsListEnvironmentVariablesVariables;
    }
  | {
      path: "/repositories/{repositoryId}/environments/{environmentName}/variables/{name}";
      operationId: "actionsGetEnvironmentVariable";
      variables: ActionsGetEnvironmentVariableVariables;
    }
  | {
      path: "/search/code";
      operationId: "searchCode";
      variables: SearchCodeVariables;
    }
  | {
      path: "/search/commits";
      operationId: "searchCommits";
      variables: SearchCommitsVariables;
    }
  | {
      path: "/search/issues";
      operationId: "searchIssuesAndPullRequests";
      variables: SearchIssuesAndPullRequestsVariables;
    }
  | {
      path: "/search/labels";
      operationId: "searchLabels";
      variables: SearchLabelsVariables;
    }
  | {
      path: "/search/repositories";
      operationId: "searchRepos";
      variables: SearchReposVariables;
    }
  | {
      path: "/search/topics";
      operationId: "searchTopics";
      variables: SearchTopicsVariables;
    }
  | {
      path: "/search/users";
      operationId: "searchUsers";
      variables: SearchUsersVariables;
    }
  | {
      path: "/teams/{teamId}";
      operationId: "teamsGetLegacy";
      variables: TeamsGetLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions";
      operationId: "teamsListDiscussionsLegacy";
      variables: TeamsListDiscussionsLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions/{discussionNumber}";
      operationId: "teamsGetDiscussionLegacy";
      variables: TeamsGetDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions/{discussionNumber}/comments";
      operationId: "teamsListDiscussionCommentsLegacy";
      variables: TeamsListDiscussionCommentsLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}";
      operationId: "teamsGetDiscussionCommentLegacy";
      variables: TeamsGetDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentLegacy";
      variables: ReactionsListForTeamDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/discussions/{discussionNumber}/reactions";
      operationId: "reactionsListForTeamDiscussionLegacy";
      variables: ReactionsListForTeamDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/invitations";
      operationId: "teamsListPendingInvitationsLegacy";
      variables: TeamsListPendingInvitationsLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/members";
      operationId: "teamsListMembersLegacy";
      variables: TeamsListMembersLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/members/{username}";
      operationId: "teamsGetMemberLegacy";
      variables: TeamsGetMemberLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/memberships/{username}";
      operationId: "teamsGetMembershipForUserLegacy";
      variables: TeamsGetMembershipForUserLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/projects";
      operationId: "teamsListProjectsLegacy";
      variables: TeamsListProjectsLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/projects/{projectId}";
      operationId: "teamsCheckPermissionsForProjectLegacy";
      variables: TeamsCheckPermissionsForProjectLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/repos";
      operationId: "teamsListReposLegacy";
      variables: TeamsListReposLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoLegacy";
      variables: TeamsCheckPermissionsForRepoLegacyVariables;
    }
  | {
      path: "/teams/{teamId}/teams";
      operationId: "teamsListChildLegacy";
      variables: TeamsListChildLegacyVariables;
    }
  | {
      path: "/user";
      operationId: "usersGetAuthenticated";
      variables: UsersGetAuthenticatedVariables;
    }
  | {
      path: "/user/blocks";
      operationId: "usersListBlockedByAuthenticatedUser";
      variables: UsersListBlockedByAuthenticatedUserVariables;
    }
  | {
      path: "/user/blocks/{username}";
      operationId: "usersCheckBlocked";
      variables: UsersCheckBlockedVariables;
    }
  | {
      path: "/user/codespaces";
      operationId: "codespacesListForAuthenticatedUser";
      variables: CodespacesListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/secrets";
      operationId: "codespacesListSecretsForAuthenticatedUser";
      variables: CodespacesListSecretsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/secrets/public-key";
      operationId: "codespacesGetPublicKeyForAuthenticatedUser";
      variables: CodespacesGetPublicKeyForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/secrets/{secretName}";
      operationId: "codespacesGetSecretForAuthenticatedUser";
      variables: CodespacesGetSecretForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/secrets/{secretName}/repositories";
      operationId: "codespacesListRepositoriesForSecretForAuthenticatedUser";
      variables: CodespacesListRepositoriesForSecretForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/{codespaceName}";
      operationId: "codespacesGetForAuthenticatedUser";
      variables: CodespacesGetForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/{codespaceName}/exports/{exportId}";
      operationId: "codespacesGetExportDetailsForAuthenticatedUser";
      variables: CodespacesGetExportDetailsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/codespaces/{codespaceName}/machines";
      operationId: "codespacesCodespaceMachinesForAuthenticatedUser";
      variables: CodespacesCodespaceMachinesForAuthenticatedUserVariables;
    }
  | {
      path: "/user/emails";
      operationId: "usersListEmailsForAuthenticatedUser";
      variables: UsersListEmailsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/followers";
      operationId: "usersListFollowersForAuthenticatedUser";
      variables: UsersListFollowersForAuthenticatedUserVariables;
    }
  | {
      path: "/user/following";
      operationId: "usersListFollowedByAuthenticatedUser";
      variables: UsersListFollowedByAuthenticatedUserVariables;
    }
  | {
      path: "/user/following/{username}";
      operationId: "usersCheckPersonIsFollowedByAuthenticated";
      variables: UsersCheckPersonIsFollowedByAuthenticatedVariables;
    }
  | {
      path: "/user/gpg_keys";
      operationId: "usersListGpgKeysForAuthenticatedUser";
      variables: UsersListGpgKeysForAuthenticatedUserVariables;
    }
  | {
      path: "/user/gpg_keys/{gpgKeyId}";
      operationId: "usersGetGpgKeyForAuthenticatedUser";
      variables: UsersGetGpgKeyForAuthenticatedUserVariables;
    }
  | {
      path: "/user/installations";
      operationId: "appsListInstallationsForAuthenticatedUser";
      variables: AppsListInstallationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/installations/{installationId}/repositories";
      operationId: "appsListInstallationReposForAuthenticatedUser";
      variables: AppsListInstallationReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/interaction-limits";
      operationId: "interactionsGetRestrictionsForAuthenticatedUser";
      variables: InteractionsGetRestrictionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/issues";
      operationId: "issuesListForAuthenticatedUser";
      variables: IssuesListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/keys";
      operationId: "usersListPublicSshKeysForAuthenticatedUser";
      variables: UsersListPublicSshKeysForAuthenticatedUserVariables;
    }
  | {
      path: "/user/keys/{keyId}";
      operationId: "usersGetPublicSshKeyForAuthenticatedUser";
      variables: UsersGetPublicSshKeyForAuthenticatedUserVariables;
    }
  | {
      path: "/user/marketplace_purchases";
      operationId: "appsListSubscriptionsForAuthenticatedUser";
      variables: AppsListSubscriptionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/marketplace_purchases/stubbed";
      operationId: "appsListSubscriptionsForAuthenticatedUserStubbed";
      variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables;
    }
  | {
      path: "/user/memberships/orgs";
      operationId: "orgsListMembershipsForAuthenticatedUser";
      variables: OrgsListMembershipsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/memberships/orgs/{org}";
      operationId: "orgsGetMembershipForAuthenticatedUser";
      variables: OrgsGetMembershipForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations";
      operationId: "migrationsListForAuthenticatedUser";
      variables: MigrationsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migrationId}";
      operationId: "migrationsGetStatusForAuthenticatedUser";
      variables: MigrationsGetStatusForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migrationId}/archive";
      operationId: "migrationsGetArchiveForAuthenticatedUser";
      variables: MigrationsGetArchiveForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migrationId}/repositories";
      operationId: "migrationsListReposForAuthenticatedUser";
      variables: MigrationsListReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/orgs";
      operationId: "orgsListForAuthenticatedUser";
      variables: OrgsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages";
      operationId: "packagesListPackagesForAuthenticatedUser";
      variables: PackagesListPackagesForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{packageType}/{packageName}";
      operationId: "packagesGetPackageForAuthenticatedUser";
      variables: PackagesGetPackageForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{packageType}/{packageName}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}";
      operationId: "packagesGetPackageVersionForAuthenticatedUser";
      variables: PackagesGetPackageVersionForAuthenticatedUserVariables;
    }
  | {
      path: "/user/public_emails";
      operationId: "usersListPublicEmailsForAuthenticatedUser";
      variables: UsersListPublicEmailsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/repos";
      operationId: "reposListForAuthenticatedUser";
      variables: ReposListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/repository_invitations";
      operationId: "reposListInvitationsForAuthenticatedUser";
      variables: ReposListInvitationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/ssh_signing_keys";
      operationId: "usersListSshSigningKeysForAuthenticatedUser";
      variables: UsersListSshSigningKeysForAuthenticatedUserVariables;
    }
  | {
      path: "/user/ssh_signing_keys/{sshSigningKeyId}";
      operationId: "usersGetSshSigningKeyForAuthenticatedUser";
      variables: UsersGetSshSigningKeyForAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred";
      operationId: "activityListReposStarredByAuthenticatedUser";
      variables: ActivityListReposStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred/{owner}/{repo}";
      operationId: "activityCheckRepoIsStarredByAuthenticatedUser";
      variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/subscriptions";
      operationId: "activityListWatchedReposForAuthenticatedUser";
      variables: ActivityListWatchedReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/teams";
      operationId: "teamsListForAuthenticatedUser";
      variables: TeamsListForAuthenticatedUserVariables;
    }
  | {
      path: "/users";
      operationId: "usersList";
      variables: UsersListVariables;
    }
  | {
      path: "/users/{username}";
      operationId: "usersGetByUsername";
      variables: UsersGetByUsernameVariables;
    }
  | {
      path: "/users/{username}/events";
      operationId: "activityListEventsForAuthenticatedUser";
      variables: ActivityListEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/orgs/{org}";
      operationId: "activityListOrgEventsForAuthenticatedUser";
      variables: ActivityListOrgEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/public";
      operationId: "activityListPublicEventsForUser";
      variables: ActivityListPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/followers";
      operationId: "usersListFollowersForUser";
      variables: UsersListFollowersForUserVariables;
    }
  | {
      path: "/users/{username}/following";
      operationId: "usersListFollowingForUser";
      variables: UsersListFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/following/{targetUser}";
      operationId: "usersCheckFollowingForUser";
      variables: UsersCheckFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/gists";
      operationId: "gistsListForUser";
      variables: GistsListForUserVariables;
    }
  | {
      path: "/users/{username}/gpg_keys";
      operationId: "usersListGpgKeysForUser";
      variables: UsersListGpgKeysForUserVariables;
    }
  | {
      path: "/users/{username}/hovercard";
      operationId: "usersGetContextForUser";
      variables: UsersGetContextForUserVariables;
    }
  | {
      path: "/users/{username}/installation";
      operationId: "appsGetUserInstallation";
      variables: AppsGetUserInstallationVariables;
    }
  | {
      path: "/users/{username}/keys";
      operationId: "usersListPublicKeysForUser";
      variables: UsersListPublicKeysForUserVariables;
    }
  | {
      path: "/users/{username}/orgs";
      operationId: "orgsListForUser";
      variables: OrgsListForUserVariables;
    }
  | {
      path: "/users/{username}/packages";
      operationId: "packagesListPackagesForUser";
      variables: PackagesListPackagesForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{packageType}/{packageName}";
      operationId: "packagesGetPackageForUser";
      variables: PackagesGetPackageForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{packageType}/{packageName}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables;
    }
  | {
      path: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}";
      operationId: "packagesGetPackageVersionForUser";
      variables: PackagesGetPackageVersionForUserVariables;
    }
  | {
      path: "/users/{username}/projects";
      operationId: "projectsListForUser";
      variables: ProjectsListForUserVariables;
    }
  | {
      path: "/users/{username}/received_events";
      operationId: "activityListReceivedEventsForUser";
      variables: ActivityListReceivedEventsForUserVariables;
    }
  | {
      path: "/users/{username}/received_events/public";
      operationId: "activityListReceivedPublicEventsForUser";
      variables: ActivityListReceivedPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/repos";
      operationId: "reposListForUser";
      variables: ReposListForUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingUser";
      variables: BillingGetGithubActionsBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingUser";
      variables: BillingGetGithubPackagesBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingUser";
      variables: BillingGetSharedStorageBillingUserVariables;
    }
  | {
      path: "/users/{username}/ssh_signing_keys";
      operationId: "usersListSshSigningKeysForUser";
      variables: UsersListSshSigningKeysForUserVariables;
    }
  | {
      path: "/users/{username}/starred";
      operationId: "activityListReposStarredByUser";
      variables: ActivityListReposStarredByUserVariables;
    }
  | {
      path: "/users/{username}/subscriptions";
      operationId: "activityListReposWatchedByUser";
      variables: ActivityListReposWatchedByUserVariables;
    }
  | {
      path: "/versions";
      operationId: "metaGetAllVersions";
      variables: MetaGetAllVersionsVariables;
    }
  | {
      path: "/zen";
      operationId: "metaGetZen";
      variables: MetaGetZenVariables;
    };
